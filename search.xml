<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Awesome Talking Face Generation</title>
      <link href="/2023/06/16/xiao-bing/awesome-talking-face-generation/"/>
      <url>/2023/06/16/xiao-bing/awesome-talking-face-generation/</url>
      
        <content type="html"><![CDATA[<h1 id="Awesome-Talking-Face-Generation"><a href="#Awesome-Talking-Face-Generation" class="headerlink" title="Awesome Talking Face Generation "></a>Awesome Talking Face Generation <a href="https://github.com/sindresorhus/awesome"><img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg" alt="Awesome"></a></h1><p>Papers for Talking Head Generation, released codes collections.</p><h1 id="papers-amp-codes"><a href="#papers-amp-codes" class="headerlink" title="papers &amp; codes"></a>papers &amp; codes</h1><h2 id="Survey"><a href="#Survey" class="headerlink" title="Survey"></a>Survey</h2><table><thead><tr><th>title</th><th>accept</th><th>paper</th></tr></thead><tbody><tr><td>Critical review of human face reenactment methods</td><td>JIG 2022</td><td><a href="http://www.cjig.cn/jig/ch/reader/view_abstract.aspx?file_no=20220906">paper</a></td></tr><tr><td>Deep Learning for Visual Speech Analysis: A Survey</td><td>Arxiv2022</td><td><a href="https://arxiv.org/abs/2205.10839">paper</a></td></tr><tr><td>Handbook of Digital Face Manipulation and Detection</td><td>2022</td><td><a href="https://library.oapen.org/bitstream/handle/20.500.12657/52835/978-3-030-87664-7.pdf?sequence=1">paper</a></td></tr><tr><td>Deep Person Generation: A Survey from the Perspective of Face, Pose and Cloth Synthesis</td><td>Arxiv2021</td><td><a href="https://arxiv.org/abs/2109.02081">paper</a></td></tr><tr><td>The Creation and Detection of Deepfakes: A Survey</td><td>Arxiv2020</td><td><a href="https://arxiv.org/abs/2004.11138">paper</a></td></tr><tr><td>DeepFakes and Beyond: A Survey of Face Manipulation and Fake Detection</td><td>Arxiv2020</td><td><a href="https://arxiv.org/abs/2001.00179">paper</a></td></tr><tr><td>What comprises a good talking-head video generation?: A Survey and Benchmark</td><td>Arxiv2020</td><td><a href="https://arxiv.org/abs/2005.03201">paper</a></td></tr><tr><td>Deep Audio-Visual Learning: A Survey</td><td>Arxiv2020</td><td><a href="http://arxiv.org/abs/2001.04758">paper</a></td></tr><tr><td>What comprises a good talking-head video generation?: A survey and benchmark</td><td>Arxiv2020</td><td><a href="https://arxiv.org/pdf/2005.03201.pdf">paper</a></td></tr><tr><td>A Review on Face Reenactment Techniques</td><td>I4Tech 2020</td><td><a href="https://ieeexplore.ieee.org/document/9102668">paper</a></td></tr></tbody></table><h2 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h2><table><thead><tr><th>title</th><th>accept</th><th>paper</th><th>code</th><th>web/proj</th><th>keywords</th></tr></thead><tbody><tr><td>DiffTalk: Crafting Diffusion Models for Generalized Talking Head Synthesis</td><td>Arxiv2023</td><td><a href="https://arxiv.org/pdf/2301.03786.pdf">paper</a></td><td></td><td><a href="https://sstzal.github.io/DiffTalk/">proj</a></td><td>Diffusion</td></tr><tr><td>Diffused Heads: Diffusion Models Beat GANs on Talking-Face Generation</td><td>Arxiv2023</td><td><a href="https://mstypulkowski.github.io/diffusedheads/diffused_heads.pdf">paper</a></td><td></td><td><a href="https://mstypulkowski.github.io/diffusedheads/">proj</a></td><td>Diffusion</td></tr><tr><td>Emotionally Enhanced Talking Face Generation</td><td>Arxiv2023</td><td><a href="https://arxiv.org/pdf/2303.11548.pdf">paper</a></td><td><a href="https://github.com/sahilg06/EmoGen">code</a></td><td><a href="https://midas.iiitd.edu.in/emo/">webpage</a></td><td>emotion</td></tr><tr><td>Avatar Fingerprinting for Authorized Use of Synthetic Talking-Head Videos</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2305.03713">Paper</a></td><td></td><td><a href="https://research.nvidia.com/labs/nxp/avatar-fingerprinting/">ProjectPage</a></td><td></td></tr><tr><td>Multimodal-driven Talking Face Generation, Face Swapping, Diffusion Model</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2305.02594">Paper</a></td><td></td><td></td><td></td></tr><tr><td>StyleLipSync: Style-based Personalized Lip-sync Video Generation</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2305.00521">Paper</a></td><td><a href="https://github.com/TaekyungKi/StyleLipSync">Code</a></td><td><a href="https://stylelipsync.github.io/">ProjectPage</a></td><td></td></tr><tr><td>GeneFace++: Generalized and Stable Real-Time Audio-Driven 3D Talking Face Generation</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2305.00787">Paper</a></td><td></td><td><a href="https://genefaceplusplus.github.io/">ProjectPage</a></td><td></td></tr><tr><td>Audio-Driven Talking Face Generation with Diverse yet Realistic Facial Animations</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2304.08945">Paper</a></td><td></td><td></td><td></td></tr><tr><td>That’s What I Said: Fully-Controllable Talking Face Generation</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2304.03275">Paper</a></td><td></td><td><a href="https://mm.kaist.ac.kr/projects/FC-TFG/">ProjectPage</a></td><td></td></tr><tr><td>TalkCLIP: Talking Head Generation with Text-Guided Expressive Speaking Styles</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2304.00334v1">Paper</a></td><td></td><td></td><td></td></tr><tr><td>DAE-Talker: High Fidelity Speech-Driven Talking Face Generation with Diffusion Autoencoder</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2303.17550">Paper</a></td><td></td><td><a href="https://daetalker.github.io/">ProjectPage</a></td><td></td></tr><tr><td>Style Transfer for 2D Talking Head Animation</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2303.09799">Paper</a></td><td></td><td></td><td></td></tr><tr><td>READ Avatars: Realistic Emotion-controllable Audio Driven Avatars</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2303.00744">Paper</a></td><td></td><td></td><td></td></tr><tr><td>On the Audio-visual Synchronization for Lip-to-Speech Synthesis</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2303.00502">Paper</a></td><td></td><td></td><td></td></tr><tr><td>EmoTalk: Speech-driven emotional disentanglement for 3D face animation</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2303.11089">Paper</a></td><td></td><td><a href="https://ziqiaopeng.github.io/emotalk/">ProjectPage</a></td><td>3D</td></tr><tr><td>FaceXHuBERT: Text-less Speech-driven E(X)pressive 3D Facial Animation Synthesis Using Self-Supervised Speech Representation Learning</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2303.05416">Paper</a></td><td><a href="https://github.com/galib360/FaceXHuBERT">Code</a></td><td><a href="https://galib360.github.io/FaceXHuBERT/">ProjectPage</a></td><td>3D</td></tr><tr><td>Pose-Controllable 3D Facial Animation Synthesis using Hierarchical Audio-Vertices Attention</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2302.12532">Paper</a></td><td></td><td></td><td>3D</td></tr><tr><td>Learning Audio-Driven Viseme Dynamics for 3D Face Animation</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2301.06059">Paper</a> <a href="https://linchaobao.github.io/viseme2023/">ProjectPage</a></td><td></td><td></td><td>3D</td></tr><tr><td>CodeTalker: Speech-Driven 3D Facial Animation with Discrete Motion Prior</td><td>Arxiv2023</td><td><a href="https://arxiv.org/pdf/2301.02379.pdf">paper</a></td><td><a href="https://github.com/Doubiiu/CodeTalker">code</a></td><td><a href="https://doubiiu.github.io/projects/codetalker/">ProjectPage</a></td><td>3D</td></tr><tr><td>Expressive Speech-driven Facial Animation with controllable emotions</td><td>Arxiv2023</td><td><a href="https://arxiv.org/abs/2301.02008">Paper</a></td><td></td><td></td><td>3D</td></tr><tr><td>Speech Driven Video Editing via an Audio-Conditioned Diffusion Model</td><td>Arxiv2023</td><td><a href="https://arxiv.org/pdf/2301.04474.pdf">paper</a></td><td><a href="https://github.com/DanBigioi/DiffusionVideoEditing">code</a></td><td></td><td>Diffusion</td></tr><tr><td>Progressive Disentangled Representation Learning for Fine-Grained Controllable Talking Head Synthesis</td><td>CVPR2023</td><td><a href="https://arxiv.org/abs/2211.14506">paper</a></td><td></td><td><a href="https://dorniwang.github.io/PD-FGC/">webpage</a></td><td></td></tr><tr><td>One-Shot High-Fidelity Talking-Head Synthesis with Deformable Neural Radiance Field</td><td>CVPR2023</td><td><a href="https://arxiv.org/abs/2304.05097">paper</a></td><td></td><td><a href="https://waytron.net/hidenerf/">webpage</a></td><td></td></tr><tr><td>Seeing What You Said: Talking Face Generation Guided by a Lip Reading Expert</td><td>CVPR2023</td><td><a href="https://openaccess.thecvf.com/content/CVPR2023/papers/Wang_Seeing_What_You_Said_Talking_Face_Generation_Guided_by_a_CVPR_2023_paper.pdf">paper</a></td><td><a href="https://github.com/Sxjdwang/TalkLip">Code</a></td><td></td><td></td></tr><tr><td>LipFormer: High-Fidelity and Generalizable Talking Face Generation With a Pre-Learned Facial Codebook</td><td>CVPR2023</td><td><a href="https://openaccess.thecvf.com/content/CVPR2023/papers/Wang_LipFormer_High-Fidelity_and_Generalizable_Talking_Face_Generation_With_a_Pre-Learned_CVPR_2023_paper.pdf">paper</a></td><td></td><td></td><td></td></tr><tr><td>High-Fidelity and Freely Controllable Talking Head Video Generation</td><td>CVPR2023</td><td><a href="https://openaccess.thecvf.com/content/CVPR2023/papers/Gao_High-Fidelity_and_Freely_Controllable_Talking_Head_Video_Generation_CVPR_2023_paper.pdf">paper</a></td><td></td><td><a href="https://yuegao.me/PECHead/">Project Page</a></td><td></td></tr><tr><td>High-fidelity Generalized Emotional Talking Face Generation with Multi-modal Emotion Space Learning</td><td>CVPR2023</td><td><a href="https://arxiv.org/abs/2305.02572">paper</a></td><td></td><td></td><td></td></tr><tr><td>OTAvatar : One-shot Talking Face Avatar with Controllable Tri-plane Rendering</td><td>CVPR2023</td><td><a href="https://arxiv.org/abs/2303.14662">paper</a></td><td><a href="https://github.com/theEricMa/OTAvatar">code</a></td><td></td><td></td></tr><tr><td>IP_LAP: Identity-Preserving Talking Face Generation with Landmark and Appearance Priors</td><td>CVPR2023</td><td></td><td><a href="https://github.com/Weizhi-Zhong/IP_LAP">code</a></td><td></td><td></td></tr><tr><td>SadTalker: Learning Realistic 3D Motion Coefficients for Stylized Audio-Driven Single Image Talking Face Animation</td><td>CVPR2023</td><td><a href="https://arxiv.org/abs/2211.12194">paper</a></td><td><a href="https://github.com/Winfredy/SadTalker">code</a></td><td><a href="https://sadtalker.github.io/">webpage</a></td><td></td></tr><tr><td>DPE: Disentanglement of Pose and Expression for General Video Portrait Editing</td><td>CVPR2023</td><td><a href="https://arxiv.org/abs/2301.06281">paper</a></td><td><a href="https://github.com/Carlyx/DPE">code</a></td><td><a href="https://carlyx.github.io/DPE/">webpage</a></td><td></td></tr><tr><td>MetaPortrait: Identity-Preserving Talking Head Generation with Fast Personalized Adaptation</td><td>CVPR2023</td><td><a href="https://arxiv.org/abs/2212.08062">paper</a></td><td><a href="https://github.com/Meta-Portrait/MetaPortrait">code</a></td><td><a href="https://meta-portrait.github.io/">webpage</a></td><td></td></tr><tr><td>GENEFACE: GENERALIZED AND HIGH-FIDELITY AUDIO-DRIVEN 3D TALKING FACE SYNTHESIS</td><td>ICLR2023</td><td><a href="https://arxiv.org/pdf/2301.13430.pdf">paper</a></td><td><a href="https://github.com/yerfor/GeneFace">code</a></td><td><a href="https://geneface.github.io/">ProjectPage</a></td><td>NeRF</td></tr><tr><td>DINet: Deformation Inpainting Network for Realistic Face Visually Dubbing on High Resolution Video</td><td>AAAI2023</td><td><a href="https://fuxivirtualhuman.github.io/pdf/AAAI2023_FaceDubbing.pdf">paper</a></td><td><a href="https://github.com/MRzzm/DINet">code</a></td><td></td><td></td></tr><tr><td>StyleTalk: One-shot Talking Head Generation with Controllable Speaking Styles</td><td>AAAI2023</td><td><a href="https://arxiv.org/pdf/2301.01081.pdf">paper</a></td><td><a href="https://github.com/FuxiVirtualHuman/styletalk">code</a></td><td></td><td></td></tr><tr><td>StyleTalk: One-shot Talking Head Generation with Controllable Speaking Styles</td><td>AAAI2023</td><td><a href="https://arxiv.org/pdf/2301.01081.pdf">paper</a></td><td><a href="https://github.com/FuxiVirtualHuman/styletalk">code</a></td><td></td><td></td></tr><tr><td>Audio-Visual Face Reenactment</td><td>WACV2023</td><td><a href="https://arxiv.org/pdf/2210.02755.pdf">paper</a></td><td><a href="https://github.com/mdv3101/AVFR-Gan">code</a></td><td><a href="http://cvit.iiit.ac.in/research/projects/cvit-projects/avfr">webpage</a></td><td></td></tr><tr><td>Towards Generating Ultra-High Resolution Talking-Face Videos With Lip Synchronization</td><td>WACV2023</td><td><a href="https://openaccess.thecvf.com/content/WACV2023/papers/Gupta_Towards_Generating_Ultra-High_Resolution_Talking-Face_Videos_With_Lip_Synchronization_WACV_2023_paper.pdf">paper</a></td><td>-</td><td></td><td></td></tr><tr><td>Cross-identity Video Motion Retargeting with Joint Transformation and Synthesis</td><td>WACV2023</td><td><a href="https://arxiv.org/pdf/2210.01559.pdf">paper</a></td><td><a href="https://github.com/nihaomiao/WACV23_TSNet">Code</a></td><td></td><td></td></tr><tr><td>DisCoHead: Audio-and-Video-Driven Talking Head Generation by Disentangled Control of Head Pose and Facial Expressions</td><td>ICASSP2023</td><td><a href="https://arxiv.org/abs/2303.07697">Paper</a></td><td><a href="https://github.com/deepbrainai-research/discohead">Code</a></td><td><a href="https://deepbrainai-research.github.io/discohead/">ProjectPage</a></td><td></td></tr><tr><td>OPT: ONE-SHOT POSE-CONTROLLABLE TALKING HEAD GENERATION</td><td>ICASSP2023</td><td><a href="https://arxiv.org/pdf/2302.08197.pdf">paper</a></td><td></td><td></td><td></td></tr><tr><td>FONT: Flow-guided One-shot Talking Head Generation with Natural Head Motions</td><td>ICME 2023</td><td><a href="https://arxiv.org/abs/2303.17789">Paper</a></td><td></td><td></td><td></td></tr><tr><td>Compact Temporal Trajectory Representation for Talking Face Video Compression</td><td>TCSVT2023</td><td><a href="https://ieeexplore.ieee.org/abstract/document/10109861/">paper</a></td><td></td><td></td><td></td></tr><tr><td>HR-Net: a landmark based high realistic face reenactment network</td><td>TCSVT2023</td><td><a href="https://ieeexplore.ieee.org/abstract/document/10103929/">paper</a></td><td></td><td></td><td></td></tr><tr><td>A Unified Compression Framework for Efficient Speech-Driven Talking-Face Generation</td><td>MLSysWorkshop2023</td><td><a href="https://arxiv.org/abs/2304.00471v1">Paper</a></td><td></td><td></td><td></td></tr></tbody></table><h2 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h2><table><thead><tr><th>title</th><th>accept</th><th>paper</th><th>code</th><th>web/proj</th><th>keywords</th></tr></thead><tbody><tr><td>Talking Head Generation with Probabilistic Audio-to-Visual Diffusion Priors</td><td>Arxiv2022</td><td><a href="https://arxiv.org/pdf/2212.04248v1.pdf">paper</a></td><td></td><td><a href="https://zxyin.github.io/TH-PAD/">proj</a></td><td></td></tr><tr><td>Face-Dubbing++: Lip-Synchronous, Voice Preserving Translation of Videos</td><td>Arxiv2022</td><td><a href="https://arxiv.org/pdf/2206.04523.pdf">paper</a></td><td></td><td></td><td></td></tr><tr><td>DialogueNeRF: Towards Realistic Avatar Face-to-face Conversation Video Generation</td><td>Arxiv2022</td><td><a href="https://arxiv.org/pdf/2203.07931.pdf">paper</a></td><td></td><td></td><td></td></tr><tr><td>Talking Head Generation Driven by Speech-Related Facial Action Units and Audio- Based on Multimodal Representation Fusion</td><td>Arxiv2022</td><td><a href="https://arxiv.org/pdf/2204.12756.pdf">paper</a></td><td></td><td></td><td></td></tr><tr><td>AUTOLV: AUTOMATIC LECTURE VIDEO GENERATOR</td><td>Arxiv2022</td><td><a href="https://arxiv.org/pdf/2209.08795v1.pdf">paper</a></td><td></td><td></td><td></td></tr><tr><td>SPACE: Speech-driven Portrait Animation with Controllable Expression</td><td>Arxiv2022</td><td></td><td></td><td><a href="https://deepimagination.cc/SPACEx/">ProjectPage</a></td><td></td></tr><tr><td>Synthesizing Photorealistic Virtual Humans Through Cross-modal Disentanglement</td><td>Arxiv2022</td><td><a href="https://arxiv.org/pdf/2209.01320v1.pdf">paper</a></td><td></td><td></td><td></td></tr><tr><td>StyleTalker: One-shot Style-based Audio-driven Talking Head Video Generation</td><td>Arxiv2022</td><td><a href="https://arxiv.org/abs/2208.10922">paper</a></td><td></td><td></td><td></td></tr><tr><td>Free-HeadGAN: Neural Talking Head Synthesis with Explicit Gaze Control</td><td>Arxiv2022</td><td><a href="https://arxiv.org/pdf/2208.02210.pdf">Paper</a></td><td></td><td></td><td></td></tr><tr><td>StableFace: Analyzing and Improving Motion Stability for Talking Face Generation</td><td>Arxiv2022</td><td><a href="https://arxiv.org/abs/2208.13717">Paper</a></td><td></td><td><a href="https://stable-face.github.io/">ProjectPage</a></td><td></td></tr><tr><td>StyleHEAT: One-Shot High-Resolution Editable Talking Face Generation via Pre-trained StyleGAN</td><td>Arxiv2022</td><td><a href="https://arxiv.org/abs/2203.04036">paper</a></td><td><a href="https://github.com/FeiiYin/StyleHEAT">code</a></td><td><a href="https://feiiyin.github.io/StyleHEAT/">project page</a></td><td>stylegan</td></tr><tr><td>DFA-NeRF: Personalized Talking Head Generation via Disentangled Face Attributes Neural Rendering</td><td>Arxiv2022</td><td><a href="https://arxiv.org/abs/2201.00791">paper</a></td><td></td><td></td><td>NeRF</td></tr><tr><td>Dynamic Neural Textures: Generating Talking-Face Videos with Continuously Controllable Expressions</td><td>Arxiv2022</td><td><a href="https://arxiv.org/pdf/2204.06180.pdf">paper</a></td><td></td><td></td><td></td></tr><tr><td>Imitator: Personalized Speech-driven 3D Facial Animation</td><td>Arxiv2022</td><td><a href="https://arxiv.org/abs/2301.00023">Paper</a></td><td></td><td><a href="https://balamuruganthambiraja.github.io/Imitator/">ProjectPage</a></td><td>3D</td></tr><tr><td>PV3D: A 3D Generative Model for Portrait Video Generation</td><td>Arxiv2022</td><td><a href="https://arxiv.org/abs/2212.06384">Paper</a></td><td></td><td><a href="https://showlab.github.io/pv3d/">ProjectPage</a></td><td>3D</td></tr><tr><td>Memories are One-to-Many Mapping Alleviators in Talking Face Generation</td><td>Arxiv2022</td><td><a href="https://arxiv.org/abs/2212.05005">Paper</a></td><td></td><td><a href="https://memoryface.github.io/">ProjectPage</a></td><td></td></tr><tr><td>AniFaceGAN: Animatable 3D-Aware Face Image Generation for Video Avatars</td><td>NeurIPS2022</td><td><a href="https://arxiv.org/pdf/2210.05825.pdf">paper</a></td><td></td><td><a href="https://yuewuhkust.github.io/AniFaceGAN/">Project</a></td><td></td></tr><tr><td>VideoReTalking: Audio-based Lip Synchronization for Talking Head Video Editing In the Wild</td><td>SIGGRAPHASIA2022</td><td><a href="https://arxiv.org/abs/2211.14758">paper</a></td><td><a href="https://github.com/vinthony/video-retalking">code</a></td><td></td><td></td></tr><tr><td>Masked Lip-Sync Prediction by Audio-Visual Contextual Exploitation in Transformers</td><td>SIGGRAPHASIA2022</td><td><a href="https://arxiv.org/abs/2212.04970">Paper</a></td><td></td><td></td><td></td></tr><tr><td>EAMM: One-Shot Emotional Talking Face via Audio-Based Emotion-Aware Motion Model</td><td>SIGGRAPH2022</td><td><a href="https://arxiv.org/pdf/2205.15278.pdf">paper</a></td><td></td><td></td><td>emotion</td></tr><tr><td>FSGANv2: Improved Subject Agnostic Face Swapping and Reenactment</td><td>PAMI2022</td><td><a href="http://arxiv.org/abs/2202.12972">paper</a></td><td></td><td></td><td></td></tr><tr><td>SadTalker: Learning Realistic 3D Motion Coefficients for Stylized Audio-Driven Single Image Talking Face Animation</td><td>CVPR2022</td><td><a href="https://arxiv.org/pdf/2211.12194v1.pdf">paper</a></td><td><a href="https://github.com/Winfredy/SadTalker">code</a></td><td></td><td></td></tr><tr><td>Expressive Talking Head Generation with Granular Audio-Visual Control</td><td>CVPR2022</td><td><a href="https://openaccess.thecvf.com/content/CVPR2022/papers/Liang_Expressive_Talking_Head_Generation_With_Granular_Audio-Visual_Control_CVPR_2022_paper.pdf">paper</a></td><td>-</td><td></td><td></td></tr><tr><td>Talking Face Generation With Multilingual TTS</td><td>CVPR2022</td><td><a href="https://arxiv.org/abs/2205.06421">paper</a></td><td><a href="https://huggingface.co/spaces/CVPR/ml-talking-face">code</a></td><td>-</td><td>-</td></tr><tr><td>Dual-Generator Face Reenactment</td><td>CVPR2022</td><td><a href="https://openaccess.thecvf.com/content/CVPR2022/papers/Hsu_Dual-Generator_Face_Reenactment_CVPR_2022_paper.pdf">paper</a></td><td></td><td></td><td></td></tr><tr><td>Depth-Aware Generative Adversarial Network for Talking Head Video Generation</td><td>CVPR2022</td><td><a href="https://arxiv.org/abs/2203.06605">paper</a></td><td><a href="https://github.com/harlanhong/CVPR2022-DaGAN">Code</a></td><td><a href="https://harlanhong.github.io/publications/dagan.html">Project</a></td><td></td></tr><tr><td>HeadNeRF: A Real-time NeRF-based Parametric Head Model</td><td>CVPR2022</td><td><a href="https://openaccess.thecvf.com/content/CVPR2022/papers/Grassal_Neural_Head_Avatars_From_Monocular_RGB_Videos_CVPR_2022_paper.pdf">paper</a></td><td><a href="https://github.com/CrisHY1995/headnerf">Code</a></td><td><a href="https://hy1995.top/HeadNeRF-Project/">Project</a></td><td></td></tr><tr><td>I M Avatar: Implicit Morphable Head Avatars from Videos</td><td>CVPR2022</td><td><a href="https://openaccess.thecvf.com/content/CVPR2022/papers/Zheng_I_M_Avatar_Implicit_Morphable_Head_Avatars_From_Videos_CVPR_2022_paper.pdf">paper</a></td><td><a href="https://ait.ethz.ch/projects/2022/IMavatar/">Code</a></td><td></td><td></td></tr><tr><td>Neural Emotion Director: Speech-preserving semantic control of facial expressions in “in-the-wild” videos</td><td>CVPR2022</td><td><a href="https://arxiv.org/pdf/2112.00585.pdf">Paper</a></td><td><a href="https://github.com/foivospar/NED">Code</a></td><td></td><td></td></tr><tr><td>Show Me What and Tell Me How: Video Synthesis via Multimodal Conditioning</td><td>CVPR2022</td><td><a href="https://arxiv.org/pdf/2203.02573.pdf">Paper</a></td><td><a href="https://github.com/snap-research/MMVID">Code</a></td><td><a href="https://snap-research.github.io/MMVID/">ProjectPage</a></td><td></td></tr><tr><td>Learning Dynamic Facial Radiance Fields for Few-Shot Talking Head Synthesis</td><td>ECCV2022</td><td><a href="https://arxiv.org/abs/2207.11770">paper</a></td><td><a href="https://github.com/sstzal/DFRF">code</a></td><td><a href="https://sstzal.github.io/DFRF/">ProjectPage</a></td><td></td></tr><tr><td>Semantic-Aware Implicit Neural Audio-Driven Video Portrait Generation</td><td>ECCV2022</td><td><a href="https://arxiv.org/pdf/2201.07786.pdf">paper</a></td><td><a href="https://github.com/alvinliu0/SSP-NeRF">code</a></td><td><a href="https://alvinliu0.github.io/projects/SSP-NeRF">ProjectPage</a></td><td>NeRF</td></tr><tr><td>StyleHEAT: One-Shot High-Resolution Editable Talking Face Generation via Pretrained StyleGAN</td><td>ECCV2022</td><td><a href="https://arxiv.org/pdf/2203.04036.pdf">paper</a></td><td><a href="https://github.com/FeiiYin/StyleHEAT/">Code</a></td><td><a href="https://feiiyin.github.io/StyleHEAT/">Project</a></td><td></td></tr><tr><td>Realistic One-shot Mesh-based Head Avatars</td><td>ECCV2022</td><td><a href="https://arxiv.org/pdf/2206.08343.pdf">paper</a></td><td></td><td></td><td></td></tr><tr><td>Latent Image Animator: Learning to Animate Images via Latent Space Navigation</td><td>ICLR2022</td><td><a href="https://openreview.net/pdf?id=7r6kDq0mK_">paper</a></td><td><a href="https://github.com/wyhsirius/LIA">Code</a></td><td><a href="https://wyhsirius.github.io/LIA-project/">ProjectPage</a></td><td></td></tr><tr><td>MegaPortraits: One-shot Megapixel Neural Head Avatars</td><td>ACMMM2022</td><td><a href="https://arxiv.org/abs/2207.07621">paper</a></td><td></td><td><a href="https://samsunglabs.github.io/MegaPortraits/">Project</a></td><td></td></tr><tr><td>Talking Head from Speech Audio using a Pre-trained Image Generator</td><td>ACMMM2022</td><td><a href="https://arxiv.org/pdf/2209.04252.pdf">Paper</a></td><td></td><td></td><td></td></tr><tr><td>Compressing Video Calls using Synthetic Talking Heads</td><td>BMVC2022</td><td><a href="https://arxiv.org/pdf/2210.03692.pdf">paper</a></td><td></td><td><a href="https://cvit.iiit.ac.in/research/projects/cvit-projects/talking-video-compression">webpage</a></td><td>application</td></tr><tr><td>Finding Directions in GAN’s Latent Space for Neural Face Reenactment</td><td>BMVC2022</td><td><a href="https://arxiv.org/pdf/2202.00046.pdf">paper</a></td><td><a href="https://github.com/StelaBou/stylegan_directions_face_reenactment">code</a></td><td><a href="https://stelabou.github.io/stylegan-directions-reenactment/">Project</a></td><td></td></tr><tr><td>Emotion-Controllable Generalized Talking Face Generation</td><td>IJCAI2022</td><td><a href="http://arxiv.org/abs/2205.01155">paper</a></td><td></td><td></td><td></td></tr><tr><td>HifiHead: One-Shot High Fidelity Neural Head Synthesis with 3D Control]</td><td>IJCAI2022</td><td><a href="https://www.ijcai.org/proceedings/2022/0244.pdf">paper</a></td><td></td><td></td><td></td></tr><tr><td>Cross-Modal Mutual Learning for Audio-Visual Speech Recognition and Manipulation</td><td>AAAI2022</td><td><a href="https://www.aaai.org/AAAI22Papers/AAAI-6163.YangC.pdf">paper</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>SyncTalkFace: Talking Face Generation with Precise Lip-syncing via Audio-Lip Memory</td><td>AAAI2022</td><td><a href="https://www.aaai.org/AAAI22Papers/AAAI-7528.ParkS.pdf">paper(temp)</a></td><td>-</td><td></td><td>-</td></tr><tr><td>One-shot Talking Face Generation from Single-speaker Audio-Visual Correlation Learning</td><td>AAAI2022</td><td><a href="http://arxiv.org/abs/2112.02749">paper</a></td><td></td><td><a href="https://github.com/FuxiVirtualHuman/AAAI22-one-shot-talking-face">projectpage</a></td><td></td></tr><tr><td>Audio-Driven Talking Face Video Generation with Dynamic Convolution Kernels</td><td>TMM2022</td><td><a href="http://arxiv.org/abs/2201.05986">paper</a></td><td></td><td></td><td></td></tr><tr><td>Audio-driven Dubbing for User Generated Contents via Style-aware Semi-parametric Synthesis</td><td>TCSVT2022</td><td><a href="https://ieeexplore.ieee.org/abstract/document/9903679/">paper</a></td><td></td><td></td><td></td></tr></tbody></table><h2 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h2><table><thead><tr><th>title</th><th>accept</th><th>paper</th><th>code</th><th>web/proj</th></tr></thead><tbody><tr><td>AnyoneNet: Synchronized Speech and Talking Head Generation for Arbitrary Person</td><td>Arxiv2021</td><td><a href="https://arxiv.org/pdf/2108.04325v2.pdf">paper</a></td><td></td><td></td></tr><tr><td>LandmarkGAN: Synthesizing Faces from Landmarks</td><td>Arxiv2021</td><td><a href="http://arxiv.org/abs/2011.00269">paper</a></td><td></td><td></td></tr><tr><td>3D-TalkEmo: Learning to Synthesize 3D Emotional Talking Head</td><td>Arxiv2021</td><td><a href="https://arxiv.org/pdf/2104.12051.pdf">paper</a></td><td></td><td></td></tr><tr><td>Voice2Mesh: Cross-Modal 3D Face Model Generation from Voices</td><td>Arxiv2021</td><td><a href="https://arxiv.org/pdf/2104.10299v1.pdf">paper</a></td><td><a href="https://github.com/choyingw/Voice2Mesh">code</a></td><td></td></tr><tr><td>Parallel and High-Fidelity Text-to-Lip Generation</td><td>Arxiv2021</td><td><a href="https://arxiv.org/pdf/2107.06831v2.pdf">paper</a></td><td></td><td></td></tr><tr><td>Live Speech Portraits: Real-Time Photorealistic Talking-Head Animation</td><td>SIGGRAPHASIA2021</td><td><a href="http://arxiv.org/abs/2109.10595">paper</a></td><td><a href="https://github.com/YuanxunLu/LiveSpeechPortraits">Code</a></td><td><a href="https://github.com/YuanxunLu/LiveSpeechPortraits">project page</a></td></tr><tr><td>FaceFormer: Speech-Driven 3D Facial Animation with Transformers</td><td>CVPR2021</td><td><a href="https://arxiv.org/abs/2112.05329">paper</a></td><td><a href="https://github.com/EvelynFan/FaceFormer">code</a></td><td><a href="https://github.com/EvelynFan/FaceFormer">projectpage</a></td></tr><tr><td>Audio-Driven Emotional Video Portraits</td><td>CVPR2021</td><td><a href="https://arxiv.org/pdf/2104.07452.pdf">paper</a></td><td><a href="https://github.com/jixinya/EVP/">code</a></td><td><a href="https://github.com/jixinya/EVP">projectpage</a></td></tr><tr><td>LipSync3D: Data-Efficient Learning of Personalized 3D Talking Faces from Video using Pose and Lighting Normalization</td><td>CVPR2021</td><td><a href="https://openaccess.thecvf.com/content/CVPR2021/papers/Lahiri_LipSync3D_Data-Efficient_Learning_of_Personalized_3D_Talking_Faces_From_Video_CVPR_2021_paper.pdf">paper</a></td><td>-</td><td>-</td></tr><tr><td>Pose-Controllable Talking Face Generation by Implicitly Modularized Audio-Visual Representation</td><td>CVPR2021</td><td><a href="https://openaccess.thecvf.com/content/CVPR2021/papers/Zhou_Pose-Controllable_Talking_Face_Generation_by_Implicitly_Modularized_Audio-Visual_Representation_CVPR_2021_paper.pdf">paper</a></td><td><a href="https://github.com/Hangz-nju-cuhk/Talking-Face_PC-AVS">code</a></td><td><a href="https://github.com/Hangz-nju-cuhk/Talking-Face_PC-AVS">project page</a></td></tr><tr><td>Flow-guided One-shot Talking Face Generation with a High-resolution Audio-visual Dataset</td><td>CVPR2021</td><td><a href="https://openaccess.thecvf.com/content/CVPR2021/papers/Zhang_Flow-Guided_One-Shot_Talking_Face_Generation_With_a_High-Resolution_Audio-Visual_Dataset_CVPR_2021_paper.pdf">paper</a></td><td><a href="https://github.com/MRzzm/HDTF">code</a></td><td><a href="https://github.com/MRzzm/HDTF">projectpage</a></td></tr><tr><td>Everything’s Talkin’: Pareidolia Face Reenactment</td><td>CVPR2021</td><td><a href="http://arxiv.org/abs/2104.03061">paper</a></td><td></td><td></td></tr><tr><td>NerFACE: Dynamic Neural Radiance Fields for Monocular 4D Facial Avatar Reconstruction</td><td>CVPR2021</td><td><a href="https://arxiv.org/pdf/2012.03065">paper</a></td><td><a href="https://github.com/gafniguy/4D-Facial-Avatars">Code</a></td><td><a href="https://gafniguy.github.io/4D-Facial-Avatars/">Project</a></td></tr><tr><td>One-Shot Free-View Neural Talking-Head Synthesis for Video Conferencing</td><td>CVPR2021</td><td><a href="https://arxiv.org/abs/2011.15126">paper</a></td><td><a href="https://github.com/NVlabs/imaginaire">code</a></td><td></td></tr><tr><td>Audio-Driven Emotional Video Portraits</td><td>CVPR2021</td><td><a href="https://jixinya.github.io/projects/evp/resources/evp.pdf">Paper</a></td><td><a href="https://github.com/jixinya/EVP/">Code</a></td><td></td></tr><tr><td>FACIAL: Synthesizing Dynamic Talking Face with Implicit Attribute Learning</td><td>ICCV2021</td><td><a href="https://arxiv.org/pdf/2108.07938v1.pdf">paper</a></td><td><a href="https://github.com/zhangchenxu528/FACIAL">code</a></td><td><a href="https://github.com/zhangchenxu528/FACIAL">projectpage</a></td></tr><tr><td>MeshTalk: 3D Face Animation from Speech using Cross-Modality Disentanglement</td><td>ICCV2021</td><td><a href="https://openaccess.thecvf.com/content/ICCV2021/papers/Richard_MeshTalk_3D_Face_Animation_From_Speech_Using_Cross-Modality_Disentanglement_ICCV_2021_paper.pdf">paper</a></td><td><a href="https://github.com/facebookresearch/meshtalk">code(coming soon)</a></td><td><a href="https://github.com/facebookresearch/meshtalk">projectpage</a></td></tr><tr><td>AD-NeRF: Audio Driven Neural Radiance Fields for Talking Head Synthesis</td><td>ICCV2021</td><td><a href="https://openaccess.thecvf.com/content/ICCV2021/papers/Guo_AD-NeRF_Audio_Driven_Neural_Radiance_Fields_for_Talking_Head_Synthesis_ICCV_2021_paper.pdf">paper</a></td><td><a href="https://github.com/YudongGuo/AD-NeRF">code</a></td><td><a href="https://github.com/YudongGuo/AD-NeRF">projectpage</a></td></tr><tr><td>Sparse to Dense Motion Transfer for Face Image Animation</td><td>ICCV2021</td><td><a href="https://openaccess.thecvf.com/content/ICCV2021W/AIM/papers/Zhao_Sparse_to_Dense_Motion_Transfer_for_Face_Image_Animation_ICCVW_2021_paper.pdf">paper</a></td><td></td><td></td></tr><tr><td>PIRenderer:PIRenderer: Controllable Portrait Image Generation via Semantic Neural Rendering</td><td>ICCV2021</td><td><a href="https://arxiv.org/pdf/2109.08379.pdf">paper</a></td><td><a href="https://github.com/RenYurui/PIRender">Code</a></td><td></td></tr><tr><td>Learned Spatial Representations for Few-shot Talking-Head Synthesis</td><td>ICCV2021</td><td><a href="https://openaccess.thecvf.com/content/ICCV2021/papers/Meshry_Learned_Spatial_Representations_for_Few-Shot_Talking-Head_Synthesis_ICCV_2021_paper.pdf">Paper</a></td><td></td><td></td></tr><tr><td>HeadGAN: One-shot Neural Head Synthesis and Editing</td><td>ICCV2021</td><td><a href="https://arxiv.org/pdf/2012.08261.pdf">paper</a></td><td></td><td><a href="https://michaildoukas.github.io/HeadGAN/">Project</a></td></tr><tr><td>S2D:Imitating Arbitrary Talking Style for Realistic Audio-Driven Talking Face Synthesis</td><td>ACMMM2021</td><td><a href="https://arxiv.org/pdf/2111.00203v1.pdf">paper</a></td><td><a href="https://github.com/wuhaozhe/style_avatar">code</a></td><td><a href="https://github.com/wuhaozhe/style_avatar">project page</a></td></tr><tr><td>Towards Realistic Visual Dubbing with Heterogeneous Sources</td><td>ACMMM2021</td><td><a href="https://dl.acm.org/doi/abs/10.1145/3474085.3475318">paper</a></td><td></td><td></td></tr><tr><td>One-shot Face Reenactment Using Appearance Adaptive Normalization</td><td>AAAI2021</td><td><a href="https://arxiv.org/pdf/2102.03984.pdf">paper</a></td><td></td><td></td></tr><tr><td>Write-a-speaker: Text-based Emotional and Rhythmic Talking-head Generation</td><td>AAAI2021</td><td><a href="https://arxiv.org/pdf/2104.07995.pdf">paper</a></td><td><a href="https://github.com/FuxiVirtualHuman/Write-a-Speaker">code</a></td><td><a href="https://github.com/FuxiVirtualHuman/Write-a-Speaker">projectpage</a></td></tr><tr><td>Visual Speech Enhancement Without A Real Visual Stream</td><td>WACV2021</td><td><a href="https://openaccess.thecvf.com/content/WACV2021/papers/Hegde_Visual_Speech_Enhancement_Without_a_Real_Visual_Stream_WACV_2021_paper.pdf">paper</a></td><td></td><td></td></tr><tr><td>A unified framework for high fidelity face swap and expression reenactment</td><td>TCSVT2021</td><td><a href="https://ieeexplore.ieee.org/abstract/document/9517088/">paper</a></td><td></td><td></td></tr><tr><td>Talking Head Generation with Audio and Speech Related Facial Action Units</td><td>BMVC2021</td><td><a href="http://arxiv.org/abs/2110.09951">paper</a></td><td></td><td></td></tr><tr><td>LI-Net: Large-Pose Identity-Preserving Face Reenactment Network</td><td>ICME2021</td><td><a href="https://arxiv.org/pdf/2104.02850">paper</a></td><td></td><td></td></tr><tr><td>3D Talking Face with Personalized Pose Dynamics</td><td>TVCG2021</td><td><a href="https://personal.utdallas.edu/~xxg061000/TVCG2021.pdf">paper</a></td><td></td><td></td></tr><tr><td>Audio2Head: Audio-driven One-shot Talking-head Generation with Natural Head Motion</td><td>IJCAI2021</td><td><a href="https://arxiv.org/pdf/2107.09293.pdf">paper</a></td><td><a href="https://github.com/wangsuzhen/Audio2Head">code</a></td><td><a href="https://github.com/wangsuzhen/Audio2Head">projectpage</a></td></tr><tr><td>Speech2Talking-Face: Inferring and Driving a Face with Synchronized Audio-Visual Representation</td><td>IJCAI2021</td><td><a href="https://www.ijcai.org/proceedings/2021/0141.pdf">paper</a></td><td></td><td></td></tr><tr><td>Text2Video: Text-driven Talking-head Video Synthesis with Phonetic Dictionary</td><td>ICASSP2021</td><td><a href="https://arxiv.org/pdf/2104.14631v1.pdf">paper</a></td><td><a href="https://github.com/sibozhang/Text2Video">code</a></td><td><a href="https://github.com/sibozhang/Text2Video">projectpage</a></td></tr><tr><td>APB2FaceV2: Real-Time Audio-Guided Multi-Face Reenactment</td><td>ICASSP2021</td><td><a href="https://arxiv.org/abs/2010.13017v1">paper</a></td><td><a href="https://github.com/zhangzjn/APB2FaceV2">code</a></td><td></td></tr></tbody></table><h2 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h2><table><thead><tr><th>title</th><th>accept</th><th>paper</th><th>code</th><th>web/proj</th><th>dataset</th></tr></thead><tbody><tr><td>Everybody’s Talkin’: Let Me Talk as You Want</td><td>Arxiv2020</td><td><a href="http://arxiv.org/abs/2001.05201">paper</a></td><td></td><td></td><td></td></tr><tr><td>Speech Driven Talking Face Generation from a Single Image and an Emotion Condition</td><td>Arxiv2020</td><td><a href="https://arxiv.org/pdf/2008.03592.pdf">paper</a></td><td><a href="https://github.com/eeskimez/emotalkingface">code</a></td><td><a href="https://github.com/eeskimez/emotalkingface">project page</a></td><td>CREMA-D</td></tr><tr><td>MakeItTalk: Speaker-Aware Talking Head Animation</td><td>Arxiv2020</td><td><a href="https://arxiv.org/pdf/2004.12992.pdf">paper</a></td><td><a href="https://github.com/adobe-research/MakeItTalk">code</a>, <a href="https://github.com/yzhou359/MakeItTalk">code</a></td><td></td><td>VoxCeleb2, VCTK</td></tr><tr><td>HeadGAN:Video-and-Audio-Driven Talking Head Synthesis</td><td>Arxiv2020</td><td><a href="https://arxiv.org/pdf/2012.08261v1.pdf">paper</a></td><td>-</td><td></td><td>VoxCeleb2</td></tr><tr><td>Photorealistic Lip Sync with Adversarial Temporal Convolutional Networks</td><td>Arxiv2020</td><td><a href="https://arxiv.org/pdf/2002.08700.pdf">paper</a></td><td>-</td><td></td><td>-</td></tr><tr><td>Audio-driven Talking Face Video Generation with Learning-based Personalized Head Pose</td><td>Arxiv2020</td><td><a href="https://arxiv.org/pdf/2002.10137.pdf">paper</a></td><td><a href="https://github.com/yiranran/Audio-driven-TalkingFace-HeadPose">code</a></td><td><a href="https://github.com/yiranran/Audio-driven-TalkingFace-HeadPose">projectpage</a></td><td>ImageNet,  FaceWarehouse,  LRW</td></tr><tr><td>SPEECH-DRIVEN FACIAL ANIMATION USING POLYNOMIAL FUSION OF FEATURES</td><td>Arxiv2020</td><td><a href="https://arxiv.org/pdf/1912.05833.pdf">paper</a></td><td>-</td><td></td><td>LRW</td></tr><tr><td>MakeItTalk: Speaker-Aware Talking Head Animation</td><td>SIGGRAPHASIA2020</td><td><a href="http://arxiv.org/abs/2004.12992">paper</a></td><td><a href="https://github.com/yzhou359/MakeItTalk">code</a></td><td><a href="https://github.com/yzhou359/MakeItTalk">project page</a></td><td></td></tr><tr><td>FReeNet: Multi-Identity Face Reenactment</td><td>CVPR2020</td><td><a href="http://arxiv.org/abs/1905.11805">paper</a></td><td><a href="https://github.com/zhangzjn/FReeNet">code</a></td><td></td><td></td></tr><tr><td>Neural Head Reenactment with Latent Pose Descriptors</td><td>CVPR2020</td><td><a href="http://arxiv.org/abs/2004.12000">paper</a></td><td><a href="https://github.com/shrubb/latent-pose-reenactment">code</a></td><td></td><td></td></tr><tr><td>Learning Individual Speaking Styles for Accurate Lip to Speech Synthesis</td><td>CVPR2020</td><td><a href="https://openaccess.thecvf.com/content_CVPR_2020/papers/Prajwal_Learning_Individual_Speaking_Styles_for_Accurate_Lip_to_Speech_Synthesis_CVPR_2020_paper.pdf">Paper</a></td><td></td><td></td><td></td></tr><tr><td>Robust One Shot Audio to Video Generation</td><td>CVPRW2020</td><td><a href="https://openaccess.thecvf.com/content_CVPRW_2020/html/w45/Kumar_Robust_One_Shot_Audio_to_Video_Generation_CVPRW_2020_paper.html">Paper</a></td><td></td><td></td><td></td></tr><tr><td>Learning Identity-Invariant Motion Representations for Cross-ID Face Reenactment</td><td>CVPR2020</td><td><a href="http://openaccess.thecvf.com/content_CVPR_2020/papers/Huang_Learning_Identity-Invariant_Motion_Representations_for_Cross-ID_Face_Reenactment_CVPR_2020_paper.pdf">paper</a></td><td></td><td></td><td></td></tr><tr><td>Talking-head Generation with Rhythmic Head Motion</td><td>ECCV2020</td><td><a href="https://arxiv.org/pdf/2007.08547.pdf">paper</a></td><td><a href="https://github.com/lelechen63/Talking-head-Generation-with-Rhythmic-Head-Motion">code</a></td><td><a href="https://github.com/lelechen63/Talking-head-Generation-with-Rhythmic-Head-Motion">projectpage</a></td><td>Crema, Grid, Voxceleb, Lrs3</td></tr><tr><td>MEAD: A Large-scale Audio-visual Dataset for Emotional Talking-face Generation</td><td>ECCV2020</td><td><a href="https://wywu.github.io/projects/MEAD/support/MEAD.pdf">paper</a></td><td><a href="https://github.com/uniBruce/Mead">code</a></td><td><a href="https://wywu.github.io/projects/MEAD/MEAD.html">Project</a></td><td>VoxCeleb2, AffectNet</td></tr><tr><td>Neural voice puppetry:Audio-driven facial reenactment</td><td>ECCV2020</td><td><a href="https://arxiv.org/pdf/1912.05566.pdf">paper</a></td><td><a href="https://github.com/JustusThies/NeuralVoicePuppetry">Code</a></td><td><a href="https://github.com/miu200521358/NeuralVoicePuppetryMMD">projectpage</a></td><td>-</td></tr><tr><td>Fast Bi-layer Neural Synthesis of One-Shot Realistic Head Avatars</td><td>ECCV2020</td><td><a href="https://arxiv.org/pdf/2008.10174v1.pdf">paper</a></td><td><a href="https://github.com/saic-violet/bilayer-model">code</a></td><td></td><td>-</td></tr><tr><td>Fast Bi-layer Neural Synthesis of One-Shot Realistic Head Avatars</td><td>ECCV2020</td><td><a href="http://arxiv.org/abs/2008.10174">paper</a></td><td><a href="https://github.com/saic-violet/bilayer-model">code</a></td><td></td><td></td></tr><tr><td>Realistic Face Reenactment via Self-Supervised Disentangling of Identity and Pose</td><td>AAAI2020</td><td><a href="http://arxiv.org/abs/2003.12957">paper</a></td><td></td><td></td><td></td></tr><tr><td>A Lip Sync Expert Is All You Need for Speech to Lip Generation In The Wild</td><td>ACMMM2020</td><td><a href="https://arxiv.org/pdf/2008.10010.pdf">paper</a></td><td><a href="https://github.com/Rudrabha/Wav2Lip">code</a></td><td><a href="https://github.com/Rudrabha/Wav2Lip">project page</a></td><td>LRS2</td></tr><tr><td>Mesh Guided One-shot Face Reenactment using Graph Convolutional Networks</td><td>ACMMM2020</td><td><a href="http://arxiv.org/abs/2008.07783">paper</a></td><td><a href="https://arxiv.org/abs/2008.07783">Code</a></td><td></td><td></td></tr><tr><td>Talking Face Generation with Expression-Tailored Generative Adversarial Network</td><td>ACMMM2020</td><td><a href="https://dl.acm.org/doi/abs/10.1145/3394171.3413844">Paper</a></td><td></td><td></td><td></td></tr><tr><td>Animating Face using Disentangled Audio Representations</td><td>WACV2020</td><td><a href="https://arxiv.org/pdf/1910.00726.pdf">paper</a></td><td>-</td><td></td><td></td></tr><tr><td>One-Shot Free-View Neural Talking-Head Synthesis for Video Conferencing</td><td>WACV2020</td><td><a href="http://arxiv.org/abs/2011.15126">paper</a></td><td></td><td><a href="https://nvlabs.github.io/face-vid2vid/">Project</a></td><td></td></tr><tr><td>FACEGAN: Facial Attribute Controllable rEenactment GAN</td><td>WACV2020</td><td><a href="http://arxiv.org/abs/2011.04439">paper</a></td><td></td><td></td><td></td></tr><tr><td>Arbitrary Talking Face Generation via Attentional Audio-Visual Coherence Learning</td><td>IJCAI2020</td><td><a href="http://arxiv.org/abs/1812.06589">paper</a></td><td></td><td></td><td></td></tr><tr><td>APB2Face: Audio-guided face reenactment with auxiliary pose and blink signals</td><td>ICASSP2020</td><td><a href="https://arxiv.org/abs/2004.14569v1">paper</a></td><td><a href="https://github.com/zhangzjn/APB2Face">code</a></td><td></td><td></td></tr><tr><td>Realistic Speech-Driven Facial Animation with GANs</td><td>IJCV2020</td><td><a href="https://arxiv.org/pdf/1906.06337.pdf">paper</a></td><td></td><td></td><td></td></tr><tr><td>Modality Dropout for Improved Performance-driven Talking Faces</td><td>ICMI2020</td><td><a href="https://arxiv.org/abs/2005.13616">Paper</a></td><td></td><td></td><td></td></tr><tr><td>Multimodal inputs driven talking face generation with spatial–temporal dependency</td><td>TCSVT2020</td><td><a href="https://ieeexplore.ieee.org/abstract/document/8995571/">paper</a></td><td></td><td></td><td></td></tr><tr><td>Multimodal Inputs Driven Talking Face Generation With Spatial-Temporal Dependency</td><td>TCSVT2020</td><td><a href="https://www.researchgate.net/profile/Jun_Yu42/publication/339224051_Multimodal_Inputs_Driven_Talking_Face_Generation_With_Spatial-Temporal_Dependency/links/5eae2c6a92851cb2676fa016/Multimodal-Inputs-Driven-Talking-Face-Generation-With-Spatial-Temporal-Dependency.pdf">paper</a></td><td></td><td></td><td></td></tr></tbody></table><h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><table><thead><tr><th>title</th><th>accept</th><th>paper</th><th>code</th><th>web/proj</th><th>dataset</th></tr></thead><tbody><tr><td>FOMM:First order motion model for image animation</td><td>NeurIPS2019</td><td><a href="http://papers.nips.cc/paper/8935-first-order-motion-model-for-image-animation.pdf">paper</a></td><td><a href="https://github.com/AliaksandrSiarohin/first-order-model">Code</a></td><td></td><td></td></tr><tr><td>Face Reconstruction from Voice using Generative Adversarial Networks</td><td>NeurIPS2019</td><td><a href="https://papers.nips.cc/paper/8768-face-reconstruction-from-voice-using-generative-adversarial-networks.pdf">paper</a></td><td></td><td></td><td></td></tr><tr><td>fs-vid2vid:Few-shot Video-to-Video Synthesis</td><td>NeurIPS2019</td><td><a href="https://nvlabs.github.io/few-shot-vid2vid/main.pdf">paper</a></td><td><a href="https://github.com/NVlabs/few-shot-vid2vid">Code</a></td><td><a href="https://nvlabs.github.io/few-shot-vid2vid/">Project</a></td><td></td></tr><tr><td>Hierarchical Cross-Modal Talking Face Generation with Dynamic Pixel-Wise Loss</td><td>CVPR2019</td><td><a href="https://arxiv.org/pdf/1905.03820.pdf">paper</a></td><td><a href="https://github.com/lelechen63/ATVGnet">code</a></td><td><a href="https://github.com/lelechen63/ATVGnet">project page</a></td><td>VGG Face, LRW</td></tr><tr><td>Learning the Face Behind a Voice</td><td>CVPR2019</td><td><a href="https://ieeexplore.ieee.org/document/8953196/">paper</a></td><td><a href="https://github.com/saiteja-talluri/Speech2Face">code</a></td><td></td><td></td></tr><tr><td>Hierarchical Cross-Modal Talking Face Generation with Dynamic Pixel-Wise Loss</td><td>CVPR2019</td><td><a href="http://arxiv.org/abs/1905.03820">paper</a></td><td><a href="https://github.com/lelechen63/ATVGnet">code</a></td><td></td><td></td></tr><tr><td>Capture, Learning, and Synthesis of 3D Speaking Styles</td><td>CVPR2019</td><td><a href="http://openaccess.thecvf.com/content_CVPR_2019/html/Cudeiro_Capture_Learning_and_Synthesis_of_3D_Speaking_Styles_CVPR_2019_paper.html">Paper</a></td><td></td><td><a href="https://github.com/TimoBolkart/voca">projectpage</a></td><td></td></tr><tr><td>Monkey-Net:Animating Arbitrary Objects via Deep Motion Transfer</td><td>CVPR2019</td><td></td><td><a href="https://github.com/AliaksandrSiarohin/monkey-net">Code</a></td><td><a href="http://www.stulyakov.com/papers/monkey-net.html">Project</a>]</td><td></td></tr><tr><td>Few-Shot Adversarial Learning of Realistic Neural Talking Head Models</td><td>ICCV2019</td><td><a href="http://arxiv.org/abs/1905.08233">paper</a></td><td></td><td></td><td></td></tr><tr><td>Make a Face: Towards Arbitrary High Fidelity Face Manipulation</td><td>ICCV2019</td><td><a href="http://arxiv.org/abs/1908.07191">paper</a></td><td></td><td></td><td></td></tr><tr><td>Talking Face Generation by Adversarially Disentangled Audio-Visual Representation</td><td>AAAI2019</td><td><a href="http://arxiv.org/abs/1807.07860">paper</a></td><td><a href="https://github.com/Hangz-nju-cuhk/Talking-Face-Generation-DAVS">Code</a></td><td><a href="https://github.com/Hangz-nju-cuhk/Talking-Face-Generation-DAVS">project page</a></td><td></td></tr><tr><td>FLNet: Landmark Driven Fetching and Learning Network for Faithful Talking Facial Animation Synthesis</td><td>AAAI2019</td><td><a href="http://arxiv.org/abs/1911.09224">paper</a></td><td></td><td></td><td></td></tr><tr><td>MarioNETte: Few-shot Face Reenactment Preserving Identity of Unseen Targets</td><td>AAAI2019</td><td><a href="http://arxiv.org/abs/1911.08139">paper</a></td><td></td><td><a href="https://hyperconnect.github.io/MarioNETte/">Project</a></td><td></td></tr><tr><td>Towards Automatic Face-to-Face Translation</td><td>ACMMM2019</td><td><a href="http://arxiv.org/abs/2003.00418">paper</a></td><td><a href="https://github.com/Rudrabha/LipGAN">code</a></td><td></td><td></td></tr><tr><td>Wav2Pix: Speech-conditioned Face Generation using Generative Adversarial Networks</td><td>ICASSP2019</td><td><a href="http://arxiv.org/abs/1903.10195">paper</a></td><td><a href="https://github.com/miqueltubau/Wav2Pix">code</a></td><td></td><td></td></tr><tr><td>Talking Face Generation by Conditional Recurrent Adversarial Network</td><td>IJCAI2019</td><td><a href="%5Bhttps://papers.nips.cc/paper/8768-face-reconstruction-from-voice-using-generative-adversarial-networks.pdf%5D(https://arxiv.org/pdf/1804.04786.pdf)">paper</a></td><td><a href="https://github.com/susanqq/Talking_Face_Generation">code</a></td><td><a href="https://github.com/susanqq/Talking_Face_Generation">project page</a></td><td></td></tr></tbody></table><h2 id="datasets"><a href="#datasets" class="headerlink" title="datasets"></a>datasets</h2><ul><li>BIWI <a href="https://data.vision.ee.ethz.ch/cvl/datasets/b3dac2.en.html">project page</a></li><li>CelebV [<a href="https://drive.google.com/file/d/1jQ6d76T5GQuvQH4dq8_Wq1T0cxvN0_xp/view">project page</a>].</li><li>CelebV-HQ [<a href="https://github.com/CelebV-HQ/CelebV-HQ">project page</a>].</li><li>CREMA-D <a href="https://github.com/CheyneyComputerScience/CREMA-D">project page</a></li><li>CREMA-D 2014 <a href="https://github.com/CheyneyComputerScience/CREMA-D">project page</a></li><li>DPCD <a href="https://github.com/Metaverse-AI-Lab-THU/Deep-Personalized-Character-Dataset-DPCD">Link</a> <a href="https://arxiv.org/abs/2304.11093">Paper</a></li><li>Faceforensics++ [<a href="https://github.com/ondyari/FaceForensics"><code>Download link</code></a>]</li><li>GRID 2006 <a href="http://spandh.dcs.shef.ac.uk/avlombard/">project page</a></li><li>HIT Bi-CAV 2005 </li><li>HDTF 2020 <a href="https://github.com/MRzzm/HDTF">project page</a></li><li>LRS2 <a href="https://www.robots.ox.ac.uk/~vgg/data/lip_reading/lrs2.html">project page</a></li><li>LRS2-BBC 2018 <a href="https://www.robots.ox.ac.uk/~vgg/data/lip_reading/lrs2.html">project page</a></li><li>LRS3-TED 2018 <a href="https://www.robots.ox.ac.uk/~vgg/data/lip_reading/lrs3.html">project page</a></li><li>LRW 2016 <a href="https://www.robots.ox.ac.uk/~vgg/data/lip_reading/lrw1.html">project page</a></li><li>LRW-1000 2018 <a href="https://github.com/VIPL-Audio-Visual-Speech-Understanding/Lipreading-DenseNet3D">project page</a></li><li>MSP-IMPROV 2016 <a href="https://ecs.utdallas.edu/research/researchlabs/msp-lab/MSP-Improv.html">project page</a></li><li>MELD 2018 <a href="https://affective-meld.github.io/">project page</a></li><li>MEAD 2020 <a href="https://wywu.github.io/projects/MEAD/MEAD.html">project page</a></li><li>MODALITY 2017 <a href="http://www.modality-corpus.org/">project page</a></li><li>MMFace4D <a href="https://arxiv.org/abs/2303.09797">project page</a></li><li>ObamaSet 2017</li><li>RAVDESS 2018 <a href="https://sites.psychlabs.ryerson.ca/smartlab/resources/speech-song-database-ravdess/">project page</a></li><li>SAVEE <a href="http://kahlan.eps.surrey.ac.uk/savee/Download.html">project page</a></li><li>TalkingHead-1KH [<a href="https://github.com/deepimagination/TalkingHead-1KH"><code>Download link</code></a>].</li><li>TCD-TIMIT 2015 <a href="https://sigmedia.tcd.ie/">project page</a></li><li>VoxCeleb <a href="https://www.robots.ox.ac.uk/~vgg/data/voxceleb/">project page</a></li><li>Voxceleb1 2017 <a href="https://www.robots.ox.ac.uk/~vgg/data/voxceleb/">project page</a></li><li>Voxceleb2 2018 <a href="https://www.robots.ox.ac.uk/~vgg/data/voxceleb2/">project page</a></li></ul><h2 id="metrics"><a href="#metrics" class="headerlink" title="metrics"></a>metrics</h2><table><thead><tr><th>Metrics</th><th>Paper</th><th>Link</th></tr></thead><tbody><tr><td>PSNR (peak signal-to-noise  ratio)</td><td>-</td><td></td></tr><tr><td>SSIM (structural similarity  index measure)</td><td>Image quality  assessment: from error visibility to structural similarity.</td><td></td></tr><tr><td>CPBD(cumulative probability of  blur detection)</td><td>A no-reference image  blur metric based on the cumulative probability of blur detection</td><td></td></tr><tr><td>LPIPS (Learned Perceptual  Image Patch Similarity) -</td><td>The Unreasonable Effectiveness of Deep Features as  a Perceptual Metric</td><td><a href="https://arxiv.org/pdf/1801.03924.pdf">paper</a></td></tr><tr><td>NIQE (Natural Image Quality  Evaluator)</td><td>Making a ‘Completely  Blind’ Image Quality Analyzer</td><td><a href="http://live.ece.utexas.edu/research/Quality/niqe_spl.pdf">paper</a></td></tr><tr><td>FID (Fréchet inception  distance)</td><td>GANs trained by a two  time-scale update rule converge to a local nash equilibrium</td><td></td></tr><tr><td>LMD (landmark distance error)</td><td>Lip Movements Generation at a Glance</td><td></td></tr><tr><td>LRA (lip-reading  accuracy)</td><td>Talking Face Generation by Conditional Recurrent  Adversarial Network</td><td><a href="https://arxiv.org/pdf/1804.04786.pdf">paper</a></td></tr><tr><td>WER(word error rate)</td><td>Lipnet: end-to-end sentencelevel lipreading.</td><td></td></tr><tr><td>LSE-D (Lip Sync Error -  Distance)</td><td>Out of time: automated lip sync in the wild</td><td></td></tr><tr><td>LSE-C (Lip Sync Error -  Confidence)</td><td>Out of time: automated lip sync in the wild</td><td></td></tr><tr><td>ACD(Average  content distance)</td><td>Facenet: a unified embedding for face recognition  and clustering.</td><td></td></tr><tr><td>CSIM(cosine similarity)</td><td>Arcface: additive angular margin loss for deep face  recognition.</td><td></td></tr><tr><td>EAR(eye aspect ratio)</td><td>Real-time eye blink  detection using facial landmarks. In: Computer Vision Winter Workshop</td><td></td></tr><tr><td>ESD(emotion similarity  distance)</td><td>What comprises a good talking-head video  generation?: A Survey and Benchmark</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 微软小冰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微软小冰 </tag>
            
            <tag> talking face generation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微软小冰实习</title>
      <link href="/2023/06/16/xiao-bing/xiao-bing/"/>
      <url>/2023/06/16/xiao-bing/xiao-bing/</url>
      
        <content type="html"><![CDATA[<h3 id="1-基于语音输入的landmark生成效果"><a href="#1-基于语音输入的landmark生成效果" class="headerlink" title="1. 基于语音输入的landmark生成效果"></a>1. 基于语音输入的landmark生成效果</h3><video width="100%" height="auto" controls="">  <source src="landmark_train011_011_2.mp4" type="video/mp4">  Your browser does not support the video tag.</video><h3 id="2-基于landmark的人脸生成效果"><a href="#2-基于landmark的人脸生成效果" class="headerlink" title="2. 基于landmark的人脸生成效果"></a>2. 基于landmark的人脸生成效果</h3><video width="100%" height="auto" controls="">  <source src="南康家具_3_6_orignial_l1_model30.mp4" type="video/mp4">  Your browser does not support the video tag.</video><h3 id="3-100人上效果"><a href="#3-100人上效果" class="headerlink" title="3. 100人上效果"></a>3. 100人上效果</h3><video width="100%" height="auto" controls="">  <source src="dinet.mp4" type="video/mp4">  Your browser does not support the video tag.</video><h3 id="4-在我自己静音视频的生成效果"><a href="#4-在我自己静音视频的生成效果" class="headerlink" title="4. 在我自己静音视频的生成效果"></a>4. 在我自己静音视频的生成效果</h3><video width="100%" height="auto" controls="">  <source src="wsd_ge.mp4" type="video/mp4">  Your browser does not support the video tag.</video>]]></content>
      
      
      <categories>
          
          <category> 微软小冰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微软小冰 </tag>
            
            <tag> talking face generation </tag>
            
            <tag> 工作 </tag>
            
            <tag> 实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清华大学-猛狮无人驾驶实验室-自动驾驶环境感知组（ADEPT）- 交流学习</title>
      <link href="/2023/06/16/qing-hua/qing-hua/"/>
      <url>/2023/06/16/qing-hua/qing-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="1-清华大学-猛狮无人驾驶实验室介绍"><a href="#1-清华大学-猛狮无人驾驶实验室介绍" class="headerlink" title="1. 清华大学-猛狮无人驾驶实验室介绍"></a>1. 清华大学-猛狮无人驾驶实验室介绍</h3><p>​清华大学猛狮无人车团队隶属于清华大学车辆学院与计算机系，由中国工程院院士李德毅及清华大学李克强教授指导。 自实验室自成立以来，多次获得世界级、国家级无人驾驶大赛冠亚军，进行多次无人驾驶公开演示，先后培养博士、硕士等顶尖人才百余人，在国际人工智能领域属于顶尖水平。目前共有研究员、博士后等在职人员十余人。主要从事无人车、机器人等方向的研发，研究方向涉及基于图像、LiDAR、RaDAR等多传感器融合的车道线检测、三维目标检测等。实验室拥有多台自动驾驶试验平台，并具备成熟的实验条件，相关的算法及产品已经在室内外环境进行多次公开演示，在国内人工智能领域属于顶尖水平，有较高知名度。</p><h3 id="2-实验室相关课题"><a href="#2-实验室相关课题" class="headerlink" title="2.实验室相关课题"></a>2.实验室相关课题</h3><h4 id="2-1-VICAD车路协同自动驾驶"><a href="#2-1-VICAD车路协同自动驾驶" class="headerlink" title="2.1 VICAD车路协同自动驾驶"></a>2.1 VICAD车路协同自动驾驶</h4><p><img src="/2023/06/16/qing-hua/qing-hua/1.PNG"></p><h5 id="2-1-1-概念"><a href="#2-1-1-概念" class="headerlink" title="2.1.1 概念"></a>2.1.1 概念</h5><ol><li>车路协同自动驾驶（Vehicle Infrastructure Cooperated Autonomous Driving，VICAD）  </li><li>车路协同自动驾驶是在单车智能自动驾驶的基础上，借助C-V2X和4G/5G通信技术，将“人-车- 路-云”交通要素有机地联系在一起，实现车与车（V2V）、车与道路（V2I，主要指道路各类系统 和设备设施，如感知设施、气象检测器、状态监测设备、交通诱导与控制设施等）、车与云（V2N， 地图平台、交管平台、出行服务平台等）和车与人（V2P）等的全方位协同配合（如协同感知、协同 决策规划、协同控制等），从而满足不同等级自动驾驶车辆应用需求（如辅助驾驶、高等级自动驾 驶），实现自动驾驶单车最优化和交通全局最优化发展目标  </li><li>“V”是Vehicle，包括不同网联等级和自动化程度的车辆  </li><li>“I”则是Infrastructure，一般代指路端智能基础设施及环境，包括但不限于  <ol><li>1）道路工程及配套附属设施（路面、道路标志标识、信号灯、照明、供电等设施）； 2）智能感知设施（摄像头、毫米波雷达、激光雷达等）； 3）车路通信设施（直连无线通信设施、蜂窝移动通信设施）； 4）计算控制设施（路侧边缘计算节点、多接入边缘云或各级云服务平台）； 5）高精度地图与辅助定位设施； 6）其他配套附属设备设施（如供能、照明设施）； 7）道路上承载的各类人员（如行人、施工人员、非机动车驾驶员等）。</li></ol></li></ol><h5 id="2-1-2-支撑技术"><a href="#2-1-2-支撑技术" class="headerlink" title="2.1.2 支撑技术"></a>2.1.2 支撑技术</h5><p>1）高可靠、低时延通信技术：包括无线通信和有线传输，其中无线通信又可分为直连无线通信（如 LTE-V2X PC5、NR-V2X PC5等）和蜂窝移动通信（包括4G、5G，以及未来演进的6G）两类， 有线传输则包括CAN、车载以太网、光纤网络等； 2）2D/3D高精度融合感知技术：包括传感器离线/在线高精度标定技术、多传感器融合技术、交通 事件感知认知技术、交通参与者行为预测技术、交通运行状况检测与预测技术等；  </p><p>3）高精度地图与高精度定位技术：包括高精度地图动态更新技术、路侧辅助定位技术等；  </p><p>4）车路协同决策与协同控制技术：包括自动驾驶意图预测、博弈仲裁、引导调度等协同决策规划， 车辆、设施、人等多目标协同控制技术；  </p><p>5）高性能云计算技术：包括高性能边缘计算技术、多级云控平台技术、大数据和人工智能平台技 术、算网一体智能调度技术；  </p><p>6）多级纵深安全技术：如自动驾驶功能安全与预期功能安全，信息安全技术（包括数据安全、网络 安全技术、地理信息安全等），安全统一认证技术、安全态势感知技术、安全主动防御技术等  </p><h5 id="2-1-3-V2X"><a href="#2-1-3-V2X" class="headerlink" title="2.1.3 V2X"></a>2.1.3 V2X</h5><ol><li>V2X（Vehicle to Everything）作为一种车用无线通信技术，是将车辆与一切事物相连接的新一代信息通信技术</li><li>车与车之间、车与行人以及车与路边基础设施之间（比如交通灯、路灯等）、车与云端等进行信息交互</li></ol><h5 id="2-1-4-C-V2X"><a href="#2-1-4-C-V2X" class="headerlink" title="2.1.4 C-V2X"></a>2.1.4 C-V2X</h5><ol><li>蜂窝（Cellular）V2X）是基于 3GPP 全球统一标准的通信技术，</li><li>C是指蜂窝（Cellular），它是基于3G/4G/5G等蜂窝网通信技术演进形成的车用无线通信技术，</li><li>“聪明的车”+“智慧的路”</li><li>通过V2X直连通信和蜂窝网络双重通信技术可实现更远距离和更大范围的可靠通信。</li><li>当单车智能陷入发展瓶颈后，C-V2X技术为智能驾驶产业发展提供了新的思路。C-V2X将“人、车、路、云”等交通参与要素有机联系在一起，能够探测车辆感知能力外的信息、检测潜在的隐患、甚至提前预测路况信息，可以说为车辆配上了“千里眼”和“顺风耳”， 实现整车“视觉”从百米到无限的延伸。简单的说就是，交通信息的共享可以降低智能驾驶车辆感知层的压力，在“聪明的车”与“智慧的路”双轮驱动下，C-V2X技术将持续推动智</li></ol><p><img src="/2023/06/16/qing-hua/qing-hua/2.PNG"></p><h5 id="2-1-5-车辆与车辆通讯（V2V）"><a href="#2-1-5-车辆与车辆通讯（V2V）" class="headerlink" title="2.1.5 车辆与车辆通讯（V2V）"></a>2.1.5 车辆与车辆通讯（V2V）</h5><p>​V2V指的是车辆之间实现车辆基础信息的交互共享，通过对其他车辆的基础信息信理，能够判断周边车辆驾驶情况，从而提前进行驾驶规划。例如提前避让紧急车辆（消防车、救护车、警车）、碰撞预警、协作式车辆汇入、协作式车辆编队管理等功能。</p><h5 id="2-1-6-车辆与行人通讯（V2P）"><a href="#2-1-6-车辆与行人通讯（V2P）" class="headerlink" title="2.1.6 车辆与行人通讯（V2P）"></a>2.1.6 车辆与行人通讯（V2P）</h5><p>​V2P指的是车与人之间实现交通信息的共享交互。未来人们的移动智能终端可以作为V2P通信连接的单元节点，车辆实时接收行人位置，分析行人行为，预判行人的运动轨迹，从而调整驾驶决策。例如行人主动避让功能</p><h5 id="2-1-7-车辆与基础设施通讯（V2I）"><a href="#2-1-7-车辆与基础设施通讯（V2I）" class="headerlink" title="2.1.7 车辆与基础设施通讯（V2I）"></a>2.1.7 车辆与基础设施通讯（V2I）</h5><p>​V2I指的是车辆与路测基础设施的通信(如红绿灯、交通摄像头、路侧单元等)的通讯，也就是所谓的”智慧的路“，除了常规的限速预警、道路标识提醒，路侧基础设施也可以获取附近区域车辆的信息并发布各种实时信息，还可以下发引导信息对车辆进行行驶路径规划，，如道路施工、闯红灯预警、动态车道管理等功能。</p><h5 id="2-1-8-车辆与互联网通讯（V2N）"><a href="#2-1-8-车辆与互联网通讯（V2N）" class="headerlink" title="2.1.8 车辆与互联网通讯（V2N）"></a>2.1.8 车辆与互联网通讯（V2N）</h5><p>​V2N是指车载设备通过接入网/核心网与云平台连接，云平台与车辆之间进行数据交互，并对获取的数据进行存储和处理，提供车辆所需要的各类应用服务。V2N通信主要应用于车辆导航、车辆远程监控、紧急救援、信息娱乐服务等。</p><h4 id="2-2-车路协同定位"><a href="#2-2-车路协同定位" class="headerlink" title="2.2 车路协同定位"></a>2.2 车路协同定位</h4><h5 id="2-2-1-概念-分类"><a href="#2-2-1-概念-分类" class="headerlink" title="2.2.1 概念 分类"></a>2.2.1 概念 分类</h5><ol><li>确定车身精确的坐标和航向角，线速度，角速度 </li><li>定位模块接收车辆传感器的实时数据，通过多个传感器多层级融合的结果，并结合地图的信息匹配，提供车辆实时的位置和姿态角 </li><li>分类： 1. Lidar 2. Visual 3. Fusion</li></ol><h5 id="2-2-2-LiDAR"><a href="#2-2-2-LiDAR" class="headerlink" title="2.2.2 LiDAR"></a>2.2.2 LiDAR</h5><p><img src="/2023/06/16/qing-hua/qing-hua/3.png"></p><ol><li><p>HypLiLoc: Towards Effective LiDAR Pose Regression with Hyperbolic Fusion-CVPR2023</p><p><img src="/2023/06/16/qing-hua/qing-hua/4.png"></p></li><li><p>Slice Transformer and Self-supervised Learning for 6DoF Localization in 3D Point Cloud Maps-CVPR2023</p><p><img src="/2023/06/16/qing-hua/qing-hua/5.png"></p></li><li><p>PointLoc: Deep Pose Regressor for LiDAR Point Cloud Localization-2021</p><p><img src="/2023/06/16/qing-hua/qing-hua/6.png"></p></li><li><p>L3-Net: Towards Learning based LiDAR Localization for Autonomous Driving-CVPR2019</p></li></ol><h5 id="2-2-3-Visual"><a href="#2-2-3-Visual" class="headerlink" title="2.2.3 Visual"></a>2.2.3 Visual</h5><p><img src="/2023/06/16/qing-hua/qing-hua/7.png"></p><ol><li><p>OrienterNet: Visual Localization in 2D Public Maps with Neural Matching-CVPR2023</p><p><img src="/2023/06/16/qing-hua/qing-hua/8.png"></p></li><li><p>CROSSFIRE: Camera Relocalization On Self-Supervised Features from an Implicit Representation-CVPR2023</p><p><img src="/2023/06/16/qing-hua/qing-hua/9.png"></p></li><li><p>CyberLoc: Towards Accurate Long-term Visual Localization-CVPR2023</p><p><img src="/2023/06/16/qing-hua/qing-hua/10.png"></p></li><li><p>6D Camera Relocalization in Visually Ambiguous Extreme Environments-CVPR2022</p><p><img src="/2023/06/16/qing-hua/qing-hua/11.png"></p></li><li><p>S3E-GNN: Sparse Spatial Scene Embedding with Graph Neural Networks for Camera Relocalization-CVPR2022</p><p><img src="/2023/06/16/qing-hua/qing-hua/12.png"></p></li><li><p>ImPosing: Implicit Pose Encoding for Efficient Visual Localization-WACV2023</p></li></ol><h5 id="2-2-4-Fusion"><a href="#2-2-4-Fusion" class="headerlink" title="2.2.4 Fusion"></a>2.2.4 Fusion</h5><p><img src="/2023/06/16/qing-hua/qing-hua/13.png"></p><ol><li><p>FusionLoc: Camera-2D LiDAR Fusion Using Multi-Head Self-Attention for End-to-End Serving Robot Relocalization-CVPR2023</p><p><img src="/2023/06/16/qing-hua/qing-hua/14.png"></p></li><li><p>Continuous Self-Localization on Aerial Images Using Visual and Lidar Sensors-2022</p><p><img src="/2023/06/16/qing-hua/qing-hua/15.png"></p></li><li><p>DA4AD: End-to-End Deep Attention-based Visual Localization for Autonomous Driving-ECCV2020</p><p><img src="/2023/06/16/qing-hua/qing-hua/16.png"></p></li><li><p>High Definition Map-Based Localization UsingADAS Environment Sensors for Application toAutomated Driving Vehicles-2020</p><p><img src="/2023/06/16/qing-hua/qing-hua/17.png"></p></li><li><p>CMRNet++: Map and Camera Agnostic Monocular Visual Localization in LiDAR Maps-CVPR2020</p><p><img src="/2023/06/16/qing-hua/qing-hua/18.png"></p></li><li><p>Exploiting Sparse Semantic HD Maps for Self-Driving Vehicle Localization-2019</p></li></ol><h5 id="2-2-5-总结"><a href="#2-2-5-总结" class="headerlink" title="2.2.5 总结"></a>2.2.5 总结</h5><table><thead><tr><th>类别</th><th>论文</th><th>出处</th><th>传感器</th><th>地图</th><th>特点</th><th>数据集</th></tr></thead><tbody><tr><td>Lidar</td><td>HypLiLoc</td><td>CVPR2023</td><td>LiDAR</td><td>无</td><td>GNN</td><td>Oxford Radar RobotCar，vReLoc</td></tr><tr><td>Slice -Tranr</td><td>CVPR2023</td><td>LiDAR</td><td>无</td><td>Transformer</td><td>Perth-WA，Appolo-Southbay</td><td></td></tr><tr><td>PointLoc</td><td>2021</td><td>LiDAR</td><td>无</td><td></td><td>Oxford Radar RobotCar，vReLoc</td><td></td></tr><tr><td>L3-Net</td><td>CVPR2019</td><td>LiDAR</td><td>LiDAR地图</td><td></td><td>Apollo-SouthBay，</td><td></td></tr><tr><td>Visual</td><td>OrienterNet</td><td>CVPR2023</td><td>Camera GPS</td><td>OpenStreetMap</td><td>BEV-map</td><td>KITTI，Aria，Mapillary Geo-Localization</td></tr><tr><td>CROSSFIRE</td><td>CVPR2023</td><td>Camera</td><td>无</td><td>neural renderer</td><td>7scenes，Cambridge Landmarks</td><td></td></tr><tr><td>CyberLoc</td><td>CVPR2023</td><td>Camera</td><td>SFM，map</td><td>sequence</td><td>4seasons</td><td></td></tr><tr><td>6D Camera</td><td>CVPR2022</td><td>Camera</td><td>SFM，map</td><td>sequence</td><td>Aqualoc，Mars-Analogue，7-Scenes</td><td></td></tr><tr><td>S3E-GNN</td><td>CVPR2022</td><td>Camera</td><td>Pose Graph</td><td>GNN sequence</td><td>ge</td><td></td></tr><tr><td>ImPosing</td><td>WACV2023</td><td>Camera</td><td>initial map</td><td></td><td>Oxford RobotCar，Daoxiang Lake，4 seasons</td><td></td></tr><tr><td>Fusion</td><td>FusionLoc</td><td>CVPR2023</td><td>LiDAR Camera</td><td>无</td><td>attention</td><td>ge</td></tr><tr><td>DA4AD</td><td>ECCV2020</td><td>LiDAR Camera</td><td>Map Point Cloud，Map Image，Map Database</td><td></td><td>ge</td><td></td></tr><tr><td>CMRNet++</td><td>CVPR2020</td><td>LiDAR Camera</td><td>ge_LiDAR-map</td><td></td><td>KITTI, Argoverse, and Lyft5</td><td></td></tr><tr><td>Exploiting</td><td>2019</td><td>Lidar camera GPS IMU</td><td>Lightweight MapBEV Sign Map</td><td></td><td>ge</td><td></td></tr></tbody></table><h4 id="2-3-BEV路端感知"><a href="#2-3-BEV路端感知" class="headerlink" title="2.3 BEV路端感知"></a>2.3 BEV路端感知</h4><h4 id="2-4-三维目标检测追踪"><a href="#2-4-三维目标检测追踪" class="headerlink" title="2.4 三维目标检测追踪"></a>2.4 三维目标检测追踪</h4><h4 id="2-5-视觉激光雷达时空一体化标定"><a href="#2-5-视觉激光雷达时空一体化标定" class="headerlink" title="2.5 视觉激光雷达时空一体化标定"></a>2.5 视觉激光雷达时空一体化标定</h4><h4 id="2-6-无初值的视觉激光雷达自动标定"><a href="#2-6-无初值的视觉激光雷达自动标定" class="headerlink" title="2.6 无初值的视觉激光雷达自动标定"></a>2.6 无初值的视觉激光雷达自动标定</h4><h4 id="2-7-港口重复纹理场景下基于线面特征融合的车辆自定位"><a href="#2-7-港口重复纹理场景下基于线面特征融合的车辆自定位" class="headerlink" title="2.7 港口重复纹理场景下基于线面特征融合的车辆自定位"></a>2.7 港口重复纹理场景下基于线面特征融合的车辆自定位</h4><h4 id="2-8-3D点云特征子"><a href="#2-8-3D点云特征子" class="headerlink" title="2.8 3D点云特征子"></a>2.8 3D点云特征子</h4><h4 id="2-9-基于激光雷达和4D毫米波雷达数据融合的高动态场景车辆定位技术"><a href="#2-9-基于激光雷达和4D毫米波雷达数据融合的高动态场景车辆定位技术" class="headerlink" title="2.9 基于激光雷达和4D毫米波雷达数据融合的高动态场景车辆定位技术"></a>2.9 基于激光雷达和4D毫米波雷达数据融合的高动态场景车辆定位技术</h4><h4 id="2-10-基于CARLA-和-OpenCDA的协同驾驶仿真平台"><a href="#2-10-基于CARLA-和-OpenCDA的协同驾驶仿真平台" class="headerlink" title="2.10 基于CARLA 和 OpenCDA的协同驾驶仿真平台"></a>2.10 基于CARLA 和 OpenCDA的协同驾驶仿真平台</h4><h4 id="2-11-自动驾驶低光照道路分割"><a href="#2-11-自动驾驶低光照道路分割" class="headerlink" title="2.11 自动驾驶低光照道路分割"></a>2.11 自动驾驶低光照道路分割</h4><h4 id="2-12-自动驾驶感知模型的可解释性"><a href="#2-12-自动驾驶感知模型的可解释性" class="headerlink" title="2.12 自动驾驶感知模型的可解释性"></a>2.12 自动驾驶感知模型的可解释性</h4><h4 id="2-13-点云-图像融合检测中背景压制算法"><a href="#2-13-点云-图像融合检测中背景压制算法" class="headerlink" title="2.13 点云-图像融合检测中背景压制算法"></a>2.13 点云-图像融合检测中背景压制算法</h4><h4 id="2-14-不良光照场景3D目标检测"><a href="#2-14-不良光照场景3D目标检测" class="headerlink" title="2.14 不良光照场景3D目标检测"></a>2.14 不良光照场景3D目标检测</h4>]]></content>
      
      
      <categories>
          
          <category> 清华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动驾驶 </tag>
            
            <tag> 清华 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-各大工业视觉软件分析</title>
      <link href="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/"/>
      <url>/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-IRV"><a href="#1-IRV" class="headerlink" title="1. IRV"></a>1. IRV</h3><h4 id="1-1-软件框架"><a href="#1-1-软件框架" class="headerlink" title="1.1 软件框架"></a>1.1 软件框架</h4><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/1.png"></p><h4 id="1-2-工具、序列执行特点"><a href="#1-2-工具、序列执行特点" class="headerlink" title="1.2 工具、序列执行特点"></a>1.2 工具、序列执行特点</h4><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/2.png"></p><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/3.png"></p><h3 id="2-visionpro"><a href="#2-visionpro" class="headerlink" title="2. visionpro"></a>2. visionpro</h3><p>VisionPro是美国康耐视公司开发的一套基于.NET的视觉软件，VisionPro 快速原型设计环境将高级编程的先进性和灵活性与易于开发性相结合，兼具易用性和深度定制特性， VisionPro适于任何人使用、拖放、手写或编程，VisionPro全面支持所有模式的开发；其中VisionPro QuickBuild可建立一个包含多个作业的的应用程序，可根据检测需求选择相应工具进行编程。</p><h4 id="2-1-软件框架"><a href="#2-1-软件框架" class="headerlink" title="2.1 软件框架"></a>2.1 软件框架</h4><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/4.png"></p><p>按照检测需求的不同选择所需工具，采用拖拉式图形编程模式，简单易操作</p><h4 id="2-2-工具、序列执行特点"><a href="#2-2-工具、序列执行特点" class="headerlink" title="2.2 工具、序列执行特点"></a>2.2 工具、序列执行特点</h4><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/5.png"></p><h3 id="3-海康威视"><a href="#3-海康威视" class="headerlink" title="3. 海康威视"></a>3. 海康威视</h3><p>算法平台：视觉定位、尺寸测量、缺陷检测以及信息识别等机器视觉应用</p><h4 id="3-1-软件框架"><a href="#3-1-软件框架" class="headerlink" title="3.1 软件框架"></a>3.1 软件框架</h4><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/6.png"></p><h4 id="3-2-工具列表"><a href="#3-2-工具列表" class="headerlink" title="3.2 工具列表"></a>3.2 工具列表</h4><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/7.png"></p><h4 id="3-3-典型应用"><a href="#3-3-典型应用" class="headerlink" title="3.3 典型应用"></a>3.3 典型应用</h4><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/8.png"></p><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/9.png"></p><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/10.png"></p><h3 id="4-基恩士XG"><a href="#4-基恩士XG" class="headerlink" title="4. 基恩士XG"></a>4. 基恩士XG</h3><h4 id="4-1-软件框架"><a href="#4-1-软件框架" class="headerlink" title="4.1 软件框架"></a>4.1 软件框架</h4><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/11.png"></p><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/12.png"></p><h4 id="4-2-序列案例"><a href="#4-2-序列案例" class="headerlink" title="4.2 序列案例"></a>4.2 序列案例</h4><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/13.png"></p><h3 id="5-基恩士XV"><a href="#5-基恩士XV" class="headerlink" title="5. 基恩士XV"></a>5. 基恩士XV</h3><h4 id="5-1-软件框架"><a href="#5-1-软件框架" class="headerlink" title="5.1 软件框架"></a>5.1 软件框架</h4><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/14.png"></p><h4 id="5-2-工具、序列执行特点"><a href="#5-2-工具、序列执行特点" class="headerlink" title="5.2 工具、序列执行特点"></a>5.2 工具、序列执行特点</h4><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/15.png"></p><p>1、按照检测需求来分类，分为7类（有无、瑕疵、位置、几何测量、计数、识别、图形显示）<br>2、将未分类到需求中的工具，整合至功能一览<br>3、常用的计算功能与位置偏移补正各单独为一类</p><h3 id="6-康耐视insight"><a href="#6-康耐视insight" class="headerlink" title="6. 康耐视insight"></a>6. 康耐视insight</h3><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/16.png"></p><h3 id="7-麒麟"><a href="#7-麒麟" class="headerlink" title="7. 麒麟"></a>7. 麒麟</h3><p><img src="/2023/03/24/gong-zuo-jing-li/8-ge-da-gong-ye-shi-jue-ruan-jian-fen-xi/17.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工作经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工业视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-深度学习缺陷检测</title>
      <link href="/2023/03/24/gong-zuo-jing-li/7-shen-du-xue-xi-que-xian-jian-ce/"/>
      <url>/2023/03/24/gong-zuo-jing-li/7-shen-du-xue-xi-que-xian-jian-ce/</url>
      
        <content type="html"><![CDATA[<h3 id="1-灌装项目背景介绍"><a href="#1-灌装项目背景介绍" class="headerlink" title="1. 灌装项目背景介绍"></a>1. 灌装项目背景介绍</h3><p><img src="/2023/03/24/gong-zuo-jing-li/7-shen-du-xue-xi-que-xian-jian-ce/4.png"></p><h3 id="2-灌装检测设备工作流程"><a href="#2-灌装检测设备工作流程" class="headerlink" title="2. 灌装检测设备工作流程"></a>2. 灌装检测设备工作流程</h3><p><img src="/2023/03/24/gong-zuo-jing-li/7-shen-du-xue-xi-que-xian-jian-ce/1.png"></p><h3 id="3-灌装检测内容和指标"><a href="#3-灌装检测内容和指标" class="headerlink" title="3. 灌装检测内容和指标"></a>3. 灌装检测内容和指标</h3><p><img src="/2023/03/24/gong-zuo-jing-li/7-shen-du-xue-xi-que-xian-jian-ce/2.png"></p><h3 id="4-罐装检测硬件布局"><a href="#4-罐装检测硬件布局" class="headerlink" title="4. 罐装检测硬件布局"></a>4. 罐装检测硬件布局</h3><p><img src="/2023/03/24/gong-zuo-jing-li/7-shen-du-xue-xi-que-xian-jian-ce/3.png"></p><h3 id="5-罐装检测光学方案"><a href="#5-罐装检测光学方案" class="headerlink" title="5. 罐装检测光学方案"></a>5. 罐装检测光学方案</h3><h4 id="5-1-瓶盖检测"><a href="#5-1-瓶盖检测" class="headerlink" title="5.1 瓶盖检测"></a>5.1 瓶盖检测</h4><p><img src="/2023/03/24/gong-zuo-jing-li/7-shen-du-xue-xi-que-xian-jian-ce/5.png"></p><h4 id="5-2-单提环检测"><a href="#5-2-单提环检测" class="headerlink" title="5.2 单提环检测"></a>5.2 单提环检测</h4><p><img src="/2023/03/24/gong-zuo-jing-li/7-shen-du-xue-xi-que-xian-jian-ce/6.png"></p><h4 id="5-3-标贴检测"><a href="#5-3-标贴检测" class="headerlink" title="5.3 标贴检测"></a>5.3 标贴检测</h4><p><img src="/2023/03/24/gong-zuo-jing-li/7-shen-du-xue-xi-que-xian-jian-ce/7.png"></p><h4 id="5-4-装箱点数"><a href="#5-4-装箱点数" class="headerlink" title="5.4 装箱点数"></a>5.4 装箱点数</h4><p><img src="/2023/03/24/gong-zuo-jing-li/7-shen-du-xue-xi-que-xian-jian-ce/8.png"></p><h4 id="5-5-喷码检测"><a href="#5-5-喷码检测" class="headerlink" title="5.5 喷码检测"></a>5.5 喷码检测</h4><p><img src="/2023/03/24/gong-zuo-jing-li/7-shen-du-xue-xi-que-xian-jian-ce/9.png"></p><h4 id="5-6-贴标4检测"><a href="#5-6-贴标4检测" class="headerlink" title="5.6 贴标4检测"></a>5.6 贴标4检测</h4><p><img src="/2023/03/24/gong-zuo-jing-li/7-shen-du-xue-xi-que-xian-jian-ce/10.png"></p><h4 id="5-7-把手检测"><a href="#5-7-把手检测" class="headerlink" title="5.7 把手检测"></a>5.7 把手检测</h4><p><img src="/2023/03/24/gong-zuo-jing-li/7-shen-du-xue-xi-que-xian-jian-ce/11.png"></p><h3 id="6-二维码检测"><a href="#6-二维码检测" class="headerlink" title="6. 二维码检测"></a>6. 二维码检测</h3><p>二维码识别</p><h4 id="6-1-光学方案"><a href="#6-1-光学方案" class="headerlink" title="6.1 光学方案"></a>6.1 光学方案</h4><p><img src="/2023/03/24/gong-zuo-jing-li/7-shen-du-xue-xi-que-xian-jian-ce/12.png"></p><h4 id="6-2-图像效果"><a href="#6-2-图像效果" class="headerlink" title="6.2 图像效果"></a>6.2 图像效果</h4><p><img src="/2023/03/24/gong-zuo-jing-li/7-shen-du-xue-xi-que-xian-jian-ce/13.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工作经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习缺陷检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-OLED圆形手表屏幕缺陷检测</title>
      <link href="/2023/03/24/gong-zuo-jing-li/6-oled-yuan-xing-shou-biao-ping-mu-que-xian-jian-ce/"/>
      <url>/2023/03/24/gong-zuo-jing-li/6-oled-yuan-xing-shou-biao-ping-mu-que-xian-jian-ce/</url>
      
        <content type="html"><![CDATA[<h3 id="1-项目背景"><a href="#1-项目背景" class="headerlink" title="1. 项目背景"></a>1. 项目背景</h3><p><img src="/2023/03/24/gong-zuo-jing-li/6-oled-yuan-xing-shou-biao-ping-mu-que-xian-jian-ce/1.png"></p><h3 id="2-OLED屏幕工艺"><a href="#2-OLED屏幕工艺" class="headerlink" title="2. OLED屏幕工艺"></a>2. OLED屏幕工艺</h3><p><img src="/2023/03/24/gong-zuo-jing-li/6-oled-yuan-xing-shou-biao-ping-mu-que-xian-jian-ce/2.png"></p><p>OLED，LCD区别：</p><ol><li>LCD：被动发光，由背光，偏光片，TFT玻璃基板，液晶，偏光片，CG组成</li><li>OLED：自发光，由TFT ，有机自发光层，偏光片组成</li></ol><p><img src="/2023/03/24/gong-zuo-jing-li/6-oled-yuan-xing-shou-biao-ping-mu-que-xian-jian-ce/3.png"></p><p>产品组成：客户主要为贴敷2部分产品</p><p>底部有机发光层：此部分在客户现场存在AOI检测，只检测发光亮度，电流，颜色等</p><p>上部盖板玻璃偏光片部分：此部分是一个客户外购的一个整体。</p><h3 id="3-检测缺陷"><a href="#3-检测缺陷" class="headerlink" title="3. 检测缺陷"></a>3. 检测缺陷</h3><p><img src="/2023/03/24/gong-zuo-jing-li/6-oled-yuan-xing-shou-biao-ping-mu-que-xian-jian-ce/4.png"></p><p>缺陷种类：暗线，亮线，断线，暗点（大于2个像素点），亮点，黄团，分屏，画面异常，碎亮点，麻点斑，PS漏光，PT不良</p><h3 id="4-项目光学方案"><a href="#4-项目光学方案" class="headerlink" title="4.项目光学方案"></a>4.项目光学方案</h3><p><img src="/2023/03/24/gong-zuo-jing-li/6-oled-yuan-xing-shou-biao-ping-mu-que-xian-jian-ce/5.png"></p><ol><li>A(9M彩色)：亮度/色彩缺陷（45度视角），贴合偏移</li><li>B(5M黑白)：底部漏光，贴合偏移，背光缺陷</li><li>C(5M黑白)：贴合偏移</li><li>D(5M黑白)：顶部漏光，贴合偏移，背光缺陷</li><li>E(9M彩色)：亮度/色彩缺陷（90度视角），贴合偏移，亮度/色温/色坐标计算</li><li>F(9M黑白)：过滤灰尘，显示偏移，亮度缺陷（黑色画面）</li><li>G(1.3M黑白)：亮度缺陷（极低对比度），屏闪</li></ol><h3 id="5-项目总结"><a href="#5-项目总结" class="headerlink" title="5. 项目总结"></a>5. 项目总结</h3><ol><li>第一次设计验证了 7 相机 OLED 屏幕检测方案，为公司开拓了OLED-AOI屏幕检测市场</li><li>修改圆形检测分割算法，为以后做圆形屏幕检测做了铺垫</li><li>检测小尺寸手表屏幕，了解了凌云高士的检测方案，为之后做小尺寸屏幕检测，修改检测方案，提供了经验。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 屏幕AOI视觉检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-屏幕AOI视觉检测项目</title>
      <link href="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/"/>
      <url>/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-LCD手机屏幕结构"><a href="#1-LCD手机屏幕结构" class="headerlink" title="1. LCD手机屏幕结构"></a>1. LCD手机屏幕结构</h3><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/1.png"></p><h4 id="1-1-CG-盖板玻璃"><a href="#1-1-CG-盖板玻璃" class="headerlink" title="1.1 CG 盖板玻璃"></a>1.1 CG 盖板玻璃</h4><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/2.png"></p><ol><li><p>形状划分：2D 2.5D 3D</p><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/3.png"></p></li><li><p>工艺划分：白玻璃和丝印玻璃</p></li></ol><h4 id="1-2-CELL-液晶"><a href="#1-2-CELL-液晶" class="headerlink" title="1.2 CELL 液晶"></a>1.2 CELL 液晶</h4><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/4.png"></p><ol><li>一个液晶屏是两片玻璃对合而成的，上面的CF负责色彩显示，下面的TFT负责电路控制， TFT上面印刷有<br>电路</li><li>TFT和CF门电路开关控制每个像素点的RGB灯亮暗程度</li><li>PI导向膜是mura主要成因之一</li></ol><h4 id="1-3-BM-背光模组"><a href="#1-3-BM-背光模组" class="headerlink" title="1.3 BM 背光模组"></a>1.3 BM 背光模组</h4><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/5.png"></p><ol><li>侧光式BM容易出现漏光缺陷</li><li>即使品质过关的手机屏幕边缘均匀性也不好</li><li>部分手机使用OLED（有机自发光，不需要背光）</li></ol><h3 id="2-手机子项目与检测需求"><a href="#2-手机子项目与检测需求" class="headerlink" title="2. 手机子项目与检测需求"></a>2. 手机子项目与检测需求</h3><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/6.png"></p><p>各检测项目在工艺中的流程顺序：</p><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/7.png"></p><h3 id="3-Cell检测"><a href="#3-Cell检测" class="headerlink" title="3. Cell检测"></a>3. Cell检测</h3><h4 id="3-1-Cell检测需求"><a href="#3-1-Cell检测需求" class="headerlink" title="3.1 Cell检测需求"></a>3.1 Cell检测需求</h4><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/8.png"></p><h4 id="3-2-Cell检测原理"><a href="#3-2-Cell检测原理" class="headerlink" title="3.2 Cell检测原理"></a>3.2 Cell检测原理</h4><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/18.png"></p><h3 id="4-背光检测"><a href="#4-背光检测" class="headerlink" title="4. 背光检测"></a>4. 背光检测</h3><h4 id="4-1-背光检测需求"><a href="#4-1-背光检测需求" class="headerlink" title="4.1 背光检测需求"></a>4.1 背光检测需求</h4><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/9.png"></p><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/17.png"></p><h4 id="4-2-背光检测原理"><a href="#4-2-背光检测原理" class="headerlink" title="4.2 背光检测原理"></a>4.2 背光检测原理</h4><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/12.png"></p><ol><li>工位1：上料工位</li><li>工位2：为按压工位，用于检测按压下的白点</li><li>工位3：为主检测工位，在不撕膜的状态下进行背光模组的点亮后缺陷检测 </li><li>工位四：下料工位</li></ol><p>注：由于外表面灰尘不判定为缺陷，因此检测时需要考虑过滤灰尘，在工位3上实现</p><h4 id="4-3-工位2按压检测"><a href="#4-3-工位2按压检测" class="headerlink" title="4.3 工位2按压检测"></a>4.3 工位2按压检测</h4><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/20.png"></p><p>此工位主要利用透明薄膜，依靠下部气体抽真空来进行吸附按压，实现按压检测。现在按压检测是各背光模组厂要求的必检项目，主要检测按压下才可见的缺陷。相机距离背光模组依然为300~400mm可调。</p><h4 id="4-4-工位3主检测"><a href="#4-4-工位3主检测" class="headerlink" title="4.4 工位3主检测"></a>4.4 工位3主检测</h4><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/21.png"></p><p>此工位为主检测工位，在不撕膜状态下进行背光模组的点亮后缺陷检测。主要包括正上方A相机与四个侧面45°相机，以及平行于长边的两个条形光源。</p><h3 id="5-LCM外观检测"><a href="#5-LCM外观检测" class="headerlink" title="5. LCM外观检测"></a>5. LCM外观检测</h3><h4 id="5-1-LCM外观检测需求"><a href="#5-1-LCM外观检测需求" class="headerlink" title="5.1 LCM外观检测需求"></a>5.1 LCM外观检测需求</h4><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/10.png"></p><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/19.png"></p><h4 id="5-2-LCM外观检测原理"><a href="#5-2-LCM外观检测原理" class="headerlink" title="5.2 LCM外观检测原理"></a>5.2 LCM外观检测原理</h4><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/13.png"></p><h3 id="6-LCM模组检测"><a href="#6-LCM模组检测" class="headerlink" title="6. LCM模组检测"></a>6. LCM模组检测</h3><h4 id="6-1-LCM模组检测需求"><a href="#6-1-LCM模组检测需求" class="headerlink" title="6.1 LCM模组检测需求"></a>6.1 LCM模组检测需求</h4><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/11.png"></p><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/16.png"></p><h4 id="6-2-LCM模组检测方案与原理"><a href="#6-2-LCM模组检测方案与原理" class="headerlink" title="6.2 LCM模组检测方案与原理"></a>6.2 LCM模组检测方案与原理</h4><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/14.png"></p><h4 id="6-3-LCM模组硬件组成"><a href="#6-3-LCM模组硬件组成" class="headerlink" title="6.3 LCM模组硬件组成"></a>6.3 LCM模组硬件组成</h4><p><img src="/2023/03/24/gong-zuo-jing-li/5-ping-mu-aoi-shi-jue-jian-ce-xiang-mu/15.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工作经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 屏幕AOI视觉检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-FPC曝光机4相机UVW平台对位项目</title>
      <link href="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/"/>
      <url>/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-研发背景"><a href="#1-研发背景" class="headerlink" title="1. 研发背景"></a>1. 研发背景</h3><p>在FPC生产中，由于对位贴合不精准，造成FPC曝光不精确，造成FPC成品缺陷，影响生产率，故增加CCD对位，精准对位，提高FPC生产良率。</p><h3 id="2-系统解决方案"><a href="#2-系统解决方案" class="headerlink" title="2. 系统解决方案"></a>2. 系统解决方案</h3><ol><li>系统名称：基于UVW平台的4相机FPC曝光机视觉对位方案</li><li>解决方案：根据FPC曝光机的生产工艺，通过在FPC上方安装4个上相机，实现4上相机的自动在线引导，根据要求，进行对位贴合检测，有效提高产品品质和生产效率。</li><li>检测方式：对FPC进行位置检测，对上下平台曝光网版，进行在线全自动、非接触引导对位，并测量对位精度。</li><li>视觉主要功能：视觉检测FPC位置，将FPC 偏差值传给UVW平台，引导UVW平台进行贴合；视觉测量FPC位置精度</li></ol><h3 id="3-技术指标"><a href="#3-技术指标" class="headerlink" title="3. 技术指标"></a>3. 技术指标</h3><p>针对当前标准配置一拖四的方式，采用 4个 500 万相机，技术指标如下</p><table><thead><tr><th>技术项</th><th>技术参数</th><th>验收指标</th></tr></thead><tbody><tr><td>精度要求</td><td>视野16.8×14mm，像素当量为 6.8um/pixel</td><td>对位精度≤±5um  视野范围&gt;12.6×9.8mm</td></tr><tr><td>效率要求</td><td>4 个相机同时拍照，1个视觉控制器处理，4个相机综合输出1个结果发送给 UVW平台，实现对位，检测</td><td>三次时间不超过3s</td></tr><tr><td>检测内容</td><td>相机自动寻找靶点，实现对位与精度检测，相机，背光，兼容250-610mm尺寸</td><td>兼容250-610mm尺寸检测</td></tr></tbody></table><h3 id="4-流程图"><a href="#4-流程图" class="headerlink" title="4. 流程图"></a>4. 流程图</h3><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/1.png"></p><h3 id="5-系统方案安装示意图"><a href="#5-系统方案安装示意图" class="headerlink" title="5. 系统方案安装示意图"></a>5. 系统方案安装示意图</h3><p>500 万相机+远心 镜头；上4相机工作距离 110mm，视野长边 16.8mm</p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/2.png"></p><p>检测原理：</p><ol><li>用到4个相机，联合标定，统一到一个图像坐标系中</li><li>已知初始，UVW可以带动上下平台通过UV移动精准贴合到FPC上的，初始FPC位置，且UVW平台旋转中心在上下平台中心</li><li>四个相机拍四个角的靶点，识别出4个靶点的圆心，对角圆心，识别为2条对角线，两条对角线交点为FPC中心</li><li>以对角线其中的一条，与初始模版对角线计算偏差，计算出角度偏差</li><li>以对角线交点，与初始模版的对角线交点做平移偏差，计算出平移偏差</li><li>角度偏差与平移偏差，给到UVW平台，带动上下平台移动</li></ol><h3 id="6-UVW平台介绍"><a href="#6-UVW平台介绍" class="headerlink" title="6. UVW平台介绍"></a>6. UVW平台介绍</h3><h4 id="6-1-UVW平台结构"><a href="#6-1-UVW平台结构" class="headerlink" title="6.1 UVW平台结构"></a>6.1 UVW平台结构</h4><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/3.png"></p><h4 id="6-2-UVW平台组装方式"><a href="#6-2-UVW平台组装方式" class="headerlink" title="6.2 UVW平台组装方式"></a>6.2 UVW平台组装方式</h4><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/4.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/5.png"></p><h4 id="6-3-UVW平台坐标系定义"><a href="#6-3-UVW平台坐标系定义" class="headerlink" title="6.3 UVW平台坐标系定义"></a>6.3 UVW平台坐标系定义</h4><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/6.png"></p><h3 id="7-UVW平台执行动作原理"><a href="#7-UVW平台执行动作原理" class="headerlink" title="7. UVW平台执行动作原理"></a>7. UVW平台执行动作原理</h3><h4 id="7-1-动作说明"><a href="#7-1-动作说明" class="headerlink" title="7.1 动作说明"></a>7.1 动作说明</h4><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/7.png"></p><h4 id="7-2-直线运动"><a href="#7-2-直线运动" class="headerlink" title="7.2 直线运动"></a>7.2 直线运动</h4><h5 id="7-2-1-工作台无倾斜时-θ0-x3D-0时"><a href="#7-2-1-工作台无倾斜时-θ0-x3D-0时" class="headerlink" title="7.2.1 工作台无倾斜时(θ0=0时)"></a>7.2.1 工作台无倾斜时(θ0=0时)</h5><h6 id="7-2-1-1-向水平轴和垂直轴方向平行移动"><a href="#7-2-1-1-向水平轴和垂直轴方向平行移动" class="headerlink" title="7.2.1.1 向水平轴和垂直轴方向平行移动"></a>7.2.1.1 向水平轴和垂直轴方向平行移动</h6><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/8.png"></p><p>工作台无倾斜时，各轴模块的移动量即为工作台的移动量。</p><h6 id="7-2-1-2-X-Y-平行移动"><a href="#7-2-1-2-X-Y-平行移动" class="headerlink" title="7.2.1.2 X-Y 平行移动"></a>7.2.1.2 X-Y 平行移动</h6><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/9.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/10.png"></p><p>工作台无倾斜时，各轴模块移动量的总和即为工作台的移动量。</p><p>工作台的移动量为X轴方向的移动量和Y轴的移动量的综合</p><h5 id="7-2-2-工作台有倾斜时-θ0≠0时"><a href="#7-2-2-工作台有倾斜时-θ0≠0时" class="headerlink" title="7.2.2 工作台有倾斜时(θ0≠0时)"></a>7.2.2 工作台有倾斜时(θ0≠0时)</h5><h6 id="7-2-2-1-向倾斜方向平行移动"><a href="#7-2-2-1-向倾斜方向平行移动" class="headerlink" title="7.2.2.1 向倾斜方向平行移动"></a>7.2.2.1 向倾斜方向平行移动</h6><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/11.png"></p><p>当工作台有倾斜（θ0）时，如果使各轴的模块向 X 轴方向或 Y 轴方向移动，工作台则向该倾斜方向移动。</p><p>可用工作台倾斜方向的移动量 S 除以 Cosθ0，求出各轴模块的移动量</p><h6 id="7-2-2-2-向水平轴和垂直轴方向平行移动"><a href="#7-2-2-2-向水平轴和垂直轴方向平行移动" class="headerlink" title="7.2.2.2 向水平轴和垂直轴方向平行移动"></a>7.2.2.2 向水平轴和垂直轴方向平行移动</h6><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/12.png"></p><p>为了在保持工作台倾斜的状态下使工作台向水平轴方向或垂直轴方向移动，除了驱动工作台将要移动的方向的模块，还需要驱动与其相对的垂直方向的模块，以抵消工作台向倾斜方向的移動量</p><h4 id="7-3-旋转运动"><a href="#7-3-旋转运动" class="headerlink" title="7.3 旋转运动"></a>7.3 旋转运动</h4><h5 id="7-3-1、运动图解，参数定义"><a href="#7-3-1、运动图解，参数定义" class="headerlink" title="7.3.1、运动图解，参数定义"></a>7.3.1、运动图解，参数定义</h5><ol><li>UVW校准工作台不仅能以工作台中心为旋转中心旋转，还能以工作台上的任意位置为旋转中心旋转。</li><li>与旋转相关的计算公式非常复杂，但基本上可通过从工作台旋转后的位置中减去旋转前的模块的位置来求出各轴模块的移动量</li><li>关于各轴具体的移动量，需要以工作台的旋转量为基础，根据后述计算公式求出。</li></ol><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/13.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/14.png"></p><h5 id="7-3-2、以工作台中心为旋转中心作旋转运动"><a href="#7-3-2、以工作台中心为旋转中心作旋转运动" class="headerlink" title="7.3.2、以工作台中心为旋转中心作旋转运动"></a>7.3.2、以工作台中心为旋转中心作旋转运动</h5><h6 id="7-3-2-1、在工作台当前位置非原点的位置-X0-Y0-θ0-≠-0-0-0"><a href="#7-3-2-1、在工作台当前位置非原点的位置-X0-Y0-θ0-≠-0-0-0" class="headerlink" title="7.3.2.1、在工作台当前位置非原点的位置(X0,Y0,θ0)≠(0,0,0)"></a>7.3.2.1、在工作台当前位置非原点的位置(X0,Y0,θ0)≠(0,0,0)</h6><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/15.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 旋转4轴偏移量</span>SX1＝R•Cos<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θX1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">{</span>R•Sin<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θX1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R•Sin（θX1）<span class="token operator">-</span>Y0<span class="token punctuation">)</span><span class="token punctuation">}</span>•Tan<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span> R•Cos<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θX1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">{</span>R•Sin<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θX1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R•Sin<span class="token punctuation">(</span>θX2<span class="token punctuation">)</span><span class="token operator">-</span>Y0<span class="token punctuation">)</span><span class="token punctuation">}</span>•Tan<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>SX2＝R•Cos<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θX2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">{</span>R•Sin<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θX2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R•Sin（θX2）<span class="token operator">-</span>Y0<span class="token punctuation">)</span><span class="token punctuation">}</span>•Tan<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span> R•Cos<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θX2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">{</span>R•Sin<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θX2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R•Sin<span class="token punctuation">(</span>θX2<span class="token punctuation">)</span><span class="token operator">-</span>Y0<span class="token punctuation">)</span><span class="token punctuation">}</span>•Tan<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>SY1＝R•Sin<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θY1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">{</span>R•Cos<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θY1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R•Cos<span class="token punctuation">(</span>θY1<span class="token punctuation">)</span><span class="token operator">-</span>X0<span class="token punctuation">)</span><span class="token punctuation">}</span>•Tan<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span> R•Sin<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θY1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">{</span>R•Cos<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θY1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R•Cos<span class="token punctuation">(</span>θY1<span class="token punctuation">)</span><span class="token operator">-</span>X0<span class="token punctuation">)</span><span class="token punctuation">}</span>•Tan<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>SY2＝R•Sin<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θY2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">{</span>R•Cos<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θY2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R•Cos<span class="token punctuation">(</span>θY2<span class="token punctuation">)</span><span class="token operator">-</span>X0<span class="token punctuation">)</span><span class="token punctuation">}</span>•Tan<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span> R•Sin<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θY2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">{</span>R•Cos<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θY2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R•Cos<span class="token punctuation">(</span>θY2<span class="token punctuation">)</span><span class="token operator">-</span>X0<span class="token punctuation">)</span><span class="token punctuation">}</span>•Tan<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="7-3-2-2、工作台当前位置为原点位置-X0-Y0-x3D-0-0"><a href="#7-3-2-2、工作台当前位置为原点位置-X0-Y0-x3D-0-0" class="headerlink" title="7.3.2.2、工作台当前位置为原点位置(X0,Y0)=(0,0)"></a>7.3.2.2、工作台当前位置为原点位置(X0,Y0)=(0,0)</h6><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 旋转4轴偏移量</span>SX1＝R•Cos<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θX1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">{</span>R•Sin<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θX1<span class="token punctuation">)</span><span class="token operator">-</span>R•Sin<span class="token punctuation">(</span>θX1<span class="token punctuation">)</span><span class="token punctuation">}</span>•Tan<span class="token punctuation">(</span>Sθ<span class="token punctuation">)</span><span class="token operator">-</span>R•Cos<span class="token punctuation">(</span>θX1<span class="token punctuation">)</span>SX2＝R•Cos<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θX2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">{</span>R•Sin<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θX2<span class="token punctuation">)</span><span class="token operator">-</span>R•Sin<span class="token punctuation">(</span>θX2<span class="token punctuation">)</span><span class="token punctuation">}</span>•Tan<span class="token punctuation">(</span>Sθ<span class="token punctuation">)</span><span class="token operator">-</span>R•Cos<span class="token punctuation">(</span>θX2<span class="token punctuation">)</span>SY1＝R•Sin<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θY1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">{</span>R•Cos<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θY1<span class="token punctuation">)</span><span class="token operator">-</span>R•Cos <span class="token punctuation">(</span>θY1<span class="token punctuation">)</span> <span class="token punctuation">}</span>•Tan<span class="token punctuation">(</span>Sθ<span class="token punctuation">)</span><span class="token operator">-</span>R•Sin<span class="token punctuation">(</span>θY1<span class="token punctuation">)</span>SY2＝R•Sin<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θY2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">{</span>R•Cos<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θY2<span class="token punctuation">)</span><span class="token operator">-</span>R•Cos <span class="token punctuation">(</span>θY2<span class="token punctuation">)</span> <span class="token punctuation">}</span>•Tan<span class="token punctuation">(</span>Sθ<span class="token punctuation">)</span><span class="token operator">-</span>R•Sin<span class="token punctuation">(</span>θY2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：以工作台中心为旋转中心作旋转运动时，不管工作台处于什么位置，由于旋转中心（工作台中心）和各轴的基准位置相对坐标始终不变（各轴的旋转半径和初始角度始终不变），所以不能把“在工作台当前位置非原点的位置(X0,Y0)≠(0,0)使工作台旋转时”归类到“以任意位置为旋转中心作旋转运动”中。</p><h5 id="7-3-3、以任意位置为旋转中心作旋转运动"><a href="#7-3-3、以任意位置为旋转中心作旋转运动" class="headerlink" title="7.3.3、以任意位置为旋转中心作旋转运动"></a>7.3.3、以任意位置为旋转中心作旋转运动</h5><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/16.png"></p><h6 id="7-3-3-1、各轴模块的旋转半径的计算"><a href="#7-3-3-1、各轴模块的旋转半径的计算" class="headerlink" title="7.3.3.1、各轴模块的旋转半径的计算"></a>7.3.3.1、各轴模块的旋转半径的计算</h6><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/17.png"></p><h6 id="7-3-3-2、各轴模块的初始角度的计算"><a href="#7-3-3-2、各轴模块的初始角度的计算" class="headerlink" title="7.3.3.2、各轴模块的初始角度的计算"></a>7.3.3.2、各轴模块的初始角度的计算</h6><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/18.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/19.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/20.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/21.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/22.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/23.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/24.png"></p><h6 id="7-3-3-3、各轴模块的移动量计算"><a href="#7-3-3-3、各轴模块的移动量计算" class="headerlink" title="7.3.3.3、各轴模块的移动量计算"></a>7.3.3.3、各轴模块的移动量计算</h6><pre class="line-numbers language-python" data-language="python"><code class="language-python">SX1＝R·Cos<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θX1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">{</span>R·Sin<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θX1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R·Sin（θX1）<span class="token operator">-</span>Y0<span class="token punctuation">)</span><span class="token punctuation">}</span>·Tan<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span> R·Cos<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θX1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">{</span>R·Sin<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θX1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R·Sin<span class="token punctuation">(</span>θX2<span class="token punctuation">)</span><span class="token operator">-</span>Y0<span class="token punctuation">)</span><span class="token punctuation">}</span>·Tan<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>SX2＝R·Cos<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θX2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">{</span>R·Sin<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θX2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R·Sin（θX2）<span class="token operator">-</span>Y0<span class="token punctuation">)</span><span class="token punctuation">}</span>·Tan<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span> R·Cos<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θX2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">{</span>R·Sin<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θX2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R·Sin<span class="token punctuation">(</span>θX2<span class="token punctuation">)</span><span class="token operator">-</span>Y0<span class="token punctuation">)</span><span class="token punctuation">}</span>·Tan<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>SY1＝R·Sin<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θY1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">{</span>R·Cos<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θY1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R·Cos<span class="token punctuation">(</span>θY1<span class="token punctuation">)</span><span class="token operator">-</span>X0<span class="token punctuation">)</span><span class="token punctuation">}</span>·Tan<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span> R·Sin<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θY1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">{</span>R·Cos<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θY1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R·Cos<span class="token punctuation">(</span>θY1<span class="token punctuation">)</span><span class="token operator">-</span>X0<span class="token punctuation">)</span><span class="token punctuation">}</span>·Tan<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>SY2＝R·Sin<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θY2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">{</span>R·Cos<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span><span class="token operator">+</span>θY2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R·Cos<span class="token punctuation">(</span>θY2<span class="token punctuation">)</span><span class="token operator">-</span>X0<span class="token punctuation">)</span><span class="token punctuation">}</span>·Tan<span class="token punctuation">(</span>Sθ<span class="token operator">+</span>θ<span class="token number">0</span>）<span class="token operator">-</span><span class="token punctuation">[</span> R·Sin<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θY2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">{</span>R·Cos<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token operator">+</span>θY2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>R·Cos<span class="token punctuation">(</span>θY2<span class="token punctuation">)</span><span class="token operator">-</span>X0<span class="token punctuation">)</span><span class="token punctuation">}</span>·Tan<span class="token punctuation">(</span>θ<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-UVW-XYθ-动作函数公式"><a href="#8-UVW-XYθ-动作函数公式" class="headerlink" title="8. UVW-XYθ 动作函数公式"></a>8. UVW-XYθ 动作函数公式</h3><h4 id="8-1、旋转中心一直为平台中心"><a href="#8-1、旋转中心一直为平台中心" class="headerlink" title="8.1、旋转中心一直为平台中心"></a>8.1、旋转中心一直为平台中心</h4><p>工作台当前位置（0,0,0），工作台移动（Sx，Sy，Sθ）</p><h5 id="8-1-1-先旋转再平移"><a href="#8-1-1-先旋转再平移" class="headerlink" title="8.1.1 先旋转再平移"></a>8.1.1 先旋转再平移</h5><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/25.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/26.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/27.png"></p><h5 id="8-1-2-先平移再旋转"><a href="#8-1-2-先平移再旋转" class="headerlink" title="8.1.2 先平移再旋转"></a>8.1.2 先平移再旋转</h5><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/28.png"></p><h4 id="8-2、旋转中心一直为平台中心"><a href="#8-2、旋转中心一直为平台中心" class="headerlink" title="8.2、旋转中心一直为平台中心"></a>8.2、旋转中心一直为平台中心</h4><ol><li>工作台当前位置（x0,y0,θ0），工作台移动量（Sx，Sy，Sθ）</li><li>此时运动相当于，工作台先从（0,0,0）运动到，(x0,y0, θ0)，再加一个偏移量运动到(x0+Sx,y0+Sy, θ0+Sθ)。4轴偏移量，等于从（0,0,0）运动到(x0+Sx,y0+Sy, θ0+Sθ)位置4轴运动量减去从（0,0,0）运动到(x0,y0, θ0)的运动量，公式如下</li></ol><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/29.png"></p><h4 id="8-3、旋转中心任意（X1，Y1）"><a href="#8-3、旋转中心任意（X1，Y1）" class="headerlink" title="8.3、旋转中心任意（X1，Y1）"></a>8.3、旋转中心任意（X1，Y1）</h4><ol><li>工作台当前位置（0,0,0），工作台移动量（Sx，Sy，Sθ）</li><li>旋转中心一直为工作台中心时，Rx1，Rx2，Ry1，Ry2，θX1，θX2，θY1，θY2，8个参数固定不变</li><li>但旋转中心任意时， Rx1，Rx2，Ry1，Ry2，θX1，θX2，θY1，θY2，8个参数随着工作台的位置的变化而变化，因此工作台先平移再旋转，和先旋转在平移最终结果是不一样的，（因为平移之后，Rx1，Rx2，Ry1，Ry2，θX1，θX2，θY1，θY2，8个参有改变）在这里考虑先旋转再平移。</li><li>此时只需按照2.3.3.1和2.3.3.2的计算方式，计算出Rx1，Rx2，Ry1，Ry2，θX1，θX2，θY1，θY2，8个参数带入3.1.1计算出来的公式即可</li></ol><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/30.png"></p><h4 id="8-4、旋转中心任意（X1，Y1）"><a href="#8-4、旋转中心任意（X1，Y1）" class="headerlink" title="8.4、旋转中心任意（X1，Y1）"></a>8.4、旋转中心任意（X1，Y1）</h4><ol><li>工作台当前位置（x0,y0,θ0），工作台移动量（Sx，Sy，Sθ）</li><li>相当于以旋转中心任意（X1，Y1）计算出来的Rx1‘，Rx2’，Ry1‘，Ry2’，θX1‘，θX2’，θY1‘，θY2’，8个参数带入3.2公式的第一部分，与以工作台为中心旋转中心为平台中心计算出来的Rx1，Rx2，Ry1，Ry2，θX1，θX2，θY1，θY2带入3.2公式的第二部分之差。</li></ol><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/31.png"></p><h3 id="9-UVW-XYθ-动作函数公式实际验证"><a href="#9-UVW-XYθ-动作函数公式实际验证" class="headerlink" title="9. UVW-XYθ 动作函数公式实际验证"></a>9. UVW-XYθ 动作函数公式实际验证</h3><h4 id="9-1-公司平台结构对比"><a href="#9-1-公司平台结构对比" class="headerlink" title="9.1 公司平台结构对比"></a>9.1 公司平台结构对比</h4><p>由结构可知，公司为3轴，切安装方式不一样，所以要为公司结构设定对应的公式</p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/32.png"></p><h4 id="9-2-公式推倒对比"><a href="#9-2-公式推倒对比" class="headerlink" title="9.2 公式推倒对比"></a>9.2 公式推倒对比</h4><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/33.png"></p><ol><li><p>由结构可知，公司为3轴，切安装方式不一样，所以要为公司结构设定对应的公式</p></li><li><p>运动方式：旋转中心一直为平台中心，工作台当前位置(0,0,0)，工作台移动（Sx,Sy,Sθ）</p></li><li><p>运动方式：旋转中心一直为平台中心，工作台当前位置(0,0,0)，工作台移动（Sx,Sy,Sθ）</p><p>以Y1轴为例</p></li></ol><p>先旋转</p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/34.png"></p><p>再平移</p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/35.png"></p><p>总：旋转中心一直为平台中心，工作台当前位置(0,0,0)，工作台移动（Sx,Sy,Sθ）同理求出Y2轴，X2轴的偏移量公式，综合如下</p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/36.png"></p><h4 id="9-3-验证结果"><a href="#9-3-验证结果" class="headerlink" title="9.3 验证结果"></a>9.3 验证结果</h4><p>公式验证-平台初始位置（0,0,0），以平台中心为旋转中心，运动到位置（Sx，Sy，Sθ），计算u,v,w,偏移量</p><p>通过编写python程序计算公式结果，与公司自己UVW平台计算结果对比，结果数据一样，公式方法可行</p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/37.png"></p><h3 id="10-UVW-XYθ通用公式汇总"><a href="#10-UVW-XYθ通用公式汇总" class="headerlink" title="10. UVW-XYθ通用公式汇总"></a>10. UVW-XYθ通用公式汇总</h3><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/38.png"></p><ol><li><p>无论UVW平台怎样安装，所有轴的安装方式总有8种，如图所示，根据现场安装方式，选择对应的3轴的计算公式即可</p></li><li><p>输入量，输入已知的的基础坐标值，3轴对应选择对应位置的3个即可</p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/39.png"></p></li><li><p>工具可以内部计算出相关公式参数</p><p>计算公式参数：依据输入的已知量求出公式中的参数，与平台运动参数</p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/40.png"></p></li><li><p>工具可以根据输入轴参数，计算出相应轴的偏移量</p></li><li><p>旋转中心一直为平台中心,工作台当前位置（x0,y0,θ0）,工作台移动（Sx，Sy，Sθ）8轴计算公式</p><p><img src="/2023/03/23/gong-zuo-jing-li/4-fpc-pu-guang-ji-4-xiang-ji-uvw-ping-tai-dui-wei-xiang-mu/41.png"></p></li></ol><h3 id="11-UVW-XYθ-python脚本"><a href="#11-UVW-XYθ-python脚本" class="headerlink" title="11. UVW-XYθ python脚本"></a>11. UVW-XYθ python脚本</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#      旋转中心一直为平台中心,工作台当前位置（x0,y0,θ0）,工作台移动（Sx，Sy，Sθ）</span><span class="token keyword">import</span> math<span class="token comment"># 定义8轴平台基准参数类 与移动参数</span><span class="token comment"># 输入平台8轴位置参数</span>x1_mark_x<span class="token punctuation">,</span>x2_mark_x<span class="token punctuation">,</span>x3_mark_x<span class="token punctuation">,</span>x4_mark_x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">67.5</span>x1_mark_y<span class="token punctuation">,</span>x2_mark_y<span class="token punctuation">,</span>x3_mark_y<span class="token punctuation">,</span>x4_mark_y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">59.0</span>y1_mark_x<span class="token punctuation">,</span>y2_mark_x<span class="token punctuation">,</span>y3_mark_x<span class="token punctuation">,</span>y4_mark_x <span class="token operator">=</span> <span class="token number">59.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">59.0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span>y1_mark_y<span class="token punctuation">,</span>y2_mark_y<span class="token punctuation">,</span>y3_mark_y<span class="token punctuation">,</span>y4_mark_y <span class="token operator">=</span> <span class="token number">67.5</span><span class="token punctuation">,</span> <span class="token number">67.5</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token comment"># 输入平台初始位置，与偏移量</span>x0<span class="token punctuation">,</span>     y0<span class="token punctuation">,</span>     angle0  <span class="token operator">=</span>   <span class="token number">0</span><span class="token punctuation">,</span>     <span class="token number">0</span><span class="token punctuation">,</span>     <span class="token number">0</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span>       <span class="token comment">#初始位置</span>s_x<span class="token punctuation">,</span>    s_y<span class="token punctuation">,</span>    s_angle <span class="token operator">=</span>   <span class="token number">0</span><span class="token punctuation">,</span>     <span class="token number">0</span><span class="token punctuation">,</span>     <span class="token number">2</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span>       <span class="token comment">#偏移量</span><span class="token comment">#8轴的偏移计算函数</span><span class="token keyword">def</span> <span class="token function">x1_offset</span><span class="token punctuation">(</span>s_x<span class="token punctuation">,</span>s_y<span class="token punctuation">,</span>s_angle<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>angle0<span class="token punctuation">)</span><span class="token punctuation">:</span>    s_x <span class="token operator">=</span> s_x <span class="token operator">+</span> x0    s_y <span class="token operator">=</span> s_y <span class="token operator">+</span> y0    s_angle <span class="token operator">=</span> s_angle <span class="token operator">+</span> angle0    rx_1 <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>x1_mark_x <span class="token operator">*</span> x1_mark_x <span class="token operator">+</span> x1_mark_y <span class="token operator">*</span> x1_mark_y<span class="token punctuation">)</span>    angle_x1 <span class="token operator">=</span> math<span class="token punctuation">.</span>atan2<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>x1_mark_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>x1_mark_x<span class="token punctuation">)</span><span class="token punctuation">)</span>    x1_offset_1 <span class="token operator">=</span> <span class="token operator">-</span>rx_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_x1<span class="token punctuation">)</span> <span class="token operator">+</span>rx_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>s_angle <span class="token operator">+</span> angle_x1<span class="token punctuation">)</span> <span class="token operator">+</span> \                <span class="token punctuation">(</span>rx_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>s_angle <span class="token operator">+</span> angle_x1<span class="token punctuation">)</span> <span class="token operator">-</span> rx_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_x1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span> <span class="token operator">+</span> \                s_x <span class="token operator">+</span> s_y <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span>    x1_offset1_2 <span class="token operator">=</span> <span class="token operator">-</span>rx_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_x1<span class="token punctuation">)</span> <span class="token operator">+</span>rx_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle0 <span class="token operator">+</span> angle_x1<span class="token punctuation">)</span> <span class="token operator">+</span> \                <span class="token punctuation">(</span>rx_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle0 <span class="token operator">+</span> angle_x1<span class="token punctuation">)</span> <span class="token operator">-</span> rx_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_x1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span> <span class="token operator">+</span> \                x0 <span class="token operator">+</span> y0 <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span>    <span class="token keyword">return</span> x1_offset_1 <span class="token operator">-</span> x1_offset1_2<span class="token keyword">def</span> <span class="token function">x2_offset</span><span class="token punctuation">(</span>s_x<span class="token punctuation">,</span>s_y<span class="token punctuation">,</span>s_angle<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>angle0<span class="token punctuation">)</span><span class="token punctuation">:</span>    s_x <span class="token operator">=</span> s_x <span class="token operator">+</span> x0    s_y <span class="token operator">=</span> s_y <span class="token operator">+</span> y0    s_angle <span class="token operator">=</span> s_angle <span class="token operator">+</span> angle0    rx_2 <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>x2_mark_x <span class="token operator">*</span> x2_mark_x <span class="token operator">+</span> x2_mark_y <span class="token operator">*</span> x2_mark_y<span class="token punctuation">)</span>    angle_x2 <span class="token operator">=</span> math<span class="token punctuation">.</span>atan2<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>x2_mark_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>x2_mark_x<span class="token punctuation">)</span><span class="token punctuation">)</span>    x2_offset_1 <span class="token operator">=</span> rx_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_x2<span class="token punctuation">)</span> <span class="token operator">-</span>rx_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token operator">-</span>s_angle <span class="token operator">+</span> angle_x2<span class="token punctuation">)</span> <span class="token operator">-</span> \                <span class="token punctuation">(</span><span class="token operator">-</span>rx_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token operator">-</span>s_angle <span class="token operator">+</span> angle_x2<span class="token punctuation">)</span> <span class="token operator">+</span> rx_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span> <span class="token operator">+</span> \                s_x <span class="token operator">+</span> s_y <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span>    x2_offset_2 <span class="token operator">=</span> rx_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_x2<span class="token punctuation">)</span> <span class="token operator">-</span> rx_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token operator">-</span>angle0 <span class="token operator">+</span> angle_x2<span class="token punctuation">)</span> <span class="token operator">-</span> \                <span class="token punctuation">(</span><span class="token operator">-</span>rx_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token operator">-</span>angle0 <span class="token operator">+</span> angle_x2<span class="token punctuation">)</span> <span class="token operator">+</span> rx_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span> <span class="token operator">+</span> \                x0 <span class="token operator">+</span> y0 <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span>    <span class="token keyword">return</span> x2_offset_1<span class="token operator">-</span>x2_offset_2<span class="token keyword">def</span> <span class="token function">x3_offset</span><span class="token punctuation">(</span>s_x<span class="token punctuation">,</span>s_y<span class="token punctuation">,</span>s_angle<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>angle0<span class="token punctuation">)</span><span class="token punctuation">:</span>    s_x <span class="token operator">=</span> s_x <span class="token operator">+</span> x0    s_y <span class="token operator">=</span> s_y <span class="token operator">+</span> y0    s_angle <span class="token operator">=</span> s_angle <span class="token operator">+</span> angle0    rx_3 <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>x3_mark_x <span class="token operator">*</span> x3_mark_x <span class="token operator">+</span> x3_mark_y <span class="token operator">*</span> x3_mark_y<span class="token punctuation">)</span>    angle_x3 <span class="token operator">=</span> math<span class="token punctuation">.</span>atan2<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>x3_mark_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>x3_mark_x<span class="token punctuation">)</span><span class="token punctuation">)</span>    x3_offset_1 <span class="token operator">=</span> rx_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_x3<span class="token punctuation">)</span> <span class="token operator">-</span>rx_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>s_angle <span class="token operator">+</span> angle_x3<span class="token punctuation">)</span> <span class="token operator">-</span> \                <span class="token punctuation">(</span>rx_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>s_angle <span class="token operator">+</span> angle_x3<span class="token punctuation">)</span> <span class="token operator">-</span> rx_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_x3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span> <span class="token operator">+</span> \                s_x <span class="token operator">+</span> s_y <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span>    x3_offset_2 <span class="token operator">=</span> rx_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_x3<span class="token punctuation">)</span> <span class="token operator">-</span> rx_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle0 <span class="token operator">+</span> angle_x3<span class="token punctuation">)</span> <span class="token operator">-</span> \                  <span class="token punctuation">(</span>rx_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle0 <span class="token operator">+</span> angle_x3<span class="token punctuation">)</span> <span class="token operator">-</span> rx_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_x3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span> <span class="token operator">+</span> \                  x0 <span class="token operator">+</span> y0 <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span>    <span class="token keyword">return</span> x3_offset_1 <span class="token operator">-</span> x3_offset_2<span class="token keyword">def</span> <span class="token function">x4_offset</span><span class="token punctuation">(</span>s_x<span class="token punctuation">,</span>s_y<span class="token punctuation">,</span>s_angle<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>angle0<span class="token punctuation">)</span><span class="token punctuation">:</span>    s_x <span class="token operator">=</span> s_x <span class="token operator">+</span> x0    s_y <span class="token operator">=</span> s_y <span class="token operator">+</span> y0    s_angle <span class="token operator">=</span> s_angle <span class="token operator">+</span> angle0    rx_4 <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>x4_mark_x <span class="token operator">*</span> x4_mark_x <span class="token operator">+</span> x4_mark_y <span class="token operator">*</span> x4_mark_y<span class="token punctuation">)</span>    angle_x4 <span class="token operator">=</span> math<span class="token punctuation">.</span>atan2<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>x4_mark_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>x4_mark_x<span class="token punctuation">)</span><span class="token punctuation">)</span>    x4_offset_1 <span class="token operator">=</span> <span class="token operator">-</span> rx_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_x4<span class="token punctuation">)</span> <span class="token operator">+</span> rx_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token operator">-</span>s_angle <span class="token operator">+</span> angle_x4<span class="token punctuation">)</span> <span class="token operator">+</span> \                <span class="token punctuation">(</span><span class="token operator">-</span>rx_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token operator">-</span>s_angle <span class="token operator">+</span> angle_x4<span class="token punctuation">)</span> <span class="token operator">+</span> rx_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_x4<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span> <span class="token operator">+</span> \                s_x <span class="token operator">+</span> s_y <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span>    x4_offset_2 <span class="token operator">=</span> <span class="token operator">-</span> rx_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_x4<span class="token punctuation">)</span> <span class="token operator">+</span> rx_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token operator">-</span>angle0 <span class="token operator">+</span> angle_x4<span class="token punctuation">)</span> <span class="token operator">+</span> \                  <span class="token punctuation">(</span><span class="token operator">-</span>rx_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token operator">-</span>angle0 <span class="token operator">+</span> angle_x4<span class="token punctuation">)</span> <span class="token operator">+</span> rx_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_x4<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span> <span class="token operator">+</span> \                  x0 <span class="token operator">+</span> y0 <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span>    <span class="token keyword">return</span> x4_offset_1<span class="token operator">-</span>x4_offset_2<span class="token keyword">def</span> <span class="token function">y1_offset</span><span class="token punctuation">(</span>s_x<span class="token punctuation">,</span>s_y<span class="token punctuation">,</span>s_angle<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>angle0<span class="token punctuation">)</span><span class="token punctuation">:</span>    s_x <span class="token operator">=</span> s_x <span class="token operator">+</span> x0    s_y <span class="token operator">=</span> s_y <span class="token operator">+</span> y0    s_angle <span class="token operator">=</span> s_angle <span class="token operator">+</span> angle0    ry_1 <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>y1_mark_x <span class="token operator">*</span> y1_mark_x <span class="token operator">+</span> y1_mark_y <span class="token operator">*</span> y1_mark_y<span class="token punctuation">)</span>    angle_y1 <span class="token operator">=</span> math<span class="token punctuation">.</span>atan2<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>y1_mark_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>y1_mark_x<span class="token punctuation">)</span><span class="token punctuation">)</span>    y1_offset_1 <span class="token operator">=</span> <span class="token operator">-</span>ry_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_y1<span class="token punctuation">)</span> <span class="token operator">+</span> ry_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>s_angle <span class="token operator">+</span> angle_y1<span class="token punctuation">)</span> <span class="token operator">+</span> \                <span class="token punctuation">(</span><span class="token operator">-</span>ry_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>s_angle <span class="token operator">+</span> angle_y1<span class="token punctuation">)</span> <span class="token operator">+</span> ry_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_y1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span> <span class="token operator">+</span> \                s_y <span class="token operator">-</span> s_x <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span>    y1_offset_2 <span class="token operator">=</span> <span class="token operator">-</span>ry_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_y1<span class="token punctuation">)</span> <span class="token operator">+</span> ry_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle0 <span class="token operator">+</span> angle_y1<span class="token punctuation">)</span> <span class="token operator">+</span> \                  <span class="token punctuation">(</span><span class="token operator">-</span>ry_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle0 <span class="token operator">+</span> angle_y1<span class="token punctuation">)</span> <span class="token operator">+</span> ry_1 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_y1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span> <span class="token operator">+</span> \                  y0 <span class="token operator">-</span> x0 <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span>    <span class="token keyword">return</span> y1_offset_1 <span class="token operator">-</span> y1_offset_2<span class="token keyword">def</span> <span class="token function">y2_offset</span><span class="token punctuation">(</span>s_x<span class="token punctuation">,</span>s_y<span class="token punctuation">,</span>s_angle<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>angle0<span class="token punctuation">)</span><span class="token punctuation">:</span>    s_x <span class="token operator">=</span> s_x <span class="token operator">+</span> x0    s_y <span class="token operator">=</span> s_y <span class="token operator">+</span> y0    s_angle <span class="token operator">=</span> s_angle <span class="token operator">+</span> angle0    ry_2 <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>y2_mark_x <span class="token operator">*</span> y2_mark_x <span class="token operator">+</span> y2_mark_y <span class="token operator">*</span> y2_mark_y<span class="token punctuation">)</span>    angle_y2 <span class="token operator">=</span> math<span class="token punctuation">.</span>atan2<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>y2_mark_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>y2_mark_x<span class="token punctuation">)</span><span class="token punctuation">)</span>    y2_offset_1 <span class="token operator">=</span> <span class="token operator">-</span>ry_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_y2<span class="token punctuation">)</span> <span class="token operator">+</span> ry_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token operator">-</span>s_angle <span class="token operator">+</span> angle_y2<span class="token punctuation">)</span> <span class="token operator">+</span> \                <span class="token punctuation">(</span>ry_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token operator">-</span>s_angle <span class="token operator">+</span> angle_y2<span class="token punctuation">)</span> <span class="token operator">-</span> ry_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_y2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span> <span class="token operator">+</span> \                s_y <span class="token operator">-</span> s_x <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span>    y2_offset_2 <span class="token operator">=</span> <span class="token operator">-</span>ry_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_y2<span class="token punctuation">)</span> <span class="token operator">+</span> ry_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token operator">-</span>angle0 <span class="token operator">+</span> angle_y2<span class="token punctuation">)</span> <span class="token operator">+</span> \                  <span class="token punctuation">(</span>ry_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token operator">-</span>angle0 <span class="token operator">+</span> angle_y2<span class="token punctuation">)</span> <span class="token operator">-</span> ry_2 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_y2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span> <span class="token operator">+</span> \                  y0 <span class="token operator">-</span> x0 <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span>    <span class="token keyword">return</span> y2_offset_1 <span class="token operator">-</span> y2_offset_2<span class="token keyword">def</span> <span class="token function">y3_offset</span><span class="token punctuation">(</span>s_x<span class="token punctuation">,</span>s_y<span class="token punctuation">,</span>s_angle<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>angle0<span class="token punctuation">)</span><span class="token punctuation">:</span>    s_x <span class="token operator">=</span> s_x <span class="token operator">+</span> x0    s_y <span class="token operator">=</span> s_y <span class="token operator">+</span> y0    s_angle <span class="token operator">=</span> s_angle <span class="token operator">+</span> angle0    ry_3 <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>y3_mark_x <span class="token operator">*</span> y3_mark_x <span class="token operator">+</span> y3_mark_y <span class="token operator">*</span> y3_mark_y<span class="token punctuation">)</span>    angle_y3 <span class="token operator">=</span> math<span class="token punctuation">.</span>atan2<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>y3_mark_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>y3_mark_x<span class="token punctuation">)</span><span class="token punctuation">)</span>    y3_offset_1 <span class="token operator">=</span> ry_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_y3<span class="token punctuation">)</span> <span class="token operator">-</span> ry_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>s_angle <span class="token operator">+</span> angle_y3<span class="token punctuation">)</span> <span class="token operator">-</span> \                <span class="token punctuation">(</span><span class="token operator">-</span>ry_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>s_angle <span class="token operator">+</span> angle_y3<span class="token punctuation">)</span> <span class="token operator">+</span> ry_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_y3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span> <span class="token operator">+</span> \                s_y <span class="token operator">-</span> s_x <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span>    y3_offset_2 <span class="token operator">=</span> ry_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_y3<span class="token punctuation">)</span> <span class="token operator">-</span> ry_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle0 <span class="token operator">+</span> angle_y3<span class="token punctuation">)</span> <span class="token operator">-</span> \                  <span class="token punctuation">(</span><span class="token operator">-</span>ry_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle0 <span class="token operator">+</span> angle_y3<span class="token punctuation">)</span> <span class="token operator">+</span> ry_3 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_y3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span> <span class="token operator">+</span> \                  y0 <span class="token operator">-</span> x0 <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span>    <span class="token keyword">return</span> y3_offset_1 <span class="token operator">-</span> y3_offset_2<span class="token keyword">def</span> <span class="token function">y4_offset</span><span class="token punctuation">(</span>s_x<span class="token punctuation">,</span>s_y<span class="token punctuation">,</span>s_angle<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>angle0<span class="token punctuation">)</span><span class="token punctuation">:</span>    s_x <span class="token operator">=</span> s_x <span class="token operator">+</span> x0    s_y <span class="token operator">=</span> s_y <span class="token operator">+</span> y0    s_angle <span class="token operator">=</span> s_angle <span class="token operator">+</span> angle0    ry_4 <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>y4_mark_x <span class="token operator">*</span> y4_mark_x <span class="token operator">+</span> y4_mark_y <span class="token operator">*</span> y4_mark_y<span class="token punctuation">)</span>    angle_y4 <span class="token operator">=</span> math<span class="token punctuation">.</span>atan2<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>y4_mark_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>y4_mark_x<span class="token punctuation">)</span><span class="token punctuation">)</span>    y4_offset_1 <span class="token operator">=</span> ry_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_y4<span class="token punctuation">)</span> <span class="token operator">-</span> ry_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token operator">-</span>s_angle <span class="token operator">+</span> angle_y4<span class="token punctuation">)</span> <span class="token operator">-</span> \                <span class="token punctuation">(</span>ry_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token operator">-</span>s_angle <span class="token operator">+</span> angle_y4<span class="token punctuation">)</span> <span class="token operator">-</span> ry_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_y4<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span> <span class="token operator">+</span> \                s_y <span class="token operator">-</span> s_x <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span>    y4_offset_2 <span class="token operator">=</span> ry_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle_y4<span class="token punctuation">)</span> <span class="token operator">-</span> ry_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token operator">-</span>angle0 <span class="token operator">+</span> angle_y4<span class="token punctuation">)</span> <span class="token operator">-</span> \                  <span class="token punctuation">(</span>ry_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token operator">-</span>angle0 <span class="token operator">+</span> angle_y4<span class="token punctuation">)</span> <span class="token operator">-</span> ry_4 <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle_y4<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span> <span class="token operator">+</span> \                  y0 <span class="token operator">-</span> x0 <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>angle0<span class="token punctuation">)</span>    <span class="token keyword">return</span> y4_offset_1 <span class="token operator">-</span> y4_offset_2<span class="token comment"># 输出结果函数</span><span class="token keyword">def</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'工作台移动前位置'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t\t'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x0<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' y='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>y0<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' θ='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">180</span> <span class="token operator">*</span> <span class="token punctuation">(</span>angle0<span class="token punctuation">)</span> <span class="token operator">/</span> math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'工作台偏移量'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t\t\t'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>s_x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' y='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>s_y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' θ='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">180</span> <span class="token operator">*</span> <span class="token punctuation">(</span>s_angle<span class="token punctuation">)</span> <span class="token operator">/</span> math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'工作台移动后位置'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t\t'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x='</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>s_x<span class="token operator">+</span>x0<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' y='</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>s_y<span class="token operator">+</span>y0<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' θ='</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token operator">*</span><span class="token punctuation">(</span>s_angle<span class="token operator">+</span>angle0<span class="token punctuation">)</span><span class="token operator">/</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'UVW偏移量'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t\t\t'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'u='</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>x4_offset<span class="token punctuation">(</span>s_x<span class="token punctuation">,</span>s_y<span class="token punctuation">,</span>s_angle<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>angle0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t\t'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'v='</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>y2_offset<span class="token punctuation">(</span>s_x<span class="token punctuation">,</span>s_y<span class="token punctuation">,</span>s_angle<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>angle0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t\t'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'w='</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>y1_offset<span class="token punctuation">(</span>s_x<span class="token punctuation">,</span>s_y<span class="token punctuation">,</span>s_angle<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>angle0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-对位案例</title>
      <link href="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/"/>
      <url>/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/</url>
      
        <content type="html"><![CDATA[<h3 id="1-五轴点胶"><a href="#1-五轴点胶" class="headerlink" title="1. 五轴点胶"></a>1. 五轴点胶</h3><h4 id="1-1-盲孔屏点胶工艺简介"><a href="#1-1-盲孔屏点胶工艺简介" class="headerlink" title="1.1 盲孔屏点胶工艺简介"></a>1.1 盲孔屏点胶工艺简介</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/1.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/2.png"></p><h4 id="1-2-五轴点胶设备简介"><a href="#1-2-五轴点胶设备简介" class="headerlink" title="1.2 五轴点胶设备简介"></a>1.2 五轴点胶设备简介</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/3.png"></p><h4 id="1-3-工艺流程"><a href="#1-3-工艺流程" class="headerlink" title="1.3 工艺流程"></a>1.3 工艺流程</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/4.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/5.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/6.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/7.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/8.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/9.png"></p><h4 id="1-4-光学方案"><a href="#1-4-光学方案" class="headerlink" title="1.4 光学方案"></a>1.4 光学方案</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/10.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/11.png"></p><h4 id="1-5-胶头光学检测效果图"><a href="#1-5-胶头光学检测效果图" class="headerlink" title="1.5 胶头光学检测效果图"></a>1.5 胶头光学检测效果图</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/12.png"></p><h3 id="2-Breaker项目"><a href="#2-Breaker项目" class="headerlink" title="2. Breaker项目"></a>2. Breaker项目</h3><h4 id="2-1-方案背景"><a href="#2-1-方案背景" class="headerlink" title="2.1 方案背景"></a>2.1 方案背景</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/13.png"></p><p>此项目为锂电行业的一种对位和尺寸测量的应用，对位<br>和尺寸测量对象为Breaker，Breaker（电池过热保护器）<br>的组成部分为：breaker、镍铝片、镍片、杜邦纸。<br>作用：主要用于电池pack中，对电源线路及电动机等实行保护，当它们发生严重的过载或者短路及欠压等故障时能自动切断电路，其功能相当于熔断器式开关与过欠热继电器等的组合。</p><h4 id="2-2-总体结构图"><a href="#2-2-总体结构图" class="headerlink" title="2.2 总体结构图"></a>2.2 总体结构图</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/14.png"></p><h4 id="2-3-工位1、2、3工艺"><a href="#2-3-工位1、2、3工艺" class="headerlink" title="2.3 工位1、2、3工艺"></a>2.3 工位1、2、3工艺</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/15.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/16.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/17.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/18.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/19.png"></p><h4 id="2-4-工位4工艺和打光方案"><a href="#2-4-工位4工艺和打光方案" class="headerlink" title="2.4 工位4工艺和打光方案"></a>2.4 工位4工艺和打光方案</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/20.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/21.png"></p><h4 id="2-5-工位5、6工艺"><a href="#2-5-工位5、6工艺" class="headerlink" title="2.5 工位5、6工艺"></a>2.5 工位5、6工艺</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/22.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/23.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/24.png"></p><h4 id="2-6-工位7工艺"><a href="#2-6-工位7工艺" class="headerlink" title="2.6 工位7工艺"></a>2.6 工位7工艺</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/25.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/26.png"></p><h3 id="3-TP-LCD-屏幕生产线-对位项目"><a href="#3-TP-LCD-屏幕生产线-对位项目" class="headerlink" title="3. TP LCD 屏幕生产线-对位项目"></a>3. TP LCD 屏幕生产线-对位项目</h3><h4 id="3-1-产线流程工艺"><a href="#3-1-产线流程工艺" class="headerlink" title="3.1 产线流程工艺"></a>3.1 产线流程工艺</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/27.png"></p><h4 id="3-2-双刀玻璃划线机"><a href="#3-2-双刀玻璃划线机" class="headerlink" title="3.2 双刀玻璃划线机"></a>3.2 双刀玻璃划线机</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/28.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/29.png"></p><h4 id="3-3-激光切割机"><a href="#3-3-激光切割机" class="headerlink" title="3.3 激光切割机"></a>3.3 激光切割机</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/30.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/31.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/32.png"></p><h4 id="3-4-CNC精雕机（边角研磨）"><a href="#3-4-CNC精雕机（边角研磨）" class="headerlink" title="3.4 CNC精雕机（边角研磨）"></a>3.4 CNC精雕机（边角研磨）</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/33.png"></p><h4 id="3-5-cell上料机（汇义cell检测机台）"><a href="#3-5-cell上料机（汇义cell检测机台）" class="headerlink" title="3.5 cell上料机（汇义cell检测机台）"></a>3.5 cell上料机（汇义cell检测机台）</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/34.png"></p><h4 id="3-6-贴片机（cell-偏光片贴合）"><a href="#3-6-贴片机（cell-偏光片贴合）" class="headerlink" title="3.6 贴片机（cell+偏光片贴合）"></a>3.6 贴片机（cell+偏光片贴合）</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/35.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/36.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/37.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/38.png"></p><h4 id="3-7-IC绑定机（IC-Cell绑定-端子清洗）"><a href="#3-7-IC绑定机（IC-Cell绑定-端子清洗）" class="headerlink" title="3.7 IC绑定机（IC+Cell绑定-端子清洗）"></a>3.7 IC绑定机（IC+Cell绑定-端子清洗）</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/39.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/40.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/41.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/42.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/43.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/44.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/45.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/46.png"></p><h4 id="3-8-FOG绑定机（Cell-FOG绑定-ACF贴附）"><a href="#3-8-FOG绑定机（Cell-FOG绑定-ACF贴附）" class="headerlink" title="3.8 FOG绑定机（Cell+FOG绑定-ACF贴附）"></a>3.8 FOG绑定机（Cell+FOG绑定-ACF贴附）</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/47.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/48.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/49.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/50.png"></p><h4 id="3-9-FOG-AOI视觉检测机"><a href="#3-9-FOG-AOI视觉检测机" class="headerlink" title="3.9 FOG AOI视觉检测机"></a>3.9 FOG AOI视觉检测机</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/51.png"></p><h4 id="3-10-点胶机（cell引脚部位1-2道胶）"><a href="#3-10-点胶机（cell引脚部位1-2道胶）" class="headerlink" title="3.10 点胶机（cell引脚部位1,2道胶）"></a>3.10 点胶机（cell引脚部位1,2道胶）</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/52.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/53.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/54.png"></p><h4 id="3-11-自动辅料贴附机（辅料与FOG贴附）"><a href="#3-11-自动辅料贴附机（辅料与FOG贴附）" class="headerlink" title="3.11 自动辅料贴附机（辅料与FOG贴附）"></a>3.11 自动辅料贴附机（辅料与FOG贴附）</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/55.png"></p><h4 id="3-12-玻璃盖板-OCA贴附机（集银）"><a href="#3-12-玻璃盖板-OCA贴附机（集银）" class="headerlink" title="3.12 玻璃盖板-OCA贴附机（集银）"></a>3.12 玻璃盖板-OCA贴附机（集银）</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/56.png"></p><h4 id="3-13-玻璃盖板-cell贴附机（集银）"><a href="#3-13-玻璃盖板-cell贴附机（集银）" class="headerlink" title="3.13 玻璃盖板-cell贴附机（集银）"></a>3.13 玻璃盖板-cell贴附机（集银）</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/57.png"></p><h4 id="3-14-cell-背光-贴附机（集银背光机-背光引脚检测）"><a href="#3-14-cell-背光-贴附机（集银背光机-背光引脚检测）" class="headerlink" title="3.14 cell-背光 贴附机（集银背光机-背光引脚检测）"></a>3.14 cell-背光 贴附机（集银背光机-背光引脚检测）</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/58.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/59.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/60.png"></p><h4 id="3-15-焊接机（背光引脚与cell-FOG焊接）"><a href="#3-15-焊接机（背光引脚与cell-FOG焊接）" class="headerlink" title="3.15 焊接机（背光引脚与cell FOG焊接）"></a>3.15 焊接机（背光引脚与cell FOG焊接）</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/61.png"></p><h4 id="3-16-视觉分类总结"><a href="#3-16-视觉分类总结" class="headerlink" title="3.16 视觉分类总结"></a>3.16 视觉分类总结</h4><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/62.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/3-dui-wei-an-li/63.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工作经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-对位精度解耦</title>
      <link href="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/"/>
      <url>/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/</url>
      
        <content type="html"><![CDATA[<h3 id="1-对位简介"><a href="#1-对位简介" class="headerlink" title="1. 对位简介"></a>1. 对位简介</h3><ol><li>随着工业自动化的快速发展，智能化是必然趋势，机器替代人工也在逐步开展中，加上工业自动化中工艺要求越来越高，传统的工业自动化精度无法满足生产需求，机器视觉方案逐步替代传统工业自动化中定位方式，机器视觉相当于机器的眼睛，能够在工业自动化中更加准确的、智能的识别和定位。</li><li>定位中常见应用场景包括单上相机抓取定位、单下相机放料定位、单上相机放料定位、单上单下相机定位、单上单上相机定位。</li></ol><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/1.png"></p><h3 id="2-对位精度影响因素"><a href="#2-对位精度影响因素" class="headerlink" title="2. 对位精度影响因素"></a>2. 对位精度影响因素</h3><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/2.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/3.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/4.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/5.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/6.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/7.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/8.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/9.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/10.png"></p><h3 id="3-对位精度影响因素细讲"><a href="#3-对位精度影响因素细讲" class="headerlink" title="3. 对位精度影响因素细讲"></a>3. 对位精度影响因素细讲</h3><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/11.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/12.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/13.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/14.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/15.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/16.png"></p><h3 id="4-解耦对位精度"><a href="#4-解耦对位精度" class="headerlink" title="4. 解耦对位精度"></a>4. 解耦对位精度</h3><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/17.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/18.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/19.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/20.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/21.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/22.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/23.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/24.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/25.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/26.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/27.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/28.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/2-dui-wei-jing-du-jie-ou/29.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工作经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-标定对位基础总结</title>
      <link href="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/"/>
      <url>/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="1-摄像机标定概述"><a href="#1-摄像机标定概述" class="headerlink" title="1. 摄像机标定概述"></a>1. 摄像机标定概述</h3><p>标定过程就是确定摄像机的几何和光学参数，摄像机相对于世界坐标系的方位。标定精度的高低，直接影响着计算机视觉的精度。因此，只有做好了摄像机标定工作，后续工作才能正常展开。</p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/1.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/2.png"></p><h3 id="2-摄像机标定的分类"><a href="#2-摄像机标定的分类" class="headerlink" title="2. 摄像机标定的分类"></a>2. 摄像机标定的分类</h3><h4 id="2-1-根据是否需要标定参照物来看"><a href="#2-1-根据是否需要标定参照物来看" class="headerlink" title="2.1 根据是否需要标定参照物来看"></a>2.1 根据是否需要标定参照物来看</h4><ol><li>传统的摄像机标定方法：在一定的摄像机模型下，基于特定的实验条件，如形状、尺寸已知的标定物，经过对其进行图像处理，利用一系列数学变换和计算方法，求取摄像机模型的内部参数和外部参数 。<br>特点：利用已知的景物结构信息。常用到标定块。<br>优点：可以使用于任意的摄像机模型，标定精度高<br>不足：标定过程复杂，需要高精度的已知结构信息。在实际应用中很多情况下无法使用标定块。</li><li>摄像机自标定方法：不依赖于标定参照物的摄像机标定方法，仅利用摄像机在运动过程中周围环境的图像与图像之间的对应关系对摄像机进行的标定称为摄像机自标定方法 。<br> 优点：仅依靠建立图像之间的对应，灵活性强，潜在应用范围广。<br> 不足：并不是很成熟。因为未知参数太多,很难得到稳定的结果。</li></ol><p>  一般来说，当应用场合所要求的精度很高且摄像机的参数不经常变化时，传统标定方法为首选。而自标定方法主要应用于精度要求不高的场合，如通讯、虚拟现实等。</p><h4 id="2-2-从所用模型不同来分"><a href="#2-2-从所用模型不同来分" class="headerlink" title="2.2 从所用模型不同来分"></a>2.2 从所用模型不同来分</h4><ol><li>线性：线性模型摄像机标定, 用线性方程求解，简单快速，已成为计算机视觉领域的研究热点之一，目前已有大量研究成果。但线性模型不考虑镜头畸变，准确性欠佳。 </li><li>非线性：对于非线性模型摄像机标定，考虑了畸变参数，引入了非线性优化，但方法较繁，速度慢，对初值选择和噪声比较敏感，而且非线性搜索并不能保证参数收敛到全局最优解。</li></ol><h4 id="2-3-视觉系统所用的摄像机个数分"><a href="#2-3-视觉系统所用的摄像机个数分" class="headerlink" title="2.3 视觉系统所用的摄像机个数分"></a>2.3 视觉系统所用的摄像机个数分</h4><ol><li>单摄像机</li><li>多摄像机</li></ol><h4 id="2-4-从求解参数的结果来分"><a href="#2-4-从求解参数的结果来分" class="headerlink" title="2.4 从求解参数的结果来分"></a>2.4 从求解参数的结果来分</h4><ol><li>隐式：隐参数标定是以一个转换矩阵表示空间物点与二维像点的对应关系，并以转换矩阵元素作为标定参数，由于这些参数没有具体的物理意义，所以称为隐参数定标。在精度要求不高的情况下，因为只需要求解线性方程，此可以获得较高的效率。比较典型的是直接线性标定 (DLT)，用一个3×4阶矩阵表示空间物点与二维像点的直接对应关系。</li><li>显式：为了提高标定精度，就需要通过精确分析摄像机成像的中间过程，构造精密的几何模型，设置具有物理意义的参数(一般包括镜头畸变参数、图像中心偏差、帧存扫描水平比例因子和有效焦距偏差)，然后确定这些未知参数，实现摄像机的显参数标定。</li></ol><h4 id="2-5-从解题方法来分"><a href="#2-5-从解题方法来分" class="headerlink" title="2.5 从解题方法来分"></a>2.5 从解题方法来分</h4><ol><li>解析法：解析方法是用足够多的点的世界坐标和相应的图像坐标，通过解析公式来确定摄像机的内参数、外参数以及畸变参数，然后根据得到的内外参数及畸变系数，再将图像中的点通过几何关系得到空间点的世界坐标。解析方法不能囊括上述的所有非线性因素，只能选择几种主要的畸变，而忽略其它不确定因素。</li><li>神经网络法：神经网络法能够以任意的精度逼近任何非线性关系，跳过求取各参数的繁琐过程，利用图像坐标点和相应的空间点作为输入输出样本集进行训练，使网络实现给定的输入输出映射关系，对于不是样本集中的图像坐标点也能得到合适的空间点的世界坐标。</li></ol><h4 id="2-6-根据标定块不同"><a href="#2-6-根据标定块不同" class="headerlink" title="2.6 根据标定块不同"></a>2.6 根据标定块不同</h4><ol><li>立体：标定通过拍摄一个事先已经确定了三维几何形状的物体来进行，也就是在一定的摄像机模型下，基于特定的实验条件如形状、尺寸已知的定标参照物(标定物)，经过对其图像进行处理，利用一系列数学变换和计算方法，求取摄像机模型的内部参数和外部参数。这种定标方法的精度很高。用于定标的物体一般是由两到三个相互正交的平面组成。但这些方法需要昂贵的标定设备，而且事前要精确地设置。</li><li>平面：平面模板(作为标定物)，对于每个视点获得图像,提取图像上的网格角点，平面模板与图像间的网格角点对应关系，确定了单应性矩阵，平面模板可以用硬纸板，上面张贴激光打印机打印的棋盘格。模板图案常采用矩形和二次曲线（圆和椭圆）。</li></ol><h3 id="3-摄像机成像模型"><a href="#3-摄像机成像模型" class="headerlink" title="3. 摄像机成像模型"></a>3. 摄像机成像模型</h3><ol><li>图像是空间物体通过成像系统在像平面上的反映，即空间物体在像平面上的投影。</li><li>该点在图像上的位置则与空间物体表面对应点的几何位置有关。这些位置的相互关系，由摄像机成像系统的几何投影模型所决定。</li><li>三维空间中的物体到像平面的投影关系即为成像模型，理想的投影成像模型是小孔模型。</li></ol><h4 id="3-1-小孔模型"><a href="#3-1-小孔模型" class="headerlink" title="3.1 小孔模型"></a>3.1 小孔模型</h4><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/3.png"></p><ol><li>假设物体表面的反射光都经过一个针孔而投影到像平面上。</li><li>小孔模型主要由光心（投影中心）、成像面和光轴组成。</li><li>小孔成像由于透光量太小，因此需要很长的曝光时间，并且很难得到清晰的图像。</li><li>实际摄像系统通常都由透镜或者透镜组组成。两种模型具有相同的成像关系，即像点是物点和光心的连线与图像平面的交点。</li><li>因此，可以用小孔模型作为摄像机成像模型。</li></ol><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/4.png"></p><ol><li>空间点 O 是投影中心，它到平面Π的距离是 f 。空间点 M 在平面Π上的投影(或像) m 是以点 O 为端点并经过点 M 的射线与平面Π的交点。</li><li>平面Π ：摄像机的像平面。</li><li>点O：摄像机中心(光心)。</li><li>f ：摄像机的焦距</li><li>以点 O 为端点且垂直于像平面的射线称为光轴或主轴，主轴与像平面的交点 p 称为摄像机的主点。</li></ol><h4 id="3-2-常用坐标系及其关系"><a href="#3-2-常用坐标系及其关系" class="headerlink" title="3.2 常用坐标系及其关系"></a>3.2 常用坐标系及其关系</h4><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/5.png"></p><p>在摄像机标定中常用三个不同层次的坐标系统：</p><ol><li>世界坐标系(Xw，Yw，Zw)：也称真实或现实世界坐标系，或全局坐标系。它是客观世界的绝对坐标，由用户任意定义的三维空间坐标系。一般的3D场景都用这个坐标系来表示。</li><li>摄像机坐标系(Xc，Yc，Zc)：以小孔摄像机模型的聚焦中心为原点，以摄像机光轴为OZc 轴建立的三维直角坐标系。 Xc，Yc 一般与图像物理坐标系的X，Y 平行。</li><li>图像坐标系（图像像素坐标系和图像物理坐标系）：分为图像像素坐标系和图像物理坐标系两种：<br>图像物理坐标系（ Xu，Yu ）：其原点为透镜光轴与成像平面的交点，Xu 与Yu 轴分别平行于摄像机坐标系的Xc，Yc 轴，是平面直角坐标系，单位为毫米。<br>图像像素坐标系(u，v)：固定在图像上的以像素为单位的平面直角坐标系，其原点位于图像左上角， u，v 平行于图像物理坐标系的X 和Y轴。对于数字图像，分别为行列方向。</li></ol><h4 id="3-3-世界坐标与摄像机坐标之间的转换关系"><a href="#3-3-世界坐标与摄像机坐标之间的转换关系" class="headerlink" title="3.3 世界坐标与摄像机坐标之间的转换关系"></a>3.3 世界坐标与摄像机坐标之间的转换关系</h4><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/6.png"></p><h4 id="3-4-图像坐标系与摄像机坐标系变换关系"><a href="#3-4-图像坐标系与摄像机坐标系变换关系" class="headerlink" title="3.4 图像坐标系与摄像机坐标系变换关系"></a>3.4 图像坐标系与摄像机坐标系变换关系</h4><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/7.png"></p><h4 id="3-5-世界坐标系与图像坐标系变换关系"><a href="#3-5-世界坐标系与图像坐标系变换关系" class="headerlink" title="3.5 世界坐标系与图像坐标系变换关系"></a>3.5 世界坐标系与图像坐标系变换关系</h4><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/8.png"></p><h3 id="4-透镜畸变模型"><a href="#4-透镜畸变模型" class="headerlink" title="4. 透镜畸变模型"></a>4. 透镜畸变模型</h3><h4 id="4-1-成因"><a href="#4-1-成因" class="headerlink" title="4.1 成因"></a>4.1 成因</h4><p>由于摄像机物镜系统设计、制作、装配所引起的像点偏离其理想位置点位误差称为光学畸变，如下图所示：</p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/9.png"></p><h4 id="4-2-径向畸变和切向畸变"><a href="#4-2-径向畸变和切向畸变" class="headerlink" title="4.2 径向畸变和切向畸变"></a>4.2 径向畸变和切向畸变</h4><ol><li>光学畸变分为径向畸变和切向畸变两种。径向畸变像点沿径向方向偏离标准理想位置；垂直径向方向的畸变称为切向畸变。</li><li>对一般低精度要求的场合，只考虑径向畸变就可以，因为切向畸变的影响远小于径向畸变。</li></ol><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/10.png"></p><h5 id="4-2-1-径向畸变"><a href="#4-2-1-径向畸变" class="headerlink" title="4.2.1 径向畸变"></a>4.2.1 径向畸变</h5><ol><li>径向畸变就是沿着透镜半径方向分布的畸变，产生原因是光线在原理透镜中心的地方比靠近中心的地方更加弯曲，这种畸变在普通廉价的镜头中表现更加明显，径向畸变主要包括桶形畸变和枕形畸变两种。以下分别是枕形和桶形畸变示意图：</li></ol><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/11.png"></p><ol start="2"><li>径向畸变数学模型：成像仪光轴中心的畸变为0，沿着镜头半径方向向边缘移动，畸变越来越严重。畸变的数学模型可以用主点周围的泰勒级数展开式的前几项进行描述，通常使用前两项，即k1和k2，对于畸变很大的镜头，如鱼眼镜头，可以增加使用第三项k3来进行描述，成像仪上某点根据其在径向方向上的分布位置，调节公式为：</li></ol><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/12.png"></p><ol start="3"><li>径向畸变数学模型：公式里(x0，y0)是畸变点在成像器件上的原始位置，(x，y)是畸变校正后新的位置，下图是距离光心不同距离上的点经过透镜径向畸变后点位的偏移示意图，可以看到，距离光心越远，径向位移越大，表示畸变也越大，在光心附近，几乎没有偏移。</li></ol><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/13.png"></p><h5 id="4-2-2-切向畸变数学模型"><a href="#4-2-2-切向畸变数学模型" class="headerlink" title="4.2.2 切向畸变数学模型"></a>4.2.2 切向畸变数学模型</h5><p>切向畸变是由于透镜本身与相机传感器平面（成像平面）或图像平面不平行而产生的，这种情况多是由于透镜被粘贴到镜头模组上的安装偏差导致。畸变模型可以用两个额外的参数p1和p2来描述：</p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/14.png"></p><p>切向畸变数学模型：显示某个透镜的切向畸变示意图，大体上畸变位移相对于左下—右上角的连线是对称的，说明该镜头在垂直于该方向上有一个旋转角度。</p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/15.png"></p><h4 id="4-3-畸变校正"><a href="#4-3-畸变校正" class="headerlink" title="4.3 畸变校正"></a>4.3 畸变校正</h4><ol><li>径向畸变和切向畸变模型中一共有5个畸变参数</li><li>在OpenCV中他们被排列成一个5*1的矩阵，依次包含k1、k2、p1、p2、k3，经常被定义为Mat矩阵的形式，如Mat distCoeffs=Mat(1, 5, CV_32FC1, Scalar::all(0))；</li><li>求得这5个参数后，就可以校正由于镜头畸变引起的图像的变形失真，下图显示根据镜头畸变系数校正后的效果：</li></ol><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/16.jpg"></p><h3 id="5-摄像机标定方法"><a href="#5-摄像机标定方法" class="headerlink" title="5. 摄像机标定方法"></a>5. 摄像机标定方法</h3><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/16.png"></p><h4 id="5-1-线性标定方法"><a href="#5-1-线性标定方法" class="headerlink" title="5.1 线性标定方法"></a>5.1 线性标定方法</h4><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/17.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/18.png"></p><h4 id="5-2-非线性标定方法"><a href="#5-2-非线性标定方法" class="headerlink" title="5.2 非线性标定方法"></a>5.2 非线性标定方法</h4><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/19.png"></p><h4 id="5-3-两步标定法"><a href="#5-3-两步标定法" class="headerlink" title="5.3 两步标定法"></a>5.3 两步标定法</h4><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/20.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/21.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/22.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/23.png"></p><h4 id="5-4-张正友标定法"><a href="#5-4-张正友标定法" class="headerlink" title="5.4 张正友标定法"></a>5.4 张正友标定法</h4><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/23.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/24.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/25.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/26.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/27.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/28.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/29.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/30.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/31.png"></p><h4 id="5-5-摄像机标定结果"><a href="#5-5-摄像机标定结果" class="headerlink" title="5.5 摄像机标定结果"></a>5.5 摄像机标定结果</h4><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/32.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/33.png"></p><h3 id="6-机器人手眼标定"><a href="#6-机器人手眼标定" class="headerlink" title="6. 机器人手眼标定"></a>6. 机器人手眼标定</h3><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/34.png"></p><ol><li>机器人视觉应用中，手眼标定是一个非常基础且关键的问题。简单来说手眼标定的目的就是获取机器人坐标系和相机坐标系的关系，最后将视觉识别的结果转移到机器人坐标系下。</li><li>手眼标定分为两种形式，根据相机固定的地方不同，如果相机和机器人末端固定在一起，就称之为“眼在手”(eye in hand)，如果相机固定在机器人外面的底座上，则称之为“眼在外”(eye to hand)。</li></ol><h4 id="6-1-eye-in-hand"><a href="#6-1-eye-in-hand" class="headerlink" title="6.1 eye in hand"></a>6.1 eye in hand</h4><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/35.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/36.png"></p><h4 id="6-2-eye-to-hand"><a href="#6-2-eye-to-hand" class="headerlink" title="6.2 eye to hand"></a>6.2 eye to hand</h4><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/37.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/38.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/39.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/40.png"></p><p><img src="/2023/03/23/gong-zuo-jing-li/1-biao-ding-dui-wei-ji-chu-zong-jie/41.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工作经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19-GMM算法</title>
      <link href="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/"/>
      <url>/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="1-GMM算法直观理解"><a href="#1-GMM算法直观理解" class="headerlink" title="1. GMM算法直观理解"></a>1. GMM算法直观理解</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/1.png"></p><h4 id="概率密度函数"><a href="#概率密度函数" class="headerlink" title="概率密度函数"></a>概率密度函数</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/2.png"></p><h4 id="高斯分布"><a href="#高斯分布" class="headerlink" title="高斯分布"></a>高斯分布</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/3.png"></p><h4 id="K-means算法"><a href="#K-means算法" class="headerlink" title="K-means算法"></a>K-means算法</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/4.png"></p><h4 id="EM算法原理"><a href="#EM算法原理" class="headerlink" title="EM算法原理"></a>EM算法原理</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/5.png"></p><h4 id="图像分析"><a href="#图像分析" class="headerlink" title="图像分析"></a>图像分析</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/6.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/7.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/8.png"></p><h3 id="2-相关数学知识回顾"><a href="#2-相关数学知识回顾" class="headerlink" title="2. 相关数学知识回顾"></a>2. 相关数学知识回顾</h3><h4 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/9.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/10.png"></p><h4 id="协方差矩阵"><a href="#协方差矩阵" class="headerlink" title="协方差矩阵"></a>协方差矩阵</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/11.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/12.png"></p><h4 id="极大似然估计"><a href="#极大似然估计" class="headerlink" title="极大似然估计"></a>极大似然估计</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/13.png"></p><h4 id="贝叶斯公式"><a href="#贝叶斯公式" class="headerlink" title="贝叶斯公式"></a>贝叶斯公式</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/14.png"></p><h4 id="Jensen不等式"><a href="#Jensen不等式" class="headerlink" title="Jensen不等式"></a>Jensen不等式</h4><p>函数的期望小于等于期望的函数</p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/15.png"></p><h3 id="3-EM算法"><a href="#3-EM算法" class="headerlink" title="3. EM算法"></a>3. EM算法</h3><h4 id="3-1-算法引入"><a href="#3-1-算法引入" class="headerlink" title="3.1 算法引入"></a>3.1 算法引入</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/16.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/17.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/18.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/19.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/20.png"></p><h4 id="3-2-算法原理"><a href="#3-2-算法原理" class="headerlink" title="3.2 算法原理"></a>3.2 算法原理</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/21.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/22.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/23.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/24.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/25.png"></p><h4 id="3-3-算法流程"><a href="#3-3-算法流程" class="headerlink" title="3.3 算法流程"></a>3.3 算法流程</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/26.png"></p><h4 id="3-4-直观案例"><a href="#3-4-直观案例" class="headerlink" title="3.4 直观案例"></a>3.4 直观案例</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/27.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/28.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/29.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/30.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/31.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/32.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/33.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/34.png"></p><h3 id="4-GMM"><a href="#4-GMM" class="headerlink" title="4. GMM"></a>4. GMM</h3><h4 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/35.png"></p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/36.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/37.png"></p><h4 id="算法求解"><a href="#算法求解" class="headerlink" title="算法求解"></a>算法求解</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/38.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/39.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/40.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/41.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/42.png"></p><h3 id="5-代码实战"><a href="#5-代码实战" class="headerlink" title="5. 代码实战"></a>5. 代码实战</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/43.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/44.png"></p><h4 id="5-1-GMM底层处理"><a href="#5-1-GMM底层处理" class="headerlink" title="5.1 GMM底层处理"></a>5.1 GMM底层处理</h4><p>高斯混合模型的底层代码展示</p><p>复合正太分布的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">import</span> copy<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> mpl_toolkits<span class="token punctuation">.</span>mplot3d <span class="token keyword">import</span> Axes3D<span class="token comment"># 生成数据方法</span><span class="token comment"># 将数据点X使用全局变量处理，方便后续程序调用</span><span class="token comment"># 将均值mu设置为全局变量，进行随机初始化，方便后面计算期望</span><span class="token comment"># 将期望excep设置为全局变量，方便后续计算</span><span class="token comment"># 将混合系数设置为全局变量，方便后续计算</span><span class="token keyword">def</span> <span class="token function">generate_data</span><span class="token punctuation">(</span>sigma<span class="token punctuation">,</span> N<span class="token punctuation">,</span> mu1<span class="token punctuation">,</span> mu2<span class="token punctuation">,</span> mu3<span class="token punctuation">,</span> mu4<span class="token punctuation">,</span> alpha<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> X  <span class="token comment"># 可观测数据集</span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 初始化X，2行N列。2维数据，N个样本</span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    <span class="token keyword">global</span> mu  <span class="token comment"># 随机初始化mu1，mu2，mu3，mu4</span>    mu <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mu <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>mu<span class="token punctuation">)</span>    <span class="token keyword">global</span> excep  <span class="token comment"># 期望第i个样本属于第j个模型的概率的期望</span>    excep <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> alpha_  <span class="token comment"># 初始化混合项系数</span>    alpha_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.1</span><span class="token punctuation">:</span>  <span class="token comment"># 生成0-1之间随机数</span>            X<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>multivariate_normal<span class="token punctuation">(</span>mu1<span class="token punctuation">,</span> sigma<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 用第一个高斯模型生成2维数据</span>        <span class="token keyword">elif</span> <span class="token number">0.1</span> <span class="token operator">&lt;=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.3</span><span class="token punctuation">:</span>            X<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>multivariate_normal<span class="token punctuation">(</span>mu2<span class="token punctuation">,</span> sigma<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 用第二个高斯模型生成2维数据</span>        <span class="token keyword">elif</span> <span class="token number">0.3</span> <span class="token operator">&lt;=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.6</span><span class="token punctuation">:</span>            X<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>multivariate_normal<span class="token punctuation">(</span>mu3<span class="token punctuation">,</span> sigma<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 用第三个高斯模型生成2维数据</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            X<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>multivariate_normal<span class="token punctuation">(</span>mu4<span class="token punctuation">,</span> sigma<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 用第四个高斯模型生成2维数据</span><span class="token comment">#     print("可观测数据：\n",X)       #输出可观测样本</span><span class="token comment">#     print("初始化的mu1，mu2，mu3，mu4：",mu)      #输出初始化的mu</span><span class="token comment"># E步：</span><span class="token comment"># 获取全局变量，固定均值、方差及聚类数量，更新期望数值</span><span class="token keyword">def</span> <span class="token function">e_step</span><span class="token punctuation">(</span>sigma<span class="token punctuation">,</span> k<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> X    <span class="token keyword">global</span> mu    <span class="token keyword">global</span> excep    <span class="token keyword">global</span> alpha_    <span class="token comment">#遍历每一个样本</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 聚类样本数</span>        denom <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># 每一个样本进行各聚类类别概率的一个计算</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 聚类的类别数  聚成几个类别</span>            denom <span class="token operator">+=</span> alpha_<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> mu<span class="token punctuation">[</span>j<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> sigma<span class="token punctuation">.</span>I <span class="token operator">*</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>X<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> mu<span class="token punctuation">[</span>j<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>                np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>det<span class="token punctuation">(</span>sigma<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 分母</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>            numer <span class="token operator">=</span> math<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> mu<span class="token punctuation">[</span>j<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> sigma<span class="token punctuation">.</span>I <span class="token operator">*</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>X<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> mu<span class="token punctuation">[</span>j<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>                np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>det<span class="token punctuation">(</span>sigma<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 分子</span>            excep<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> alpha_<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> numer <span class="token operator">/</span> denom  <span class="token comment"># 求期望</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"隐藏变量：\n"</span><span class="token punctuation">,</span> excep<span class="token punctuation">)</span>    <span class="token comment"># M步：</span><span class="token comment"># 固定期望，计算均值，混合项系数</span><span class="token keyword">def</span> <span class="token function">m_step</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> excep    <span class="token keyword">global</span> X    <span class="token keyword">global</span> alpha_    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        denom <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 分母</span>        numer <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 分子</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>            numer <span class="token operator">+=</span> excep<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">*</span> X<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>            denom <span class="token operator">+=</span> excep<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span>        mu<span class="token punctuation">[</span>j<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> numer <span class="token operator">/</span> denom  <span class="token comment"># 求均值</span>        alpha_<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> denom <span class="token operator">/</span> N  <span class="token comment"># 求混合项系数</span>        <span class="token comment"># 计算过程，将数据值进行处理，进行计算</span>iter_num <span class="token operator">=</span> <span class="token number">6</span>  <span class="token comment"># 迭代次数</span>N <span class="token operator">=</span> <span class="token number">500</span>  <span class="token comment"># 样本数目</span>k <span class="token operator">=</span> <span class="token number">4</span>  <span class="token comment"># 高斯模型数</span>probility <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>N<span class="token punctuation">)</span>  <span class="token comment"># 混合高斯分布</span>u1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span>u2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span>u3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>u4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span>sigma <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 协方差矩阵</span>alpha <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">]</span>  <span class="token comment"># 混合项系数</span>generate_data<span class="token punctuation">(</span>sigma<span class="token punctuation">,</span> N<span class="token punctuation">,</span> u1<span class="token punctuation">,</span> u2<span class="token punctuation">,</span> u3<span class="token punctuation">,</span> u4<span class="token punctuation">,</span> alpha<span class="token punctuation">)</span>  <span class="token comment"># 生成数据</span><span class="token comment"># 迭代计算</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iter_num<span class="token punctuation">)</span><span class="token punctuation">:</span>    err <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 均值误差</span>    err_alpha <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 混合项系数误差</span>    Old_mu <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>mu<span class="token punctuation">)</span>    Old_alpha <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>alpha_<span class="token punctuation">)</span>    e_step<span class="token punctuation">(</span>sigma<span class="token punctuation">,</span> k<span class="token punctuation">,</span> N<span class="token punctuation">)</span>  <span class="token comment"># E步</span>    m_step<span class="token punctuation">(</span>k<span class="token punctuation">,</span> N<span class="token punctuation">)</span>  <span class="token comment"># M步</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"迭代次数:"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"估计的均值:"</span><span class="token punctuation">,</span> mu<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"估计的混合项系数:"</span><span class="token punctuation">,</span> alpha_<span class="token punctuation">)</span>    <span class="token keyword">for</span> z <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>        err <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>Old_mu<span class="token punctuation">[</span>z<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> mu<span class="token punctuation">[</span>z<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>Old_mu<span class="token punctuation">[</span>z<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> mu<span class="token punctuation">[</span>z<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 计算误差</span>        err_alpha <span class="token operator">+=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>Old_alpha<span class="token punctuation">[</span>z<span class="token punctuation">]</span> <span class="token operator">-</span> alpha_<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&lt;=</span> <span class="token number">0.001</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>err_alpha <span class="token operator">&lt;</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 达到精度退出迭代</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> err_alpha<span class="token punctuation">)</span>        <span class="token keyword">break</span>        <span class="token comment"># 进行可视化输出，观察输出效果</span><span class="token comment"># 可视化结果</span><span class="token comment"># 画生成的原始数据</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">,</span>            marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">)</span>  <span class="token comment"># T散点颜色，s散点大小，alpha透明度，marker散点形状</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'random generated data'</span><span class="token punctuation">)</span><span class="token comment"># 画分类好的数据</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'classified data through EM'</span><span class="token punctuation">)</span>order <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>N<span class="token punctuation">)</span>color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token comment">#对不同聚类结果的数据进行颜色渲染</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> excep<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token builtin">max</span><span class="token punctuation">(</span>excep<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            order<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j  <span class="token comment"># 选出X[i,:]属于第几个高斯模型</span>        probility<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> alpha_<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>order<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>            <span class="token operator">-</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> mu<span class="token punctuation">[</span>j<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> sigma<span class="token punctuation">.</span>I <span class="token operator">*</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>X<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> mu<span class="token punctuation">[</span>j<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                                    np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>det<span class="token punctuation">(</span>sigma<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">)</span>  <span class="token comment"># 计算混合高斯分布</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>color<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>order<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">)</span>  <span class="token comment"># 绘制分类后的散点图</span><span class="token comment"># 绘制三维图像</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">223</span><span class="token punctuation">,</span> projection<span class="token operator">=</span><span class="token string">'3d'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'3d view'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>    ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> probility<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>color<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>order<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/45.png"></p><h4 id="5-2-调库实现高斯混合模型"><a href="#5-2-调库实现高斯混合模型" class="headerlink" title="5.2 调库实现高斯混合模型"></a>5.2 调库实现高斯混合模型</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>colors<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>mixture <span class="token keyword">import</span> GaussianMixture <span class="token comment"># 高斯混合模型</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token comment"># 解决中文显示问题</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">u'SimHei'</span><span class="token punctuation">]</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment">## 数据加载</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'../datas/HeightWeight.csv'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"数据样本数量:%d, 特征数量:%d"</span> <span class="token operator">%</span> data<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>x <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>数据样本数量<span class="token punctuation">:</span><span class="token number">114</span><span class="token punctuation">,</span> 特征数量<span class="token punctuation">:</span><span class="token number">3</span>   Sex  Height<span class="token punctuation">(</span>cm<span class="token punctuation">)</span>  Weight<span class="token punctuation">(</span>kg<span class="token punctuation">)</span><span class="token number">0</span>    <span class="token number">0</span>       <span class="token number">156.0</span>        <span class="token number">50.0</span><span class="token number">1</span>    <span class="token number">0</span>       <span class="token number">160.0</span>        <span class="token number">60.0</span><span class="token number">2</span>    <span class="token number">0</span>       <span class="token number">162.0</span>        <span class="token number">54.0</span><span class="token number">3</span>    <span class="token number">0</span>       <span class="token number">162.0</span>        <span class="token number">55.0</span><span class="token number">4</span>    <span class="token number">0</span>       <span class="token number">160.5</span>        <span class="token number">56.0</span><span class="token comment"># 打印每个类别的均值和方差</span><span class="token comment">## 数据分割</span>x<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> train_size<span class="token operator">=</span><span class="token number">0.6</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">## 模型创建及训练</span>gmm <span class="token operator">=</span> GaussianMixture<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#聚成2类</span>gmm<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment">## 模型相关参数输出</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'均值 = \n'</span><span class="token punctuation">,</span> gmm<span class="token punctuation">.</span>means_<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'方差 = \n'</span><span class="token punctuation">,</span> gmm<span class="token punctuation">.</span>covariances_<span class="token punctuation">)</span>均值 <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">160.13983374</span>   <span class="token number">55.93370575</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">173.50243688</span>   <span class="token number">65.03359308</span><span class="token punctuation">]</span><span class="token punctuation">]</span>方差 <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">18.82128194</span>   <span class="token number">12.30370549</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span>  <span class="token number">12.30370549</span>   <span class="token number">31.23596113</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">23.22794989</span>   <span class="token number">28.48688647</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span>  <span class="token number">28.48688647</span>  <span class="token number">105.81824734</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token comment"># 准确率计算</span><span class="token comment"># 获取预测值</span>y_hat <span class="token operator">=</span> gmm<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>y_test_hat <span class="token operator">=</span> gmm<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token comment"># 查看一下类别是否需要更改一下</span>change <span class="token operator">=</span> <span class="token punctuation">(</span>gmm<span class="token punctuation">.</span>means_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> gmm<span class="token punctuation">.</span>means_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> change<span class="token punctuation">:</span>    z <span class="token operator">=</span> y_hat <span class="token operator">==</span> <span class="token number">0</span>    y_hat<span class="token punctuation">[</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    y_hat<span class="token punctuation">[</span><span class="token operator">~</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    z <span class="token operator">=</span> y_test_hat <span class="token operator">==</span> <span class="token number">0</span>    y_test_hat<span class="token punctuation">[</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    y_test_hat<span class="token punctuation">[</span><span class="token operator">~</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 计算准确率</span>acc <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>y_hat<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>acc_test <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>y_test_hat<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> y_test<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>acc_str <span class="token operator">=</span> <span class="token string">'训练集准确率：%.2f%%'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>acc <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>acc_test_str <span class="token operator">=</span> <span class="token string">'测试集准确率：%.2f%%'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>acc_test <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>acc_str<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>acc_test_str<span class="token punctuation">)</span>训练集准确率：<span class="token number">77.94</span><span class="token operator">%</span>测试集准确率：<span class="token number">82.61</span><span class="token operator">%</span><span class="token comment"># 打印准确率并绘制效果图</span><span class="token comment">## 画图</span>cm_light <span class="token operator">=</span> mpl<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>ListedColormap<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'#FFA0A0'</span><span class="token punctuation">,</span> <span class="token string">'#A0FFA0'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cm_dark <span class="token operator">=</span> mpl<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>ListedColormap<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 获取数据的最大值和最小值</span>x1_min<span class="token punctuation">,</span> x2_min <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>x1_max<span class="token punctuation">,</span> x2_max <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>x1_d <span class="token operator">=</span> <span class="token punctuation">(</span>x1_max <span class="token operator">-</span> x1_min<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.05</span>x1_min <span class="token operator">-=</span> x1_dx1_max <span class="token operator">+=</span> x1_dx2_d <span class="token operator">=</span> <span class="token punctuation">(</span>x2_max <span class="token operator">-</span> x2_min<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.05</span>x2_min <span class="token operator">-=</span> x2_dx2_max <span class="token operator">+=</span> x2_d<span class="token comment"># 获取网格预测数据</span>x1<span class="token punctuation">,</span> x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>mgrid<span class="token punctuation">[</span>x1_min<span class="token punctuation">:</span>x1_max<span class="token punctuation">:</span><span class="token number">400j</span><span class="token punctuation">,</span> x2_min<span class="token punctuation">:</span>x2_max<span class="token punctuation">:</span><span class="token number">400j</span><span class="token punctuation">]</span>grid_test <span class="token operator">=</span> np<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token punctuation">.</span>flat<span class="token punctuation">,</span> x2<span class="token punctuation">.</span>flat<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>grid_hat <span class="token operator">=</span> gmm<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>grid_test<span class="token punctuation">)</span>grid_hat <span class="token operator">=</span> grid_hat<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x1<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment"># 如果预测的结果需要进行更改</span><span class="token keyword">if</span> change<span class="token punctuation">:</span>    z <span class="token operator">=</span> grid_hat <span class="token operator">==</span> <span class="token number">0</span>    grid_hat<span class="token punctuation">[</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    grid_hat<span class="token punctuation">[</span><span class="token operator">~</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 画图开始</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token comment"># 画区域图</span>plt<span class="token punctuation">.</span>pcolormesh<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> grid_hat<span class="token punctuation">,</span> cmap<span class="token operator">=</span>cm_light<span class="token punctuation">)</span><span class="token comment"># 画点图</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">[</span>x<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>x<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y<span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>cm_dark<span class="token punctuation">,</span> edgecolors<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x_test<span class="token punctuation">[</span>x_test<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x_test<span class="token punctuation">[</span>x_test<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y_test<span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'^'</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>cm_dark<span class="token punctuation">,</span> edgecolors<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">)</span><span class="token comment"># 获取预测概率</span>aaa <span class="token operator">=</span> gmm<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>grid_test<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"预测概率:\n"</span><span class="token punctuation">,</span> aaa<span class="token punctuation">)</span>p <span class="token operator">=</span> aaa<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x1<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment"># 根据概率画出曲线图（画出不同概率情况下的预测结果值）</span>CS <span class="token operator">=</span> plt<span class="token punctuation">.</span>contour<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> p<span class="token punctuation">,</span> levels<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> colors<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'crgb'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> linewidths<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>clabel<span class="token punctuation">(</span>CS<span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">'%.1f'</span><span class="token punctuation">,</span> inline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 设置值</span>ax1_min<span class="token punctuation">,</span> ax1_max<span class="token punctuation">,</span> ax2_min<span class="token punctuation">,</span> ax2_max <span class="token operator">=</span> plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">)</span>xx <span class="token operator">=</span> <span class="token number">0.9</span><span class="token operator">*</span>ax1_min <span class="token operator">+</span> <span class="token number">0.1</span><span class="token operator">*</span>ax1_maxyy <span class="token operator">=</span> <span class="token number">0.1</span><span class="token operator">*</span>ax2_min <span class="token operator">+</span> <span class="token number">0.9</span><span class="token operator">*</span>ax2_maxplt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>xx<span class="token punctuation">,</span> yy<span class="token punctuation">,</span> acc_str<span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span>yy <span class="token operator">=</span> <span class="token number">0.15</span><span class="token operator">*</span>ax2_min <span class="token operator">+</span> <span class="token number">0.85</span><span class="token operator">*</span>ax2_maxplt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>xx<span class="token punctuation">,</span> yy<span class="token punctuation">,</span> acc_test_str<span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token comment"># 设置范围及标签</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span>x1_min<span class="token punctuation">,</span> x1_max<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span>x2_min<span class="token punctuation">,</span> x2_max<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">u'身高(cm)'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token string">'large'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">u'体重(kg)'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token string">'large'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">u'GMM算法及不同比率值下的算法模型'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>预测概率<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">9.99997750e-01</span>   <span class="token number">2.25031842e-06</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>  <span class="token number">9.99997860e-01</span>   <span class="token number">2.13975166e-06</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>  <span class="token number">9.99997964e-01</span>   <span class="token number">2.03578458e-06</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>  <span class="token number">6.65298746e-11</span>   <span class="token number">1.00000000e+00</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>  <span class="token number">5.92026271e-11</span>   <span class="token number">1.00000000e+00</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>  <span class="token number">5.26521608e-11</span>   <span class="token number">1.00000000e+00</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/19-gmm-suan-fa/46.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> GMM算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18-聚类算法</title>
      <link href="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/"/>
      <url>/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="1-聚类算法-K-means"><a href="#1-聚类算法-K-means" class="headerlink" title="1. 聚类算法-K-means"></a>1. 聚类算法-K-means</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/1.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/2.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/3.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/4.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/5.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/6.png"></p><h4 id="1-1-K-means底层算法实现"><a href="#1-1-K-means底层算法实现" class="headerlink" title="1.1 K-means底层算法实现"></a>1.1 K-means底层算法实现</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> copyplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">u'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># 处理前效果演示</span><span class="token comment"># 质心位置为随机样本点</span><span class="token comment"># 样本集</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span> <span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#shape(4, 2)</span><span class="token comment">#定义初始化质心</span>C <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'样本点'</span><span class="token punctuation">)</span> <span class="token comment">#X[:, 0]处理每个样本点第一个特征</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>C<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'质心'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'处理前效果'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/7.png"></p><p>底层实现核心内容</p><p>1.计算所有样本点到每个质心距离<br>2.比较样本点距离哪一个质心更近，就记为哪一个簇<br>3.使用当前簇内的样本，采用均值方式，更新质心位置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">iters <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">#循环次数，如果说质心没有确定下来，模型只执行5次</span>x <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 统计迭代的次数</span><span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    iters <span class="token operator">-=</span> <span class="token number">1</span>    x <span class="token operator">+=</span> <span class="token number">1</span>    B <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#每个样本点到质心的距离</span>    C_ <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token comment"># 深层拷贝，质心需要更新，停止条件质心不再变化， 后续要比较C_ == C是否相等</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> C<span class="token punctuation">:</span>        <span class="token comment">#计算每个点到质心的欧式距离</span>        dis <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X <span class="token operator">-</span> c<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># print(dis)</span>        B<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dis<span class="token punctuation">)</span>    <span class="token comment">#求样本点属于哪一个类别</span>    <span class="token comment"># print(B)</span>    min_idx <span class="token operator">=</span> np<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># print(min_idx)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#更换每个质心的位置</span>        C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X<span class="token punctuation">[</span>min_idx <span class="token operator">==</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>C <span class="token operator">-</span> C_<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token comment"># 终止条件，使用之前的质心位置和当前质心位置进行比较，如果没有变化，就停止迭代</span>        <span class="token keyword">break</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>min_idx<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'样本点'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>C<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'质心'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'第%d次处理后的聚类效果'</span><span class="token operator">%</span>x<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/8.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/9.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>min_idx<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.5</span>  <span class="token number">2.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">6.5</span>  <span class="token number">8.</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-K-means衍生算法"><a href="#2-K-means衍生算法" class="headerlink" title="2. K-means衍生算法"></a>2. K-means衍生算法</h3><h4 id="2-1-K-means缺点"><a href="#2-1-K-means缺点" class="headerlink" title="2.1 K-means缺点"></a>2.1 K-means缺点</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/10.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/11.png"></p><h4 id="2-2-K-means"><a href="#2-2-K-means" class="headerlink" title="2.2 K-means++"></a>2.2 K-means++</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/12.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/13.png"></p><h4 id="2-3-K-means"><a href="#2-3-K-means" class="headerlink" title="2.3 K-means||"></a>2.3 K-means||</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/14.png"></p><h4 id="2-4-性能评估"><a href="#2-4-性能评估" class="headerlink" title="2.4 性能评估"></a>2.4 性能评估</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/15.png"></p><h4 id="2-5-K-means与K-means-对比-代码"><a href="#2-5-K-means与K-means-对比-代码" class="headerlink" title="2.5 K-means与K-means++对比-代码"></a>2.5 K-means与K-means++对比-代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">as</span> ds     <span class="token comment">## 随机数据生成</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>colors<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeans<span class="token comment"># 指定输出的边界</span><span class="token keyword">def</span> <span class="token function">expand</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">+</span><span class="token number">1</span><span class="token comment">#最小值-1，最大值+1</span>N <span class="token operator">=</span> <span class="token number">400</span><span class="token comment">#400个样本点</span>centers <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment"># 4个中心</span><span class="token comment"># 样本点数量，特征数，中心数，随机种子</span>data<span class="token punctuation">,</span> y <span class="token operator">=</span> ds<span class="token punctuation">.</span>make_blobs<span class="token punctuation">(</span>N<span class="token punctuation">,</span> n_features<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> centers<span class="token operator">=</span>centers<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>matplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">u'SimHei'</span><span class="token punctuation">]</span>matplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>cm <span class="token operator">=</span> matplotlib<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>ListedColormap<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'rgbm'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 指定四个中心的颜色，红绿蓝，粉</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">u'原始数据'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>cm<span class="token punctuation">)</span>x1_min<span class="token punctuation">,</span> x2_min <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>x1_max<span class="token punctuation">,</span> x2_max <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>x1_min<span class="token punctuation">,</span> x1_max <span class="token operator">=</span> expand<span class="token punctuation">(</span>x1_min<span class="token punctuation">,</span> x1_max<span class="token punctuation">)</span>x2_min<span class="token punctuation">,</span> x2_max <span class="token operator">=</span> expand<span class="token punctuation">(</span>x2_min<span class="token punctuation">,</span> x2_max<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span>x1_min<span class="token punctuation">,</span> x1_max<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span>x2_min<span class="token punctuation">,</span> x2_max<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/16.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Kmeans的调用， 默认形式是采用K-means++进行处理的，如果使用K-means操作，就需要init='random'</span>cls <span class="token operator">=</span> KMeans<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> init<span class="token operator">=</span><span class="token string">'random'</span><span class="token punctuation">)</span>y_hat <span class="token operator">=</span> cls<span class="token punctuation">.</span>fit_predict<span class="token punctuation">(</span>data<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">u'KMeans聚类'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y_hat<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>cm<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span>x1_min<span class="token punctuation">,</span> x1_max<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span>x2_min<span class="token punctuation">,</span> x2_max<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/17.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># K-means++调用</span>cls <span class="token operator">=</span> KMeans<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> init<span class="token operator">=</span><span class="token string">'k-means++'</span><span class="token punctuation">)</span>y_hat <span class="token operator">=</span> cls<span class="token punctuation">.</span>fit_predict<span class="token punctuation">(</span>data<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">u'KMeans++聚类'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y_hat<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>cm<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span>x1_min<span class="token punctuation">,</span> x1_max<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span>x2_min<span class="token punctuation">,</span> x2_max<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/18.png"></p><h3 id="3-聚类算法评估"><a href="#3-聚类算法评估" class="headerlink" title="3. 聚类算法评估"></a>3. 聚类算法评估</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/19.png"></p><h4 id="3-1-肘部法"><a href="#3-1-肘部法" class="headerlink" title="3.1 肘部法"></a>3.1 肘部法</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/20.png"></p><p>用来查找分成多少个簇聚类效果最好</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> os<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeans<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> silhouette_score   <span class="token comment">#轮廓系数</span><span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token comment">#防止anaconda报警告性错误</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'../datas/drink.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>calorie  caffeine  sodium   price<span class="token number">0</span>     <span class="token number">207.2</span>       <span class="token number">3.3</span>     <span class="token number">15.5</span>    <span class="token number">2.8</span><span class="token number">1</span>      <span class="token number">36.8</span>       <span class="token number">5.9</span>     <span class="token number">12.9</span>    <span class="token number">3.3</span><span class="token number">2</span>      <span class="token number">72.2</span>       <span class="token number">7.3</span>      <span class="token number">8.2</span>    <span class="token number">2.4</span><span class="token number">3</span>      <span class="token number">36.7</span>       <span class="token number">0.4</span>     <span class="token number">10.5</span>    <span class="token number">4.0</span><span class="token number">4</span>     <span class="token number">121.7</span>       <span class="token number">4.1</span>      <span class="token number">9.2</span>    <span class="token number">3.5</span><span class="token number">5</span>      <span class="token number">89.1</span>       <span class="token number">4.0</span>     <span class="token number">10.2</span>    <span class="token number">3.3</span><span class="token number">6</span>     <span class="token number">146.7</span>       <span class="token number">4.3</span>      <span class="token number">9.7</span>    <span class="token number">1.8</span><span class="token number">7</span>      <span class="token number">57.6</span>       <span class="token number">2.2</span>     <span class="token number">13.6</span>    <span class="token number">2.1</span><span class="token number">8</span>      <span class="token number">95.9</span>       <span class="token number">0.0</span>      <span class="token number">8.5</span>    <span class="token number">1.3</span><span class="token number">9</span>     <span class="token number">199.0</span>       <span class="token number">0.0</span>     <span class="token number">10.6</span>    <span class="token number">3.5</span><span class="token number">10</span>     <span class="token number">49.8</span>       <span class="token number">8.0</span>      <span class="token number">6.3</span>    <span class="token number">3.7</span><span class="token number">11</span>     <span class="token number">16.6</span>       <span class="token number">4.7</span>      <span class="token number">6.3</span>    <span class="token number">1.5</span><span class="token number">12</span>     <span class="token number">38.5</span>       <span class="token number">3.7</span>      <span class="token number">7.7</span>    <span class="token number">2.0</span><span class="token number">13</span>      <span class="token number">0.0</span>       <span class="token number">4.2</span>     <span class="token number">13.1</span>    <span class="token number">2.2</span><span class="token number">14</span>    <span class="token number">118.8</span>       <span class="token number">4.7</span>      <span class="token number">7.2</span>    <span class="token number">4.1</span><span class="token number">15</span>    <span class="token number">107.0</span>       <span class="token number">0.0</span>      <span class="token number">8.3</span>    <span class="token number">4.2</span><span class="token comment"># 画图查找最优K点</span><span class="token comment"># 当k小于真实聚类数时，由于k的增大会大幅增加每个簇的聚合程度，故SSE的下降幅度会很大，而当k到达真实聚类数时，再增加k所得到的聚合程度回报会迅速变小，所以SSE的下降幅度会骤减，然后随着k值的继续增大而趋于平缓，也就是说SSE和k的关系图是一个手肘的形状! 可以看出k=3的效果是最好效果</span>record1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#记录每一次生成SSE</span>record2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#轮廓系数</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># k值范围2-9</span>    kmeans <span class="token operator">=</span> KMeans<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    kmeans<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    record1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>kmeans<span class="token punctuation">.</span>inertia_<span class="token punctuation">)</span> <span class="token comment">#inertia簇内误差平方和  SSE    下降最大 中 小 中点</span>    label <span class="token operator">=</span> kmeans<span class="token punctuation">.</span>labels_    record2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>silhouette_score<span class="token punctuation">(</span>data<span class="token punctuation">,</span>label<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#轮廓系数    轮廓系数接近与1的点</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>record1<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>record1<span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># k=3是最优k值点</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>record2<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>record2<span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># k=3是最优k值点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/24.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/25.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/21.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/22.png"></p><h4 id="3-2-评估指标"><a href="#3-2-评估指标" class="headerlink" title="3.2 评估指标"></a>3.2 评估指标</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeans<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> v_measure_score<span class="token punctuation">,</span> silhouette_score <span class="token comment"># v测量，轮廓系数</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span> <span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#第三个数值是实际标签</span>C <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 前两个数值作为特征</span>label <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#最后一个数值作为标签</span><span class="token comment"># 聚类创建，预测聚类效果</span><span class="token comment">#生成2个聚类</span>model <span class="token operator">=</span> KMeans<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>C<span class="token punctuation">)</span><span class="token comment">#质心位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>cluster_centers_<span class="token punctuation">)</span>labels <span class="token operator">=</span> model<span class="token punctuation">.</span>labels_<span class="token comment">#分类结果</span><span class="token keyword">print</span><span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">6.5</span>  <span class="token number">8.</span>   <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">1.5</span>  <span class="token number">2.</span>   <span class="token number">1.</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 打印数据结果</span><span class="token keyword">print</span><span class="token punctuation">(</span>silhouette_score<span class="token punctuation">(</span>X<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> metric<span class="token operator">=</span><span class="token string">'euclidean'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#轮廓得分（轮廓系数法，后面会提到）</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>inertia_<span class="token punctuation">)</span><span class="token comment">#最小化平方误差E SSE</span><span class="token keyword">print</span><span class="token punctuation">(</span>v_measure_score<span class="token punctuation">(</span>label<span class="token punctuation">,</span> labels<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#均一性和完整性的加权平均</span><span class="token number">0.873102619457</span><span class="token number">1.0</span><span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/23.png"></p><h3 id="4-密度聚类-DBSCAN"><a href="#4-密度聚类-DBSCAN" class="headerlink" title="4. 密度聚类-DBSCAN"></a>4. 密度聚类-DBSCAN</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/24.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/25.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/26.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/27.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/28.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/29.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/30.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/31.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/32.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/33.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/34.png"></p><p>密度聚类案例</p><p>基于密度进行计算聚类<br>可以处理非凸数据<br>可以查找噪声点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets     <span class="token comment"># 生成数据</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeans<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> DBSCAN<span class="token comment"># 使用随机样本点生成初始样本状态</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span>X1<span class="token punctuation">,</span> y1<span class="token operator">=</span>datasets<span class="token punctuation">.</span>make_circles<span class="token punctuation">(</span>n_samples<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span> factor<span class="token operator">=</span><span class="token number">.6</span><span class="token punctuation">,</span> noise<span class="token operator">=</span><span class="token number">.05</span><span class="token punctuation">)</span>X2<span class="token punctuation">,</span> y2 <span class="token operator">=</span> datasets<span class="token punctuation">.</span>make_blobs<span class="token punctuation">(</span>n_samples<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> n_features<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> centers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token number">1.2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                              cluster_std<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">.1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>X1<span class="token punctuation">,</span> X2<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'原始数据样本点分布'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/35.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用K-means进行样本聚类，啧啧，效果不太好</span>y_pred <span class="token operator">=</span> KMeans<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y_pred<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'K-means算法进行聚类处理'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y_pred<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/36.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用密度聚类DBSCAN，会发现，如果不设置半径和数量很难有效生成簇</span>y_pred <span class="token operator">=</span> DBSCAN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y_pred<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'默认参数密度聚类'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/37.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 如果通过调整半径和样本数量，可以有效体现聚类效果</span>y_pred <span class="token operator">=</span> DBSCAN<span class="token punctuation">(</span>eps <span class="token operator">=</span> <span class="token number">0.08</span><span class="token punctuation">,</span> min_samples<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token comment">#eps = 0.08 半径, min_samples=3样本数量</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y_pred<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'设置参数的密度聚类'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/38.png"></p><h3 id="5-层次聚类"><a href="#5-层次聚类" class="headerlink" title="5. 层次聚类"></a>5. 层次聚类</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/39.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/40.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/41.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/42.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/43.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/44.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/45.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/46.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/47.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/48.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/49.png"></p><p>层次聚类 凝聚聚类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> AgglomerativeClustering<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> scipy<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span>hierarchy <span class="token keyword">as</span> sch<span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x1'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">16.9</span><span class="token punctuation">,</span><span class="token number">38.5</span><span class="token punctuation">,</span><span class="token number">39.5</span><span class="token punctuation">,</span><span class="token number">80.8</span><span class="token punctuation">,</span><span class="token number">82</span><span class="token punctuation">,</span><span class="token number">34.6</span><span class="token punctuation">,</span><span class="token number">116.1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>x1<span class="token number">0</span>   <span class="token number">16.9</span><span class="token number">1</span>   <span class="token number">38.5</span><span class="token number">2</span>   <span class="token number">39.5</span><span class="token number">3</span>   <span class="token number">80.8</span><span class="token number">4</span>   <span class="token number">82.0</span><span class="token number">5</span>   <span class="token number">34.6</span><span class="token number">6</span>  <span class="token number">116.1</span><span class="token comment"># 将聚类分成三个类别，并对聚类结果进行聚类处理</span>ac <span class="token operator">=</span> AgglomerativeClustering<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">#凝聚聚类</span>ac<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>data<span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'cluster'</span><span class="token punctuation">]</span> <span class="token operator">=</span> ac<span class="token punctuation">.</span>labels_ <span class="token comment">#将聚类结果进行处理，分别对应样本</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>x1  cluster<span class="token number">0</span>   <span class="token number">16.9</span>        <span class="token number">0</span><span class="token number">1</span>   <span class="token number">38.5</span>        <span class="token number">0</span><span class="token number">2</span>   <span class="token number">39.5</span>        <span class="token number">0</span><span class="token number">3</span>   <span class="token number">80.8</span>        <span class="token number">1</span><span class="token number">4</span>   <span class="token number">82.0</span>        <span class="token number">1</span><span class="token number">5</span>   <span class="token number">34.6</span>        <span class="token number">0</span><span class="token number">6</span>  <span class="token number">116.1</span>        <span class="token number">2</span><span class="token comment"># 生成可视化效果图</span><span class="token comment"># 生成点与点之间的距离矩阵,这里用的欧氏距离:</span>dis <span class="token operator">=</span> sch<span class="token punctuation">.</span>distance<span class="token punctuation">.</span>pdist<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'euclidean'</span><span class="token punctuation">)</span><span class="token comment"># 将层级聚类结果以树状图表示出来</span>model <span class="token operator">=</span> sch<span class="token punctuation">.</span>linkage<span class="token punctuation">(</span>dis<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'average'</span><span class="token punctuation">)</span>pic <span class="token operator">=</span> sch<span class="token punctuation">.</span>dendrogram<span class="token punctuation">(</span>model<span class="token punctuation">,</span>labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/18-ju-lei-suan-fa/50.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 聚类算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17-支持向量机SVM</title>
      <link href="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/"/>
      <url>/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/</url>
      
        <content type="html"><![CDATA[<h3 id="1-数学概述"><a href="#1-数学概述" class="headerlink" title="1. 数学概述"></a>1. 数学概述</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/1.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/2.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/3.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/4.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/5.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/6.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/7.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/8.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/9.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/10.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/11.png"></p><h3 id="2-SVM概述"><a href="#2-SVM概述" class="headerlink" title="2. SVM概述"></a>2. SVM概述</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/12.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/13.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/14.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/15.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/16.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/17.png"></p><h3 id="3-硬间隔SVM"><a href="#3-硬间隔SVM" class="headerlink" title="3. 硬间隔SVM"></a>3. 硬间隔SVM</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/18.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/19.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/20.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/21.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/22.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/23.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/24.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/25.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/26.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/27.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/28.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/29.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/30.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/31.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/32.png"></p><h3 id="4-软间隔SVM"><a href="#4-软间隔SVM" class="headerlink" title="4. 软间隔SVM"></a>4. 软间隔SVM</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/33.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/34.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/35.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/36.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/37.png"></p><h3 id="5-核函数"><a href="#5-核函数" class="headerlink" title="5. 核函数"></a>5. 核函数</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/38.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/39.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/40.png"></p><h3 id="6-代码实战"><a href="#6-代码实战" class="headerlink" title="6. 代码实战"></a>6. 代码实战</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/41.png"></p><h4 id="6-1-SVM分类"><a href="#6-1-SVM分类" class="headerlink" title="6.1 SVM分类"></a>6.1 SVM分类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVC <span class="token comment"># SVM分类包</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token comment"># 数据预处理的工作，便签化数据</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'..\datas\iris.txt'</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>x <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>label <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> label<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">]</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token comment"># 惩罚项系数， 高斯核函数进行处理   gamma=20初始化系数，核函数的强度</span>clf <span class="token operator">=</span> SVC<span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> kernel<span class="token operator">=</span><span class="token string">'rbf'</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> decision_function_shape<span class="token operator">=</span><span class="token string">'ovr'</span><span class="token punctuation">)</span>clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>SVC<span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> cache_size<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> class_weight<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> coef0<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span>  decision_function_shape<span class="token operator">=</span><span class="token string">'ovr'</span><span class="token punctuation">,</span> degree<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> kernel<span class="token operator">=</span><span class="token string">'rbf'</span><span class="token punctuation">,</span>  max_iter<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> probability<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> shrinking<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  tol<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 训练集的准确率</span>y_train_hat <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>accuracy_score<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> y_train_hat<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 0.857142857143</span><span class="token comment"># 预测集的准确率</span>y_test_hat <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_test_hat<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 0.8</span>iris_feature <span class="token operator">=</span> <span class="token string">'花萼长度'</span><span class="token punctuation">,</span> <span class="token string">'花萼宽度'</span><span class="token punctuation">,</span> <span class="token string">'花瓣长度'</span><span class="token punctuation">,</span> <span class="token string">'花瓣宽度'</span>x1_min<span class="token punctuation">,</span> x1_max <span class="token operator">=</span> x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 第0列的范围</span>x2_min<span class="token punctuation">,</span> x2_max <span class="token operator">=</span> x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 第1列的范围</span>x1<span class="token punctuation">,</span> x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>mgrid<span class="token punctuation">[</span>x1_min<span class="token punctuation">:</span>x1_max<span class="token punctuation">:</span><span class="token number">500j</span><span class="token punctuation">,</span> x2_min<span class="token punctuation">:</span>x2_max<span class="token punctuation">:</span><span class="token number">500j</span><span class="token punctuation">]</span>  <span class="token comment"># 生成网格采样点</span>grid_test <span class="token operator">=</span> np<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token punctuation">.</span>flat<span class="token punctuation">,</span> x2<span class="token punctuation">.</span>flat<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 测试点</span>Z <span class="token operator">=</span> clf<span class="token punctuation">.</span>decision_function<span class="token punctuation">(</span>grid_test<span class="token punctuation">)</span>  <span class="token comment"># 样本到决策面的距离</span><span class="token keyword">print</span><span class="token punctuation">(</span>Z<span class="token punctuation">)</span>grid_hat <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>grid_test<span class="token punctuation">)</span>  <span class="token comment"># 预测分类值</span><span class="token keyword">print</span><span class="token punctuation">(</span>grid_hat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.09643098</span>  <span class="token number">1.03911255</span>  <span class="token number">2.05731843</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.09643134</span>  <span class="token number">1.0391132</span>   <span class="token number">2.05731814</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.09643172</span>  <span class="token number">1.03911387</span>  <span class="token number">2.05731785</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.09656833</span>  <span class="token number">1.03889045</span>  <span class="token number">2.05767788</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.0965521</span>   <span class="token number">1.03891148</span>  <span class="token number">2.05764062</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.09653751</span>  <span class="token number">1.03893039</span>  <span class="token number">2.05760712</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">]</span>grid_hat <span class="token operator">=</span> grid_hat<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x1<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># 使之与输入的形状相同</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">u'SimHei'</span><span class="token punctuation">]</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>cm_light <span class="token operator">=</span> mpl<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>ListedColormap<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'#A0FFA0'</span><span class="token punctuation">,</span> <span class="token string">'#FFA0A0'</span><span class="token punctuation">,</span> <span class="token string">'#A0A0FF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cm_dark <span class="token operator">=</span> mpl<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>ListedColormap<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x1_min<span class="token punctuation">,</span> x1_max <span class="token operator">=</span> x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 第0列的范围</span>x2_min<span class="token punctuation">,</span> x2_max <span class="token operator">=</span> x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 第1列的范围</span>x1<span class="token punctuation">,</span> x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>mgrid<span class="token punctuation">[</span>x1_min<span class="token punctuation">:</span>x1_max<span class="token punctuation">:</span><span class="token number">500j</span><span class="token punctuation">,</span> x2_min<span class="token punctuation">:</span>x2_max<span class="token punctuation">:</span><span class="token number">500j</span><span class="token punctuation">]</span>  <span class="token comment"># 生成网格采样点</span>grid_test <span class="token operator">=</span> np<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token punctuation">.</span>flat<span class="token punctuation">,</span> x2<span class="token punctuation">.</span>flat<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 测试点</span>plt<span class="token punctuation">.</span>pcolormesh<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> grid_hat<span class="token punctuation">,</span> cmap<span class="token operator">=</span>cm_light<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y<span class="token punctuation">,</span> edgecolors<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>cm_dark<span class="token punctuation">)</span>  <span class="token comment"># 样本</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x_test<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x_test<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span> facecolors<span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">,</span> zorder<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 圈中测试集样本</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>iris_feature<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>iris_feature<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span>x1_min<span class="token punctuation">,</span> x1_max<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span>x2_min<span class="token punctuation">,</span> x2_max<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">u'鸢尾花SVM二特征分类'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/42.png"></p><h4 id="6-2-SVM回归"><a href="#6-2-SVM回归" class="headerlink" title="6.2 SVM回归"></a>6.2 SVM回归</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVR <span class="token comment"># svm做回归的包</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span>N <span class="token operator">=</span> <span class="token number">50</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#进行排序处理， 为了后期画图线不会乱</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span><span class="token operator">*</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token comment"># 加噪声</span>x <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x =\n'</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'y =\n'</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.1127388</span>   <span class="token number">0.12131038</span>  <span class="token number">0.36135283</span>  <span class="token number">0.42621635</span>  <span class="token number">0.5227758</span>   <span class="token number">0.70964656</span>   <span class="token number">0.77355779</span>  <span class="token number">0.86011972</span>  <span class="token number">1.26229537</span>  <span class="token number">1.58733367</span>  <span class="token number">1.89257011</span>  <span class="token number">2.1570474</span>   <span class="token number">2.18226463</span>  <span class="token number">2.30064911</span>  <span class="token number">2.48797164</span>  <span class="token number">2.5419288</span>   <span class="token number">2.62219172</span>  <span class="token number">2.62552327</span>   <span class="token number">2.73690199</span>  <span class="token number">2.76887617</span>  <span class="token number">3.13108993</span>  <span class="token number">3.17336952</span>  <span class="token number">3.2692991</span>   <span class="token number">3.29288102</span>   <span class="token number">3.40826737</span>  <span class="token number">3.41060369</span>  <span class="token number">3.61658026</span>  <span class="token number">3.67257434</span>  <span class="token number">3.70160398</span>  <span class="token number">3.70581298</span>   <span class="token number">3.83952613</span>  <span class="token number">3.87536468</span>  <span class="token number">4.00060029</span>  <span class="token number">4.02382722</span>  <span class="token number">4.09092179</span>  <span class="token number">4.18578718</span>   <span class="token number">4.2911362</span>   <span class="token number">4.64540214</span>  <span class="token number">4.66894051</span>  <span class="token number">4.68317506</span>  <span class="token number">4.75035023</span>  <span class="token number">4.79495139</span>   <span class="token number">4.99571907</span>  <span class="token number">5.22007289</span>  <span class="token number">5.350638</span>    <span class="token number">5.55357983</span>  <span class="token number">5.66248847</span>  <span class="token number">5.6680135</span>   <span class="token number">5.78197656</span>  <span class="token number">5.87171005</span><span class="token punctuation">]</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">0.05437325</span>  <span class="token number">0.43710367</span>  <span class="token number">0.65611482</span>  <span class="token number">0.78304981</span>  <span class="token number">0.87329469</span>  <span class="token number">1.38088042</span>  <span class="token number">1.23598022</span>  <span class="token number">1.49456731</span>  <span class="token number">1.81603293</span>  <span class="token number">2.03841677</span>  <span class="token number">1.84627139</span>  <span class="token number">1.54797796</span>  <span class="token number">1.63479377</span>  <span class="token number">1.53337832</span>  <span class="token number">1.22278185</span>  <span class="token number">1.15897721</span>  <span class="token number">0.92928812</span>  <span class="token number">0.95065638</span>  <span class="token number">0.72022281</span>  <span class="token number">0.69233817</span> <span class="token operator">-</span><span class="token number">0.06030957</span> <span class="token operator">-</span><span class="token number">0.23617129</span> <span class="token operator">-</span><span class="token number">0.23697659</span> <span class="token operator">-</span><span class="token number">0.34160192</span> <span class="token operator">-</span><span class="token number">0.69007014</span> <span class="token operator">-</span><span class="token number">0.48527812</span> <span class="token operator">-</span><span class="token number">1.00538468</span> <span class="token operator">-</span><span class="token number">1.00756566</span> <span class="token operator">-</span><span class="token number">0.98948253</span> <span class="token operator">-</span><span class="token number">1.05661601</span> <span class="token operator">-</span><span class="token number">1.17133143</span> <span class="token operator">-</span><span class="token number">1.46283398</span> <span class="token operator">-</span><span class="token number">1.47415531</span> <span class="token operator">-</span><span class="token number">1.61280243</span> <span class="token operator">-</span><span class="token number">1.7131299</span>  <span class="token operator">-</span><span class="token number">1.78692494</span> <span class="token operator">-</span><span class="token number">1.85631003</span> <span class="token operator">-</span><span class="token number">1.98989791</span> <span class="token operator">-</span><span class="token number">2.11462751</span> <span class="token operator">-</span><span class="token number">1.90906396</span> <span class="token operator">-</span><span class="token number">1.95199287</span> <span class="token operator">-</span><span class="token number">2.14681169</span> <span class="token operator">-</span><span class="token number">1.77143442</span> <span class="token operator">-</span><span class="token number">1.55815674</span> <span class="token operator">-</span><span class="token number">1.48840245</span> <span class="token operator">-</span><span class="token number">1.35114367</span> <span class="token operator">-</span><span class="token number">1.27027958</span> <span class="token operator">-</span><span class="token number">1.04875251</span> <span class="token operator">-</span><span class="token number">1.00128962</span> <span class="token operator">-</span><span class="token number">0.67767925</span><span class="token punctuation">]</span>        <span class="token comment">#高斯核svm回归</span>svr_rbf <span class="token operator">=</span> SVR<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">'rbf'</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> C<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>svr_rbf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment">#线性核svm回归</span>svr_linear <span class="token operator">=</span> SVR<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">'linear'</span><span class="token punctuation">,</span> C<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>svr_linear<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment">#多项式核svm回归  提升维度3</span>svr_poly <span class="token operator">=</span> SVR<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">'poly'</span><span class="token punctuation">,</span> degree<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> C<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>svr_poly<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>SVR<span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> cache_size<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> coef0<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> degree<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> epsilon<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span>  kernel<span class="token operator">=</span><span class="token string">'poly'</span><span class="token punctuation">,</span> max_iter<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> shrinking<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tol<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>x_test <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token operator">*</span>x<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>y_rbf <span class="token operator">=</span> svr_rbf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>y_linear <span class="token operator">=</span> svr_linear<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>y_poly <span class="token operator">=</span> svr_poly<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">u'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_rbf<span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'高斯核'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_linear<span class="token punctuation">,</span> <span class="token string">'g-'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'线性核'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_poly<span class="token punctuation">,</span> <span class="token string">'b-'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'多项式核'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'mo'</span><span class="token punctuation">,</span> markersize<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">[</span>svr_rbf<span class="token punctuation">.</span>support_<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span>svr_rbf<span class="token punctuation">.</span>support_<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">130</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">,</span>             label<span class="token operator">=</span><span class="token string">'高斯核支持向量'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'lower left'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'SVR'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/17-zhi-chi-xiang-liang-ji-svm/43.png"></p><p>svm做回归，实际回归线，就是分类中所谓的分割线，支持向量，帮助我们确定回归线的走势</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 支持向量机SVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16-朴素贝叶斯</title>
      <link href="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/"/>
      <url>/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/</url>
      
        <content type="html"><![CDATA[<h3 id="1-贝叶斯公式"><a href="#1-贝叶斯公式" class="headerlink" title="1. 贝叶斯公式"></a>1. 贝叶斯公式</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/1.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/2.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/3.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/4.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/5.png"></p><h3 id="2-朴素贝叶斯"><a href="#2-朴素贝叶斯" class="headerlink" title="2. 朴素贝叶斯"></a>2. 朴素贝叶斯</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/6.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/7.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/8.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/9.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/10.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/11.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/12.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/13.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/14.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/15.png"></p><h3 id="3-朴素贝叶斯-直观案例"><a href="#3-朴素贝叶斯-直观案例" class="headerlink" title="3. 朴素贝叶斯-直观案例"></a>3. 朴素贝叶斯-直观案例</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/16.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/17.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/18.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/19.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 创建方法，主要用来创建概率的名称，用来从字典中提取准确的概率</span><span class="token keyword">def</span> <span class="token function">tokey</span><span class="token punctuation">(</span>col_name<span class="token punctuation">,</span> category<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义写key的函数,比如产生 'X1=3|Y=1'</span>    <span class="token keyword">return</span> col_name <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"|Y="</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token comment"># 显示数据集信息</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"../datas/bayes_lihang.txt"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token number">0</span>   <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">3</span>   <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">6</span>  <span class="token number">7</span>  <span class="token number">8</span>  <span class="token number">9</span>  <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span> <span class="token number">13</span>  <span class="token number">14</span>X1   <span class="token number">1</span>   <span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">1</span>   <span class="token number">1</span>   <span class="token number">2</span>   <span class="token number">2</span>  <span class="token number">2</span>  <span class="token number">2</span>  <span class="token number">2</span>  <span class="token number">3</span>  <span class="token number">3</span>  <span class="token number">3</span>  <span class="token number">3</span>   <span class="token number">3</span>X2   S   M  M  S   S   S   M  M  L  L  L  M  M  L   LY   <span class="token operator">-</span><span class="token number">1</span>  <span class="token operator">-</span><span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">1</span>  <span class="token operator">-</span><span class="token number">1</span>  <span class="token operator">-</span><span class="token number">1</span>  <span class="token operator">-</span><span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">1</span>  <span class="token operator">-</span><span class="token number">1</span><span class="token comment"># 进行数据设定，用于后续计算操作</span>lam <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 拉普拉斯  平滑因子</span>P <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment"># 用于存储所有概率的字典</span>Y <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">"Y"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取类别种类的list   Y = [1, -1]</span>col_names <span class="token operator">=</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 获取特征列名   x1,x2</span><span class="token comment"># 计算全部的概率，存储到字典P当中</span><span class="token comment"># 添加拉普拉斯平滑处理</span><span class="token keyword">for</span> y <span class="token keyword">in</span> Y<span class="token punctuation">:</span>  <span class="token comment"># 遍历每个类别</span>    df2 <span class="token operator">=</span> df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">"Y"</span><span class="token punctuation">]</span> <span class="token operator">==</span> y<span class="token punctuation">]</span>  <span class="token comment">#</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span>df2<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> lam<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span> <span class="token operator">*</span> lam<span class="token punctuation">)</span>  <span class="token comment"># 计算先验概率</span>    P<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> p  <span class="token comment"># 将先验概率加入P</span>    <span class="token keyword">for</span> col_name <span class="token keyword">in</span> col_names<span class="token punctuation">:</span>  <span class="token comment"># 遍历每个特征</span>        categorys <span class="token operator">=</span> df2<span class="token punctuation">[</span>col_name<span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取每个特征下特征值种类的list</span>        <span class="token keyword">for</span> category <span class="token keyword">in</span> categorys<span class="token punctuation">:</span>  <span class="token comment"># 遍历每个特征值</span>            p <span class="token operator">=</span> <span class="token punctuation">(</span>df2<span class="token punctuation">[</span>df2<span class="token punctuation">[</span>col_name<span class="token punctuation">]</span> <span class="token operator">==</span> category<span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> lam<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                        <span class="token comment"># 计算在某类别下，特征=某特征的条件概率</span>                        df2<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>categorys<span class="token punctuation">)</span> <span class="token operator">*</span> lam<span class="token punctuation">)</span>              P<span class="token punctuation">[</span>tokey<span class="token punctuation">(</span>col_name<span class="token punctuation">,</span> category<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> p  <span class="token comment"># 将条件概率加到P</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">0.5882352941176471</span><span class="token punctuation">,</span> <span class="token string">'X1=3|Y=1'</span><span class="token punctuation">:</span> <span class="token number">0.4166666666666667</span><span class="token punctuation">,</span> <span class="token string">'X1=2|Y=1'</span><span class="token punctuation">:</span> <span class="token number">0.3333333333333333</span><span class="token punctuation">,</span> <span class="token string">'X1=1|Y=1'</span><span class="token punctuation">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token string">'X2=L|Y=1'</span><span class="token punctuation">:</span> <span class="token number">0.4166666666666667</span><span class="token punctuation">,</span> <span class="token string">'X2=M|Y=1'</span><span class="token punctuation">:</span> <span class="token number">0.4166666666666667</span><span class="token punctuation">,</span> <span class="token string">'X2=S|Y=1'</span><span class="token punctuation">:</span> <span class="token number">0.16666666666666666</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">0.4117647058823529</span><span class="token punctuation">,</span> <span class="token string">'X1=1|Y=-1'</span><span class="token punctuation">:</span> <span class="token number">0.4444444444444444</span><span class="token punctuation">,</span> <span class="token string">'X1=2|Y=-1'</span><span class="token punctuation">:</span> <span class="token number">0.3333333333333333</span><span class="token punctuation">,</span> <span class="token string">'X1=3|Y=-1'</span><span class="token punctuation">:</span> <span class="token number">0.2222222222222222</span><span class="token punctuation">,</span> <span class="token string">'X2=S|Y=-1'</span><span class="token punctuation">:</span> <span class="token number">0.4444444444444444</span><span class="token punctuation">,</span> <span class="token string">'X2=M|Y=-1'</span><span class="token punctuation">:</span> <span class="token number">0.3333333333333333</span><span class="token punctuation">,</span> <span class="token string">'X2=L|Y=-1'</span><span class="token punctuation">:</span> <span class="token number">0.2222222222222222</span><span class="token punctuation">}</span><span class="token comment"># 根据预测样本，查找出相对应的概率，进行可能概率计算</span>X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"S"</span><span class="token punctuation">]</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 用于存储属于某一类别的后验概率</span><span class="token keyword">for</span> y <span class="token keyword">in</span> Y<span class="token punctuation">:</span>  <span class="token comment"># 遍历类别</span>    p <span class="token operator">=</span> P<span class="token punctuation">[</span>y<span class="token punctuation">]</span>  <span class="token comment"># 获取先验概率</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 遍历特征</span>        p <span class="token operator">*=</span> P<span class="token punctuation">[</span>tokey<span class="token punctuation">(</span>col_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 获取条件概率</span>    <span class="token comment"># print(p)</span>    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>  <span class="token comment"># 将后验概率加入res</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0.0326797385620915</span><span class="token punctuation">,</span> <span class="token number">0.06100217864923746</span><span class="token punctuation">]</span><span class="token comment"># 通过下标索引，找到对应的类别</span><span class="token keyword">print</span><span class="token punctuation">(</span>Y<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 返回最大的后验概率对应的类别</span><span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-特征工程-词频统计"><a href="#4-特征工程-词频统计" class="headerlink" title="4. 特征工程-词频统计"></a>4. 特征工程-词频统计</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/20.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/21.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/22.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/23.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token comment"># 将所有样本中出现的单词进行编号，并计算每个样本中每个单词出现的次数</span>X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'我 爱 你'</span><span class="token punctuation">,</span><span class="token string">'我 恨 你 恨 你'</span><span class="token punctuation">]</span><span class="token comment">#正则化处理，有效字符为字母数字和汉字</span>countCoder <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span>token_pattern<span class="token operator">=</span><span class="token string">"[a-zA-Z|\u4e00-\u9fa5]+"</span><span class="token punctuation">)</span>X <span class="token operator">=</span> countCoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>countCoder<span class="token punctuation">.</span>get_feature_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'你'</span><span class="token punctuation">,</span> <span class="token string">'恨'</span><span class="token punctuation">,</span> <span class="token string">'我'</span><span class="token punctuation">,</span> <span class="token string">'爱'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> TfidfVectorizer<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizerX <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'我 爱 你'</span><span class="token punctuation">,</span><span class="token string">'我 恨 你 恨 你'</span><span class="token punctuation">]</span>tfCoder <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span>token_pattern<span class="token operator">=</span><span class="token string">"[a-zA-Z|\u4e00-\u9fa5]+"</span><span class="token punctuation">)</span>  <span class="token comment"># TF模型</span>X1 <span class="token operator">=</span> tfCoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span>  <span class="token comment"># 训练TF模型</span><span class="token keyword">print</span><span class="token punctuation">(</span>tfCoder<span class="token punctuation">.</span>get_feature_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X1<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'你'</span><span class="token punctuation">,</span> <span class="token string">'恨'</span><span class="token punctuation">,</span> <span class="token string">'我'</span><span class="token punctuation">,</span> <span class="token string">'爱'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>tiCoder <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span>norm<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>token_pattern<span class="token operator">=</span><span class="token string">"[a-zA-Z|\u4e00-\u9fa5]+"</span><span class="token punctuation">)</span>X2 <span class="token operator">=</span> tiCoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tiCoder<span class="token punctuation">.</span>get_feature_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X2<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'你'</span><span class="token punctuation">,</span> <span class="token string">'恨'</span><span class="token punctuation">,</span> <span class="token string">'我'</span><span class="token punctuation">,</span> <span class="token string">'爱'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.</span>          <span class="token number">0.</span>          <span class="token number">1.</span>          <span class="token number">1.40546511</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">2.</span>          <span class="token number">2.81093022</span>  <span class="token number">1.</span>          <span class="token number">0.</span>        <span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-代码实战"><a href="#5-代码实战" class="headerlink" title="5. 代码实战"></a>5. 代码实战</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/24.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/25.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/26.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/27.png"></p><h4 id="5-1-文本数据分类"><a href="#5-1-文本数据分类" class="headerlink" title="5.1 文本数据分类"></a>5.1 文本数据分类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> MultinomialNB <span class="token comment">#多项式朴素贝叶斯</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"../datas/bayes_xinxi.txt"</span><span class="token punctuation">)</span>  <span class="token comment"># 读取数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>Y                     words<span class="token number">0</span>  <span class="token number">1</span>   Chinese Beijing Chinese<span class="token number">1</span>  <span class="token number">1</span>  Chinese Chinese Shanghai<span class="token number">2</span>  <span class="token number">1</span>             Chinese Macao<span class="token number">3</span>  <span class="token number">0</span>       Tokyo Japan Chinese<span class="token comment"># 正则匹配，a-z，A-Z所有中文</span>tfCoder <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span>token_pattern<span class="token operator">=</span><span class="token string">"[a-zA-Z|\u4e00-\u9fa5]+"</span><span class="token punctuation">)</span>  <span class="token comment"># TF模型</span>X <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">"words"</span><span class="token punctuation">]</span>Y <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">"Y"</span><span class="token punctuation">]</span>X <span class="token operator">=</span> tfCoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span>  <span class="token comment"># 训练TF模型 fit_transform 训练集 竖排的</span><span class="token keyword">print</span><span class="token punctuation">(</span>tfCoder<span class="token punctuation">.</span>get_feature_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'beijing'</span><span class="token punctuation">,</span> <span class="token string">'chinese'</span><span class="token punctuation">,</span> <span class="token string">'japan'</span><span class="token punctuation">,</span> <span class="token string">'macao'</span><span class="token punctuation">,</span> <span class="token string">'shanghai'</span><span class="token punctuation">,</span> <span class="token string">'tokyo'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>X_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Chinese Chinese Chinese Tokyo Japan"</span><span class="token punctuation">]</span>  <span class="token comment"># 测试数据 </span>X_ <span class="token operator">=</span> tfCoder<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X_<span class="token punctuation">)</span><span class="token punctuation">.</span>A  <span class="token comment"># A相当于toarray() 将训练数据转为array类型  transform 测试集 横徘的</span>model <span class="token operator">=</span> MultinomialNB<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Y<span class="token punctuation">[</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#证明当前字符串属于中国的类别</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token number">1</span>Name<span class="token punctuation">:</span> Y<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-王者分类"><a href="#5-2-王者分类" class="headerlink" title="5.2 王者分类"></a>5.2 王者分类</h4><p>使用已有数据的信息，来分别新数据信息的类别</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> MultinomialNB<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> TfidfVectorizer<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token comment"># 打印文本数据，查看特点</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"../datas/bayes_wangzhe.txt"</span><span class="token punctuation">,</span>header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token number">0</span>                             <span class="token number">1</span><span class="token number">0</span>  <span class="token number">0</span>             别 搜 了 快走 吧 毒 要 来了<span class="token number">1</span>  <span class="token number">0</span>         前面 有个 空投 你 用 98k 蹲 一波<span class="token number">2</span>  <span class="token number">0</span>  石头 后面 有个 残血 的 人 先 过来 支援 我 一下<span class="token number">3</span>  <span class="token number">1</span>           这 一波 不能 打 安琪拉 状态 不好<span class="token number">4</span>  <span class="token number">1</span>      下路 需要 支援 一下 先 别 管 那个 人 了<span class="token number">5</span>  <span class="token number">1</span>        他们 可能 在 打 大龙 鲁班 看 一下 吧<span class="token comment"># 数据特征标签切分，进行词频统计</span>X <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>Y <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>tfCoder <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span>token_pattern<span class="token operator">=</span><span class="token string">"[a-zA-Z|\u4e00-\u9fa5]+"</span><span class="token punctuation">)</span>X <span class="token operator">=</span> tfCoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tfCoder<span class="token punctuation">.</span>get_feature_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 通过训练好的模型，预测新样本的类别</span>X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>model <span class="token operator">=</span> MultinomialNB<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y_train<span class="token punctuation">.</span>values<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"残血 的 安琪拉 打 不 过 鲁班"</span><span class="token punctuation">,</span><span class="token string">"这 一波 大龙 别 再 被 抢 了"</span><span class="token punctuation">,</span>     <span class="token string">"你 在 石头 那 不要 动，我 去 买 几个 橘子"</span><span class="token punctuation">]</span><span class="token comment"># print(tfCoder.transform(a).todense())</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>tfCoder<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-鸢尾花数据分类"><a href="#5-3-鸢尾花数据分类" class="headerlink" title="5.3 鸢尾花数据分类"></a>5.3 鸢尾花数据分类</h4><p>鸢尾花数据集使用朴素贝叶斯进行分类操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token punctuation">,</span> MinMaxScaler<span class="token punctuation">,</span> PolynomialFeatures<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> GaussianNB<span class="token punctuation">,</span> MultinomialNB<span class="token comment">#高斯贝叶斯和多项式朴素贝叶斯</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipeline<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier<span class="token comment">## 设置属性防止中文乱码</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">u'SimHei'</span><span class="token punctuation">]</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># 对列名进行处理，选择鸢尾花的最后两个特征进行数据分析</span><span class="token comment"># 花萼长度、花萼宽度，花瓣长度，花瓣宽度</span>iris_feature_E <span class="token operator">=</span> <span class="token string">'sepal length'</span><span class="token punctuation">,</span> <span class="token string">'sepal width'</span><span class="token punctuation">,</span> <span class="token string">'petal length'</span><span class="token punctuation">,</span> <span class="token string">'petal width'</span>iris_feature_C <span class="token operator">=</span> <span class="token string">u'花萼长度'</span><span class="token punctuation">,</span> <span class="token string">u'花萼宽度'</span><span class="token punctuation">,</span> <span class="token string">u'花瓣长度'</span><span class="token punctuation">,</span> <span class="token string">u'花瓣宽度'</span>iris_class <span class="token operator">=</span> <span class="token string">'Iris-setosa'</span><span class="token punctuation">,</span> <span class="token string">'Iris-versicolor'</span><span class="token punctuation">,</span> <span class="token string">'Iris-virginica'</span>features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token comment"># 将数据进行标签化处理</span><span class="token comment">## 读取数据</span>path <span class="token operator">=</span> <span class="token string">'../datas/iris.data'</span>  <span class="token comment"># 数据文件路径</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>x <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>x <span class="token operator">=</span> x<span class="token punctuation">[</span>features<span class="token punctuation">]</span>y <span class="token operator">=</span> pd<span class="token punctuation">.</span>Categorical<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>codes <span class="token comment">## 直接将数据特征转换为0，1,2</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"总样本数目：%d；特征属性数目：%d"</span> <span class="token operator">%</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>总样本数目：<span class="token number">150</span>；特征属性数目：<span class="token number">2</span><span class="token comment">## 0. 数据分割，形成模型训练数据和测试数据</span>x_train1<span class="token punctuation">,</span> x_test1<span class="token punctuation">,</span> y_train1<span class="token punctuation">,</span> y_test1 <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> train_size<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> x_train1<span class="token punctuation">,</span> x_test1<span class="token punctuation">,</span> y_train1<span class="token punctuation">,</span> y_test1<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"训练数据集样本数目：%d, 测试数据集样本数目：%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x_test<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>训练数据集样本数目：<span class="token number">120</span><span class="token punctuation">,</span> 测试数据集样本数目：<span class="token number">30</span><span class="token comment"># 对数据进行特征化处理</span><span class="token comment">## 高斯贝叶斯模型构建</span>clf <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">'sc'</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">#标准化，把它转化成了高斯分布</span>        <span class="token punctuation">(</span><span class="token string">'poly'</span><span class="token punctuation">,</span> PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">'clf'</span><span class="token punctuation">,</span> GaussianNB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># MultinomialNB多项式贝叶斯算法中要求特征属性的取值不能为负数</span><span class="token comment">## 训练模型</span>clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>Pipeline<span class="token punctuation">(</span>steps<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'sc'</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span>copy<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> with_mean<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> with_std<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'poly'</span><span class="token punctuation">,</span> PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> include_bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> interaction_only<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'clf'</span><span class="token punctuation">,</span> GaussianNB<span class="token punctuation">(</span>priors<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 计算准确度</span>y_train_hat <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'训练集准确度: %.2f%%'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> accuracy_score<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> y_train_hat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>y_test_hat <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'测试集准确度：%.2f%%'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_test_hat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>训练集准确度<span class="token punctuation">:</span> <span class="token number">87.50</span><span class="token operator">%</span>测试集准确度：<span class="token number">93.33</span><span class="token operator">%</span><span class="token comment"># 产生区域图</span>N<span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span>     <span class="token comment"># 横纵各采样多少个值</span><span class="token comment">#生成画图的图像区域</span>x1_min1<span class="token punctuation">,</span> x2_min1 <span class="token operator">=</span> x_train<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>x1_max1<span class="token punctuation">,</span> x2_max1 <span class="token operator">=</span> x_train<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>x1_min2<span class="token punctuation">,</span> x2_min2 <span class="token operator">=</span> x_test<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>x1_max2<span class="token punctuation">,</span> x2_max2 <span class="token operator">=</span> x_test<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>x1_min <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x1_min1<span class="token punctuation">,</span> x1_min2<span class="token punctuation">)</span><span class="token punctuation">)</span>x1_max <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x1_max1<span class="token punctuation">,</span> x1_max2<span class="token punctuation">)</span><span class="token punctuation">)</span>x2_min <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x2_min1<span class="token punctuation">,</span> x2_min2<span class="token punctuation">)</span><span class="token punctuation">)</span>x2_max <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x2_max1<span class="token punctuation">,</span> x2_max2<span class="token punctuation">)</span><span class="token punctuation">)</span>t1 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>x1_min<span class="token punctuation">,</span> x1_max<span class="token punctuation">,</span> N<span class="token punctuation">)</span>t2 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>x2_min<span class="token punctuation">,</span> x2_max<span class="token punctuation">,</span> N<span class="token punctuation">)</span>x1<span class="token punctuation">,</span> x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span>  <span class="token comment"># 生成网格采样点</span>x_show <span class="token operator">=</span> np<span class="token punctuation">.</span>dstack<span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token punctuation">.</span>flat<span class="token punctuation">,</span> x2<span class="token punctuation">.</span>flat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 测试点</span>cm_light <span class="token operator">=</span> mpl<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>ListedColormap<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'#77E0A0'</span><span class="token punctuation">,</span> <span class="token string">'#FF8080'</span><span class="token punctuation">,</span> <span class="token string">'#A0A0FF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cm_dark <span class="token operator">=</span> mpl<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>ListedColormap<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y_show_hat <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_show<span class="token punctuation">)</span>                  <span class="token comment"># 预测值</span>y_show_hat <span class="token operator">=</span> y_show_hat<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x1<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment"># 画图验证分类效果的优劣</span><span class="token comment">## 画图</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>facecolor<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>pcolormesh<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y_show_hat<span class="token punctuation">,</span> cmap<span class="token operator">=</span>cm_light<span class="token punctuation">)</span>     <span class="token comment"># 预测值的显示</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x_train<span class="token punctuation">[</span>features<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x_train<span class="token punctuation">[</span>features<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y_train<span class="token punctuation">,</span> edgecolors<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>cm_dark<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x_test<span class="token punctuation">[</span>features<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x_test<span class="token punctuation">[</span>features<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y_test<span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'^'</span><span class="token punctuation">,</span> edgecolors<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>cm_dark<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>iris_feature_C<span class="token punctuation">[</span>features<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>iris_feature_C<span class="token punctuation">[</span>features<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span>x1_min<span class="token punctuation">,</span> x1_max<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span>x2_min<span class="token punctuation">,</span> x2_max<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">u'高斯贝叶斯对鸢尾花数据的分类结果, 正确率:%.3f%%'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_test_hat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/16-po-su-bei-xie-si/28.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 朴素贝叶斯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15-集成学习-Boosting-Adaboost-GBDT</title>
      <link href="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/"/>
      <url>/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Boosting集成算法"><a href="#1-Boosting集成算法" class="headerlink" title="1. Boosting集成算法"></a>1. Boosting集成算法</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/1.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/2.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/3.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/4.png"></p><h3 id="2-Adaboost算法"><a href="#2-Adaboost算法" class="headerlink" title="2. Adaboost算法"></a>2. Adaboost算法</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/5.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/6.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/7.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/8.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/9.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/10.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/11.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/12.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/13.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/14.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/15.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/16.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/17.png"></p><h4 id="2-1-Adaboost分类底层实现"><a href="#2-1-Adaboost分类底层实现" class="headerlink" title="2.1 Adaboost分类底层实现"></a>2.1 Adaboost分类底层实现</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> math<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifierdf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#初始化权值分布，每个样本的权重都是均值，求和为1</span>w <span class="token operator">=</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#分割x，y</span>X <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Y <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0.1</span> <span class="token number">0.1</span> <span class="token number">0.1</span> <span class="token number">0.1</span> <span class="token number">0.1</span> <span class="token number">0.1</span> <span class="token number">0.1</span> <span class="token number">0.1</span> <span class="token number">0.1</span> <span class="token number">0.1</span><span class="token punctuation">]</span>   <span class="token number">0</span><span class="token number">0</span>  <span class="token number">0</span><span class="token number">1</span>  <span class="token number">1</span><span class="token number">2</span>  <span class="token number">2</span><span class="token number">3</span>  <span class="token number">3</span><span class="token number">4</span>  <span class="token number">4</span><span class="token number">5</span>  <span class="token number">5</span><span class="token number">6</span>  <span class="token number">6</span><span class="token number">7</span>  <span class="token number">7</span><span class="token number">8</span>  <span class="token number">8</span><span class="token number">9</span>  <span class="token number">9</span>   <span class="token number">1</span><span class="token number">0</span>  <span class="token number">1</span><span class="token number">1</span>  <span class="token number">1</span><span class="token number">2</span>  <span class="token number">1</span><span class="token number">3</span> <span class="token operator">-</span><span class="token number">1</span><span class="token number">4</span> <span class="token operator">-</span><span class="token number">1</span><span class="token number">5</span> <span class="token operator">-</span><span class="token number">1</span><span class="token number">6</span>  <span class="token number">1</span><span class="token number">7</span>  <span class="token number">1</span><span class="token number">8</span>  <span class="token number">1</span><span class="token number">9</span> <span class="token operator">-</span><span class="token number">1</span><span class="token comment"># 训练第一个模型</span>model <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>sample_weight<span class="token operator">=</span>w<span class="token punctuation">)</span>model1 <span class="token operator">=</span> model<span class="token comment">#计算模型的误差率</span>e <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>w<span class="token operator">*</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token operator">!=</span> Y<span class="token punctuation">.</span>values<span class="token punctuation">.</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#初始化权值分布，平均值，求和为1</span><span class="token comment">#计算学习器系数</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span>math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>e<span class="token punctuation">)</span><span class="token operator">/</span>e<span class="token punctuation">)</span>a1 <span class="token operator">=</span> a<span class="token comment">#权重值的调整</span>z <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>w<span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>a<span class="token operator">*</span>Y<span class="token punctuation">.</span>values<span class="token punctuation">.</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#规范因子</span>w <span class="token operator">=</span> w<span class="token operator">/</span>z<span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>a<span class="token operator">*</span>Y<span class="token punctuation">.</span>values<span class="token punctuation">.</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#更新权值分布</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第一个模型错误率：{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第一个模型学习器权重：{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>第一个模型错误率：<span class="token number">0.30000000000000004</span>第一个模型学习器权重：<span class="token number">0.4236489301936017</span><span class="token comment"># 训练第二个模型</span>model <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>sample_weight<span class="token operator">=</span>w<span class="token punctuation">)</span><span class="token comment">##训练第2个模型</span>model2 <span class="token operator">=</span> modele <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>w<span class="token operator">*</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token operator">!=</span> Y<span class="token punctuation">.</span>values<span class="token punctuation">.</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span>math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>e<span class="token punctuation">)</span><span class="token operator">/</span>e<span class="token punctuation">)</span>a2 <span class="token operator">=</span> az <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>w<span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>a<span class="token operator">*</span>Y<span class="token punctuation">.</span>values<span class="token punctuation">.</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#更新权重，进行下一次操作的处理</span>w <span class="token operator">=</span> w<span class="token operator">/</span>z<span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>a<span class="token operator">*</span>Y<span class="token punctuation">.</span>values<span class="token punctuation">.</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 训练第三个模型</span>model <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>sample_weight<span class="token operator">=</span>w<span class="token punctuation">)</span><span class="token comment">##训练第3个模型</span>model3 <span class="token operator">=</span> modele <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>w<span class="token operator">*</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token operator">!=</span> Y<span class="token punctuation">.</span>values<span class="token punctuation">.</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span>math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>e<span class="token punctuation">)</span><span class="token operator">/</span>e<span class="token punctuation">)</span>a3 <span class="token operator">=</span> a<span class="token comment"># 交给强分类器计算结果</span>y_ <span class="token operator">=</span> np<span class="token punctuation">.</span>sign<span class="token punctuation">(</span>a1<span class="token operator">*</span>model1<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token operator">+</span>a2<span class="token operator">*</span>model2<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token operator">+</span>a3<span class="token operator">*</span>model3<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">##模型组合</span><span class="token keyword">print</span><span class="token punctuation">(</span>y_<span class="token punctuation">)</span><span class="token punctuation">[</span> <span class="token number">1.</span>  <span class="token number">1.</span>  <span class="token number">1.</span> <span class="token operator">-</span><span class="token number">1.</span> <span class="token operator">-</span><span class="token number">1.</span> <span class="token operator">-</span><span class="token number">1.</span>  <span class="token number">1.</span>  <span class="token number">1.</span>  <span class="token number">1.</span> <span class="token operator">-</span><span class="token number">1.</span><span class="token punctuation">]</span><span class="token comment"># 错误率为0， 证明最终的强学习器的运行结果非常好</span>e <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y_ <span class="token operator">!=</span> Y<span class="token punctuation">.</span>values<span class="token punctuation">.</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token number">0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-Adaboost调库分类"><a href="#2-2-Adaboost调库分类" class="headerlink" title="2.2 .Adaboost调库分类"></a>2.2 .Adaboost调库分类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> AdaBoostClassifierdf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>X <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Y <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>model <span class="token operator">=</span> AdaBoostClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token comment">#创建了三颗决策树进行处理</span>y_ <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-Adaboost调库回归"><a href="#2-3-Adaboost调库回归" class="headerlink" title="2.3 Adaboost调库回归"></a>2.3 Adaboost调库回归</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> AdaBoostRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token punctuation">,</span>r2_scoredf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5.56</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5.91</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6.8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7.05</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8.7111</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9.05</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>X <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Y <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>model <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#弱学习器</span><span class="token comment">#可以尝试调参，提升模型的准确度</span>model <span class="token operator">=</span> AdaBoostRegressor<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>base_estimator<span class="token operator">=</span>model<span class="token punctuation">,</span>learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span>y_ <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r2_score<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">0.9866594445003725</span><span class="token number">0.2960925671515152</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-GBDT"><a href="#3-GBDT" class="headerlink" title="3. GBDT"></a>3. GBDT</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/18.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/19.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/20.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/21.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/22.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/23.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/24.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/25.png"></p><h4 id="3-1-GBDT底层实现回归"><a href="#3-1-GBDT底层实现回归" class="headerlink" title="3.1 GBDT底层实现回归"></a>3.1 GBDT底层实现回归</h4><p>GDBT底层回归代码</p><p>每个基学习器之间存在依赖关系，当前学习器使用上一次的残差进行计算<br>最后残差越来越小，能够使所有基学习器的加和贴近真实值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token comment"># 数据集导入</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5.56</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5.91</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6.8</span><span class="token punctuation">]</span>                   <span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7.05</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9.05</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">,</span><span class="token string">"y"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 设置存储基学习器的容器，设置基学习器数量</span>M <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#存储决策树模型的数组</span>n_trees <span class="token operator">=</span> <span class="token number">4</span>  <span class="token comment">#设置树的颗数</span>X <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment">#构造X</span>Y <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment">#构造Y</span>y_ <span class="token operator">=</span> Y<span class="token comment"># 存储模型</span><span class="token comment"># 计算残差，作为下一个基学习器的输入值</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_trees<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span>  <span class="token comment">#新建决策树模型</span>    M<span class="token punctuation">.</span>append<span class="token punctuation">(</span>model<span class="token punctuation">)</span>  <span class="token comment">#将决策树模型加入数组</span>    Y_het <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token comment">#输出模型预测值</span>    Y_het <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>Y_het<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#将模型预测值转为DataFrame</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Y_het<span class="token punctuation">)</span>    Y <span class="token operator">=</span> Y <span class="token operator">-</span> Y_het <span class="token comment">#改变原始的Y，让下一个学习器继续学习</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Y<span class="token punctuation">)</span>    <span class="token comment"># 设立存储所有样本的容器</span><span class="token comment"># 记录每一次产生的数值进行加和计算</span>res <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#初始化全零向量</span><span class="token keyword">for</span> i <span class="token keyword">in</span> M<span class="token punctuation">:</span> <span class="token comment">#遍历模型数组</span>    res <span class="token operator">+=</span> i<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token comment">#将每个模型预测值叠加到res变量</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">#输出最终对每个样本标签的预测值</span><span class="token punctuation">[</span> <span class="token number">5.56</span>        <span class="token number">5.7</span>         <span class="token number">5.91</span>        <span class="token number">6.4</span>         <span class="token number">6.9</span>         <span class="token number">6.9</span>         <span class="token number">8.95</span>  <span class="token number">8.76666667</span>  <span class="token number">8.99166667</span>  <span class="token number">8.99166667</span><span class="token punctuation">]</span><span class="token comment"># 计算最后的预测值(基学习器的均值)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'均方误差：'</span><span class="token punctuation">,</span> mean_squared_error<span class="token punctuation">(</span>y_<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 均方误差： 0.00429166666667</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-GBDT调库回归"><a href="#3-2-GBDT调库回归" class="headerlink" title="3.2 GBDT调库回归"></a>3.2 GBDT调库回归</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/26.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token punctuation">,</span>r2_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> GradientBoostingRegressor<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token comment"># 数据输入</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5.56</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5.91</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6.8</span><span class="token punctuation">]</span>                   <span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7.05</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9.05</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">,</span><span class="token string">"y"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 数据拆分</span>X <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment">#构造X</span>Y <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment">#构造Y</span><span class="token comment"># 使用50棵基学习器进行学习</span>model <span class="token operator">=</span> GradientBoostingRegressor<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span>y_ <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y_<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> y_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r2_score<span class="token punctuation">(</span>Y<span class="token punctuation">,</span>y_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5.57081043</span> <span class="token number">5.70831066</span> <span class="token number">5.91717792</span> <span class="token number">6.40510295</span> <span class="token number">6.80218984</span> <span class="token number">7.04950573</span> <span class="token number">8.89179004</span> <span class="token number">8.69282079</span> <span class="token number">8.99144513</span> <span class="token number">9.0408465</span> <span class="token punctuation">]</span><span class="token number">5.444518726577977e-05</span><span class="token number">0.9999715158579582</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-GBDT调库分类"><a href="#3-3-GBDT调库分类" class="headerlink" title="3.3 GBDT调库分类"></a>3.3 GBDT调库分类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> GradientBoostingClassifierdf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>X <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Y <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>model <span class="token operator">=</span> GradientBoostingClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span>y_ <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-集成学习分类性能对比"><a href="#4-集成学习分类性能对比" class="headerlink" title="4. 集成学习分类性能对比"></a>4. 集成学习分类性能对比</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier<span class="token punctuation">,</span> AdaBoostClassifier<span class="token punctuation">,</span> GradientBoostingClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span> GridSearchCV<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token punctuation">,</span> LabelEncoder<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'E:\py-code\test1\MachineLearning\datas\iris.txt'</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'x1'</span><span class="token punctuation">,</span> <span class="token string">'x2'</span><span class="token punctuation">,</span> <span class="token string">'x3'</span><span class="token punctuation">,</span> <span class="token string">'x4'</span><span class="token punctuation">,</span> <span class="token string">'lable'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x1   x2   x3   x4        lable<span class="token number">0</span>  <span class="token number">5.1</span>  <span class="token number">3.5</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">1</span>  <span class="token number">4.9</span>  <span class="token number">3.0</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">2</span>  <span class="token number">4.7</span>  <span class="token number">3.2</span>  <span class="token number">1.3</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">3</span>  <span class="token number">4.6</span>  <span class="token number">3.1</span>  <span class="token number">1.5</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">4</span>  <span class="token number">5.0</span>  <span class="token number">3.6</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosax <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>lable <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> lable<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>y<span class="token punctuation">)</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.35</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token comment"># 随机森林</span>RF <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>RF<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>rf_score <span class="token operator">=</span> RF<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'随机森林准确率：'</span><span class="token punctuation">,</span> rf_score<span class="token punctuation">)</span><span class="token comment">#acc  # 随机森林准确率： 0.981132075472</span><span class="token comment"># AdaBoost算法</span>DT <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>AB <span class="token operator">=</span> AdaBoostClassifier<span class="token punctuation">(</span>DT<span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>AB<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>ab_score <span class="token operator">=</span> AB<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'AdaBoost准确率：'</span><span class="token punctuation">,</span> ab_score<span class="token punctuation">)</span>  <span class="token comment"># AdaBoost准确率： 1.0</span><span class="token comment"># GBDT算法</span>GBDT <span class="token operator">=</span> GradientBoostingClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>GBDT<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>gbdt_score <span class="token operator">=</span> GBDT<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'GBDT准确率：'</span><span class="token punctuation">,</span> gbdt_score<span class="token punctuation">)</span>  <span class="token comment"># GBDT准确率： 1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-集成学习回归性能对比"><a href="#5-集成学习回归性能对比" class="headerlink" title="5. 集成学习回归性能对比"></a>5. 集成学习回归性能对比</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestRegressor<span class="token punctuation">,</span> AdaBoostRegressor<span class="token punctuation">,</span> GradientBoostingRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'../datas/Advertising.csv'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> TV  Radio  Newspaper  Sales<span class="token number">1</span>  <span class="token number">230.1</span>   <span class="token number">37.8</span>       <span class="token number">69.2</span>   <span class="token number">22.1</span><span class="token number">2</span>   <span class="token number">44.5</span>   <span class="token number">39.3</span>       <span class="token number">45.1</span>   <span class="token number">10.4</span><span class="token number">3</span>   <span class="token number">17.2</span>   <span class="token number">45.9</span>       <span class="token number">69.3</span>    <span class="token number">9.3</span><span class="token number">4</span>  <span class="token number">151.5</span>   <span class="token number">41.3</span>       <span class="token number">58.5</span>   <span class="token number">18.5</span><span class="token number">5</span>  <span class="token number">180.8</span>   <span class="token number">10.8</span>       <span class="token number">58.4</span>   <span class="token number">12.9</span>x <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">.3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token comment"># 随机森林算法</span>RF <span class="token operator">=</span> RandomForestRegressor<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>RF<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>rf_y <span class="token operator">=</span> RF<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>rf_mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> rf_y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'随机森林均方误差：'</span><span class="token punctuation">,</span> rf_mse<span class="token punctuation">)</span>rf_score <span class="token operator">=</span> RF<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'随机森林性能：'</span><span class="token punctuation">,</span> rf_score<span class="token punctuation">)</span>随机森林均方误差： <span class="token number">2.92522091211</span>随机森林性能： <span class="token number">0.888257216032</span><span class="token comment"># AdaBoost算法</span>DT <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>AB <span class="token operator">=</span> AdaBoostRegressor<span class="token punctuation">(</span>DT<span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>AB<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>ab_y <span class="token operator">=</span> AB<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>ab_mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> ab_y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'AdaBoost均方误差：'</span><span class="token punctuation">,</span> ab_mse<span class="token punctuation">)</span>ab_score <span class="token operator">=</span> AB<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'AdaBoost性能：'</span><span class="token punctuation">,</span> ab_score<span class="token punctuation">)</span>AdaBoost均方误差： <span class="token number">3.67444143833</span>AdaBoost性能： <span class="token number">0.85963715966</span><span class="token comment"># GBDT算法</span>GBDT <span class="token operator">=</span> GradientBoostingRegressor<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>GBDT<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>gbdt_y <span class="token operator">=</span> GBDT<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>gbdt_mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> gbdt_y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'GBDT均方误差：'</span><span class="token punctuation">,</span> gbdt_mse<span class="token punctuation">)</span>gbdt_score <span class="token operator">=</span> GBDT<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'GBDT性能：'</span><span class="token punctuation">,</span> gbdt_score<span class="token punctuation">)</span>GBDT均方误差： <span class="token number">0.722740439332</span>GBDT性能： <span class="token number">0.972391477019</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>m<span class="token punctuation">,</span> n <span class="token operator">=</span> y_test<span class="token punctuation">.</span>shape<span class="token comment">#获取行和列</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'真实分布'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>rf_y<span class="token punctuation">,</span> <span class="token string">'g-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">u'随机森林，$R^2$=%.4f'</span> <span class="token operator">%</span> rf_score<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>ab_y<span class="token punctuation">,</span> <span class="token string">'b-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">u'AdaBoost, $R^2$=%.4f'</span><span class="token operator">%</span> ab_score<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>gbdt_y<span class="token punctuation">,</span> <span class="token string">'y-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">u'GBDT, $R^2$=%.4f'</span><span class="token operator">%</span> gbdt_score<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/15-ji-cheng-xue-xi-boosting-adaboost-gbdt/27.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 集成学习-Boosting-Adaboost-GBDT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-集成学习-随即森林</title>
      <link href="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/"/>
      <url>/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/</url>
      
        <content type="html"><![CDATA[<h3 id="1-集成学习概述"><a href="#1-集成学习概述" class="headerlink" title="1. 集成学习概述"></a>1. 集成学习概述</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/1.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/2.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/3.png"></p><h3 id="2-集成学习方式"><a href="#2-集成学习方式" class="headerlink" title="2. 集成学习方式"></a>2. 集成学习方式</h3><h4 id="2-1-集成学习种类"><a href="#2-1-集成学习种类" class="headerlink" title="2.1 集成学习种类"></a>2.1 集成学习种类</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/4.png"></p><h4 id="2-2-集成学习结构图"><a href="#2-2-集成学习结构图" class="headerlink" title="2.2 集成学习结构图"></a>2.2 集成学习结构图</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/5.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/6.png"></p><h4 id="2-3-集成学习思想介绍"><a href="#2-3-集成学习思想介绍" class="headerlink" title="2.3 集成学习思想介绍"></a>2.3 集成学习思想介绍</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/7.png"></p><h4 id="2-4-集成学习处理方式"><a href="#2-4-集成学习处理方式" class="headerlink" title="2.4 集成学习处理方式"></a>2.4 集成学习处理方式</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/8.png"></p><h4 id="2-5-Stacking"><a href="#2-5-Stacking" class="headerlink" title="2.5 Stacking"></a>2.5 Stacking</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/9.png"></p><h4 id="2-6-集成模型一览"><a href="#2-6-集成模型一览" class="headerlink" title="2.6 集成模型一览"></a>2.6 集成模型一览</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/10.png"></p><h3 id="3-随机森林概述"><a href="#3-随机森林概述" class="headerlink" title="3. 随机森林概述"></a>3. 随机森林概述</h3><h4 id="3-1-随机森林思想"><a href="#3-1-随机森林思想" class="headerlink" title="3.1 随机森林思想"></a>3.1 随机森林思想</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/11.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/12.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/13.png"></p><h4 id="3-2-随机森林伪代码"><a href="#3-2-随机森林伪代码" class="headerlink" title="3.2 随机森林伪代码"></a>3.2 随机森林伪代码</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/14.png"></p><h4 id="3-3-随机森林结合策略"><a href="#3-3-随机森林结合策略" class="headerlink" title="3.3 随机森林结合策略"></a>3.3 随机森林结合策略</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/15.png"></p><h4 id="3-4-随机森林底层代码"><a href="#3-4-随机森林底层代码" class="headerlink" title="3.4 随机森林底层代码"></a>3.4 随机森林底层代码</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/16.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/17.png"></p><h4 id="3-5-随机森林回归底层代码"><a href="#3-5-随机森林回归底层代码" class="headerlink" title="3.5 随机森林回归底层代码"></a>3.5 随机森林回归底层代码</h4><p>随机森林底层代码演示</p><p>三个臭皮匠，顶个诸葛亮<br>随机森林使用bagging思想进行数据的处理<br>采用预剪枝的决策树作为基学习器，并且每个基学习器拟合部分数据样本<br>在强学习器中，使用所有弱学习器加和后的结果进行均值运算，得到一个最综合的结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">基学习器创建过程创建<span class="token number">20</span>个决策树，使用<span class="token number">0.9</span>的样本进行拟合，达到弱学习效果并使用列表将<span class="token number">20</span>个弱学习进行存储，准备后续使用<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 读取数据集</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5.56</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5.91</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6.8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7.05</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9.05</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token number">0</span>     <span class="token number">1</span><span class="token number">0</span>   <span class="token number">1</span>  <span class="token number">5.56</span><span class="token number">1</span>   <span class="token number">2</span>  <span class="token number">5.70</span><span class="token number">2</span>   <span class="token number">3</span>  <span class="token number">5.91</span><span class="token number">3</span>   <span class="token number">4</span>  <span class="token number">6.40</span><span class="token number">4</span>   <span class="token number">5</span>  <span class="token number">6.80</span><span class="token number">5</span>   <span class="token number">6</span>  <span class="token number">7.05</span><span class="token number">6</span>   <span class="token number">7</span>  <span class="token number">8.90</span><span class="token number">7</span>   <span class="token number">8</span>  <span class="token number">8.70</span><span class="token number">8</span>   <span class="token number">9</span>  <span class="token number">9.00</span><span class="token number">9</span>  <span class="token number">10</span>  <span class="token number">9.05</span><span class="token comment"># 基学习器创建过程</span><span class="token comment"># 创建20个决策树，使用0.9的样本进行拟合，达到弱学习效果</span><span class="token comment"># 并使用列表将20个弱学习进行存储，准备后续使用</span>M <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#存储决策树模型(弱分类器)的列表</span>n_trees <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment">#创建20棵分类树（弱分类器）</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_trees<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> df<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>  <span class="token comment">#对样本进行采样，目的是建造不同的树</span>    X <span class="token operator">=</span> tmp<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment">#构造采样后不同的x</span>    Y <span class="token operator">=</span> tmp<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment">#构造采用后不同的y</span>    model <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token comment">#创建的模型都是弱分类器</span>    M<span class="token punctuation">.</span>append<span class="token punctuation">(</span>model<span class="token punctuation">)</span>     <span class="token comment"># 随机森林运行过程</span><span class="token comment"># 使用全部的数据，使用每个弱分类器进行结果预测，并将每个弱分类器结果进行存储 打印每个弱分类器性能，查看弱分类器性能</span>X <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">#获取全部数据的X</span>Y <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#获取全部数据的Y</span>res <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#初始化全零向量，强学习器数据的初始值</span><span class="token keyword">for</span> j<span class="token punctuation">,</span>i <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#遍历模型数组</span>    res <span class="token operator">+=</span> i<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token comment">#将每个模型预测值叠加到res变量</span>    y_ <span class="token operator">=</span> i<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token comment">#打印模型预测值</span>    mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> y_<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第%d个模型的均方误差为%.2f'</span><span class="token operator">%</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> mse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#基学习器的均方误差</span>第<span class="token number">0</span>个模型的均方误差为<span class="token number">0.03</span>第<span class="token number">1</span>个模型的均方误差为<span class="token number">0.04</span>第<span class="token number">2</span>个模型的均方误差为<span class="token number">0.03</span>第<span class="token number">3</span>个模型的均方误差为<span class="token number">0.04</span>第<span class="token number">4</span>个模型的均方误差为<span class="token number">0.03</span>第<span class="token number">5</span>个模型的均方误差为<span class="token number">0.03</span>第<span class="token number">6</span>个模型的均方误差为<span class="token number">0.03</span>第<span class="token number">7</span>个模型的均方误差为<span class="token number">0.03</span>第<span class="token number">8</span>个模型的均方误差为<span class="token number">0.03</span>第<span class="token number">9</span>个模型的均方误差为<span class="token number">0.03</span>第<span class="token number">10</span>个模型的均方误差为<span class="token number">0.03</span>第<span class="token number">11</span>个模型的均方误差为<span class="token number">0.06</span>第<span class="token number">12</span>个模型的均方误差为<span class="token number">0.03</span>第<span class="token number">13</span>个模型的均方误差为<span class="token number">0.03</span>第<span class="token number">14</span>个模型的均方误差为<span class="token number">0.49</span>第<span class="token number">15</span>个模型的均方误差为<span class="token number">0.03</span>第<span class="token number">16</span>个模型的均方误差为<span class="token number">0.03</span>第<span class="token number">17</span>个模型的均方误差为<span class="token number">0.03</span>第<span class="token number">18</span>个模型的均方误差为<span class="token number">0.03</span>第<span class="token number">19</span>个模型的均方误差为<span class="token number">0.03</span><span class="token comment"># 强分类器处理</span><span class="token comment"># 将每次若分类器的结果除以弱分类器个数，得到最后的预测结果</span>y_ <span class="token operator">=</span> res<span class="token operator">/</span>n_trees <span class="token comment">#取平均输出最终对每个样本标签的预测值</span><span class="token keyword">print</span><span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> y_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#取平均输出最终对每个样本标签的预测值  0.0287846069444</span><span class="token comment"># 获取数据的数量</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>m <span class="token operator">=</span> df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span>  label<span class="token operator">=</span><span class="token string">'真实值'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> y_<span class="token punctuation">,</span> <span class="token string">'b-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'预测值'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/18.png"></p><h4 id="3-6-随机森林分类底层"><a href="#3-6-随机森林分类底层" class="headerlink" title="3.6 随机森林分类底层"></a>3.6 随机森林分类底层</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> f1_scoredf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span> <span class="token number">0</span>  <span class="token number">1</span><span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">1</span><span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">1</span><span class="token number">2</span>  <span class="token number">2</span>  <span class="token number">1</span><span class="token number">3</span>  <span class="token number">3</span> <span class="token operator">-</span><span class="token number">1</span><span class="token number">4</span>  <span class="token number">4</span> <span class="token operator">-</span><span class="token number">1</span><span class="token number">5</span>  <span class="token number">5</span> <span class="token operator">-</span><span class="token number">1</span><span class="token number">6</span>  <span class="token number">6</span>  <span class="token number">1</span><span class="token number">7</span>  <span class="token number">7</span>  <span class="token number">1</span><span class="token number">8</span>  <span class="token number">8</span>  <span class="token number">1</span><span class="token number">9</span>  <span class="token number">9</span> <span class="token operator">-</span><span class="token number">1</span><span class="token comment"># 使用分类决策树作为弱分类器进行处理</span><span class="token comment"># 弱分类器模型创建存储过程</span><span class="token comment"># 使用分类决策树创建模型，每个模型深度为2 每个决策树只分析80%的数据</span>M <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#存储决策树模型的数组</span>n_trees <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment">#设置树的颗数</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_trees<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> df<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span>  <span class="token comment">#对样本进行采样，目的是建造不同的树</span>    X <span class="token operator">=</span> tmp<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment">#构造X</span>    Y <span class="token operator">=</span> tmp<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment">#构造Y</span>    model <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span>    M<span class="token punctuation">.</span>append<span class="token punctuation">(</span>model<span class="token punctuation">)</span>  <span class="token comment">#将决策树模型加入数组</span>    <span class="token comment"># 强分类计算过程</span><span class="token comment"># 计算每一个弱分类器的分类结果，将结果进行整合，通过投票计算最终结果</span>X <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#获取全部数据的X</span>Y <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#获取全部数据的Y</span>res <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#初始化全零向量</span><span class="token keyword">for</span> j<span class="token punctuation">,</span> i <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#遍历模型数组</span>    y_ <span class="token operator">=</span> i<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    res <span class="token operator">+=</span> y_ <span class="token comment">#将每个模型预测值叠加到res变量   正得多大于零，负得多小于零</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> f1_score<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> y_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---最终结果---'</span><span class="token punctuation">)</span>y_ <span class="token operator">=</span> np<span class="token punctuation">.</span>sign<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">#取平均输出最终对每个样本标签的预测值   大于零为1，小于零为-1</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1_score<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> y_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">0</span> <span class="token number">0.833333333333</span><span class="token number">1</span> <span class="token number">0.909090909091</span><span class="token number">2</span> <span class="token number">0.666666666667</span><span class="token number">3</span> <span class="token number">0.8</span><span class="token number">4</span> <span class="token number">0.923076923077</span><span class="token number">5</span> <span class="token number">0.666666666667</span><span class="token number">6</span> <span class="token number">0.666666666667</span><span class="token number">7</span> <span class="token number">0.923076923077</span><span class="token number">8</span> <span class="token number">0.923076923077</span><span class="token number">9</span> <span class="token number">0.666666666667</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最终结果<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-随机森林特征选择"><a href="#4-随机森林特征选择" class="headerlink" title="4. 随机森林特征选择"></a>4. 随机森林特征选择</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/19.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/20.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/21.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/22.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/23.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/24.png"></p><h3 id="5-随机森林代码实战"><a href="#5-随机森林代码实战" class="headerlink" title="5. 随机森林代码实战"></a>5. 随机森林代码实战</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/25.png"></p><h4 id="5-1-随机森林回归"><a href="#5-1-随机森林回归" class="headerlink" title="5.1 随机森林回归"></a>5.1 随机森林回归</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/26.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token punctuation">,</span> r2_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCV<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestRegressor<span class="token keyword">import</span> warnings<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltwarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5.56</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5.91</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6.8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7.05</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9.05</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>X <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Y <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>RF <span class="token operator">=</span> RandomForestRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span>pg <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'n_estimators'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'max_depth'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token string">'min_samples_leaf'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span>model <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>RF<span class="token punctuation">,</span> param_grid<span class="token operator">=</span>pg<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#cv  cross validation</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最优参数{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'均方误差:{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'r2数值:{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>最优参数<span class="token punctuation">{</span><span class="token string">'max_depth'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'min_samples_leaf'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'n_estimators'</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">}</span>均方误差<span class="token punctuation">:</span><span class="token number">0.03242686956819326</span>r2数值<span class="token punctuation">:</span><span class="token number">0.9830352028317187</span>    y_ <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>m <span class="token operator">=</span> df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'实际样本'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>y_<span class="token punctuation">,</span> <span class="token string">'b-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'预测效果'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/29.png"></p><h4 id="5-2-随机森林回归-广告"><a href="#5-2-随机森林回归-广告" class="headerlink" title="5.2 随机森林回归-广告"></a>5.2 随机森林回归-广告</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token punctuation">,</span> r2_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span> GridSearchCV<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'../datas/Advertising.csv'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>TV  Radio  Newspaper  Sales<span class="token number">1</span>  <span class="token number">230.1</span>   <span class="token number">37.8</span>       <span class="token number">69.2</span>   <span class="token number">22.1</span><span class="token number">2</span>   <span class="token number">44.5</span>   <span class="token number">39.3</span>       <span class="token number">45.1</span>   <span class="token number">10.4</span><span class="token number">3</span>   <span class="token number">17.2</span>   <span class="token number">45.9</span>       <span class="token number">69.3</span>    <span class="token number">9.3</span><span class="token number">4</span>  <span class="token number">151.5</span>   <span class="token number">41.3</span>       <span class="token number">58.5</span>   <span class="token number">18.5</span><span class="token number">5</span>  <span class="token number">180.8</span>   <span class="token number">10.8</span>       <span class="token number">58.4</span>   <span class="token number">12.9</span>、<span class="token comment">#划分x，y</span>x <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#留出法，分训练集和测试集</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token comment">#创建模型</span>model <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#网格搜索</span>param_grid<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'max_depth'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">}</span>tree <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>model<span class="token punctuation">,</span> param_grid<span class="token operator">=</span>param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span><span class="token comment"># {'max_depth': 11}</span>tree_score <span class="token operator">=</span> tree<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token comment">#R^2</span><span class="token keyword">print</span><span class="token punctuation">(</span>tree_score<span class="token punctuation">)</span><span class="token comment"># 0.859152729372</span>tree_predict <span class="token operator">=</span> tree<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token comment">#用于我们后续画图使用</span>model <span class="token operator">=</span> RandomForestRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span>param_grid <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'max_depth'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'n_estimators'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">}</span>rf <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>model<span class="token punctuation">,</span> param_grid<span class="token operator">=</span>param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>rf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span><span class="token comment"># {'max_depth': 3, 'n_estimators': 20}</span>rf_score <span class="token operator">=</span> rf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rf_score<span class="token punctuation">)</span><span class="token comment"># 0.895737292394</span>rf_predict <span class="token operator">=</span> rf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>m<span class="token punctuation">,</span> n <span class="token operator">=</span> y_test<span class="token punctuation">.</span>shape<span class="token comment">#获取行和列</span><span class="token comment"># print(m)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'真实分布'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>tree_predict<span class="token punctuation">,</span> <span class="token string">'g-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">u'决策树回归，$R^2$=%.4f'</span> <span class="token operator">%</span> tree_score<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>rf_predict<span class="token punctuation">,</span> <span class="token string">'b-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">u'随机森林, $R^2$=%.4f'</span><span class="token operator">%</span> rf_score<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/30.png"></p><h4 id="5-3-随机森林分类"><a href="#5-3-随机森林分类" class="headerlink" title="5.3 随机森林分类"></a>5.3 随机森林分类</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/27.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> f1_score<span class="token punctuation">,</span> recall_score<span class="token punctuation">,</span> precision_score<span class="token punctuation">,</span> confusion_matrix<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> classification_report<span class="token punctuation">,</span> roc_auc_score<span class="token punctuation">,</span> roc_curve<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>X <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>Y <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>model <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1_score<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 1.0</span><span class="token comment"># 更正一个错误，ROC曲线的参数是实际标签和预测的得分（概率）进行计算的</span><span class="token keyword">print</span><span class="token punctuation">(</span>confusion_matrix<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'AUC:'</span><span class="token punctuation">,</span> roc_auc_score<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> model<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fpr<span class="token punctuation">,</span> tpr<span class="token punctuation">,</span> th <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> model<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>fpr<span class="token punctuation">,</span> tpr<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>AUC<span class="token punctuation">:</span> <span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/14-ji-cheng-xue-xi-sui-ji-sen-lin/28.png"></p><h4 id="5-4-随机森林分类-鸢尾花"><a href="#5-4-随机森林分类-鸢尾花" class="headerlink" title="5.4 随机森林分类-鸢尾花"></a>5.4 随机森林分类-鸢尾花</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span> GridSearchCV<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token punctuation">,</span> LabelEncoder<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipeline<span class="token keyword">import</span> warnings<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> classification_reportwarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'../datas/iris.txt'</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'x1'</span><span class="token punctuation">,</span> <span class="token string">'x2'</span><span class="token punctuation">,</span> <span class="token string">'x3'</span><span class="token punctuation">,</span> <span class="token string">'x4'</span><span class="token punctuation">,</span> <span class="token string">'lable'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x1   x2   x3   x4        lable<span class="token number">0</span>  <span class="token number">5.1</span>  <span class="token number">3.5</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">1</span>  <span class="token number">4.9</span>  <span class="token number">3.0</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">2</span>  <span class="token number">4.7</span>  <span class="token number">3.2</span>  <span class="token number">1.3</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">3</span>  <span class="token number">4.6</span>  <span class="token number">3.1</span>  <span class="token number">1.5</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">4</span>  <span class="token number">5.0</span>  <span class="token number">3.6</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosax <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>lable <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> lable<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># [0 0 0 0 0 0 0 0 0 0]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x1   x2   x3   x4<span class="token number">0</span>  <span class="token number">5.1</span>  <span class="token number">3.5</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span><span class="token number">1</span>  <span class="token number">4.9</span>  <span class="token number">3.0</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span><span class="token number">2</span>  <span class="token number">4.7</span>  <span class="token number">3.2</span>  <span class="token number">1.3</span>  <span class="token number">0.2</span><span class="token number">3</span>  <span class="token number">4.6</span>  <span class="token number">3.1</span>  <span class="token number">1.5</span>  <span class="token number">0.2</span><span class="token number">4</span>  <span class="token number">5.0</span>  <span class="token number">3.6</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span><span class="token number">5</span>  <span class="token number">5.4</span>  <span class="token number">3.9</span>  <span class="token number">1.7</span>  <span class="token number">0.4</span><span class="token number">6</span>  <span class="token number">4.6</span>  <span class="token number">3.4</span>  <span class="token number">1.4</span>  <span class="token number">0.3</span><span class="token number">7</span>  <span class="token number">5.0</span>  <span class="token number">3.4</span>  <span class="token number">1.5</span>  <span class="token number">0.2</span><span class="token number">8</span>  <span class="token number">4.4</span>  <span class="token number">2.9</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span><span class="token number">9</span>  <span class="token number">4.9</span>  <span class="token number">3.1</span>  <span class="token number">1.5</span>  <span class="token number">0.1</span><span class="token comment"># 使用分类决策树拟合数据</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>model <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>dt <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>model<span class="token punctuation">,</span> param_grid<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'max_depth'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>dt<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span><span class="token comment"># {'max_depth': 3}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># acc准确率0.977777777778</span><span class="token comment"># 使用随机森林进行分类</span>model <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>param_grid <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'max_depth'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'n_estimators'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">}</span>rf <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>model<span class="token punctuation">,</span> param_grid<span class="token operator">=</span>param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>rf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span><span class="token comment"># {'max_depth': 2, 'n_estimators': 20}</span><span class="token keyword">print</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 1.0</span><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>precision    recall  f1<span class="token operator">-</span>score   support          <span class="token number">0</span>       <span class="token number">1.00</span>      <span class="token number">1.00</span>      <span class="token number">1.00</span>        <span class="token number">17</span>          <span class="token number">1</span>       <span class="token number">1.00</span>      <span class="token number">1.00</span>      <span class="token number">1.00</span>        <span class="token number">15</span>          <span class="token number">2</span>       <span class="token number">1.00</span>      <span class="token number">1.00</span>      <span class="token number">1.00</span>        <span class="token number">13</span>avg <span class="token operator">/</span> total       <span class="token number">1.00</span>      <span class="token number">1.00</span>      <span class="token number">1.00</span>        <span class="token number">45</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 集成学习-随即森林 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13-决策树</title>
      <link href="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/"/>
      <url>/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-决策树概述"><a href="#1-决策树概述" class="headerlink" title="1. 决策树概述"></a>1. 决策树概述</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/1.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/2.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/3.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/4.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/5.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/6.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/7.png"></p><h3 id="2-决策树创建策略"><a href="#2-决策树创建策略" class="headerlink" title="2. 决策树创建策略"></a>2. 决策树创建策略</h3><h4 id="2-1-构建方式"><a href="#2-1-构建方式" class="headerlink" title="2.1 构建方式"></a>2.1 构建方式</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/8.png"></p><h4 id="2-2-贪心策略"><a href="#2-2-贪心策略" class="headerlink" title="2.2 贪心策略"></a>2.2 贪心策略</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/9.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/10.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/11.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/12.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/13.png"></p><h4 id="2-3-度量指标"><a href="#2-3-度量指标" class="headerlink" title="2.3 度量指标"></a>2.3 度量指标</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/14.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/15.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/16.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/17.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/18.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/19.png"></p><h3 id="3-候选集划分"><a href="#3-候选集划分" class="headerlink" title="3. 候选集划分"></a>3. 候选集划分</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/20.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/21.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/22.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/23.png"></p><h3 id="4-构造流程"><a href="#4-构造流程" class="headerlink" title="4. 构造流程"></a>4. 构造流程</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/24.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/25.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/26.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/27.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/28.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/29.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/30.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/31.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/32.png"></p><h4 id="4-1-色泽信息增益-离散值"><a href="#4-1-色泽信息增益-离散值" class="headerlink" title="4.1 色泽信息增益-离散值"></a>4.1 色泽信息增益-离散值</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> math <span class="token keyword">import</span> log<span class="token comment"># log取0的时候，会报异常</span><span class="token keyword">def</span> <span class="token function">log_safe</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 当x！=0 求对数值， 否则将数值定为0</span>    <span class="token triple-quoted-string string">'''    if x!=0:        return log(x, 2)    else:        return 0    '''</span>    <span class="token keyword">return</span> log<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token operator">!=</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>path <span class="token operator">=</span> <span class="token string">"../datas/xigua.csv"</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span> x1     x2     x3  label  score<span class="token number">0</span>   青绿  <span class="token number">0.697</span>  <span class="token number">0.460</span>      <span class="token number">0</span>     <span class="token number">71</span><span class="token number">1</span>   乌黑  <span class="token number">0.774</span>  <span class="token number">0.376</span>      <span class="token number">0</span>     <span class="token number">92</span><span class="token number">2</span>   乌黑  <span class="token number">0.634</span>  <span class="token number">0.264</span>      <span class="token number">0</span>     <span class="token number">86</span><span class="token number">3</span>   青绿  <span class="token number">0.608</span>  <span class="token number">0.318</span>      <span class="token number">0</span>     <span class="token number">79</span><span class="token number">4</span>   浅白  <span class="token number">0.556</span>  <span class="token number">0.215</span>      <span class="token number">0</span>     <span class="token number">91</span><span class="token number">5</span>   青绿  <span class="token number">0.403</span>  <span class="token number">0.237</span>      <span class="token number">0</span>     <span class="token number">88</span><span class="token number">6</span>   乌黑  <span class="token number">0.481</span>  <span class="token number">0.149</span>      <span class="token number">0</span>     <span class="token number">85</span><span class="token number">7</span>   乌黑  <span class="token number">0.437</span>  <span class="token number">0.211</span>      <span class="token number">0</span>     <span class="token number">94</span><span class="token number">8</span>   乌黑  <span class="token number">0.666</span>  <span class="token number">0.091</span>      <span class="token number">1</span>     <span class="token number">31</span><span class="token number">9</span>   青绿  <span class="token number">0.243</span>  <span class="token number">0.267</span>      <span class="token number">1</span>     <span class="token number">22</span><span class="token number">10</span>  浅白  <span class="token number">0.245</span>  <span class="token number">0.057</span>      <span class="token number">1</span>     <span class="token number">16</span><span class="token number">11</span>  浅白  <span class="token number">0.343</span>  <span class="token number">0.099</span>      <span class="token number">1</span>     <span class="token number">29</span><span class="token number">12</span>  青绿  <span class="token number">0.639</span>  <span class="token number">0.161</span>      <span class="token number">1</span>     <span class="token number">11</span><span class="token number">13</span>  浅白  <span class="token number">0.657</span>  <span class="token number">0.198</span>      <span class="token number">1</span>     <span class="token number">18</span><span class="token number">14</span>  乌黑  <span class="token number">0.360</span>  <span class="token number">0.370</span>      <span class="token number">1</span>     <span class="token number">15</span><span class="token number">15</span>  浅白  <span class="token number">0.593</span>  <span class="token number">0.042</span>      <span class="token number">1</span>     <span class="token number">24</span><span class="token number">16</span>  青绿  <span class="token number">0.719</span>  <span class="token number">0.103</span>      <span class="token number">1</span>     <span class="token number">18</span><span class="token comment"># 香农熵（信息熵）</span><span class="token comment">##计算根结点中label=0的占比   f1好瓜概率</span>f1 <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">*</span>df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">##计算根结点中label=1的占比</span>f2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> f1<span class="token comment">##计算根结点香农熵</span>ent <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> f1<span class="token operator">*</span>log_safe<span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token operator">-</span> f2<span class="token operator">*</span>log_safe<span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ent:'</span><span class="token punctuation">,</span> ent<span class="token punctuation">)</span>  <span class="token comment">#ent: 0.9975025463691153</span><span class="token comment">##获取x1=青绿的样本集合</span>df1 <span class="token operator">=</span> df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">"x1"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"青绿"</span><span class="token punctuation">]</span><span class="token comment">##计算x1=青绿的样本集合下label=0的占比</span>f1 <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">*</span>df1<span class="token punctuation">[</span>df1<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>df1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">##计算x1=青绿的样本集合下label=1的占比</span>f2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> f1<span class="token comment">##计算x1=青绿的样本集合下香农熵</span>ent1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> f1<span class="token operator">*</span>log_safe<span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token operator">-</span> f2<span class="token operator">*</span>log_safe<span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ent1:'</span><span class="token punctuation">,</span> ent1<span class="token punctuation">)</span>  <span class="token comment"># ent1: 1.0</span><span class="token comment">##获取x1=乌黑的样本集合</span>df2 <span class="token operator">=</span> df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">"x1"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"乌黑"</span><span class="token punctuation">]</span><span class="token comment">##计算x1=乌黑的样本集合下label=0的占比</span>f1 <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">*</span>df2<span class="token punctuation">[</span>df2<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>df2<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">##计算x1=乌黑的样本集合下label=1的占比</span>f2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> f1<span class="token comment">##计算x1=乌黑的样本集合下香农熵</span>ent2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> f1<span class="token operator">*</span>log_safe<span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token operator">-</span> f2<span class="token operator">*</span>log_safe<span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ent2:'</span><span class="token punctuation">,</span> ent2<span class="token punctuation">)</span>  <span class="token comment"># ent2: 0.9182958340544896</span><span class="token comment">##获取x1=浅白的样本集合</span>df3 <span class="token operator">=</span> df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">"x1"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"浅白"</span><span class="token punctuation">]</span><span class="token comment">##计算x1=浅白的样本集合下label=0的占比</span>f1 <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">*</span>df3<span class="token punctuation">[</span>df3<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>df3<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">##计算x1=浅白的样本集合下label=1的占比</span>f2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> f1<span class="token comment">##计算x1=浅白的样本集合下香农熵</span>ent3 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> f1<span class="token operator">*</span>log_safe<span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token operator">-</span> f2<span class="token operator">*</span>log_safe<span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ent3'</span><span class="token punctuation">,</span> ent3<span class="token punctuation">)</span>  <span class="token comment"># ent3 0.7219280948873623</span><span class="token comment">##计算香农熵增益</span>IG <span class="token operator">=</span> ent <span class="token operator">-</span> <span class="token number">1.0</span><span class="token operator">*</span>df1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> ent1 <span class="token operator">-</span> <span class="token number">1.0</span><span class="token operator">*</span>df2<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> ent2 <span class="token operator">-</span> <span class="token number">1.0</span><span class="token operator">*</span>df3<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> ent3<span class="token keyword">print</span><span class="token punctuation">(</span>IG<span class="token punctuation">)</span>  <span class="token comment"># 0.10812516526536536</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-密度处理-连续值"><a href="#4-2-密度处理-连续值" class="headerlink" title="4.2 密度处理-连续值"></a>4.2 密度处理-连续值</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> math <span class="token keyword">import</span> log<span class="token keyword">def</span> <span class="token function">log_safe</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># logx,当x=0时会报错</span>    <span class="token keyword">return</span> log<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>path <span class="token operator">=</span> <span class="token string">"../datas/xigua.csv"</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>x1     x2     x3  label  score<span class="token number">0</span>   青绿  <span class="token number">0.697</span>  <span class="token number">0.460</span>      <span class="token number">0</span>     <span class="token number">71</span><span class="token number">1</span>   乌黑  <span class="token number">0.774</span>  <span class="token number">0.376</span>      <span class="token number">0</span>     <span class="token number">92</span><span class="token number">2</span>   乌黑  <span class="token number">0.634</span>  <span class="token number">0.264</span>      <span class="token number">0</span>     <span class="token number">86</span><span class="token number">3</span>   青绿  <span class="token number">0.608</span>  <span class="token number">0.318</span>      <span class="token number">0</span>     <span class="token number">79</span><span class="token number">4</span>   浅白  <span class="token number">0.556</span>  <span class="token number">0.215</span>      <span class="token number">0</span>     <span class="token number">91</span><span class="token number">5</span>   青绿  <span class="token number">0.403</span>  <span class="token number">0.237</span>      <span class="token number">0</span>     <span class="token number">88</span><span class="token number">6</span>   乌黑  <span class="token number">0.481</span>  <span class="token number">0.149</span>      <span class="token number">0</span>     <span class="token number">85</span><span class="token number">7</span>   乌黑  <span class="token number">0.437</span>  <span class="token number">0.211</span>      <span class="token number">0</span>     <span class="token number">94</span><span class="token number">8</span>   乌黑  <span class="token number">0.666</span>  <span class="token number">0.091</span>      <span class="token number">1</span>     <span class="token number">31</span><span class="token number">9</span>   青绿  <span class="token number">0.243</span>  <span class="token number">0.267</span>      <span class="token number">1</span>     <span class="token number">22</span><span class="token number">10</span>  浅白  <span class="token number">0.245</span>  <span class="token number">0.057</span>      <span class="token number">1</span>     <span class="token number">16</span><span class="token number">11</span>  浅白  <span class="token number">0.343</span>  <span class="token number">0.099</span>      <span class="token number">1</span>     <span class="token number">29</span><span class="token number">12</span>  青绿  <span class="token number">0.639</span>  <span class="token number">0.161</span>      <span class="token number">1</span>     <span class="token number">11</span><span class="token number">13</span>  浅白  <span class="token number">0.657</span>  <span class="token number">0.198</span>      <span class="token number">1</span>     <span class="token number">18</span><span class="token number">14</span>  乌黑  <span class="token number">0.360</span>  <span class="token number">0.370</span>      <span class="token number">1</span>     <span class="token number">15</span><span class="token number">15</span>  浅白  <span class="token number">0.593</span>  <span class="token number">0.042</span>      <span class="token number">1</span>     <span class="token number">24</span><span class="token number">16</span>  青绿  <span class="token number">0.719</span>  <span class="token number">0.103</span>      <span class="token number">1</span>     <span class="token number">18</span><span class="token comment">#连续值计算时，将当前特征进行排序</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">"x2"</span><span class="token punctuation">)</span>  <span class="token comment"># 按照密度进行排序</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>x1     x2     x3  label  score<span class="token number">9</span>   青绿  <span class="token number">0.243</span>  <span class="token number">0.267</span>      <span class="token number">1</span>     <span class="token number">22</span><span class="token number">10</span>  浅白  <span class="token number">0.245</span>  <span class="token number">0.057</span>      <span class="token number">1</span>     <span class="token number">16</span><span class="token number">11</span>  浅白  <span class="token number">0.343</span>  <span class="token number">0.099</span>      <span class="token number">1</span>     <span class="token number">29</span><span class="token number">14</span>  乌黑  <span class="token number">0.360</span>  <span class="token number">0.370</span>      <span class="token number">1</span>     <span class="token number">15</span><span class="token number">5</span>   青绿  <span class="token number">0.403</span>  <span class="token number">0.237</span>      <span class="token number">0</span>     <span class="token number">88</span><span class="token number">7</span>   乌黑  <span class="token number">0.437</span>  <span class="token number">0.211</span>      <span class="token number">0</span>     <span class="token number">94</span><span class="token number">6</span>   乌黑  <span class="token number">0.481</span>  <span class="token number">0.149</span>      <span class="token number">0</span>     <span class="token number">85</span><span class="token number">4</span>   浅白  <span class="token number">0.556</span>  <span class="token number">0.215</span>      <span class="token number">0</span>     <span class="token number">91</span><span class="token number">15</span>  浅白  <span class="token number">0.593</span>  <span class="token number">0.042</span>      <span class="token number">1</span>     <span class="token number">24</span><span class="token number">3</span>   青绿  <span class="token number">0.608</span>  <span class="token number">0.318</span>      <span class="token number">0</span>     <span class="token number">79</span><span class="token number">2</span>   乌黑  <span class="token number">0.634</span>  <span class="token number">0.264</span>      <span class="token number">0</span>     <span class="token number">86</span><span class="token number">12</span>  青绿  <span class="token number">0.639</span>  <span class="token number">0.161</span>      <span class="token number">1</span>     <span class="token number">11</span><span class="token number">13</span>  浅白  <span class="token number">0.657</span>  <span class="token number">0.198</span>      <span class="token number">1</span>     <span class="token number">18</span><span class="token number">8</span>   乌黑  <span class="token number">0.666</span>  <span class="token number">0.091</span>      <span class="token number">1</span>     <span class="token number">31</span><span class="token number">0</span>   青绿  <span class="token number">0.697</span>  <span class="token number">0.460</span>      <span class="token number">0</span>     <span class="token number">71</span><span class="token number">16</span>  青绿  <span class="token number">0.719</span>  <span class="token number">0.103</span>      <span class="token number">1</span>     <span class="token number">18</span><span class="token number">1</span>   乌黑  <span class="token number">0.774</span>  <span class="token number">0.376</span>      <span class="token number">0</span>     <span class="token number">92</span>f1 <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 计算根结点里好瓜的频率</span>f2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> f1  <span class="token comment"># 计算根结点里坏瓜的频率</span>ent <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> f1 <span class="token operator">*</span> log_safe<span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token operator">-</span> f2 <span class="token operator">*</span> log_safe<span class="token punctuation">(</span>f2<span class="token punctuation">)</span>  <span class="token comment"># 计算根结点香农熵</span><span class="token keyword">print</span><span class="token punctuation">(</span>ent<span class="token punctuation">)</span>  <span class="token comment"># 0.9975025463691153</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 遍历所有划分点</span>    df1 <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 获取左子树的样本</span>    <span class="token comment"># print(df1)</span>    f1 <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> df1<span class="token punctuation">[</span>df1<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> df1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 计算样本左子树中label=0的占比</span>    f2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> f1  <span class="token comment"># 计算左子树中label=1的占比</span>    ent1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> f1 <span class="token operator">*</span> log_safe<span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token operator">-</span> f2 <span class="token operator">*</span> log_safe<span class="token punctuation">(</span>f2<span class="token punctuation">)</span>  <span class="token comment"># 计算左子树的香农熵</span>    df2 <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 获取右子树的样本</span>    f1 <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> df2<span class="token punctuation">[</span>df2<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> df2<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 计算样本右子树中label=0的占比</span>    f2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> f1  <span class="token comment"># 计算右子树中label=1的占比</span>    ent2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> f1 <span class="token operator">*</span> log_safe<span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token operator">-</span> f2 <span class="token operator">*</span> log_safe<span class="token punctuation">(</span>f2<span class="token punctuation">)</span>  <span class="token comment"># 计算右子树的香农熵</span>    <span class="token comment"># 计算信息增益</span>    IG <span class="token operator">=</span> ent <span class="token operator">-</span> <span class="token number">1.0</span> <span class="token operator">*</span> df1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> ent1 <span class="token operator">-</span> <span class="token number">1.0</span> <span class="token operator">*</span> df2<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> ent2    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> IG<span class="token punctuation">)</span><span class="token number">1</span> <span class="token number">0.05632607578088</span><span class="token number">2</span> <span class="token number">0.1179805181500242</span><span class="token number">3</span> <span class="token number">0.1861381990467904</span><span class="token number">4</span> <span class="token number">0.2624392604045631</span><span class="token number">5</span> <span class="token number">0.0934986902367243</span><span class="token number">6</span> <span class="token number">0.03020211515891169</span><span class="token number">7</span> <span class="token number">0.003585078590305768</span><span class="token number">8</span> <span class="token number">0.002226985278291793</span><span class="token number">9</span> <span class="token number">0.002226985278291793</span><span class="token number">10</span> <span class="token number">0.003585078590305768</span><span class="token number">11</span> <span class="token number">0.030202115158911746</span><span class="token number">12</span> <span class="token number">0.006046489176565639</span><span class="token number">13</span> <span class="token number">0.0007697888924074747</span><span class="token number">14</span> <span class="token number">0.024085993037174597</span><span class="token number">15</span> <span class="token number">0.0003334593264947838</span><span class="token number">16</span> <span class="token number">0.06696192680347068</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-决策树可视化"><a href="#5-决策树可视化" class="headerlink" title="5. 决策树可视化"></a>5. 决策树可视化</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/33.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/34.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/35.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/36.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> math <span class="token keyword">import</span> log2<span class="token keyword">def</span> <span class="token function">log_safe</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> log2<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>path <span class="token operator">=</span> <span class="token string">"../datas/xigua.csv"</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>x1     x2     x3  label  score<span class="token number">0</span>   青绿  <span class="token number">0.697</span>  <span class="token number">0.460</span>      <span class="token number">0</span>     <span class="token number">71</span><span class="token number">1</span>   乌黑  <span class="token number">0.774</span>  <span class="token number">0.376</span>      <span class="token number">0</span>     <span class="token number">92</span><span class="token number">2</span>   乌黑  <span class="token number">0.634</span>  <span class="token number">0.264</span>      <span class="token number">0</span>     <span class="token number">86</span><span class="token number">3</span>   青绿  <span class="token number">0.608</span>  <span class="token number">0.318</span>      <span class="token number">0</span>     <span class="token number">79</span><span class="token number">4</span>   浅白  <span class="token number">0.556</span>  <span class="token number">0.215</span>      <span class="token number">0</span>     <span class="token number">91</span><span class="token number">5</span>   青绿  <span class="token number">0.403</span>  <span class="token number">0.237</span>      <span class="token number">0</span>     <span class="token number">88</span><span class="token number">6</span>   乌黑  <span class="token number">0.481</span>  <span class="token number">0.149</span>      <span class="token number">0</span>     <span class="token number">85</span><span class="token number">7</span>   乌黑  <span class="token number">0.437</span>  <span class="token number">0.211</span>      <span class="token number">0</span>     <span class="token number">94</span><span class="token number">8</span>   乌黑  <span class="token number">0.666</span>  <span class="token number">0.091</span>      <span class="token number">1</span>     <span class="token number">31</span><span class="token number">9</span>   青绿  <span class="token number">0.243</span>  <span class="token number">0.267</span>      <span class="token number">1</span>     <span class="token number">22</span><span class="token number">10</span>  浅白  <span class="token number">0.245</span>  <span class="token number">0.057</span>      <span class="token number">1</span>     <span class="token number">16</span><span class="token number">11</span>  浅白  <span class="token number">0.343</span>  <span class="token number">0.099</span>      <span class="token number">1</span>     <span class="token number">29</span><span class="token number">12</span>  青绿  <span class="token number">0.639</span>  <span class="token number">0.161</span>      <span class="token number">1</span>     <span class="token number">11</span><span class="token number">13</span>  浅白  <span class="token number">0.657</span>  <span class="token number">0.198</span>      <span class="token number">1</span>     <span class="token number">18</span><span class="token number">14</span>  乌黑  <span class="token number">0.360</span>  <span class="token number">0.370</span>      <span class="token number">1</span>     <span class="token number">15</span><span class="token number">15</span>  浅白  <span class="token number">0.593</span>  <span class="token number">0.042</span>      <span class="token number">1</span>     <span class="token number">24</span><span class="token number">16</span>  青绿  <span class="token number">0.719</span>  <span class="token number">0.103</span>      <span class="token number">1</span>     <span class="token number">18</span><span class="token comment">##计算根结点不纯度（方差）</span>impurity <span class="token operator">=</span> np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">"score"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"impurity"</span><span class="token punctuation">,</span> impurity<span class="token punctuation">)</span>  <span class="token comment"># impurity 1106.8512110726642</span><span class="token comment">##按照x2排序</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">"x2"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>x1     x2     x3  label  score<span class="token number">9</span>   青绿  <span class="token number">0.243</span>  <span class="token number">0.267</span>      <span class="token number">1</span>     <span class="token number">22</span><span class="token number">10</span>  浅白  <span class="token number">0.245</span>  <span class="token number">0.057</span>      <span class="token number">1</span>     <span class="token number">16</span><span class="token number">11</span>  浅白  <span class="token number">0.343</span>  <span class="token number">0.099</span>      <span class="token number">1</span>     <span class="token number">29</span><span class="token number">14</span>  乌黑  <span class="token number">0.360</span>  <span class="token number">0.370</span>      <span class="token number">1</span>     <span class="token number">15</span><span class="token number">5</span>   青绿  <span class="token number">0.403</span>  <span class="token number">0.237</span>      <span class="token number">0</span>     <span class="token number">88</span><span class="token number">7</span>   乌黑  <span class="token number">0.437</span>  <span class="token number">0.211</span>      <span class="token number">0</span>     <span class="token number">94</span><span class="token number">6</span>   乌黑  <span class="token number">0.481</span>  <span class="token number">0.149</span>      <span class="token number">0</span>     <span class="token number">85</span><span class="token number">4</span>   浅白  <span class="token number">0.556</span>  <span class="token number">0.215</span>      <span class="token number">0</span>     <span class="token number">91</span><span class="token number">15</span>  浅白  <span class="token number">0.593</span>  <span class="token number">0.042</span>      <span class="token number">1</span>     <span class="token number">24</span><span class="token number">3</span>   青绿  <span class="token number">0.608</span>  <span class="token number">0.318</span>      <span class="token number">0</span>     <span class="token number">79</span><span class="token number">2</span>   乌黑  <span class="token number">0.634</span>  <span class="token number">0.264</span>      <span class="token number">0</span>     <span class="token number">86</span><span class="token number">12</span>  青绿  <span class="token number">0.639</span>  <span class="token number">0.161</span>      <span class="token number">1</span>     <span class="token number">11</span><span class="token number">13</span>  浅白  <span class="token number">0.657</span>  <span class="token number">0.198</span>      <span class="token number">1</span>     <span class="token number">18</span><span class="token number">8</span>   乌黑  <span class="token number">0.666</span>  <span class="token number">0.091</span>      <span class="token number">1</span>     <span class="token number">31</span><span class="token number">0</span>   青绿  <span class="token number">0.697</span>  <span class="token number">0.460</span>      <span class="token number">0</span>     <span class="token number">71</span><span class="token number">16</span>  青绿  <span class="token number">0.719</span>  <span class="token number">0.103</span>      <span class="token number">1</span>     <span class="token number">18</span><span class="token number">1</span>   乌黑  <span class="token number">0.774</span>  <span class="token number">0.376</span>      <span class="token number">0</span>     <span class="token number">92</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 遍历所有划分点</span>    df1 <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 获取左子树的样本</span>    impurity1 <span class="token operator">=</span> np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>df1<span class="token punctuation">[</span><span class="token string">"score"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 计算左子树的不纯度（方差）</span>    df2 <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 获取右子树的样本</span>    impurity2 <span class="token operator">=</span> np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>df2<span class="token punctuation">[</span><span class="token string">"score"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 计算右子树的不纯度（方差）</span>    <span class="token comment">#     计算方差增益</span>    a <span class="token operator">=</span> impurity <span class="token operator">-</span> <span class="token punctuation">(</span>df1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> impurity1 <span class="token operator">+</span> df2<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> impurity2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">,</span> impurity1<span class="token punctuation">,</span> impurity2<span class="token punctuation">)</span><span class="token number">1</span> <span class="token number">53.20415224913472</span> <span class="token number">0.0</span> <span class="token number">1119.5</span><span class="token number">2</span> <span class="token number">138.04336793540972</span> <span class="token number">9.0</span> <span class="token number">1096.782222222222</span><span class="token number">3</span> <span class="token number">178.26997857966694</span> <span class="token number">28.222222222222218</span> <span class="token number">1121.5153061224491</span><span class="token number">4</span> <span class="token number">289.55256853872766</span> <span class="token number">31.25</span> <span class="token number">1059.1597633136093</span><span class="token number">5</span> <span class="token number">122.92964244521306</span> <span class="token number">754.0</span> <span class="token number">1079.7222222222224</span><span class="token number">6</span> <span class="token number">28.091852783893955</span> <span class="token number">1128.3333333333333</span> <span class="token number">1051.719008264463</span><span class="token number">7</span> <span class="token number">1.2184379634206834</span> <span class="token number">1172.9795918367345</span> <span class="token number">1058.49</span><span class="token number">8</span> <span class="token number">12.995001922337451</span> <span class="token number">1211.5</span> <span class="token number">989.2839506172838</span><span class="token number">9</span> <span class="token number">0.1616685890039662</span> <span class="token number">1171.8024691358025</span> <span class="token number">1033.4375</span><span class="token number">10</span> <span class="token number">13.937765694513018</span> <span class="token number">1122.4099999999999</span> <span class="token number">1050.7755102040817</span><span class="token number">11</span> <span class="token number">66.11769948621122</span> <span class="token number">1103.4214876033059</span> <span class="token number">925.8055555555557</span><span class="token number">12</span> <span class="token number">11.164936562860248</span> <span class="token number">1174.388888888889</span> <span class="token number">906.8</span><span class="token number">13</span> <span class="token number">1.0231567740217997</span> <span class="token number">1172.698224852071</span> <span class="token number">888.5</span><span class="token number">14</span> <span class="token number">17.96745757126382</span> <span class="token number">1114.454081632653</span> <span class="token number">969.5555555555557</span><span class="token number">15</span> <span class="token number">1.9492502883506404</span> <span class="token number">1069.6888888888889</span> <span class="token number">1369.0</span><span class="token number">16</span> <span class="token number">104.16003460207605</span> <span class="token number">1065.359375</span> <span class="token number">0.0</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeRegressor<span class="token comment">#回归决策树，最大深度只有1层</span>model <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token comment">#只针对x2数据和score进行拟合处理</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"x2"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">"score"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>DecisionTreeRegressor<span class="token punctuation">(</span>criterion<span class="token operator">=</span><span class="token string">'mse'</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> max_features<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                      max_leaf_nodes<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> min_impurity_decrease<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span>                      min_impurity_split<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> min_samples_leaf<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                      min_samples_split<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_weight_fraction_leaf<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span>                      presort<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> splitter<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> tree<span class="token keyword">import</span> pydotplus<span class="token comment"># 输出图像， filled对旁边区域进行填充， rounded 环绕  ， 节点中属性的显示special_characters</span>dot_data <span class="token operator">=</span> tree<span class="token punctuation">.</span>export_graphviz<span class="token punctuation">(</span>model<span class="token punctuation">,</span> out_file<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                                filled<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> rounded<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                special_characters<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#通过节点方式，生成图像</span>graph <span class="token operator">=</span> pydotplus<span class="token punctuation">.</span>graph_from_dot_data<span class="token punctuation">(</span>dot_data<span class="token punctuation">)</span>graph<span class="token punctuation">.</span>write_pdf<span class="token punctuation">(</span><span class="token string">'05_2.pdf'</span><span class="token punctuation">)</span>graph<span class="token punctuation">.</span>write_png<span class="token punctuation">(</span><span class="token string">'05_3.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-剪枝处理"><a href="#6-剪枝处理" class="headerlink" title="6. 剪枝处理"></a>6. 剪枝处理</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/37.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/38.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/39.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/40.png"></p><h3 id="7-决策树模型优缺点"><a href="#7-决策树模型优缺点" class="headerlink" title="7. 决策树模型优缺点"></a>7. 决策树模型优缺点</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/41.png"></p><h3 id="8-决策树API"><a href="#8-决策树API" class="headerlink" title="8. 决策树API"></a>8. 决策树API</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token punctuation">,</span> DecisionTreeRegressor<span class="token comment">#分类模型默认使用GINI系数，CART树</span><span class="token comment">#max_depth 最大深度  过拟合</span><span class="token comment">#min_samples_split  最小分支节点数量   过拟合</span><span class="token comment">#min_samples_leaf   叶节点最小样本数   过拟合</span><span class="token comment"># 进行预剪枝操作</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">help</span><span class="token punctuation">(</span>DecisionTreeClassifier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">help</span><span class="token punctuation">(</span>DecisionTreeRegressor<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-决策树分类实战-鸢尾花"><a href="#9-决策树分类实战-鸢尾花" class="headerlink" title="9. 决策树分类实战-鸢尾花"></a>9. 决策树分类实战-鸢尾花</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> tree<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token punctuation">,</span> LabelEncoder<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipeline<span class="token keyword">import</span> warnings<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> classification_reportwarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'../datas/iris.txt'</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'x1'</span><span class="token punctuation">,</span> <span class="token string">'x2'</span><span class="token punctuation">,</span> <span class="token string">'x3'</span><span class="token punctuation">,</span> <span class="token string">'x4'</span><span class="token punctuation">,</span> <span class="token string">'lable'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x1   x2   x3   x4        lable<span class="token number">0</span>  <span class="token number">5.1</span>  <span class="token number">3.5</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">1</span>  <span class="token number">4.9</span>  <span class="token number">3.0</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">2</span>  <span class="token number">4.7</span>  <span class="token number">3.2</span>  <span class="token number">1.3</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">3</span>  <span class="token number">4.6</span>  <span class="token number">3.1</span>  <span class="token number">1.5</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">4</span>  <span class="token number">5.0</span>  <span class="token number">3.6</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token comment"># 为了可以更好的进行可视化效果，我只取前两个特征进行操作</span>x <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>lable <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> lable<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># [0 0 0 0 0 0 0 0 0 0]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x1   x2<span class="token number">0</span>  <span class="token number">5.1</span>  <span class="token number">3.5</span><span class="token number">1</span>  <span class="token number">4.9</span>  <span class="token number">3.0</span><span class="token number">2</span>  <span class="token number">4.7</span>  <span class="token number">3.2</span><span class="token number">3</span>  <span class="token number">4.6</span>  <span class="token number">3.1</span><span class="token number">4</span>  <span class="token number">5.0</span>  <span class="token number">3.6</span><span class="token number">5</span>  <span class="token number">5.4</span>  <span class="token number">3.9</span><span class="token number">6</span>  <span class="token number">4.6</span>  <span class="token number">3.4</span><span class="token number">7</span>  <span class="token number">5.0</span>  <span class="token number">3.4</span><span class="token number">8</span>  <span class="token number">4.4</span>  <span class="token number">2.9</span><span class="token number">9</span>  <span class="token number">4.9</span>  <span class="token number">3.1</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token comment">#管道进行处理操作</span>model <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">'ss'</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">#决策时不同做特征缩放</span>        <span class="token comment">#决策树使用ID3算法进行处理，深度为3</span>        <span class="token punctuation">(</span><span class="token string">'DTC'</span><span class="token punctuation">,</span> DecisionTreeClassifier<span class="token punctuation">(</span>criterion<span class="token operator">=</span><span class="token string">'entropy'</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>model <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>y_test_hat <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y_test_hat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">]</span>N<span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span>  <span class="token comment"># 横纵各采样多少个值</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>x1_min<span class="token punctuation">,</span> x1_max <span class="token operator">=</span> x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 第0列的范围</span>x2_min<span class="token punctuation">,</span> x2_max <span class="token operator">=</span> x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 第1列的范围</span>t1 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>x1_min<span class="token punctuation">,</span> x1_max<span class="token punctuation">,</span> N<span class="token punctuation">)</span>t2 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>x2_min<span class="token punctuation">,</span> x2_max<span class="token punctuation">,</span> M<span class="token punctuation">)</span>x1<span class="token punctuation">,</span> x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span>  <span class="token comment"># 生成网格采样点</span>x_show <span class="token operator">=</span> np<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token punctuation">.</span>flat<span class="token punctuation">,</span> x2<span class="token punctuation">.</span>flat<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 测试点</span>cm_light <span class="token operator">=</span> mpl<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>ListedColormap<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'#A0FFA0'</span><span class="token punctuation">,</span> <span class="token string">'#FFA0A0'</span><span class="token punctuation">,</span> <span class="token string">'#A0A0FF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cm_dark <span class="token operator">=</span> mpl<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>ListedColormap<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y_show_hat <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_show<span class="token punctuation">)</span>  <span class="token comment"># 预测值</span>y_show_hat <span class="token operator">=</span> y_show_hat<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x1<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># 使之与输入的形状相同</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>facecolor<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>pcolormesh<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y_show_hat<span class="token punctuation">,</span> cmap<span class="token operator">=</span>cm_light<span class="token punctuation">)</span>  <span class="token comment"># 预测值的显示</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x_test<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x_test<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y_test<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> edgecolors<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>cm_dark<span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">)</span>  <span class="token comment"># 测试数据</span><span class="token comment">#edgecolors 边框颜色</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>y<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> edgecolors<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>cm_dark<span class="token punctuation">)</span>  <span class="token comment"># 全部数据</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'x1'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'x2'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span>x1_min<span class="token punctuation">,</span> x1_max<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span>x2_min<span class="token punctuation">,</span> x2_max<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">u'鸢尾花数据的决策树分类'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/42.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 0.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-决策树回归实战-广告"><a href="#10-决策树回归实战-广告" class="headerlink" title="10. 决策树回归实战-广告"></a>10. 决策树回归实战-广告</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> Ridge<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token punctuation">,</span> r2_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span> GridSearchCVdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'../datas/Advertising.csv'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> TV  Radio  Newspaper  Sales<span class="token number">1</span>  <span class="token number">230.1</span>   <span class="token number">37.8</span>       <span class="token number">69.2</span>   <span class="token number">22.1</span><span class="token number">2</span>   <span class="token number">44.5</span>   <span class="token number">39.3</span>       <span class="token number">45.1</span>   <span class="token number">10.4</span><span class="token number">3</span>   <span class="token number">17.2</span>   <span class="token number">45.9</span>       <span class="token number">69.3</span>    <span class="token number">9.3</span><span class="token number">4</span>  <span class="token number">151.5</span>   <span class="token number">41.3</span>       <span class="token number">58.5</span>   <span class="token number">18.5</span><span class="token number">5</span>  <span class="token number">180.8</span>   <span class="token number">10.8</span>       <span class="token number">58.4</span>   <span class="token number">12.9</span><span class="token comment">#划分x，y</span>x <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#留出法，分训练集和测试集</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token comment">#创建模型</span>model <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#网格搜索</span>param_grid<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'max_depth'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">}</span>tree <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>model<span class="token punctuation">,</span> param_grid<span class="token operator">=</span>param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>tree<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span><span class="token comment"># {'max_depth': 9}</span>tree_score <span class="token operator">=</span> tree<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token comment">#R^2</span><span class="token keyword">print</span><span class="token punctuation">(</span>tree_score<span class="token punctuation">)</span><span class="token comment"># 0.964654978103</span>tree_predict <span class="token operator">=</span> tree<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token comment"># 使用Ridge和决策树进行性能对比</span>model <span class="token operator">=</span> Ridge<span class="token punctuation">(</span><span class="token punctuation">)</span>param_grid <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'alpha'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.05</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">]</span><span class="token punctuation">}</span>ridge <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>model<span class="token punctuation">,</span> param_grid<span class="token operator">=</span>param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>ridge<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ridge<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span><span class="token comment"># {'alpha': 0.01}</span>ridge_score <span class="token operator">=</span> ridge<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ridge_score<span class="token punctuation">)</span><span class="token comment"># 0.865484026113</span>ridge_predict <span class="token operator">=</span> ridge<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>m<span class="token punctuation">,</span> n <span class="token operator">=</span> y_test<span class="token punctuation">.</span>shape<span class="token comment">#获取行和列</span><span class="token comment"># print(m)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'真实分布'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>tree_predict<span class="token punctuation">,</span> <span class="token string">'g-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">u'决策树回归，$R^2$=%.4f'</span> <span class="token operator">%</span> tree_score<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>ridge_predict<span class="token punctuation">,</span> <span class="token string">'b-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">u'岭回归, $R^2$=%.4f'</span><span class="token operator">%</span> ridge_score<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/13-jue-ce-shu/43.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 决策树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-K近邻算法</title>
      <link href="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/"/>
      <url>/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="1-距离度量"><a href="#1-距离度量" class="headerlink" title="1. 距离度量"></a>1. 距离度量</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/1.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/2.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/3.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/4.png"></p><h3 id="2-KNN算法"><a href="#2-KNN算法" class="headerlink" title="2. KNN算法"></a>2. KNN算法</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/5.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/6.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/7.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/8.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/9.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/10.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/11.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/12.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/13.png"></p><h3 id="3-底层代码实现"><a href="#3-底层代码实现" class="headerlink" title="3. 底层代码实现"></a>3. 底层代码实现</h3><h4 id="3-1-KNN底层投票分类"><a href="#3-1-KNN底层投票分类" class="headerlink" title="3.1 KNN底层投票分类"></a>3.1 KNN底层投票分类</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/14.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#设置标签对应的数据，0为爱情片，1为动作片</span>movie<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'爱情片'</span><span class="token punctuation">,</span> <span class="token string">'动作片'</span><span class="token punctuation">]</span><span class="token comment">#输入数据集，x1 打斗镜头,x2 接吻镜头, y 标签</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>                    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>                <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#给如一个新的样本，去预测分类的结果</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token comment">#用最近k个点做预测</span>k <span class="token operator">=</span> <span class="token number">5</span><span class="token comment">#记录所有样本点到预测点距离</span>dis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 算法步骤：</span><span class="token comment"># 1.计算预测点到所有样本点之间距离</span><span class="token comment"># x是预测样本，  i是data中的每一条数据</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>    d <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#欧式距离</span>    <span class="token comment">#添加距离和标签(相对预测样本的数据)</span>    dis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>d<span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token comment">#打印输出预测点到所有样本点距离及标签</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">20.518284528683193</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">18.867962264113206</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">19.235384061671343</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">115.27792503337315</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">117.41379816699569</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">118.92854997854805</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 2.将预测点距离进行升序排序</span>dis<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token comment"># 3.按照投票策略进行类别判断</span><span class="token comment">#创建一个字典，用于统计类别的数量，用于最后投票策略处理</span>count <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment"># 遍历距离测试点最近的k个样本点</span><span class="token keyword">for</span> i <span class="token keyword">in</span> dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> k<span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment"># 如果当前没有这种类别，将其设置为1</span>    <span class="token keyword">if</span> count<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">None</span><span class="token punctuation">:</span>        count<span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment"># 如果包含当前类别，就在当前类别上+1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        count<span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment"># 输出标签中值最大的标签号</span>max_key <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> key<span class="token operator">=</span>count<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>movie<span class="token punctuation">[</span>max_key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>爱情片<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-KNN底层带权投票分类"><a href="#3-2-KNN底层带权投票分类" class="headerlink" title="3.2 KNN底层带权投票分类"></a>3.2 KNN底层带权投票分类</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/15.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 注意： KNN算法在使用之前进行特征缩放，否则会权重值有很大偏差</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npmovie<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'爱情片'</span><span class="token punctuation">,</span> <span class="token string">'动作片'</span><span class="token punctuation">]</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 测试样本</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span>k <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">#选择多少个样本</span>dis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#获取每个样本和预测样本点的距离</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>    d <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>    dis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>d<span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">20.518284528683193</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">18.867962264113206</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">19.235384061671343</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">115.27792503337315</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">117.41379816699569</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">118.92854997854805</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>dis<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">18.867962264113206</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">19.235384061671343</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">20.518284528683193</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">115.27792503337315</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">117.41379816699569</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">118.92854997854805</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 使用带权投票方式进行分类</span><span class="token comment"># 带权方式： 距离的倒数</span>count<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> dis<span class="token punctuation">:</span>    <span class="token keyword">if</span> count<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        count<span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#使用距离的倒数作为权重进行处理</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        count<span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token operator">/</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>max_key <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> key<span class="token operator">=</span>count<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>movie<span class="token punctuation">[</span>max_key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">0.1537244363741796</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">0.025599984202793934</span><span class="token punctuation">}</span>爱情片<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-KNN回归"><a href="#3-3-KNN回归" class="headerlink" title="3.3 KNN回归"></a>3.3 KNN回归</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/16.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span>k <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">#非常重要的，现在的值不太正确</span>dis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#距离列表</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>    d <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>    dis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>d<span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">20.518284528683193</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">18.867962264113206</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">19.235384061671343</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">115.27792503337315</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">117.41379816699569</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">118.92854997854805</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span>dis<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#按照距离远近，升序排序</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">18.867962264113206</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">19.235384061671343</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">20.518284528683193</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">115.27792503337315</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">117.41379816699569</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">118.92854997854805</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 回归：将前k个样本的标签值相加/k，就可以得到一个均值，这个均值就是预测点的数值</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#求和的值</span><span class="token comment"># 使用前k项样本点计算数据距离</span><span class="token keyword">for</span> i <span class="token keyword">in</span> dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> k<span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">+=</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token operator">/</span>k<span class="token punctuation">)</span>  <span class="token comment"># 62.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-KNN带权回归"><a href="#3-4-KNN带权回归" class="headerlink" title="3.4 KNN带权回归"></a>3.4 KNN带权回归</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/17.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span>K <span class="token operator">=</span> <span class="token number">5</span>dis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>    d <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>    dis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>d<span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dis<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">18.867962264113206</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">19.235384061671343</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">20.518284528683193</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">115.27792503337315</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">117.41379816699569</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">118.92854997854805</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''list1 = []for i in dis[0: k]:    list1.append([1/i[0], i[1]])'''</span>dis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">/</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> dis<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>K<span class="token punctuation">]</span><span class="token comment">#计算前k项的数值</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.052999894000318</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.05198752449100364</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.04873701788285793</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.008674687714152543</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.008516886563687487</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#权重占比</span>a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> dis<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 权重加和的计算</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------'</span><span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> dis<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 距离 * 权重</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">86.89041337014997</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-优化算法"><a href="#4-优化算法" class="headerlink" title="4. 优化算法"></a>4. 优化算法</h3><h4 id="4-1-算法总结"><a href="#4-1-算法总结" class="headerlink" title="4.1 算法总结"></a>4.1 算法总结</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/18.png"></p><h4 id="4-2-实现方法"><a href="#4-2-实现方法" class="headerlink" title="4.2 实现方法"></a>4.2 实现方法</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/19.png"></p><h4 id="4-3-构造KD树"><a href="#4-3-构造KD树" class="headerlink" title="4.3 构造KD树"></a>4.3 构造KD树</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/20.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/21.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/22.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/23.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/24.png"></p><h4 id="4-4-搜索KD树"><a href="#4-4-搜索KD树" class="headerlink" title="4.4 搜索KD树"></a>4.4 搜索KD树</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/25.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/26.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/27.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/28.png"></p><h4 id="4-5-KNN模型优缺点"><a href="#4-5-KNN模型优缺点" class="headerlink" title="4.5 KNN模型优缺点"></a>4.5 KNN模型优缺点</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/29.png"></p><h3 id="5-代码实战"><a href="#5-代码实战" class="headerlink" title="5. 代码实战"></a>5. 代码实战</h3><h4 id="5-1-鸢尾花数据分类"><a href="#5-1-鸢尾花数据分类" class="headerlink" title="5.1 鸢尾花数据分类"></a>5.1 鸢尾花数据分类</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/30.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/31.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 鸢尾花数据分类</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token punctuation">,</span> LabelEncoder<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span> GridSearchCV<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier <span class="token comment">#调用KNN分类</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> classification_report<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span>path <span class="token operator">=</span> <span class="token string">r'../datas/iris.txt'</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'sepal length'</span><span class="token punctuation">,</span> <span class="token string">'sepal width'</span><span class="token punctuation">,</span> <span class="token string">'petal length'</span><span class="token punctuation">,</span> <span class="token string">'petal width'</span><span class="token punctuation">,</span> <span class="token string">'cla'</span><span class="token punctuation">]</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> names<span class="token operator">=</span>names<span class="token punctuation">)</span> <span class="token comment"># 无标题，起列名</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> sepal length  sepal width  petal length  petal width          cla<span class="token number">0</span>           <span class="token number">5.1</span>          <span class="token number">3.5</span>           <span class="token number">1.4</span>          <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">1</span>           <span class="token number">4.9</span>          <span class="token number">3.0</span>           <span class="token number">1.4</span>          <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">2</span>           <span class="token number">4.7</span>          <span class="token number">3.2</span>           <span class="token number">1.3</span>          <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">3</span>           <span class="token number">4.6</span>          <span class="token number">3.1</span>           <span class="token number">1.5</span>          <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">4</span>           <span class="token number">5.0</span>          <span class="token number">3.6</span>           <span class="token number">1.4</span>          <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token comment">#y标签化处理</span>x <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>label <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> label<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token comment"># KNN算法一定要去做特征缩放</span>std <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#数据标准化处理</span>x <span class="token operator">=</span> std<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">#训练集和测试集分组</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token comment"># KNN算法最难处理的地方就是K值的选择，所以用网格搜索交叉验证进行处理</span><span class="token comment"># 在进行处理的时候，一定是在训练集中处理数据，测试集中不用用交叉验证</span><span class="token comment"># 方便我们最后验证测试的效果</span>param_grid <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'n_neighbors'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">}</span>model <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>knn <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>model<span class="token punctuation">,</span> param_grid<span class="token operator">=</span>param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>knn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token comment">#训练集的检测效果</span><span class="token keyword">print</span><span class="token punctuation">(</span>knn<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'n_neighbors'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span>y_ <span class="token operator">=</span> knn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_<span class="token punctuation">)</span><span class="token punctuation">)</span>precision    recall  f1<span class="token operator">-</span>score   support           <span class="token number">0</span>       <span class="token number">1.00</span>      <span class="token number">1.00</span>      <span class="token number">1.00</span>        <span class="token number">14</span>           <span class="token number">1</span>       <span class="token number">0.94</span>      <span class="token number">1.00</span>      <span class="token number">0.97</span>        <span class="token number">16</span>           <span class="token number">2</span>       <span class="token number">1.00</span>      <span class="token number">0.93</span>      <span class="token number">0.97</span>        <span class="token number">15</span>    accuracy                           <span class="token number">0.98</span>        <span class="token number">45</span>   macro avg       <span class="token number">0.98</span>      <span class="token number">0.98</span>      <span class="token number">0.98</span>        <span class="token number">45</span>weighted avg       <span class="token number">0.98</span>      <span class="token number">0.98</span>      <span class="token number">0.98</span>        <span class="token number">45</span><span class="token keyword">print</span><span class="token punctuation">(</span>knn<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">## 预测样本点预测3个类别的概率</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">1.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">1.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.8</span> <span class="token number">0.2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.6</span> <span class="token number">0.4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">1.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">1.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.8</span> <span class="token number">0.2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.8</span> <span class="token number">0.2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">1.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.2</span> <span class="token number">0.8</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">1.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.6</span> <span class="token number">0.4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.2</span> <span class="token number">0.8</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">1.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.8</span> <span class="token number">0.2</span> <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">0.8</span> <span class="token number">0.2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">1.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">1.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">1.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>  <span class="token number">1.</span>  <span class="token number">0.</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-KNN调库回归"><a href="#5-2-KNN调库回归" class="headerlink" title="5.2 KNN调库回归"></a>5.2 KNN调库回归</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token punctuation">,</span> r2_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span> GridSearchCV<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltpath <span class="token operator">=</span> <span class="token string">r'../datas/Advertising.csv'</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>TV  Radio  Newspaper  Sales<span class="token number">1</span>  <span class="token number">230.1</span>   <span class="token number">37.8</span>       <span class="token number">69.2</span>   <span class="token number">22.1</span><span class="token number">2</span>   <span class="token number">44.5</span>   <span class="token number">39.3</span>       <span class="token number">45.1</span>   <span class="token number">10.4</span><span class="token number">3</span>   <span class="token number">17.2</span>   <span class="token number">45.9</span>       <span class="token number">69.3</span>    <span class="token number">9.3</span><span class="token number">4</span>  <span class="token number">151.5</span>   <span class="token number">41.3</span>       <span class="token number">58.5</span>   <span class="token number">18.5</span><span class="token number">5</span>  <span class="token number">180.8</span>   <span class="token number">10.8</span>       <span class="token number">58.4</span>   <span class="token number">12.9</span>x <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment"># 进行标准化的处理</span>std <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>x <span class="token operator">=</span> std<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">#对数据集进行切分操作</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token comment">#设置不同的k值，进行比较</span>param_grid <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'n_neighbors'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">}</span>model <span class="token operator">=</span> KNeighborsRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span>knn <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>model<span class="token punctuation">,</span> param_grid<span class="token operator">=</span>param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>knn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>knn<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'n_neighbors'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>y_ <span class="token operator">=</span> knn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r2_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1.68667708333</span><span class="token number">0.934272070381</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'实际值'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y_<span class="token punctuation">,</span> <span class="token string">'g-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'预测值'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'KNN回归效果演示'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/12-k-jin-lin-suan-fa/32.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> K近邻算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-逻辑回归</title>
      <link href="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/"/>
      <url>/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/</url>
      
        <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><h4 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/1.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/2.png"></p><h4 id="1-2-sigmoid函数"><a href="#1-2-sigmoid函数" class="headerlink" title="1.2 sigmoid函数"></a>1.2 sigmoid函数</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/3.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/4.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/5.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">u'simHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 默认取50个数值</span>y <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># sigmoid函数</span>y_ <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token comment"># sigmoid的导数</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'sigmoid函数'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_<span class="token punctuation">,</span> <span class="token string">'r--'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'sigmoid导数'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/6.png"></p><h3 id="2-损失函数"><a href="#2-损失函数" class="headerlink" title="2. 损失函数"></a>2. 损失函数</h3><h4 id="2-1-极大似然估计"><a href="#2-1-极大似然估计" class="headerlink" title="2.1 极大似然估计"></a>2.1 极大似然估计</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/7.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/8.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/9.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/10.png"></p><h4 id="2-2-信息论"><a href="#2-2-信息论" class="headerlink" title="2.2 信息论"></a>2.2 信息论</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/11.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/12.png"></p><h3 id="3-逻辑回归案例"><a href="#3-逻辑回归案例" class="headerlink" title="3. 逻辑回归案例"></a>3. 逻辑回归案例</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token comment">#防止anaconda报警告性错误</span><span class="token comment"># data数据   4,3    x1, x2, y</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#数据集切分，  前两列特征，最后一列作为标签</span>x <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span>  <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">1</span>  <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0</span>  <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>y_ <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y_<span class="token punctuation">)</span>  <span class="token comment"># [0 0 1 1]</span><span class="token comment"># 逻辑回归将数值缩放到0-1范围之内，代表事件发生的可能性</span><span class="token comment"># 打印输出的可能性， 第一列为0样本，第二列为1样本</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.73559819</span> <span class="token number">0.26440181</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.83458047</span> <span class="token number">0.16541953</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.43165661</span> <span class="token number">0.56834339</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.27325413</span> <span class="token number">0.72674587</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/13.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">w <span class="token operator">=</span> model<span class="token punctuation">.</span>coef_b <span class="token operator">=</span> model<span class="token punctuation">.</span>intercept_<span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.70307921</span> <span class="token operator">-</span><span class="token number">0.59523025</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0.27509539</span><span class="token punctuation">]</span>min_x<span class="token operator">=</span><span class="token builtin">min</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">#x1的最小值</span>max_x<span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">#x1的最大值</span>y_min_x<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token operator">-</span>w<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>min_x<span class="token punctuation">)</span><span class="token operator">/</span>w<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>     <span class="token comment">#x1的最小值对应的x2值</span>y_max_x<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token operator">-</span>w<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>max_x<span class="token punctuation">)</span><span class="token operator">/</span>w<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>     <span class="token comment">#x1的最大值对应的x2值</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span>min_x<span class="token punctuation">,</span> max_x<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>y_min_x<span class="token punctuation">,</span> y_max_x<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'-g'</span><span class="token punctuation">)</span>   <span class="token comment">#画分界线</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> y_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'^'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/14.png"></p><p>结论，样本点距离线性模型的区分线越近，就证明概率越不确定</p><h3 id="4-评估指标"><a href="#4-评估指标" class="headerlink" title="4. 评估指标"></a>4. 评估指标</h3><h4 id="4-1-混搅矩阵"><a href="#4-1-混搅矩阵" class="headerlink" title="4.1 混搅矩阵"></a>4.1 混搅矩阵</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/15.png"></p><h4 id="4-2-常见指标"><a href="#4-2-常见指标" class="headerlink" title="4.2 常见指标"></a>4.2 常见指标</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/16.png"></p><h4 id="4-3-PR曲线"><a href="#4-3-PR曲线" class="headerlink" title="4.3 PR曲线"></a>4.3 PR曲线</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/17.png"></p><h4 id="4-4-ROC-AUC"><a href="#4-4-ROC-AUC" class="headerlink" title="4.4 ROC AUC"></a>4.4 ROC AUC</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/18.png"></p><h4 id="4-5-评估总调用"><a href="#4-5-评估总调用" class="headerlink" title="4.5 评估总调用"></a>4.5 评估总调用</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/19.png"></p><h3 id="5-多分类"><a href="#5-多分类" class="headerlink" title="5. 多分类"></a>5. 多分类</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/20.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/21.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/22.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/23.png"></p><h3 id="6-数据预处理"><a href="#6-数据预处理" class="headerlink" title="6. 数据预处理"></a>6. 数据预处理</h3><h4 id="6-1-类别不平衡"><a href="#6-1-类别不平衡" class="headerlink" title="6.1 类别不平衡"></a>6.1 类别不平衡</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/24.png"></p><h4 id="6-2-标签化-独热编码"><a href="#6-2-标签化-独热编码" class="headerlink" title="6.2 标签化 独热编码"></a>6.2 标签化 独热编码</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/25.png"></p><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/26.png"></p><h4 id="6-3-逻辑回归模型优缺点"><a href="#6-3-逻辑回归模型优缺点" class="headerlink" title="6.3 逻辑回归模型优缺点"></a>6.3 逻辑回归模型优缺点</h4><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/27.png"></p><h4 id="6-4-标签化-独热编码-代码"><a href="#6-4-标签化-独热编码-代码" class="headerlink" title="6.4 标签化-独热编码-代码"></a>6.4 标签化-独热编码-代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder<span class="token punctuation">,</span> OneHotEncoder<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'../datas/iris.txt'</span><span class="token punctuation">)</span>x <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token number">5.1</span>  <span class="token number">3.5</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">0</span>  <span class="token number">4.9</span>  <span class="token number">3.0</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">1</span>  <span class="token number">4.7</span>  <span class="token number">3.2</span>  <span class="token number">1.3</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">2</span>  <span class="token number">4.6</span>  <span class="token number">3.1</span>  <span class="token number">1.5</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">3</span>  <span class="token number">5.0</span>  <span class="token number">3.6</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span>  Iris<span class="token operator">-</span>setosa<span class="token number">4</span>  <span class="token number">5.4</span>  <span class="token number">3.9</span>  <span class="token number">1.7</span>  <span class="token number">0.4</span>  Iris<span class="token operator">-</span>setosa        Iris<span class="token operator">-</span>setosa<span class="token number">0</span>       Iris<span class="token operator">-</span>setosa<span class="token number">1</span>       Iris<span class="token operator">-</span>setosa<span class="token number">2</span>       Iris<span class="token operator">-</span>setosa<span class="token number">3</span>       Iris<span class="token operator">-</span>setosa<span class="token number">4</span>       Iris<span class="token operator">-</span>setosa<span class="token punctuation">.</span><span class="token punctuation">.</span>              <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">144</span>  Iris<span class="token operator">-</span>virginica<span class="token number">145</span>  Iris<span class="token operator">-</span>virginica<span class="token number">146</span>  Iris<span class="token operator">-</span>virginica<span class="token number">147</span>  Iris<span class="token operator">-</span>virginica<span class="token number">148</span>  Iris<span class="token operator">-</span>virginica<span class="token punctuation">[</span><span class="token number">149</span> rows x <span class="token number">1</span> columns<span class="token punctuation">]</span>     <span class="token number">5.1</span>  <span class="token number">3.5</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span><span class="token number">0</span>    <span class="token number">4.9</span>  <span class="token number">3.0</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span><span class="token number">1</span>    <span class="token number">4.7</span>  <span class="token number">3.2</span>  <span class="token number">1.3</span>  <span class="token number">0.2</span><span class="token number">2</span>    <span class="token number">4.6</span>  <span class="token number">3.1</span>  <span class="token number">1.5</span>  <span class="token number">0.2</span><span class="token number">3</span>    <span class="token number">5.0</span>  <span class="token number">3.6</span>  <span class="token number">1.4</span>  <span class="token number">0.2</span><span class="token number">4</span>    <span class="token number">5.4</span>  <span class="token number">3.9</span>  <span class="token number">1.7</span>  <span class="token number">0.4</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">144</span>  <span class="token number">6.7</span>  <span class="token number">3.0</span>  <span class="token number">5.2</span>  <span class="token number">2.3</span><span class="token number">145</span>  <span class="token number">6.3</span>  <span class="token number">2.5</span>  <span class="token number">5.0</span>  <span class="token number">1.9</span><span class="token number">146</span>  <span class="token number">6.5</span>  <span class="token number">3.0</span>  <span class="token number">5.2</span>  <span class="token number">2.0</span><span class="token number">147</span>  <span class="token number">6.2</span>  <span class="token number">3.4</span>  <span class="token number">5.4</span>  <span class="token number">2.3</span><span class="token number">148</span>  <span class="token number">5.9</span>  <span class="token number">3.0</span>  <span class="token number">5.1</span>  <span class="token number">1.8</span><span class="token punctuation">[</span><span class="token number">149</span> rows x <span class="token number">4</span> columns<span class="token punctuation">]</span>label <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将字符串信息变为数字分类</span>y_label <span class="token operator">=</span> label<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y_label<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">]</span>onehot <span class="token operator">=</span> OneHotEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 前提，你的标签必须是数字化格式</span>y_onehot <span class="token operator">=</span> onehot<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>y_label<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y_onehot<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#toarray才能转换onehotencoding</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span><span class="token punctuation">]</span> 。。。 <span class="token punctuation">[</span> <span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-乳腺癌分类案例"><a href="#7-乳腺癌分类案例" class="headerlink" title="7. 乳腺癌分类案例"></a>7. 乳腺癌分类案例</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/28.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> confusion_matrix<span class="token punctuation">,</span> classification_report<span class="token punctuation">,</span> roc_auc_score<span class="token punctuation">,</span> roc_curve  <span class="token comment"># 混搅矩阵 分类报告 rocauc得分 roc曲线</span><span class="token comment"># 数据加载处理</span><span class="token comment">#数据的路径</span>path <span class="token operator">=</span> <span class="token string">"../datas/breast-cancer-wisconsin.data"</span><span class="token comment">#给数据中每一列数据进行起名字</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'Clump Thickness'</span><span class="token punctuation">,</span><span class="token string">'Uniformity of Cell Size'</span><span class="token punctuation">,</span><span class="token string">'Uniformity of Cell Shape'</span><span class="token punctuation">,</span>         <span class="token string">'Marginal Adhesion'</span><span class="token punctuation">,</span><span class="token string">'Single Epithelial Cell Size'</span><span class="token punctuation">,</span><span class="token string">'Bare Nuclei'</span><span class="token punctuation">,</span>        <span class="token string">'Bland Chromatin'</span><span class="token punctuation">,</span><span class="token string">'Normal Nucleoli'</span><span class="token punctuation">,</span><span class="token string">'Mitoses'</span><span class="token punctuation">,</span><span class="token string">'Class'</span><span class="token punctuation">]</span><span class="token comment"># 没有字段名，所以header设为None， 并且给每一列数据起名字</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">,</span>header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>names<span class="token operator">=</span>names<span class="token punctuation">)</span><span class="token comment"># 将标签结果由4,2，转化为1,0</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Class'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Class'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token comment"># 清除有缺失值数据</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">)</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how<span class="token operator">=</span><span class="token string">"any"</span><span class="token punctuation">)</span><span class="token comment"># 统计类别频数</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'Class'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">0.0</span>    <span class="token number">444</span><span class="token number">1.0</span>    <span class="token number">239</span>Name<span class="token punctuation">:</span> Class<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64        <span class="token comment"># 可以看到现在数据的标签数量差距较大，使用过采样处理，将数据类别调整平衡</span>df1 <span class="token operator">=</span> df<span class="token punctuation">[</span>df<span class="token punctuation">.</span>Class<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#DataFrame.sample   n 要抽取的行数  frac 抽取比例   replace是否又放回采样</span>df1 <span class="token operator">=</span> df1<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token operator">-</span><span class="token number">239</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">239</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df<span class="token punctuation">,</span>df1<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">## 提取X和Y</span>x <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>y <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#重新检测数量</span><span class="token number">1.0</span>    <span class="token number">444</span><span class="token number">0.0</span>    <span class="token number">444</span>Name<span class="token punctuation">:</span> Class<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64        scaleCoder <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>std <span class="token operator">=</span> scaleCoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>std<span class="token punctuation">)</span>x <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>std<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.33</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.09956299</span> <span class="token operator">-</span><span class="token number">0.02610148</span> <span class="token operator">-</span><span class="token number">0.88516146</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token number">0.38504402</span> <span class="token operator">-</span><span class="token number">0.76297292</span>  <span class="token operator">-</span><span class="token number">0.41491827</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.09441432</span> <span class="token operator">-</span><span class="token number">0.02610148</span>  <span class="token number">0.02039543</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token number">0.38504402</span> <span class="token operator">-</span><span class="token number">0.4646374</span>  <span class="token operator">-</span><span class="token number">0.41491827</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.07240907</span> <span class="token operator">-</span><span class="token number">0.69793101</span> <span class="token operator">-</span><span class="token number">0.88516146</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token number">0.38504402</span> <span class="token operator">-</span><span class="token number">0.76297292</span>  <span class="token operator">-</span><span class="token number">0.41491827</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.28039043</span> <span class="token operator">-</span><span class="token number">0.36201625</span>  <span class="token number">1.22780461</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token number">2.28619887</span>  <span class="token number">0.72870465</span>  <span class="token operator">-</span><span class="token number">0.41491827</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0.32171591</span>  <span class="token number">0.9816428</span>   <span class="token number">0.32224772</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token number">0.75977436</span>  <span class="token number">0.72870465</span>  <span class="token operator">-</span><span class="token number">0.41491827</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0.24650838</span>  <span class="token number">1.31755757</span>  <span class="token number">1.52965691</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token number">1.14138049</span>  <span class="token number">1.9220467</span>   <span class="token number">2.08133799</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token number">0</span>         <span class="token number">1</span>         <span class="token number">2</span>         <span class="token number">3</span>         <span class="token number">4</span>         <span class="token number">5</span>         <span class="token number">6</span>  \<span class="token number">0</span>   <span class="token operator">-</span><span class="token number">0.099563</span> <span class="token operator">-</span><span class="token number">0.026101</span> <span class="token operator">-</span><span class="token number">0.885161</span> <span class="token operator">-</span><span class="token number">0.925064</span> <span class="token operator">-</span><span class="token number">0.777275</span> <span class="token operator">-</span><span class="token number">0.699462</span> <span class="token operator">-</span><span class="token number">0.894666</span>   <span class="token number">1</span>   <span class="token operator">-</span><span class="token number">0.094414</span> <span class="token operator">-</span><span class="token number">0.026101</span>  <span class="token number">0.020395</span>  <span class="token number">0.006997</span>  <span class="token number">0.493264</span>  <span class="token number">1.353156</span>  <span class="token number">1.394853</span>   <span class="token number">2</span>   <span class="token operator">-</span><span class="token number">0.072409</span> <span class="token operator">-</span><span class="token number">0.697931</span> <span class="token operator">-</span><span class="token number">0.885161</span> <span class="token operator">-</span><span class="token number">0.925064</span> <span class="token operator">-</span><span class="token number">0.777275</span> <span class="token operator">-</span><span class="token number">0.699462</span> <span class="token operator">-</span><span class="token number">0.640275</span>   <span class="token number">3</span>   <span class="token operator">-</span><span class="token number">0.070907</span>  <span class="token number">0.309813</span>  <span class="token number">1.227805</span>  <span class="token number">1.249746</span> <span class="token operator">-</span><span class="token number">0.777275</span> <span class="token operator">-</span><span class="token number">0.288938</span> <span class="token operator">-</span><span class="token number">0.131493</span>   <span class="token number">4</span>   <span class="token operator">-</span><span class="token number">0.069591</span> <span class="token operator">-</span><span class="token number">0.362016</span> <span class="token operator">-</span><span class="token number">0.885161</span> <span class="token operator">-</span><span class="token number">0.925064</span> <span class="token operator">-</span><span class="token number">0.142006</span> <span class="token operator">-</span><span class="token number">0.699462</span> <span class="token operator">-</span><span class="token number">0.894666</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token number">883</span> <span class="token operator">-</span><span class="token number">1.290805</span>  <span class="token number">1.653472</span>  <span class="token number">1.227805</span>  <span class="token number">1.249746</span> <span class="token operator">-</span><span class="token number">0.459640</span> <span class="token operator">-</span><span class="token number">0.288938</span> <span class="token operator">-</span><span class="token number">0.131493</span>   <span class="token number">884</span>  <span class="token number">0.160822</span> <span class="token operator">-</span><span class="token number">0.697931</span>  <span class="token number">0.322248</span>  <span class="token number">0.939059</span>  <span class="token number">1.446168</span>  <span class="token number">1.763679</span>  <span class="token number">1.140462</span>   <span class="token number">885</span> <span class="token operator">-</span><span class="token number">0.280390</span> <span class="token operator">-</span><span class="token number">0.362016</span>  <span class="token number">1.227805</span>  <span class="token number">0.628372</span>  <span class="token number">0.175629</span> <span class="token operator">-</span><span class="token number">0.288938</span> <span class="token operator">-</span><span class="token number">0.131493</span>   <span class="token number">886</span>  <span class="token number">0.321716</span>  <span class="token number">0.981643</span>  <span class="token number">0.322248</span>  <span class="token number">0.628372</span> <span class="token operator">-</span><span class="token number">0.459640</span> <span class="token operator">-</span><span class="token number">0.288938</span>  <span class="token number">1.394853</span>   <span class="token number">887</span>  <span class="token number">0.246508</span>  <span class="token number">1.317558</span>  <span class="token number">1.529657</span>  <span class="token number">1.871120</span> <span class="token operator">-</span><span class="token number">0.142006</span>  <span class="token number">0.942632</span>  <span class="token number">1.394853</span>               <span class="token number">7</span>         <span class="token number">8</span>         <span class="token number">9</span>  <span class="token number">0</span>   <span class="token operator">-</span><span class="token number">0.385044</span> <span class="token operator">-</span><span class="token number">0.762973</span> <span class="token operator">-</span><span class="token number">0.414918</span>  <span class="token number">1</span>   <span class="token operator">-</span><span class="token number">0.385044</span> <span class="token operator">-</span><span class="token number">0.464637</span> <span class="token operator">-</span><span class="token number">0.414918</span>  <span class="token number">2</span>   <span class="token operator">-</span><span class="token number">0.385044</span> <span class="token operator">-</span><span class="token number">0.762973</span> <span class="token operator">-</span><span class="token number">0.414918</span>  <span class="token number">3</span>   <span class="token operator">-</span><span class="token number">0.385044</span>  <span class="token number">1.027040</span> <span class="token operator">-</span><span class="token number">0.414918</span>  <span class="token number">4</span>   <span class="token operator">-</span><span class="token number">0.385044</span> <span class="token operator">-</span><span class="token number">0.762973</span> <span class="token operator">-</span><span class="token number">0.414918</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token number">883</span>  <span class="token number">1.522987</span>  <span class="token number">1.027040</span>  <span class="token number">3.079840</span>  <span class="token number">884</span>  <span class="token number">1.141380</span>  <span class="token number">1.922047</span>  <span class="token number">2.580589</span>  <span class="token number">885</span>  <span class="token number">2.286199</span>  <span class="token number">0.728705</span> <span class="token operator">-</span><span class="token number">0.414918</span>  <span class="token number">886</span>  <span class="token number">0.759774</span>  <span class="token number">0.728705</span> <span class="token operator">-</span><span class="token number">0.414918</span>  <span class="token number">887</span>  <span class="token number">1.141380</span>  <span class="token number">1.922047</span>  <span class="token number">2.081338</span>  <span class="token punctuation">[</span><span class="token number">888</span> rows x <span class="token number">10</span> columns<span class="token punctuation">]</span>model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>solver<span class="token operator">=</span><span class="token string">"sag"</span><span class="token punctuation">,</span>C<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span>fit_intercept<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>max_iter<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span>multi_class<span class="token operator">=</span><span class="token string">'multinomial'</span><span class="token punctuation">)</span><span class="token comment">#solver =sag  随机梯度下降，  C正则化系数的倒数， fit_intercepet拟合截距   max_iter  最大迭代次数    culticlass，处理的属性数量</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>score <span class="token operator">=</span> model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>  <span class="token comment"># 0.9659863945578231</span>y_ <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token comment">#计算预测值</span><span class="token comment"># print(y_)</span><span class="token keyword">print</span><span class="token punctuation">(</span>confusion_matrix<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#混淆矩阵</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">142</span>   <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>  <span class="token number">8</span> <span class="token number">142</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#分类报告</span>precision    recall  f1<span class="token operator">-</span>score   support         <span class="token number">0.0</span>       <span class="token number">0.95</span>      <span class="token number">0.99</span>      <span class="token number">0.97</span>       <span class="token number">144</span>         <span class="token number">1.0</span>       <span class="token number">0.99</span>      <span class="token number">0.95</span>      <span class="token number">0.97</span>       <span class="token number">150</span>    accuracy                           <span class="token number">0.97</span>       <span class="token number">294</span>   macro avg       <span class="token number">0.97</span>      <span class="token number">0.97</span>      <span class="token number">0.97</span>       <span class="token number">294</span>weighted avg       <span class="token number">0.97</span>      <span class="token number">0.97</span>      <span class="token number">0.97</span>       <span class="token number">294</span>y_score <span class="token operator">=</span> model<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment"># 获取每一行中正样本的概率</span><span class="token comment"># print(model.predict_proba(x_test)[:,-1])</span><span class="token comment"># print(model.predict_proba(x_test))</span><span class="token keyword">print</span><span class="token punctuation">(</span>roc_auc_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_score<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#auc面积  # 0.9968055555555556</span>fpr<span class="token punctuation">,</span> tpr<span class="token punctuation">,</span> th <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_score<span class="token punctuation">)</span><span class="token comment"># fpr，tpr，th阈值</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>fpr<span class="token punctuation">,</span> tpr<span class="token punctuation">)</span><span class="token comment"># print(fpr)</span><span class="token comment"># print(tpr)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'fpr'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'tpr'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/29.png"></p><h3 id="8-鸢尾花多分类案例"><a href="#8-鸢尾花多分类案例" class="headerlink" title="8. 鸢尾花多分类案例"></a>8. 鸢尾花多分类案例</h3><p><img src="/2023/03/22/shu-ju-fen-xi-ji-chu/11-luo-ji-hui-gui/30.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder<span class="token punctuation">,</span> StandardScaler<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span> GridSearchCV<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token comment"># 读入数据集</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'../datas/iris.txt'</span><span class="token punctuation">,</span>header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>x <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>x <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">#数据标准化</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">0</span><span class="token number">5.1</span><span class="token number">3.5</span><span class="token number">1.4</span><span class="token number">0.2</span>Iris<span class="token operator">-</span>setosa<span class="token number">1</span><span class="token number">4.9</span><span class="token number">3.0</span><span class="token number">1.4</span><span class="token number">0.2</span>Iris<span class="token operator">-</span>setosa<span class="token number">2</span><span class="token number">4.7</span><span class="token number">3.2</span><span class="token number">1.3</span><span class="token number">0.2</span>Iris<span class="token operator">-</span>setosa<span class="token number">3</span><span class="token number">4.6</span><span class="token number">3.1</span><span class="token number">1.5</span><span class="token number">0.2</span>Iris<span class="token operator">-</span>setosa<span class="token number">4</span><span class="token number">5.0</span><span class="token number">3.6</span><span class="token number">1.4</span><span class="token number">0.2</span>Iris<span class="token operator">-</span>setosalable <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> lable<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token comment"># 留出法对数据进行分类操作</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>lr <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 多分类处理效果</span><span class="token comment">#网格搜索交叉验证，对数据进行处理操作</span>model <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>lr<span class="token punctuation">,</span> param_grid<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#模型得分，准确率</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span><span class="token comment">#最优参数</span><span class="token number">0.933333333333</span><span class="token punctuation">{</span><span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span>y_ <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#准确率</span><span class="token number">0.933333333333</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 逻辑回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-降维</title>
      <link href="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/"/>
      <url>/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/</url>
      
        <content type="html"><![CDATA[<h3 id="1-缺失值填充"><a href="#1-缺失值填充" class="headerlink" title="1. 缺失值填充"></a>1. 缺失值填充</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/1.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/2.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/3.png"></p><h3 id="2-二值化处理"><a href="#2-二值化处理" class="headerlink" title="2. 二值化处理"></a>2. 二值化处理</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/4.png"></p><h3 id="3-数据信息处理"><a href="#3-数据信息处理" class="headerlink" title="3. 数据信息处理"></a>3. 数据信息处理</h3><p>缺失值填充</p><p>缺失值是计算模型时最大的绊脚石，如果出现缺失值的情况，模型就不能正常进行数据拟合，会报错导致程序无法运行，所以我们需要对缺失值进行填充</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> Imputer<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token comment">#防止anaconda报警告性错误</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">2.</span>  <span class="token number">2.</span>  <span class="token number">4.</span>  <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>nan  <span class="token number">3.</span>  <span class="token number">4.</span>  <span class="token number">4.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">1.</span>  <span class="token number">1.</span>  <span class="token number">1.</span> nan<span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">2.</span>  <span class="token number">2.</span> nan  <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拟合的数据采用x的数据进行操作，这里是按照列操作<br>所有的预测值只根据非空数值计算，做均值处理就是求出所有非空数值的和，再除以非空数值的数量，得到均值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">imp1 <span class="token operator">=</span> Imputer<span class="token punctuation">(</span>missing_values<span class="token operator">=</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> strategy<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#处理缺失值nan填充策略 均值  回归类型，axis=0横向比较</span>imp1<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">#拟合</span><span class="token keyword">print</span><span class="token punctuation">(</span>imp1<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#转化  </span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2.</span>         <span class="token number">2.</span>         <span class="token number">4.</span>         <span class="token number">1.</span>        <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.66666667</span> <span class="token number">3.</span>         <span class="token number">4.</span>         <span class="token number">4.</span>        <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span>         <span class="token number">1.</span>         <span class="token number">1.</span>         <span class="token number">2.66666667</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2.</span>         <span class="token number">2.</span>         <span class="token number">3.</span>         <span class="token number">3.</span>        <span class="token punctuation">]</span><span class="token punctuation">]</span>x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">2.</span>  <span class="token number">6.</span> nan  <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>nan  <span class="token number">5.</span> nan  <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">1.</span>  <span class="token number">1.</span>  <span class="token number">1.</span> nan<span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">2.</span>  <span class="token number">2.</span> nan  <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 同按照列操作，只是换成行操作</span>imp2 <span class="token operator">=</span> Imputer<span class="token punctuation">(</span>missing_values<span class="token operator">=</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> strategy<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>imp2<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>imp2<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2.</span>         <span class="token number">6.</span>         <span class="token number">3.</span>         <span class="token number">1.</span>        <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3.</span>         <span class="token number">5.</span>         <span class="token number">3.</span>         <span class="token number">1.</span>        <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span>         <span class="token number">1.</span>         <span class="token number">1.</span>         <span class="token number">1.</span>        <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2.</span>         <span class="token number">2.</span>         <span class="token number">2.33333333</span> <span class="token number">3.</span>        <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 除了均值以外，还有中位数median，众数most_frequent的方式进行计算</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">2.</span>  <span class="token number">6.</span> nan  <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>nan  <span class="token number">5.</span> nan  <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">1.</span>  <span class="token number">1.</span>  <span class="token number">1.</span> nan<span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">2.</span>  <span class="token number">2.</span> nan  <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>imp1 <span class="token operator">=</span> Imputer<span class="token punctuation">(</span>missing_values<span class="token operator">=</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> strategy<span class="token operator">=</span><span class="token string">'median'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#中位数处理</span>imp2 <span class="token operator">=</span> Imputer<span class="token punctuation">(</span>missing_values<span class="token operator">=</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> strategy<span class="token operator">=</span><span class="token string">'most_frequent'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#众数处理  离散值处理</span><span class="token keyword">print</span><span class="token punctuation">(</span>imp1<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>imp2<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2.</span> <span class="token number">6.</span> <span class="token number">1.</span> <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2.</span> <span class="token number">5.</span> <span class="token number">1.</span> <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span> <span class="token number">1.</span> <span class="token number">1.</span> <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2.</span> <span class="token number">2.</span> <span class="token number">1.</span> <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2.</span> <span class="token number">6.</span> <span class="token number">1.</span> <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2.</span> <span class="token number">5.</span> <span class="token number">1.</span> <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span> <span class="token number">1.</span> <span class="token number">1.</span> <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2.</span> <span class="token number">2.</span> <span class="token number">1.</span> <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二值化处理</p><p>为了保证能够更明确的表示特征的处理后的结果，一般情况下可以把连续性问题调整为离散型特征<br>只要通过设定阈值的方式就可以进行调整，大于阈值返回1，小于阈值返回0</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> Binarizera <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">2.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>model <span class="token operator">=</span> Binarizer<span class="token punctuation">(</span>threshold<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#  阈值：考试通过是2分，如果低于2，就为0， 高于2就为1</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.</span> <span class="token number">0.</span> <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span> <span class="token number">1.</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-降维的意义"><a href="#4-降维的意义" class="headerlink" title="4. 降维的意义"></a>4. 降维的意义</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/5.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/6.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/7.png"></p><h3 id="5-SVD奇异值分解"><a href="#5-SVD奇异值分解" class="headerlink" title="5.SVD奇异值分解"></a>5.SVD奇异值分解</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/8.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/9.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/10.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/11.png"></p><h3 id="6-SVD分解代码"><a href="#6-SVD分解代码" class="headerlink" title="6.SVD分解代码"></a>6.SVD分解代码</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/12.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#实对称矩阵</span>A <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">292</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">73</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">69</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">781</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">126</span>  <span class="token number">52</span>  <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">-</span><span class="token number">69</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">52</span> <span class="token number">292</span> <span class="token operator">-</span><span class="token number">73</span> <span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">-</span><span class="token number">73</span> <span class="token number">141</span> <span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">69</span> <span class="token operator">-</span><span class="token number">80</span> <span class="token operator">-</span><span class="token number">31</span> <span class="token number">781</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#求特征值及特征向量</span>vals<span class="token punctuation">,</span> vecs <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>eig<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特征值：'</span><span class="token punctuation">,</span> vals<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特征向量：'</span><span class="token punctuation">,</span> vecs<span class="token punctuation">)</span>特征值： <span class="token punctuation">[</span> <span class="token number">802.90564963</span>  <span class="token number">320.98186202</span>   <span class="token number">96.41884239</span>  <span class="token number">119.69364597</span><span class="token punctuation">]</span>特征向量： <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.11215548</span> <span class="token operator">-</span><span class="token number">0.18749153</span>  <span class="token number">0.63427512</span> <span class="token operator">-</span><span class="token number">0.741595</span>  <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0.16094601</span> <span class="token operator">-</span><span class="token number">0.88782598</span> <span class="token operator">-</span><span class="token number">0.41733416</span> <span class="token operator">-</span><span class="token number">0.10813699</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0.02764753</span>  <span class="token number">0.39013329</span> <span class="token operator">-</span><span class="token number">0.65063254</span> <span class="token operator">-</span><span class="token number">0.65092928</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.98018016</span> <span class="token operator">-</span><span class="token number">0.1562305</span>  <span class="token operator">-</span><span class="token number">0.0143027</span>  <span class="token operator">-</span><span class="token number">0.12097241</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#将特征值进行输出</span>Lambda <span class="token operator">=</span> np<span class="token punctuation">.</span>diag<span class="token punctuation">(</span>vals<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Lambda<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">802.90564963</span>    <span class="token number">0.</span>            <span class="token number">0.</span>            <span class="token number">0.</span>        <span class="token punctuation">]</span> <span class="token punctuation">[</span>   <span class="token number">0.</span>          <span class="token number">320.98186202</span>    <span class="token number">0.</span>            <span class="token number">0.</span>        <span class="token punctuation">]</span> <span class="token punctuation">[</span>   <span class="token number">0.</span>            <span class="token number">0.</span>           <span class="token number">96.41884239</span>    <span class="token number">0.</span>        <span class="token punctuation">]</span> <span class="token punctuation">[</span>   <span class="token number">0.</span>            <span class="token number">0.</span>            <span class="token number">0.</span>          <span class="token number">119.69364597</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A = W sigma  W-1'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>vecs<span class="token punctuation">,</span> Lambda<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>vecs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>A <span class="token operator">=</span> W sigma  W<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">126.</span>   <span class="token number">52.</span>   <span class="token operator">-</span><span class="token number">3.</span>  <span class="token operator">-</span><span class="token number">69.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>  <span class="token number">52.</span>  <span class="token number">292.</span>  <span class="token operator">-</span><span class="token number">73.</span>  <span class="token operator">-</span><span class="token number">80.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>  <span class="token operator">-</span><span class="token number">3.</span>  <span class="token operator">-</span><span class="token number">73.</span>  <span class="token number">141.</span>  <span class="token operator">-</span><span class="token number">31.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token operator">-</span><span class="token number">69.</span>  <span class="token operator">-</span><span class="token number">80.</span>  <span class="token operator">-</span><span class="token number">31.</span>  <span class="token number">781.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A = W sigma WT'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>vecs<span class="token punctuation">,</span> Lambda<span class="token punctuation">)</span><span class="token punctuation">,</span> vecs<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span>A <span class="token operator">=</span> W sigma WT<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">126.</span>   <span class="token number">52.</span>   <span class="token operator">-</span><span class="token number">3.</span>  <span class="token operator">-</span><span class="token number">69.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>  <span class="token number">52.</span>  <span class="token number">292.</span>  <span class="token operator">-</span><span class="token number">73.</span>  <span class="token operator">-</span><span class="token number">80.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>  <span class="token operator">-</span><span class="token number">3.</span>  <span class="token operator">-</span><span class="token number">73.</span>  <span class="token number">141.</span>  <span class="token operator">-</span><span class="token number">31.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token operator">-</span><span class="token number">69.</span>  <span class="token operator">-</span><span class="token number">80.</span>  <span class="token operator">-</span><span class="token number">31.</span>  <span class="token number">781.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-SVD应用"><a href="#7-SVD应用" class="headerlink" title="7. SVD应用"></a>7. SVD应用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 中文显示问题</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">u'simHei'</span><span class="token punctuation">]</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>A <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r'../datas/godness.jpg'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># (432, 600, 3)</span><span class="token comment"># 由于是彩色图像，所以3通道。a的最内层数组为三个数，分别表示RGB，用来表示一个像素</span>u_r<span class="token punctuation">,</span> sigma_r<span class="token punctuation">,</span> v_r <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>svd<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#红色通道图片</span>u_g<span class="token punctuation">,</span> sigma_g<span class="token punctuation">,</span> v_g <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>svd<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#绿色通道图片</span>u_b<span class="token punctuation">,</span> sigma_b<span class="token punctuation">,</span> v_b <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>svd<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#蓝色通道图片</span><span class="token comment"># 然后便可以根据需要压缩图像（丢弃分解出来的三个矩阵中的数据）， 利用的奇异值个数越少，则压缩的越厉害。下面来看一下不同程度压缩后，重构图像的清晰度：</span><span class="token keyword">def</span> <span class="token function">restore1</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> sigma<span class="token punctuation">,</span> v<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># u 左奇异矩阵，  sigma： 特征值矩阵，   v  右奇异矩阵   k：选择的奇异值数量   10% 就会有很好的图像显示效果</span>    <span class="token comment"># 重构图像</span>    a <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>u<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>diag<span class="token punctuation">(</span>sigma<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dot<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#图像的像素点数值显示范围是在0-255之间， </span>    a<span class="token punctuation">[</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    a<span class="token punctuation">[</span>a <span class="token operator">&gt;</span> <span class="token number">255</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>rint<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'uint8'</span><span class="token punctuation">)</span><span class="token comment">#为了保证处理后的结果是一个整数</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>facecolor<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#图片尺寸，底片白色</span><span class="token comment"># 奇异值个数依次取：1,2,...,20看看一下效果</span>K <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> K <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#1-20</span>    R <span class="token operator">=</span> restore1<span class="token punctuation">(</span>u_r<span class="token punctuation">,</span> sigma_r<span class="token punctuation">,</span> v_r<span class="token punctuation">,</span> k<span class="token punctuation">)</span>    G <span class="token operator">=</span> restore1<span class="token punctuation">(</span>u_g<span class="token punctuation">,</span> sigma_g<span class="token punctuation">,</span> v_g<span class="token punctuation">,</span> k<span class="token punctuation">)</span>    B <span class="token operator">=</span> restore1<span class="token punctuation">(</span>u_b<span class="token punctuation">,</span> sigma_b<span class="token punctuation">,</span> v_b<span class="token punctuation">,</span> k<span class="token punctuation">)</span>    I <span class="token operator">=</span> np<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> G<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#通道是第三个维度所以axis=2</span>    <span class="token comment"># 将图片重构后的显示出来</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>I<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">u'奇异值个数：%d'</span> <span class="token operator">%</span> k<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>suptitle<span class="token punctuation">(</span><span class="token string">u'SVD与图像分解'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> rect<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.92</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/13.png"></p><h3 id="8-PCA降维"><a href="#8-PCA降维" class="headerlink" title="8.  PCA降维"></a>8.  PCA降维</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/14.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/15.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/16.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/17.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/18.png"></p><h3 id="9-PCA代码"><a href="#9-PCA代码" class="headerlink" title="9. PCA代码"></a>9. PCA代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">pca</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>    m_samples <span class="token punctuation">,</span> n_features <span class="token operator">=</span> X<span class="token punctuation">.</span>shape    <span class="token comment">#中心化  去均值    均值为0</span>    mean <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    normX <span class="token operator">=</span> X <span class="token operator">-</span> mean <span class="token comment">#去均值，中心化</span>    cov_mat <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>normX<span class="token punctuation">)</span><span class="token punctuation">,</span>normX<span class="token punctuation">)</span>  <span class="token comment">#协方差矩阵</span>    <span class="token comment">#对二维数组的transpose操作就是对原数组的转置操作  矩阵相乘</span>    vals <span class="token punctuation">,</span> vecs <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>eig<span class="token punctuation">(</span>cov_mat<span class="token punctuation">)</span><span class="token comment"># 得到特征向量和特征值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特征值'</span><span class="token punctuation">,</span> vals<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特征向量'</span><span class="token punctuation">,</span> vecs<span class="token punctuation">)</span>    eig_pairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vecs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_features<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>eig_pairs<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------'</span><span class="token punctuation">)</span>    <span class="token comment">#将特征值由大到小排列</span>    eig_pairs<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>eig_pairs<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------------'</span><span class="token punctuation">)</span>    <span class="token comment">#获取多少个维度</span>    feature <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>eig_pairs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span>    <span class="token comment">#将数据进行还原操作  normX  中心化后的数据 和  特征向量相乘</span>    data <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>normX<span class="token punctuation">,</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dataX <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data <span class="token operator">=</span> pca<span class="token punctuation">(</span>X<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>特征值 <span class="token punctuation">[</span><span class="token number">37.7067455</span>   <span class="token number">1.62658783</span><span class="token punctuation">]</span>特征向量 <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.8549662</span>  <span class="token operator">-</span><span class="token number">0.51868371</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0.51868371</span>  <span class="token number">0.8549662</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">37.70674550364642</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.8549662</span> <span class="token punctuation">,</span> <span class="token number">0.51868371</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.6265878296869243</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.51868371</span><span class="token punctuation">,</span>  <span class="token number">0.8549662</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">37.70674550364642</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.8549662</span> <span class="token punctuation">,</span> <span class="token number">0.51868371</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.6265878296869243</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.51868371</span><span class="token punctuation">,</span>  <span class="token number">0.8549662</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">0.8549662</span>  <span class="token number">0.51868371</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.50917706</span> <span class="token operator">-</span><span class="token number">2.40151069</span> <span class="token operator">-</span><span class="token number">3.7751606</span>   <span class="token number">1.20075534</span>  <span class="token number">2.05572155</span>  <span class="token number">3.42937146</span><span class="token punctuation">]</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>decomposition <span class="token keyword">import</span> PCAX <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>p <span class="token operator">=</span> PCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>a <span class="token operator">=</span> p<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------------------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.50917706</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">2.40151069</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">3.7751606</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.20075534</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2.05572155</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3.42937146</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-代码实战"><a href="#10-代码实战" class="headerlink" title="10. 代码实战"></a>10. 代码实战</h3><p>SVD和PCA都是常用的数据降维处理方式<br>一般可以处理多特征数据的降维处理操作<br>SVD和PCA的实战开发使用量不相上下，没有优劣可研<br>由于本案例特征较少无法体现降维优势，只是做降维操作演示</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>decomposition <span class="token keyword">import</span> PCA<span class="token punctuation">,</span> TruncatedSVD<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_errordata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'../datas/Advertising.csv'</span><span class="token punctuation">)</span>    <span class="token comment"># TV、Radio、Newspaper、Sales</span>x <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'TV'</span><span class="token punctuation">,</span> <span class="token string">'Radio'</span><span class="token punctuation">,</span> <span class="token string">'Newspaper'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Sales'</span><span class="token punctuation">]</span><span class="token comment"># # 绘制样本分布，观察效果</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'TV'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'ro'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'TV'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Radio'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'g*'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Radio'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Newspaper'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'bv'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Newspaer'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'lower right'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/19.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">##使用PCA降维后观察效果</span>pca <span class="token operator">=</span> PCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#我只选择一个维度， 下面显示的图像，和上面的图像不是吻合</span>x_ <span class="token operator">=</span> pca<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x_<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'g*'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/20.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span>fit_intercept<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_<span class="token punctuation">,</span> y<span class="token punctuation">)</span>y_ <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_pred<span class="token operator">=</span>y_<span class="token punctuation">,</span> y_true<span class="token operator">=</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 10.4431524615</span>svd <span class="token operator">=</span> TruncatedSVD<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>x_ <span class="token operator">=</span> svd<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x_<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>   <span class="token comment"># (200, 1)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'g*'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/10-jiang-wei/21.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span>fit_intercept<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_<span class="token punctuation">,</span> y<span class="token punctuation">)</span>y_ <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_pred<span class="token operator">=</span>y_<span class="token punctuation">,</span> y_true<span class="token operator">=</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 9.7480425958</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 降维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-线性回归3</title>
      <link href="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/"/>
      <url>/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/</url>
      
        <content type="html"><![CDATA[<h3 id="1-特征扩展-多形式回归"><a href="#1-特征扩展-多形式回归" class="headerlink" title="1. 特征扩展 多形式回归"></a>1. 特征扩展 多形式回归</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/1.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/2.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> PolynomialFeaturesx <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># interaction_only=True  b x1 x2 x1*x2</span>model <span class="token operator">=</span> PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>interaction_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>include_bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>x_ <span class="token operator">=</span> model<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># array([[1., 2., 3., 6.]])</span><span class="token comment"># interaction_only=False b x1 x2 x1*x1 x1*x2 x2*x2</span><span class="token comment"># include_bias=True 包含 偏差截距1</span>model <span class="token operator">=</span> PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>interaction_only<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>include_bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>x_ <span class="token operator">=</span> model<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># array([[1., 2., 3., 4., 6., 9.]])</span><span class="token comment"># include_bias=False  不包含 偏差截距1</span>model <span class="token operator">=</span> PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>interaction_only<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>include_bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>x_ <span class="token operator">=</span> model<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x<span class="token punctuation">)</span>   <span class="token comment"># array([[2., 3., 4., 6., 9.]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-多项式回归例子"><a href="#2-多项式回归例子" class="headerlink" title="2. 多项式回归例子"></a>2. 多项式回归例子</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/3.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">#100个样本点 ，在-3~3之间均匀采样</span>X <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#接下来的代码要区分好X和x</span>y <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span>x <span class="token operator">+</span><span class="token number">2</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">#加入随机值，可以让曲线不是很完美</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/4.png"></p><h4 id="2-1-线性回归"><a href="#2-1-线性回归" class="headerlink" title="2.1 线性回归"></a>2.1 线性回归</h4><p>使用线性回归的模型，可以看出，拟合的效果非常不好</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegressionlin_reg <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>lin_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span>y_predict <span class="token operator">=</span> lin_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>y_predict<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/5.png"></p><h4 id="2-2-底层来使用特征扩展"><a href="#2-2-底层来使用特征扩展" class="headerlink" title="2.2 底层来使用特征扩展"></a>2.2 底层来使用特征扩展</h4><p>使用底层来使用特征扩展，并将特征扩展的效果进行显示<br>啧啧，明显效果好了很多</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span>X<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#特征拓展  这里给样本X再引入1个特征项，现在的特征就有2个</span>lin_reg2 <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>lin_reg2<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x2<span class="token punctuation">,</span>y<span class="token punctuation">)</span>y_predict2 <span class="token operator">=</span> lin_reg2<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token comment"># 对x进行排序处理, y预测值也根据x的索引变化进行排序</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>y_predict2<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token comment"># plt.plot(x, y, color='r')</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#绘制的时候要注意，因为x是无序的，为了画出如下图平滑的线条，</span><span class="token comment">#需要先将x进行排序，y_predict2按照x从的大小的顺序进行取值，否则绘制出的如右下图。</span><span class="token keyword">print</span><span class="token punctuation">(</span>lin_reg2<span class="token punctuation">.</span>coef_<span class="token punctuation">,</span>lin_reg2<span class="token punctuation">.</span>intercept_<span class="token punctuation">)</span><span class="token comment">#权重，截距</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/6.png"></p><h4 id="2-3-最后使用特征拓展方法进行操作"><a href="#2-3-最后使用特征拓展方法进行操作" class="headerlink" title="2.3 最后使用特征拓展方法进行操作"></a>2.3 最后使用特征拓展方法进行操作</h4><p>sklearn.preprocessing.PolynomialFeatures(degree=2, interaction_only=False, include_bias=True)</p><p>degree 升维的数量<br>interaction_only 是否得到自身的次方<br>include_bias 是否拟合截距<br>然后再使用线性回归将数据进行线性回归拟合，进行处理</p><p>1.调用from sklearn.preprocessing import PolynomialFeatures 进行扩展<br>2.调用from sklearn.linear_model import LinearRegression 线性回归，进行回归预测<br>3.图像显示</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> PolynomialFeatures<span class="token comment">#默认 interaction_only=False  不会做自身的次方，除非只有一个特征值的情况下，才会做自己的次方处理</span>poly <span class="token operator">=</span> PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> include_bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment">#设置最多添加几次幂的特征项</span>poly<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span>x2 <span class="token operator">=</span> poly<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression <span class="token comment">#接下来的代码和线性回归一致</span>lin_reg2 <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>lin_reg2<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x2<span class="token punctuation">,</span>y<span class="token punctuation">)</span>y_predict2 <span class="token operator">=</span> lin_reg2<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>y_predict2<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lin_reg2<span class="token punctuation">.</span>coef_<span class="token punctuation">,</span>lin_reg2<span class="token punctuation">.</span>intercept_<span class="token punctuation">)</span><span class="token comment">#权重，截距</span><span class="token comment">#绘制的图像和预测所得的值和上面完全一致，唯一不同的是lin_reg2.coef_有3个系数，第一个系数值为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/7.png"></p><p>参数解释</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token comment">#对x排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'**'</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>                      <span class="token comment">#取排序后X之前的索引值 </span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'**'</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y_predict2<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment">#取预测的y值   </span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2.98762181</span> <span class="token operator">-</span><span class="token number">2.86960524</span> <span class="token operator">-</span><span class="token number">2.7560986</span>  <span class="token operator">-</span><span class="token number">2.69277458</span> <span class="token operator">-</span><span class="token number">2.65728224</span> <span class="token operator">-</span><span class="token number">2.53408899</span> <span class="token operator">-</span><span class="token number">2.50081373</span> <span class="token operator">-</span><span class="token number">2.48493986</span> <span class="token operator">-</span><span class="token number">2.45317471</span> <span class="token operator">-</span><span class="token number">2.40225835</span> <span class="token operator">-</span><span class="token number">2.39708302</span> <span class="token operator">-</span><span class="token number">2.35127017</span> <span class="token operator">-</span><span class="token number">2.15423094</span> <span class="token operator">-</span><span class="token number">2.12670083</span> <span class="token operator">-</span><span class="token number">2.11555491</span> <span class="token operator">-</span><span class="token number">2.11197595</span> <span class="token operator">-</span><span class="token number">2.07653124</span> <span class="token operator">-</span><span class="token number">2.03112637</span> <span class="token operator">-</span><span class="token number">1.92168311</span> <span class="token operator">-</span><span class="token number">1.90889181</span> <span class="token operator">-</span><span class="token number">1.84099544</span> <span class="token operator">-</span><span class="token number">1.83056914</span> <span class="token operator">-</span><span class="token number">1.73529367</span> <span class="token operator">-</span><span class="token number">1.54650768</span> <span class="token operator">-</span><span class="token number">1.53954886</span> <span class="token operator">-</span><span class="token number">1.47027138</span> <span class="token operator">-</span><span class="token number">1.43704363</span> <span class="token operator">-</span><span class="token number">1.41099044</span> <span class="token operator">-</span><span class="token number">1.37186492</span> <span class="token operator">-</span><span class="token number">1.20991536</span> <span class="token operator">-</span><span class="token number">1.18603219</span> <span class="token operator">-</span><span class="token number">1.15012051</span> <span class="token operator">-</span><span class="token number">1.11982671</span> <span class="token operator">-</span><span class="token number">1.10374338</span> <span class="token operator">-</span><span class="token number">1.09599268</span> <span class="token operator">-</span><span class="token number">1.00736781</span> <span class="token operator">-</span><span class="token number">0.97908985</span> <span class="token operator">-</span><span class="token number">0.93894118</span> <span class="token operator">-</span><span class="token number">0.88418423</span> <span class="token operator">-</span><span class="token number">0.86980053</span> <span class="token operator">-</span><span class="token number">0.83592842</span> <span class="token operator">-</span><span class="token number">0.81160647</span> <span class="token operator">-</span><span class="token number">0.77022277</span> <span class="token operator">-</span><span class="token number">0.73244677</span> <span class="token operator">-</span><span class="token number">0.59344517</span> <span class="token operator">-</span><span class="token number">0.48863423</span> <span class="token operator">-</span><span class="token number">0.47869302</span> <span class="token operator">-</span><span class="token number">0.45179464</span> <span class="token operator">-</span><span class="token number">0.43647235</span> <span class="token operator">-</span><span class="token number">0.33769033</span> <span class="token operator">-</span><span class="token number">0.29835604</span> <span class="token operator">-</span><span class="token number">0.27180578</span> <span class="token operator">-</span><span class="token number">0.09761449</span> <span class="token operator">-</span><span class="token number">0.0457051</span>  <span class="token number">0.02690398</span>  <span class="token number">0.11094867</span>  <span class="token number">0.11364349</span>  <span class="token number">0.12060006</span>  <span class="token number">0.14403824</span>  <span class="token number">0.21958842</span>  <span class="token number">0.25976134</span>  <span class="token number">0.38335571</span>  <span class="token number">0.51506737</span>  <span class="token number">0.54651191</span>  <span class="token number">0.67255192</span>  <span class="token number">0.83210489</span>  <span class="token number">0.86300269</span>  <span class="token number">0.89785593</span>  <span class="token number">0.91912367</span>  <span class="token number">1.00973965</span>  <span class="token number">1.10047419</span>  <span class="token number">1.15987075</span>  <span class="token number">1.38499229</span>  <span class="token number">1.39660608</span>  <span class="token number">1.52540178</span>  <span class="token number">1.58375749</span>  <span class="token number">1.64888844</span>  <span class="token number">1.68838258</span>  <span class="token number">1.76030158</span>  <span class="token number">1.77630126</span>  <span class="token number">1.83814383</span>  <span class="token number">1.86098598</span>  <span class="token number">1.92660669</span>  <span class="token number">2.06657744</span>  <span class="token number">2.11931601</span>  <span class="token number">2.37618314</span>  <span class="token number">2.38561012</span>  <span class="token number">2.39764304</span>  <span class="token number">2.39974424</span>  <span class="token number">2.4009163</span>  <span class="token number">2.40275296</span>  <span class="token number">2.48549026</span>  <span class="token number">2.61395499</span>  <span class="token number">2.61566453</span>  <span class="token number">2.74530675</span>  <span class="token number">2.85121032</span>  <span class="token number">2.89823193</span>  <span class="token number">2.9272504</span>   <span class="token number">2.93356537</span>  <span class="token number">2.98450116</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">[</span><span class="token number">83</span> <span class="token number">18</span> <span class="token number">62</span> <span class="token number">84</span> <span class="token number">55</span> <span class="token number">39</span> <span class="token number">94</span> <span class="token number">45</span> <span class="token number">24</span>  <span class="token number">5</span> <span class="token number">35</span>  <span class="token number">7</span> <span class="token number">44</span> <span class="token number">68</span> <span class="token number">29</span> <span class="token number">77</span> <span class="token number">27</span> <span class="token number">99</span> <span class="token number">82</span> <span class="token number">22</span> <span class="token number">15</span> <span class="token number">36</span> <span class="token number">34</span> <span class="token number">88</span> <span class="token number">78</span>  <span class="token number">2</span> <span class="token number">92</span> <span class="token number">28</span> <span class="token number">58</span> <span class="token number">54</span> <span class="token number">66</span> <span class="token number">85</span> <span class="token number">51</span> <span class="token number">95</span> <span class="token number">41</span> <span class="token number">12</span> <span class="token number">17</span>  <span class="token number">9</span> <span class="token number">91</span> <span class="token number">86</span> <span class="token number">37</span> <span class="token number">89</span> <span class="token number">10</span> <span class="token number">98</span> <span class="token number">76</span> <span class="token number">63</span> <span class="token number">40</span> <span class="token number">23</span> <span class="token number">75</span> <span class="token number">21</span> <span class="token number">61</span> <span class="token number">53</span> <span class="token number">20</span> <span class="token number">46</span> <span class="token number">31</span> <span class="token number">96</span> <span class="token number">16</span> <span class="token number">65</span> <span class="token number">93</span> <span class="token number">71</span> <span class="token number">43</span> <span class="token number">50</span> <span class="token number">79</span> <span class="token number">25</span> <span class="token number">49</span>  <span class="token number">3</span> <span class="token number">60</span> <span class="token number">97</span>  <span class="token number">6</span> <span class="token number">11</span> <span class="token number">72</span>  <span class="token number">1</span> <span class="token number">30</span> <span class="token number">47</span> <span class="token number">48</span>  <span class="token number">8</span> <span class="token number">38</span> <span class="token number">90</span> <span class="token number">70</span> <span class="token number">59</span> <span class="token number">69</span> <span class="token number">26</span>  <span class="token number">4</span>  <span class="token number">0</span> <span class="token number">19</span> <span class="token number">57</span> <span class="token number">14</span> <span class="token number">67</span> <span class="token number">32</span> <span class="token number">74</span> <span class="token number">33</span> <span class="token number">56</span> <span class="token number">80</span> <span class="token number">81</span> <span class="token number">13</span> <span class="token number">64</span> <span class="token number">87</span> <span class="token number">73</span> <span class="token number">42</span> <span class="token number">52</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3.86818385</span> <span class="token number">3.60433009</span> <span class="token number">3.36509351</span> <span class="token number">3.23781923</span> <span class="token number">3.16842324</span> <span class="token number">2.93836289</span> <span class="token number">2.87910171</span> <span class="token number">2.85126281</span> <span class="token number">2.79639142</span> <span class="token number">2.71076637</span> <span class="token number">2.70222367</span> <span class="token number">2.62789419</span> <span class="token number">2.33467094</span> <span class="token number">2.29712136</span> <span class="token number">2.28215734</span> <span class="token number">2.27738153</span> <span class="token number">2.23084867</span> <span class="token number">2.17327009</span> <span class="token number">2.04385628</span> <span class="token number">2.02959564</span> <span class="token number">1.95692986</span> <span class="token number">1.9462228</span>  <span class="token number">1.8539515</span>  <span class="token number">1.70077717</span> <span class="token number">1.69588438</span> <span class="token number">1.65009594</span> <span class="token number">1.63001804</span> <span class="token number">1.61512956</span> <span class="token number">1.59418109</span> <span class="token number">1.52548047</span> <span class="token number">1.51780363</span> <span class="token number">1.50744804</span> <span class="token number">1.49982166</span> <span class="token number">1.49618526</span> <span class="token number">1.49453501</span> <span class="token number">1.48038922</span> <span class="token number">1.47770395</span> <span class="token number">1.47541083</span> <span class="token number">1.47515747</span> <span class="token number">1.47564094</span> <span class="token number">1.47768345</span> <span class="token number">1.47993287</span> <span class="token number">1.48526412</span> <span class="token number">1.49178444</span> <span class="token number">1.52936685</span> <span class="token number">1.57183806</span> <span class="token number">1.57649732</span> <span class="token number">1.58965216</span> <span class="token number">1.59750342</span> <span class="token number">1.65435389</span> <span class="token number">1.67999596</span> <span class="token number">1.69827155</span> <span class="token number">1.83751343</span> <span class="token number">1.88549896</span> <span class="token number">1.95761982</span> <span class="token number">2.04838096</span> <span class="token number">2.05142042</span> <span class="token number">2.05930378</span> <span class="token number">2.08625851</span> <span class="token number">2.17728002</span> <span class="token number">2.2282508</span>  <span class="token number">2.39625975</span> <span class="token number">2.59390069</span> <span class="token number">2.64392245</span> <span class="token number">2.85540396</span> <span class="token number">3.14831806</span> <span class="token number">3.20829606</span> <span class="token number">3.27721965</span> <span class="token number">3.31993754</span> <span class="token number">3.50755383</span> <span class="token number">3.7045161</span>  <span class="token number">3.83838315</span> <span class="token number">4.3811829</span>  <span class="token number">4.41070596</span> <span class="token number">4.7481153</span>  <span class="token number">4.90703142</span> <span class="token number">5.08884623</span> <span class="token number">5.20138051</span> <span class="token number">5.41073741</span> <span class="token number">5.45809062</span> <span class="token number">5.64378442</span> <span class="token number">5.71344207</span> <span class="token number">5.91676436</span> <span class="token number">6.36637169</span> <span class="token number">6.54139686</span> <span class="token number">7.43785371</span> <span class="token number">7.47214192</span> <span class="token number">7.51605135</span> <span class="token number">7.52373526</span> <span class="token number">7.52802353</span> <span class="token number">7.53474644</span> <span class="token number">7.84146809</span> <span class="token number">8.33271502</span> <span class="token number">8.33937535</span> <span class="token number">8.8538764</span>  <span class="token number">9.28796395</span> <span class="token number">9.48467751</span> <span class="token number">9.60729583</span> <span class="token number">9.6341033</span>  <span class="token number">9.85194196</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-管道机制"><a href="#3-管道机制" class="headerlink" title="3. 管道机制"></a>3. 管道机制</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/8.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/9.png"></p><p>本文进行管道操作处理</p><p>管道使用技巧</p><p>sklearn.pipeline.Pipeline([(模型名称1，模型1)，(模型名称2，模型2)，… ])</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>X <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span>x <span class="token operator">+</span><span class="token number">2</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipeline<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> PolynomialFeatures<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScalerdegree <span class="token operator">=</span> <span class="token number">2</span><span class="token comment">#这里将三个处理步骤进行了封装，将数据传入poly_reg之后，将会智能地沿着该管道进行处理</span>poly_reg <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>     <span class="token punctuation">(</span><span class="token string">"poly"</span><span class="token punctuation">,</span>PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span>degree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">"std_scaler"</span><span class="token punctuation">,</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">"lin_reg"</span><span class="token punctuation">,</span>LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>poly_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span> y_predict <span class="token operator">=</span> poly_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>y_predict<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token comment">#效果和之前代码一致</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/10.png"></p><h3 id="4-欠拟合-过拟合"><a href="#4-欠拟合-过拟合" class="headerlink" title="4. 欠拟合-过拟合"></a>4. 欠拟合-过拟合</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/11.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/12.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/13.png"></p><p>完美拟合: train 1.11492495662 test 0.921293072215<br>欠拟合 ： 训练集没有训练好 3.38238565057， 测试集效果也不好 2.15285335453<br>过拟合 ： 训练集足够好 4.74702912321，测试集效果不好 16.9145359195</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt <span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error <span class="token comment">#引入均方误差用来测试拟合的分数</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> PolynomialFeatures<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipeline<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_splitnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span> <span class="token comment">#为了反复测试，这里将随机种子固定</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.</span><span class="token punctuation">,</span><span class="token number">3.</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>X <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span>x <span class="token operator">+</span><span class="token number">2</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">PolynomialRegression</span><span class="token punctuation">(</span>degree<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">"poly"</span><span class="token punctuation">,</span>PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span>degree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"std_scaler"</span><span class="token punctuation">,</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"lin_reg"</span><span class="token punctuation">,</span>LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>poly_reg <span class="token operator">=</span> PolynomialRegression<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>poly_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span>y_predict <span class="token operator">=</span> poly_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>y_predict<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/14.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x_train<span class="token punctuation">,</span>x_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">)</span>poly_reg <span class="token operator">=</span> PolynomialRegression<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>poly_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>y_predict_train <span class="token operator">=</span> poly_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span>y_predict <span class="token operator">=</span> poly_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_predict_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#训练集</span><span class="token keyword">print</span><span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_predict<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#测试集</span><span class="token number">1.11492495662</span><span class="token number">0.921293072215</span><span class="token comment"># 过拟合的处理</span>poly_reg <span class="token operator">=</span> PolynomialRegression<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment"># 如果出现欠拟合情况，证明模型不够复杂，就可进行特征拓展</span>poly_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span>y_predict <span class="token operator">=</span> poly_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>y_predict<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/15.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">poly_reg <span class="token operator">=</span> PolynomialRegression<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>poly_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>y_predict_train <span class="token operator">=</span> poly_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span>y_predict <span class="token operator">=</span> poly_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_predict_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#训练集</span><span class="token keyword">print</span><span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_predict<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#测试集</span><span class="token number">4.74702912321</span><span class="token number">16.9145359195</span><span class="token comment"># 欠拟合</span>poly_reg <span class="token operator">=</span> PolynomialRegression<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>poly_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span>y_predict <span class="token operator">=</span> poly_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>y_predict<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/16.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">lin_reg <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>lin_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>y_predict_train <span class="token operator">=</span> poly_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span>y_predict <span class="token operator">=</span> poly_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_predict_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#训练集</span><span class="token keyword">print</span><span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_predict<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#测试集</span><span class="token number">3.38238565057</span><span class="token number">2.15285335453</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-正则化"><a href="#5-正则化" class="headerlink" title="5. 正则化"></a>5. 正则化</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/17.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/18.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/19.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/20.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.</span><span class="token punctuation">,</span><span class="token number">3.</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>X <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">*</span> x <span class="token operator">+</span><span class="token number">2</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/21.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  <span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> PolynomialFeatures<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipeline<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span>x_train<span class="token punctuation">,</span>x_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">PolynomialRegression</span><span class="token punctuation">(</span>degree<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">"poly"</span><span class="token punctuation">,</span>PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span>degree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"std_scaler"</span><span class="token punctuation">,</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"lin_reg"</span><span class="token punctuation">,</span>LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">plot_model</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#绘制图像的代码封装，为了方便使用，直接传入模型即可</span>    x_plot <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 从-3，到+3按比例取出100个样本点，转化成列向量</span>    y_plot <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_plot<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_plot<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y_plot<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#x轴范围-3,3.y轴范围0,6</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 如果使用较大的特征扩展，会出现过拟合现象，生成的先不满足图像要求</span>poly_reg <span class="token operator">=</span> PolynomialRegression<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>poly_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plot_model<span class="token punctuation">(</span>poly_reg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/22.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/23.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> Lasso <span class="token comment">#L1正则化的线性回归  套索回归</span><span class="token keyword">def</span> <span class="token function">LassoRegression</span><span class="token punctuation">(</span>degree<span class="token punctuation">,</span>alpha<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">"poly"</span><span class="token punctuation">,</span>PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span>degree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"std_scaler"</span><span class="token punctuation">,</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"lin_reg"</span><span class="token punctuation">,</span>Lasso<span class="token punctuation">(</span>alpha<span class="token operator">=</span>alpha<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>ridge1 <span class="token operator">=</span> LassoRegression<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span>ridge1<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>y_test <span class="token operator">=</span> ridge1<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>plot_model<span class="token punctuation">(</span>ridge1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/24.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/25.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> Ridge  <span class="token comment"># 岭回归  L2正则</span><span class="token keyword">def</span> <span class="token function">RridgeRegression</span><span class="token punctuation">(</span>degree<span class="token punctuation">,</span>alpha<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#修改管道</span>    <span class="token keyword">return</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">"poly"</span><span class="token punctuation">,</span>PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span>degree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"std_scaler"</span><span class="token punctuation">,</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"lin_reg"</span><span class="token punctuation">,</span>Ridge<span class="token punctuation">(</span>alpha<span class="token operator">=</span>alpha<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#加入岭回归</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>ridge1 <span class="token operator">=</span> RridgeRegression<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span>ridge1<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>y_test <span class="token operator">=</span> ridge1<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>plot_model<span class="token punctuation">(</span>ridge1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/26.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/27.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> ElasticNet<span class="token keyword">def</span> <span class="token function">RridgeRegression</span><span class="token punctuation">(</span>degree<span class="token punctuation">,</span>alpha<span class="token punctuation">,</span> l1_ratio<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#修改管道   alpha正则系数  lambda   l1_ratio  L1正则所占比例</span>    <span class="token keyword">return</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">"poly"</span><span class="token punctuation">,</span>PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span>degree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"std_scaler"</span><span class="token punctuation">,</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"lin_reg"</span><span class="token punctuation">,</span>ElasticNet<span class="token punctuation">(</span>alpha<span class="token operator">=</span>alpha<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#l1_ratio L1的比例 </span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>ridge1 <span class="token operator">=</span> RridgeRegression<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">0.001</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span>ridge1<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>y_test <span class="token operator">=</span> ridge1<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>plot_model<span class="token punctuation">(</span>ridge1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/28.png"></p><h3 id="6-网格搜索交叉验证"><a href="#6-网格搜索交叉验证" class="headerlink" title="6. 网格搜索交叉验证"></a>6. 网格搜索交叉验证</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/29.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/30.png"></p><h3 id="7-线性模型优缺点"><a href="#7-线性模型优缺点" class="headerlink" title="7. 线性模型优缺点"></a>7. 线性模型优缺点</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/31.png"></p><h3 id="8-代码实战"><a href="#8-代码实战" class="headerlink" title="8. 代码实战"></a>8. 代码实战</h3><p>通过电视，广播，报纸，对销售额影响进行分析处理<br>如何通过网格搜索交叉验证得到最优参数<br>并且通过各种模型比较，选择出最优化的模型形式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span> GridSearchCV<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> Lasso<span class="token punctuation">,</span> Ridge <span class="token comment"># L1,L2</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token comment"># pandas读入</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'../datas/Advertising.csv'</span><span class="token punctuation">)</span>    <span class="token comment"># TV、Radio、Newspaper、Sales</span>x <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'TV'</span><span class="token punctuation">,</span> <span class="token string">'Radio'</span><span class="token punctuation">,</span> <span class="token string">'Newspaper'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>y <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Sales'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token comment">#进行模型测试，首先对数据集进行切分，  训练集和测试集</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#到底用L1正则还是用L2正则？</span>model_1 <span class="token operator">=</span> Lasso<span class="token punctuation">(</span><span class="token punctuation">)</span>model_2 <span class="token operator">=</span> Ridge<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建一个alpha参数，正则化系数的列表</span>alpha_can <span class="token operator">=</span> np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># [10^-3, 10^-2,10^-1,10^0]...</span><span class="token comment">#网格搜索交叉验证</span><span class="token comment">#param_grid   alpha  L1正则化中的参数lamba</span><span class="token comment"># cv  5折交叉验证</span>lasso_model <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>model_1<span class="token punctuation">,</span> param_grid<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'alpha'</span><span class="token punctuation">:</span> alpha_can<span class="token punctuation">}</span><span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># 将所有的 x样本进行拟合，最后得到一些结果</span>lasso_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment">#L2正则进行处理</span>ridge_model <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>model_2<span class="token punctuation">,</span> param_grid<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'alpha'</span><span class="token punctuation">:</span> alpha_can<span class="token punctuation">}</span><span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>ridge_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'alpha：'</span><span class="token punctuation">,</span> alpha_can<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'L1最佳参数：\n'</span><span class="token punctuation">,</span> lasso_model<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'L2最佳参数：\n'</span><span class="token punctuation">,</span> ridge_model<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span>alpha： <span class="token punctuation">[</span>  <span class="token number">1.00000000e-03</span>   <span class="token number">3.59381366e-03</span>   <span class="token number">1.29154967e-02</span>   <span class="token number">4.64158883e-02</span>   <span class="token number">1.66810054e-01</span>   <span class="token number">5.99484250e-01</span>   <span class="token number">2.15443469e+00</span>   <span class="token number">7.74263683e+00</span>   <span class="token number">2.78255940e+01</span>   <span class="token number">1.00000000e+02</span><span class="token punctuation">]</span>L1最佳参数： <span class="token punctuation">{</span><span class="token string">'alpha'</span><span class="token punctuation">:</span> <span class="token number">2.1544346900318843</span><span class="token punctuation">}</span>L2最佳参数： <span class="token punctuation">{</span><span class="token string">'alpha'</span><span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">}</span>    <span class="token comment"># L1正则处理的效果</span><span class="token comment"># 正常情况下，如果想要得知模型的处理效果，使用测试集数据进行模型效果评估</span>y_hat <span class="token operator">=</span> lasso_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">)</span>mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>y_pred<span class="token operator">=</span>y_hat<span class="token punctuation">,</span> y_true<span class="token operator">=</span>y_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mse<span class="token punctuation">)</span> <span class="token comment"># 1.91522631383</span>t <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Test'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> y_hat<span class="token punctuation">,</span> <span class="token string">'g-'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Predict'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper right'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/32.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># L2正则处理效果</span>y_hat <span class="token operator">=</span> ridge_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">)</span>mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>y_pred<span class="token operator">=</span>y_hat<span class="token punctuation">,</span> y_true<span class="token operator">=</span>y_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mse<span class="token punctuation">)</span>  <span class="token comment"># 1.81026741844</span>t <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Test'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> y_hat<span class="token punctuation">,</span> <span class="token string">'g-'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Predict'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper right'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/9-xian-xing-hui-gui-3/33.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 线性回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-线性回归2</title>
      <link href="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/"/>
      <url>/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/</url>
      
        <content type="html"><![CDATA[<h3 id="1-梯度下降家族"><a href="#1-梯度下降家族" class="headerlink" title="1. 梯度下降家族"></a>1. 梯度下降家族</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/1.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/2.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/3.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/4.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/5.png"></p><h3 id="2-梯度下降图例"><a href="#2-梯度下降图例" class="headerlink" title="2. 梯度下降图例"></a>2. 梯度下降图例</h3><p>梯度下降给出的𝜃不是最优解，是近似最优解</p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/6.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 设置字符集，防止中文乱码</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">u'simHei'</span><span class="token punctuation">]</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""代价函数"""</span>    <span class="token keyword">return</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">7</span><span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""代价函数求导"""</span>    <span class="token keyword">return</span> <span class="token number">6</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 随机一个初始值</span>    init_x <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> init_x    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"初始x值为:%d"</span> <span class="token operator">%</span> x<span class="token punctuation">)</span><span class="token comment">#x就是线性回归中的theta（所指权重值theta） #初始x值为:-7</span>    <span class="token comment"># 随机一个学习率</span>    alpha <span class="token operator">=</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"随机的alpha值为:%.4f"</span> <span class="token operator">%</span> alpha<span class="token punctuation">)</span>  <span class="token comment"># 随机的alpha值为:0.0182</span>        <span class="token comment"># 设置一个最大迭代次数</span>    max_iter <span class="token operator">=</span> <span class="token number">10</span>    <span class="token comment"># 进行求解过程</span>    X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#记录生成Theta</span>    Y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#代价值</span>    i <span class="token operator">=</span> <span class="token number">0</span>     y <span class="token operator">=</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">#初始的代价函数值    2*（-6）^2 + 5 * (-6) + 7</span>    X<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    Y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token comment">#梯度下降的停止条件</span>    <span class="token comment">#1.达到了循环次数</span>    <span class="token comment">#2.当代价函数更新后的数值与之前一次的数值差，小到一定程度</span>    y_change <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment"># 代价函数更新后的数值与之前一次的数值差, 设为1是为了能够运行循环</span>    <span class="token keyword">while</span> y_change <span class="token operator">&gt;</span> <span class="token number">1e-10</span> <span class="token keyword">and</span> i <span class="token operator">&lt;</span> max_iter<span class="token punctuation">:</span>        <span class="token comment"># 进行梯度下降求解</span>        x <span class="token operator">-=</span> alpha <span class="token operator">*</span> g<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># theta := theta - deltatheta</span>        pre_y<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">#更新后的x，再去进行模型的计算，cost第一次，cost第二次的值</span>        y_change <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>pre_y <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token comment">#对cost的值求差的绝对值</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        X<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        Y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token comment"># 结果输出</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"最终结果:"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 最终结果:(-0.9370486142726872, 4.948937245167654)</span>         <span class="token comment"># 画图</span>    min_x<span class="token punctuation">,</span> max_x <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>    dist <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>min_x <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>max_x <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span>    min_x <span class="token operator">=</span> x <span class="token operator">-</span> dist    max_x <span class="token operator">=</span> x <span class="token operator">+</span> dist    X2 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>min_x<span class="token punctuation">,</span> max_x<span class="token punctuation">,</span> <span class="token number">0.05</span><span class="token punctuation">)</span><span class="token comment">#生成图像的横轴范围</span>    Y2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> t<span class="token punctuation">:</span> f<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> X2<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X2<span class="token punctuation">,</span> Y2<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#666666'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#绘制代价函数</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'bo--'</span><span class="token punctuation">)</span><span class="token comment">#绘制代价移动过程</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"函数的求解最小值，初始值为:%d, alpha值为:%.4f; 最终解为:x=%.3f, y=%.3f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>init_x<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/7.png"></p><h3 id="3-三维效果图例"><a href="#3-三维效果图例" class="headerlink" title="3. 三维效果图例"></a>3. 三维效果图例</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/8.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> mpl_toolkits<span class="token punctuation">.</span>mplot3d <span class="token keyword">import</span> Axes3D<span class="token comment"># 设置字符集，防止中文乱码</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">u'simHei'</span><span class="token punctuation">]</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""原函数"""</span>    <span class="token keyword">return</span> x1 <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> x2 <span class="token operator">**</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">g_x1</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""对原函数的x1求导数函数(偏导函数)"""</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> x1<span class="token keyword">def</span> <span class="token function">g_x2</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""对原函数的x2求导数函数(偏导函数)"""</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> x2<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 随机一个初始值</span>    init_x1 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    init_x2 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    x1 <span class="token operator">=</span> init_x1    x2 <span class="token operator">=</span> init_x2    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"初始x1值为:%d; 初始x2值为:%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 初始x1值为:6; 初始x2值为:6</span>        <span class="token comment"># 随机一个学习率</span>    alpha <span class="token operator">=</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"随机的alpha值为:%.4f"</span> <span class="token operator">%</span> alpha<span class="token punctuation">)</span>  <span class="token comment"># 随机的alpha值为:0.0112</span>            <span class="token comment"># 设置一个最大迭代次数</span>    max_iter <span class="token operator">=</span> <span class="token number">100</span>    <span class="token comment"># 进行求解过程</span>    X1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    X2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    Y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    y <span class="token operator">=</span> f<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span>    X1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>    X2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>    Y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    y_change <span class="token operator">=</span> <span class="token number">1</span>        <span class="token comment">#停止条件， 变化值小于e-10次方，或者迭代到达指定次数</span>    <span class="token keyword">while</span> y_change <span class="token operator">&gt;</span> <span class="token number">1e-10</span> <span class="token keyword">and</span> i <span class="token operator">&lt;</span> max_iter<span class="token punctuation">:</span>        <span class="token comment"># 进行梯度下降求解</span>        x1 <span class="token operator">-=</span> alpha <span class="token operator">*</span> g_x1<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>        x2 <span class="token operator">-=</span> alpha <span class="token operator">*</span> g_x2<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>        pre_y<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> f<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span>        y_change <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>pre_y <span class="token operator">-</span> y<span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        X1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>        X2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>        Y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token comment"># 结果输出</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"最终结果:"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 最终结果:(0.622688062862741, 0.622688062862741, 0.7754808472635059)</span>        <span class="token comment"># 画图</span>    max_x1 <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>X1<span class="token punctuation">)</span><span class="token punctuation">)</span>    max_x2 <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>X2<span class="token punctuation">)</span><span class="token punctuation">)</span>    X12 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span>max_x1<span class="token punctuation">,</span> max_x1<span class="token punctuation">,</span> <span class="token number">0.05</span><span class="token punctuation">)</span>    X22 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span>max_x2<span class="token punctuation">,</span> max_x2<span class="token punctuation">,</span> <span class="token number">0.05</span><span class="token punctuation">)</span>    X12<span class="token punctuation">,</span> X22 <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>X12<span class="token punctuation">,</span> X22<span class="token punctuation">)</span>    Y2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> t<span class="token punctuation">:</span> f<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>X12<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> X22<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>X12<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> Axes3D<span class="token punctuation">(</span>fig<span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>plot_surface<span class="token punctuation">(</span>X12<span class="token punctuation">,</span> X22<span class="token punctuation">,</span> Y2<span class="token punctuation">,</span> rstride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cstride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'rainbow'</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X1<span class="token punctuation">,</span> X2<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'ro--'</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span>        <span class="token string">"函数的求解最小值，初始值为:(%d,%d), alpha值为:%.4f; 最终解为:x1=%.3f, x2=%.3f, y=%.3f"</span>         <span class="token operator">%</span> <span class="token punctuation">(</span>init_x1<span class="token punctuation">,</span> init_x2<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/9.png"></p><h3 id="4-评估及度量"><a href="#4-评估及度量" class="headerlink" title="4. 评估及度量"></a>4. 评估及度量</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/10.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/11.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/12.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/13.png"></p><h3 id="5-最小二乘法"><a href="#5-最小二乘法" class="headerlink" title="5. 最小二乘法"></a>5. 最小二乘法</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/14.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/15.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/16.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/17.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/18.png"></p><h3 id="6-正规方程解"><a href="#6-正规方程解" class="headerlink" title="6. 正规方程解"></a>6. 正规方程解</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/19.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/20.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/21.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/22.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/23.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/24.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 是绝对的最优解</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npX <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Y <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8.5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">.</span>T<span class="token operator">*</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span>I<span class="token operator">*</span>X<span class="token punctuation">.</span>T<span class="token operator">*</span>Y<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.85</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.3</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">使用sklearn进行处理操作<span class="token number">1.</span>创建模型<span class="token number">2.</span>拟合数据<span class="token number">3.</span>数据预测<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npX <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Y <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8.5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegressionmodel <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span>fit_intercept<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment">#调用形式，不拟合截距</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span> <span class="token comment">#拟合过程，就包含梯度下降</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'参数为:'</span><span class="token punctuation">,</span> model<span class="token punctuation">.</span>coef_<span class="token punctuation">)</span>  <span class="token comment"># 参数为: [[ 1.85  1.3 ]]</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error <span class="token comment">#模型评估，导入均方误差</span>mean_squared_error<span class="token punctuation">(</span>y_pred<span class="token operator">=</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span>y_true<span class="token operator">=</span>Y<span class="token punctuation">)</span>  <span class="token comment"># 0.083749999999999936</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-特征缩放"><a href="#7-特征缩放" class="headerlink" title="7. 特征缩放"></a>7. 特征缩放</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/25.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/26.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> MinMaxScaler<span class="token punctuation">,</span> StandardScaler <span class="token comment"># precessing 数据预处理</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token comment">#防止anaconda报警告性错误</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token punctuation">[</span><span class="token number">2104</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">399900</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">1600</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">329900</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">2400</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">369000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">1416</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">232000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">539900</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">1985</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">299900</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">#获取前两列数据</span>y <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#获取最后一列数据</span><span class="token comment">#最值归一化处理</span>minmax <span class="token operator">=</span> MinMaxScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#创建模型</span>x1 <span class="token operator">=</span> minmax<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># 拟合数据并计算</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.43434343</span>  <span class="token number">0.5</span>       <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0.11616162</span>  <span class="token number">0.5</span>       <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0.62121212</span>  <span class="token number">0.5</span>       <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0.</span>          <span class="token number">0.</span>        <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">1.</span>          <span class="token number">1.</span>        <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0.35921717</span>  <span class="token number">1.</span>        <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#标准化处理</span>std <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>x2 <span class="token operator">=</span> std<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.03805676</span> <span class="token operator">-</span><span class="token number">0.24253563</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.92903261</span> <span class="token operator">-</span><span class="token number">0.24253563</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0.60602988</span> <span class="token operator">-</span><span class="token number">0.24253563</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.28209698</span> <span class="token operator">-</span><span class="token number">1.69774938</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">1.75732674</span>  <span class="token number">1.21267813</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.19028379</span>  <span class="token number">1.21267813</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-sklearn完成标准线性回归"><a href="#8-sklearn完成标准线性回归" class="headerlink" title="8. sklearn完成标准线性回归"></a>8. sklearn完成标准线性回归</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># pip install sklearn</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split <span class="token comment">#模型评估 留出法</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression<span class="token comment">#线性回归</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token punctuation">,</span> mean_absolute_error<span class="token punctuation">,</span> r2_score<span class="token comment">#评估  mse   mae  r2</span>path <span class="token operator">=</span> <span class="token string">r'../datas/Advertising.csv'</span><span class="token comment"># pandas读入</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment"># 4列数据</span>x <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'TV'</span><span class="token punctuation">,</span> <span class="token string">'Radio'</span><span class="token punctuation">,</span> <span class="token string">'Newspaper'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#将电视广告，广播广告，报纸广告作为特征</span>y <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'Sales'</span><span class="token punctuation">]</span><span class="token comment">#销售额作为标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token comment"># # 绘制样本分布，观察效果（其实报纸不适合用作考虑特征）</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'TV'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'ro'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'TV'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Radio'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'g*'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Radio'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'Newspaper'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'bv'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Newspaer'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'lower right'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/27.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#留出法，进行分割，默认比例7.5:2.5</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 随机种子</span><span class="token comment"># 创建线性回归模型</span>linreg <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>model <span class="token operator">=</span> linreg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token comment">#拟合数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>linreg<span class="token punctuation">.</span>coef_<span class="token punctuation">)</span><span class="token comment">#参数</span><span class="token keyword">print</span><span class="token punctuation">(</span>linreg<span class="token punctuation">.</span>intercept_<span class="token punctuation">)</span><span class="token comment">#截距</span><span class="token punctuation">[</span> <span class="token number">0.04656457</span>  <span class="token number">0.17915812</span>  <span class="token number">0.00345046</span><span class="token punctuation">]</span><span class="token number">2.87696662232</span>y_hat <span class="token operator">=</span> linreg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#模型预测</span><span class="token keyword">print</span><span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_hat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#均方误差</span><span class="token keyword">print</span><span class="token punctuation">(</span>mean_absolute_error<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_hat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#均绝对值误差，度量模型优劣</span><span class="token keyword">print</span><span class="token punctuation">(</span>r2_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_hat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#R方</span><span class="token number">1.97304562023</span><span class="token number">1.06689170826</span><span class="token number">0.915621361379</span>t <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Test'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> y_hat<span class="token punctuation">,</span> <span class="token string">'g-'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Predict'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper right'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/8-xian-xing-hui-gui-2/28.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 线性回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-线性回归1</title>
      <link href="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/"/>
      <url>/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/</url>
      
        <content type="html"><![CDATA[<h3 id="1-机器学习基础"><a href="#1-机器学习基础" class="headerlink" title="1. 机器学习基础"></a>1. 机器学习基础</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/1.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/2.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/3.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/4.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/5.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/6.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/7.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/8.png"></p><h3 id="2-线性回归概述"><a href="#2-线性回归概述" class="headerlink" title="2.  线性回归概述"></a>2.  线性回归概述</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/9.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/10.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/11.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/12.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/13.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/14.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/15.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/16.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/17.png"></p><h3 id="3-代价函数"><a href="#3-代价函数" class="headerlink" title="3. 代价函数"></a>3. 代价函数</h3><h4 id="3-1-最小二乘法"><a href="#3-1-最小二乘法" class="headerlink" title="3.1 最小二乘法"></a>3.1 最小二乘法</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/18.png"></p><h4 id="3-2-代价函数定义"><a href="#3-2-代价函数定义" class="headerlink" title="3.2 代价函数定义"></a>3.2 代价函数定义</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/19.png"></p><h4 id="3-3-代价函数理解"><a href="#3-3-代价函数理解" class="headerlink" title="3.3 代价函数理解"></a>3.3 代价函数理解</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/20.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/21.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/22.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/23.png"></p><h3 id="4-梯度下降"><a href="#4-梯度下降" class="headerlink" title="4. 梯度下降"></a>4. 梯度下降</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/24.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/25.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/26.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/27.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/28.png"></p><h3 id="5-线性回归模型矩阵表达式"><a href="#5-线性回归模型矩阵表达式" class="headerlink" title="5. 线性回归模型矩阵表达式"></a>5. 线性回归模型矩阵表达式</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/29.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/30.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/31.png"></p><h3 id="6-线性回归算法原理的梳理过程"><a href="#6-线性回归算法原理的梳理过程" class="headerlink" title="6. 线性回归算法原理的梳理过程"></a>6. 线性回归算法原理的梳理过程</h3><h4 id="6-1-概念"><a href="#6-1-概念" class="headerlink" title="6.1 概念"></a>6.1 概念</h4><p>1.有监督 2.线性 3.模型 函数</p><h4 id="6-2-运算过程"><a href="#6-2-运算过程" class="headerlink" title="6.2 运算过程"></a>6.2 运算过程</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/32.png"></p><h4 id="6-3-代码"><a href="#6-3-代码" class="headerlink" title="6.3 代码"></a>6.3 代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 数据预处理的过程</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">#获取样本的数量</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>c_<span class="token punctuation">[</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">]</span>  <span class="token comment">#x增加一列</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>y <span class="token operator">=</span> y<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 列向量  #为了后续维度对应，y也做维度变化</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 𝜃的值是随机创建</span>theta <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/33.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 超参数alpha 学习率  步长</span>alpha <span class="token operator">=</span> <span class="token number">0.01</span><span class="token comment">#迭代次数</span>m_iter <span class="token operator">=</span> <span class="token number">1000</span><span class="token comment">#定义一个数组，存储所有的代价数据</span>cost <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>m_iter<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m_iter<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_hat <span class="token operator">=</span> x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token comment">#求预测值</span>    error <span class="token operator">=</span> y_hat <span class="token operator">-</span> y <span class="token comment">#误差值</span>    cost_val <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> m <span class="token operator">*</span>error<span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token comment">#代价值</span>    cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cost_val<span class="token comment">#记录代价值</span>    delta_theta <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> m <span class="token operator">*</span> x<span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token comment">#求导数</span>    theta <span class="token operator">=</span> theta <span class="token operator">-</span> alpha <span class="token operator">*</span> delta_theta<span class="token comment">#更新参数</span><span class="token keyword">print</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span> <span class="token comment">#得到最优解，收敛后的权重</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.70993385</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.39189459</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#使用图形进行演示</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token comment"># x有两列数据</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y_hat<span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">)</span><span class="token comment">#预测模型</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/34.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#代价值的显示</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>cost<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/35.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 最终得到的模型参数</span><span class="token keyword">print</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span> <span class="token comment">#得到最优解，收敛后的权重   </span>y_hat <span class="token operator">=</span> x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>theta<span class="token punctuation">)</span> <span class="token comment">#求预测值 模型函数</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y_hat<span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">)</span><span class="token comment">#预测模型 图像显示</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.70993385</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.39189459</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/7-xian-xing-hui-gui-1/36.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 线性回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-matplotlib</title>
      <link href="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/"/>
      <url>/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/</url>
      
        <content type="html"><![CDATA[<h3 id="1-matplotlib-简介"><a href="#1-matplotlib-简介" class="headerlink" title="1. matplotlib 简介"></a>1. matplotlib 简介</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/1.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/2.png"></p><h4 id="1-1-简易折线图"><a href="#1-1-简易折线图" class="headerlink" title="1.1 简易折线图"></a>1.1 简易折线图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/3.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/4.png"></p><h4 id="1-2-GUI打印"><a href="#1-2-GUI打印" class="headerlink" title="1.2 GUI打印"></a>1.2 GUI打印</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">%</span>matplotlib <span class="token operator">%</span>matplotlib inline    <span class="token comment">#不让可视化</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/5.png"></p><h3 id="2-常用操作"><a href="#2-常用操作" class="headerlink" title="2. 常用操作"></a>2. 常用操作</h3><h4 id="2-1-基础操作"><a href="#2-1-基础操作" class="headerlink" title="2.1 基础操作"></a>2.1 基础操作</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/6.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 绘制3条折线</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/7.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">%</span>matplotlib<span class="token operator">%</span>matplotlib inline    <span class="token comment">#不让可视化</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/8.png"></p><h4 id="2-2-单数据绘制-网格线处理"><a href="#2-2-单数据绘制-网格线处理" class="headerlink" title="2.2 单数据绘制 网格线处理"></a>2.2 单数据绘制 网格线处理</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># x轴使用np.range(n)进行创建，n代表数据长度</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#绘制网格线</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/9.png"></p><h4 id="2-3-格式调整"><a href="#2-3-格式调整" class="headerlink" title="2.3 格式调整"></a>2.3 格式调整</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/10.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/11.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 一个表当中可以不同以区分</span><span class="token comment"># 复杂版</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>linestyle<span class="token operator">=</span><span class="token string">'dashed'</span><span class="token punctuation">,</span>marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/12.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 简写版   颜色 点类型 线型</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'ro--'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'g^-'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'y*:'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/13.png"></p><h4 id="2-4-label-加legend"><a href="#2-4-label-加legend" class="headerlink" title="2.4 label 加legend"></a>2.4 label 加legend</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/14.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># y = 3x +1</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">+</span><span class="token number">1</span><span class="token comment">#绘制图像</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'ro--'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'y=3x+1'</span><span class="token punctuation">)</span><span class="token comment"># plt.legend(loc = 'upper right')</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/15.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># y = x^2</span><span class="token comment"># 绘制带有曲线的图，多取样本点</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>stop<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token operator">**</span><span class="token number">2</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/16.png"></p><h4 id="2-5-其他属性"><a href="#2-5-其他属性" class="headerlink" title="2.5 其他属性"></a>2.5 其他属性</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/17.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>stop<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token comment">#其他属性</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'y = x^2'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># plt.yticks([])   #不显示</span><span class="token comment">#解决中文显示</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>     <span class="token comment">#黑体</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>      <span class="token comment"># 编码格式</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'图像 y = x^2'</span><span class="token punctuation">)</span><span class="token comment">#坐标轴操作</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>   <span class="token comment">#右边变无</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/18.png"></p><h4 id="2-6-子图操作"><a href="#2-6-子图操作" class="headerlink" title="2.6 子图操作"></a>2.6 子图操作</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/19.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建一个一行两列的图像</span><span class="token comment">#生成第一张图</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#生成第二张图</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#生成第三张图</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#生成第四张图</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#figure 添加</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/20.png"></p><h3 id="3-常用图形绘制"><a href="#3-常用图形绘制" class="headerlink" title="3. 常用图形绘制"></a>3. 常用图形绘制</h3><h4 id="3-1-折线图"><a href="#3-1-折线图" class="headerlink" title="3.1 折线图"></a>3.1 折线图</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/21.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/22.png"></p><h4 id="3-2-散点图"><a href="#3-2-散点图" class="headerlink" title="3.2 散点图"></a>3.2 散点图</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/23.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>marker<span class="token operator">=</span><span class="token string">'^'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>edgecolors<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span>marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>edgecolors<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/24.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'../datas/HeightWeight.csv'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'Height(cm)'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>df<span class="token punctuation">[</span><span class="token string">'Weight(kg)'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span> Sex  Height<span class="token punctuation">(</span>cm<span class="token punctuation">)</span>  Weight<span class="token punctuation">(</span>kg<span class="token punctuation">)</span><span class="token number">0</span>    <span class="token number">0</span>       <span class="token number">156.0</span>        <span class="token number">50.0</span><span class="token number">1</span>    <span class="token number">0</span>       <span class="token number">160.0</span>        <span class="token number">60.0</span><span class="token number">2</span>    <span class="token number">0</span>       <span class="token number">162.0</span>        <span class="token number">54.0</span><span class="token number">3</span>    <span class="token number">0</span>       <span class="token number">162.0</span>        <span class="token number">55.0</span><span class="token number">4</span>    <span class="token number">0</span>       <span class="token number">160.5</span>        <span class="token number">56.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/25.png"></p><h4 id="3-3-条形图"><a href="#3-3-条形图" class="headerlink" title="3.3 条形图"></a>3.3 条形图</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/26.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>bottom<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>align<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span>edgecolor<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'black'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token string">'3'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/27.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>barh<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/28.png"></p><h4 id="3-4-直方图"><a href="#3-4-直方图" class="headerlink" title="3.4 直方图"></a>3.4 直方图</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/29.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 统计频次</span><span class="token comment">#density=True 替代normed</span><span class="token comment"># print(help(plt.hist))</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bins<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>density<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'g'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>orientation<span class="token operator">=</span><span class="token string">'horizontal'</span><span class="token punctuation">,</span>align<span class="token operator">=</span><span class="token string">'mid'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/30.png"></p><h4 id="3-5-饼状图"><a href="#3-5-饼状图" class="headerlink" title="3.5 饼状图"></a>3.5 饼状图</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/31.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># labels 要归一化处理  labels 无label   如果求和结果小于1以当前比例，大于1自动归一化</span><span class="token comment"># print(help(plt.pie))</span>plt<span class="token punctuation">.</span>pie<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>autopct<span class="token operator">=</span><span class="token string">'%1.3f%%'</span><span class="token punctuation">,</span>labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>explode<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.05</span><span class="token punctuation">,</span><span class="token number">0.05</span><span class="token punctuation">,</span><span class="token number">0.05</span><span class="token punctuation">]</span><span class="token punctuation">,</span>shadow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>colors<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>startangle<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/32.png"></p><h3 id="4-项目案例"><a href="#4-项目案例" class="headerlink" title="4. 项目案例"></a>4. 项目案例</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/33.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-1-标准正态分布"><a href="#4-1-标准正态分布" class="headerlink" title="4.1 标准正态分布"></a>4.1 标准正态分布</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/34.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 中文显示</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>     <span class="token comment">#黑体</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>      <span class="token comment"># 编码格式</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>stop<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>sigma <span class="token operator">=</span> <span class="token number">1</span>mu <span class="token operator">=</span> <span class="token number">0</span>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token operator">*</span>sigma<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token operator">-</span>mu<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>sigma<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'标准正态分布'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/35.png"></p><h4 id="4-2-饼状图"><a href="#4-2-饼状图" class="headerlink" title="4.2 饼状图"></a>4.2 饼状图</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/36.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">r'../datas/bank.xls'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>贷款号账户号发放贷款日期贷款金额贷款期限每月归还额还款状态<span class="token number">0</span><span class="token number">5314</span><span class="token number">1787</span><span class="token number">1993</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">05</span><span class="token number">96396</span><span class="token number">12</span><span class="token number">8033</span>B<span class="token number">1</span><span class="token number">5316</span><span class="token number">1801</span><span class="token number">1993</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">11</span><span class="token number">165960</span><span class="token number">36</span><span class="token number">4610</span>A<span class="token number">2</span><span class="token number">6863</span><span class="token number">9188</span><span class="token number">1993</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">28</span><span class="token number">127080</span><span class="token number">60</span><span class="token number">2118</span>A<span class="token number">3</span><span class="token number">5325</span><span class="token number">1843</span><span class="token number">1993</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">03</span><span class="token number">105804</span><span class="token number">36</span><span class="token number">2939</span>A<span class="token number">4</span><span class="token number">7240</span><span class="token number">11013</span><span class="token number">1993</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">06</span><span class="token number">274740</span><span class="token number">60</span><span class="token number">4579</span>A<span class="token comment"># 统计类别数量</span>x <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'还款状态'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>xC    <span class="token number">403</span>A    <span class="token number">203</span>D     <span class="token number">45</span>B     <span class="token number">31</span>Name<span class="token punctuation">:</span> 还款状态<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64        <span class="token operator">%</span>matplotlib<span class="token operator">%</span>matplotlib inline plt<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>x<span class="token punctuation">,</span>autopct<span class="token operator">=</span><span class="token string">'%1.2f%%'</span><span class="token punctuation">,</span>labels<span class="token operator">=</span>x<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>shadow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc <span class="token operator">=</span> <span class="token string">'upper left'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'还款状态占比'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/6-matplotlib/37.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-pandas</title>
      <link href="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/"/>
      <url>/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/</url>
      
        <content type="html"><![CDATA[<h3 id="1-pandas基础"><a href="#1-pandas基础" class="headerlink" title="1. pandas基础"></a>1. pandas基础</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/1.png"></p><h4 id="1-1-数据结构"><a href="#1-1-数据结构" class="headerlink" title="1.1 数据结构"></a>1.1 数据结构</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/2.png"></p><h4 id="1-2-series"><a href="#1-2-series" class="headerlink" title="1.2 series"></a>1.2 series</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/3.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/4.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#ndarray 创建Series</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token number">0</span>    <span class="token number">5</span><span class="token number">1</span>    <span class="token number">3</span><span class="token number">2</span>    <span class="token number">7</span>dtype<span class="token punctuation">:</span> int32RangeIndex<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> stop<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 常数创建Series</span>s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token comment">#修改索引值</span>s3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token number">0</span>    <span class="token number">5</span><span class="token number">1</span>    <span class="token number">5</span><span class="token number">2</span>    <span class="token number">5</span><span class="token number">3</span>    <span class="token number">5</span><span class="token number">4</span>    <span class="token number">5</span>dtype<span class="token punctuation">:</span> int64a    <span class="token number">1</span>b    <span class="token number">2</span>c    <span class="token number">3</span>dtype<span class="token punctuation">:</span> int64Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token comment"># 使用字典创建</span>s4 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span>a    <span class="token number">3.0</span>b    <span class="token number">4.0</span>c    <span class="token number">5.0</span>dtype<span class="token punctuation">:</span> float32    <span class="token comment"># 访问数据</span><span class="token comment">#查找s4数值为5的结果</span><span class="token comment">#索引号查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>s4<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#索引顺序值查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>s4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">5.0</span><span class="token number">5.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-DataFrame"><a href="#1-3-DataFrame" class="headerlink" title="1.3 DataFrame"></a>1.3 DataFrame</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/5.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/6.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ndarry 方式</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'qw'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'ws'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'ed'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>a<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'姓名'</span><span class="token punctuation">,</span><span class="token string">'年龄'</span><span class="token punctuation">,</span><span class="token string">'性别'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">)</span>df1   姓名  年龄 性别<span class="token number">0</span>  qw  <span class="token number">15</span>  男<span class="token number">1</span>  ws  <span class="token number">12</span>  女<span class="token number">2</span>  ed  <span class="token number">23</span>  男姓名年龄性别<span class="token number">0</span>qw<span class="token number">15</span>男<span class="token number">1</span>ws<span class="token number">12</span>女<span class="token number">2</span>ed<span class="token number">23</span>男<span class="token comment"># 字典方式        键 列明           值 一列的数据</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'ws'</span><span class="token punctuation">,</span><span class="token string">'we'</span><span class="token punctuation">,</span><span class="token string">'rf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'n'</span><span class="token punctuation">,</span><span class="token string">'v'</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df2nameagesex<span class="token number">0</span>ws<span class="token number">12</span>n<span class="token number">1</span>we<span class="token number">14</span>v<span class="token number">2</span>rf<span class="token number">15</span>n<span class="token comment"># 打印列名</span>df1<span class="token punctuation">.</span>columnsIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span> <span class="token string">'性别'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-索引"><a href="#1-4-索引" class="headerlink" title="1.4 索引"></a>1.4 索引</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/7.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打印name 列的数据   单列</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">[</span><span class="token string">'姓名'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">0</span>    qw<span class="token number">1</span>    ws<span class="token number">2</span>    edName<span class="token punctuation">:</span> 姓名<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> <span class="token builtin">object</span>        <span class="token comment"># 打印name  age 列的数据  多列   双中括号</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'姓名'</span><span class="token punctuation">,</span><span class="token string">'年龄'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   姓名  年龄<span class="token number">0</span>  qw  <span class="token number">15</span><span class="token number">1</span>  ws  <span class="token number">12</span><span class="token number">2</span>  ed  <span class="token number">23</span><span class="token comment"># 列添加     有修改 无增加</span>df1<span class="token punctuation">[</span><span class="token string">'爱好'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>df1姓名年龄性别爱好<span class="token number">0</span>qw<span class="token number">15</span>男<span class="token number">1</span><span class="token number">1</span>ws<span class="token number">12</span>女<span class="token number">2</span><span class="token number">2</span>ed<span class="token number">23</span>男<span class="token number">3</span><span class="token comment"># 列 修改 </span>df1<span class="token punctuation">[</span><span class="token string">'爱好'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df1<span class="token punctuation">[</span><span class="token string">'爱好'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">100</span>df1姓名年龄性别爱好<span class="token number">0</span>qw<span class="token number">15</span>男<span class="token number">101</span><span class="token number">1</span>ws<span class="token number">12</span>女<span class="token number">102</span><span class="token number">2</span>ed<span class="token number">23</span>男<span class="token number">103</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/8.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 列删除  del</span><span class="token keyword">del</span> df1<span class="token punctuation">[</span><span class="token string">'爱好'</span><span class="token punctuation">]</span>df1姓名年龄性别<span class="token number">0</span>qw<span class="token number">15</span>男<span class="token number">1</span>ws<span class="token number">12</span>女<span class="token number">2</span>ed<span class="token number">23</span>男<span class="token comment"># 列删除 inplace为True</span>df1<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token string">'性别'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df1姓名年龄<span class="token number">0</span>qw<span class="token number">15</span><span class="token number">1</span>ws<span class="token number">12</span><span class="token number">2</span>ed<span class="token number">23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/9.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 行选择 选择第一行数据</span>df1<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>姓名    qw年龄    <span class="token number">15</span>Name<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> <span class="token builtin">object</span>        <span class="token comment"># 支持切片操作</span><span class="token comment">#查询后2行数据</span>df1<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>姓名年龄<span class="token number">1</span>ws<span class="token number">12</span><span class="token number">2</span>ed<span class="token number">23</span><span class="token comment">#行添加   ignore_index=True, ,verify_integrity=True</span>df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'姓名'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'edefr'</span><span class="token punctuation">,</span><span class="token string">'wsecerf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'年龄'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df3姓名年龄<span class="token number">0</span>edefr<span class="token number">123</span><span class="token number">1</span>wsecerf<span class="token number">456</span><span class="token comment"># verify_integrity=True 验证后添加的数据是否存在相同的索引值，有报错</span><span class="token comment"># ignore_index=True 忽略报错，不能添加相同的索引值  添加新的索引</span><span class="token comment"># ignore_index=False 忽略报错，添加相同的索引值  </span>df1 <span class="token operator">=</span> df1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>df3<span class="token punctuation">,</span>ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment">#不修改原数据，需要重新赋值</span>df1姓名年龄<span class="token number">0</span>qw<span class="token number">15</span><span class="token number">1</span>ws<span class="token number">12</span><span class="token number">2</span>ed<span class="token number">23</span><span class="token number">3</span>edefr<span class="token number">123</span><span class="token number">4</span>wsecerf<span class="token number">456</span><span class="token comment">#行删除</span>df1<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df1姓名年龄<span class="token number">0</span>qw<span class="token number">15</span><span class="token number">2</span>ed<span class="token number">23</span><span class="token number">3</span>edefr<span class="token number">123</span><span class="token number">4</span>wsecerf<span class="token number">456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-外部数据获取"><a href="#2-外部数据获取" class="headerlink" title="2. 外部数据获取"></a>2. 外部数据获取</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/10.png"></p><h4 id="2-1-读取csv文件"><a href="#2-1-读取csv文件" class="headerlink" title="2.1 读取csv文件"></a>2.1 读取csv文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#相对路径   当前位置 返回上一级菜单  进入datas文件夹  找到xigua.csv文件     r转移字符串</span><span class="token comment">#csv txt dat 都可以</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'../datas/xigua.csv'</span><span class="token punctuation">)</span>     df1<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>x1x2x3labelscore<span class="token number">0</span>青绿<span class="token number">0.697</span><span class="token number">0.460</span><span class="token number">0</span><span class="token number">71</span><span class="token number">1</span>乌黑<span class="token number">0.774</span><span class="token number">0.376</span><span class="token number">0</span><span class="token number">92</span><span class="token number">2</span>乌黑<span class="token number">0.634</span><span class="token number">0.264</span><span class="token number">0</span><span class="token number">86</span><span class="token number">3</span>青绿<span class="token number">0.608</span><span class="token number">0.318</span><span class="token number">0</span><span class="token number">79</span><span class="token number">4</span>浅白<span class="token number">0.556</span><span class="token number">0.215</span><span class="token number">0</span><span class="token number">91</span><span class="token comment">#header none 没有字段信息</span><span class="token comment"># names=['x11','x12','x13','x14','x15']  设置字段名称</span><span class="token comment"># delimiter=',' 设置分割形式</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'../datas/xigua.csv'</span><span class="token punctuation">,</span>header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'x11'</span><span class="token punctuation">,</span><span class="token string">'x12'</span><span class="token punctuation">,</span><span class="token string">'x13'</span><span class="token punctuation">,</span><span class="token string">'x14'</span><span class="token punctuation">,</span><span class="token string">'x15'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>delimiter<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>     df2<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>x11x12x13x14x15<span class="token number">0</span>x1x2x3labelscore<span class="token number">1</span>青绿<span class="token number">0.697</span><span class="token number">0.46</span><span class="token number">0</span><span class="token number">71</span><span class="token number">2</span>乌黑<span class="token number">0.774</span><span class="token number">0.376</span><span class="token number">0</span><span class="token number">92</span><span class="token number">3</span>乌黑<span class="token number">0.634</span><span class="token number">0.264</span><span class="token number">0</span><span class="token number">86</span><span class="token number">4</span>青绿<span class="token number">0.608</span><span class="token number">0.318</span><span class="token number">0</span><span class="token number">79</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-读取excel文件"><a href="#2-2-读取excel文件" class="headerlink" title="2.2 读取excel文件"></a>2.2 读取excel文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 默认第一个数据表</span>df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">r'../datas/ftx.xls'</span><span class="token punctuation">)</span>df3<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>年月销售区域销售数量<span class="token number">0</span><span class="token number">2009</span><span class="token number">1</span>广州<span class="token number">70</span><span class="token number">1</span><span class="token number">2009</span><span class="token number">1</span>南宁<span class="token number">25</span><span class="token number">2</span><span class="token number">2009</span><span class="token number">1</span>北京<span class="token number">17</span><span class="token number">3</span><span class="token number">2009</span><span class="token number">1</span>广州<span class="token number">99</span><span class="token number">4</span><span class="token number">2009</span><span class="token number">1</span>北京<span class="token number">43</span><span class="token comment"># 读取其他的数据表</span>df4 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">r'../datas/销售情况统计表.xlsx'</span><span class="token punctuation">,</span>sheet_name<span class="token operator">=</span><span class="token string">'Sheet1'</span><span class="token punctuation">)</span>df4<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>区域省份客户类型客户年份季度大品类产品名称开票金额<span class="token number">0</span>西南重庆连锁超市丁先庆<span class="token number">2009</span>2009_Q1日用品海鸥牌洗发水<span class="token number">44100</span><span class="token number">1</span>西南重庆连锁超市燕天<span class="token number">2009</span>2009_Q1日用品海鸥牌洗发水<span class="token number">55233</span><span class="token number">2</span>西南重庆连锁超市游堂志<span class="token number">2009</span>2009_Q1日用品海鸥牌洗发水<span class="token number">27088</span><span class="token number">3</span>西南重庆批发市场刁永致<span class="token number">2009</span>2009_Q1餐饮特级酱油<span class="token number">14907</span><span class="token number">4</span>西南重庆批发市场云园<span class="token number">2009</span>2009_Q1日用品丽水香皂<span class="token number">10757</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-生成-excel"><a href="#2-3-生成-excel" class="headerlink" title="2.3 生成 excel"></a>2.3 生成 excel</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># print(help(pd.to_excel))</span>df1<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'test.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-数据查找"><a href="#3-数据查找" class="headerlink" title="3. 数据查找"></a>3. 数据查找</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/11.png"></p><h4 id="3-1-显示数据相关信息"><a href="#3-1-显示数据相关信息" class="headerlink" title="3.1 显示数据相关信息"></a>3.1 显示数据相关信息</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">r'../datas/ftx.xls'</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">#前5行</span>年  月 销售区域  销售数量<span class="token number">0</span>  <span class="token number">2009</span>  <span class="token number">1</span>   广州    <span class="token number">70</span><span class="token number">1</span>  <span class="token number">2009</span>  <span class="token number">1</span>   南宁    <span class="token number">25</span><span class="token number">2</span>  <span class="token number">2009</span>  <span class="token number">1</span>   北京    <span class="token number">17</span><span class="token number">3</span>  <span class="token number">2009</span>  <span class="token number">1</span>   广州    <span class="token number">99</span><span class="token number">4</span>  <span class="token number">2009</span>  <span class="token number">1</span>   北京    <span class="token number">43</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">#后5行</span>    年   月 销售区域  销售数量<span class="token number">3309</span>  <span class="token number">2010</span>  <span class="token number">10</span>   广州    <span class="token number">35</span><span class="token number">3310</span>  <span class="token number">2010</span>  <span class="token number">10</span>   沈阳    <span class="token number">23</span><span class="token number">3311</span>  <span class="token number">2010</span>  <span class="token number">10</span>   广州    <span class="token number">34</span><span class="token number">3312</span>  <span class="token number">2010</span>  <span class="token number">10</span>   广州    <span class="token number">24</span><span class="token number">3313</span>  <span class="token number">2010</span>  <span class="token number">10</span>   广州    <span class="token number">35</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">#查看数据信息</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'pandas.core.frame.DataFrame'</span><span class="token operator">&gt;</span>RangeIndex<span class="token punctuation">:</span> <span class="token number">3314</span> entries<span class="token punctuation">,</span> <span class="token number">0</span> to <span class="token number">3313</span>Data columns <span class="token punctuation">(</span>total <span class="token number">4</span> columns<span class="token punctuation">)</span><span class="token punctuation">:</span>年       <span class="token number">3314</span> non<span class="token operator">-</span>null int64月       <span class="token number">3314</span> non<span class="token operator">-</span>null int64销售区域    <span class="token number">3314</span> non<span class="token operator">-</span>null <span class="token builtin">object</span>销售数量    <span class="token number">3314</span> non<span class="token operator">-</span>null int64dtypes<span class="token punctuation">:</span> int64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>memory usage<span class="token punctuation">:</span> <span class="token number">103.7</span><span class="token operator">+</span> KB<span class="token boolean">None</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#帮助分析离群值（异常值），特征的分布情况</span>       年           月         销售数量count  <span class="token number">3314.000000</span>  <span class="token number">3314.00000</span>  <span class="token number">3314.000000</span>mean   <span class="token number">2009.561255</span>     <span class="token number">5.61889</span>    <span class="token number">60.462885</span>std       <span class="token number">0.496308</span>     <span class="token number">3.41114</span>    <span class="token number">93.756123</span><span class="token builtin">min</span>    <span class="token number">2009.000000</span>     <span class="token number">1.00000</span>     <span class="token number">1.000000</span><span class="token number">25</span><span class="token operator">%</span>    <span class="token number">2009.000000</span>     <span class="token number">3.00000</span>    <span class="token number">19.000000</span><span class="token number">50</span><span class="token operator">%</span>    <span class="token number">2010.000000</span>     <span class="token number">5.00000</span>    <span class="token number">40.000000</span><span class="token number">75</span><span class="token operator">%</span>    <span class="token number">2010.000000</span>     <span class="token number">8.00000</span>    <span class="token number">72.000000</span><span class="token builtin">max</span>    <span class="token number">2010.000000</span>    <span class="token number">12.00000</span>  <span class="token number">1810.000000</span>df1年月销售区域销售数量<span class="token number">0</span><span class="token number">2009</span><span class="token number">1</span>广州<span class="token number">70</span><span class="token number">1</span><span class="token number">2009</span><span class="token number">1</span>南宁<span class="token number">25</span><span class="token number">2</span><span class="token number">2009</span><span class="token number">1</span>北京<span class="token number">17</span><span class="token number">3</span><span class="token number">2009</span><span class="token number">1</span>广州<span class="token number">99</span><span class="token number">4</span><span class="token number">2009</span><span class="token number">1</span>北京<span class="token number">43</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3309</span><span class="token number">2010</span><span class="token number">10</span>广州<span class="token number">35</span><span class="token number">3310</span><span class="token number">2010</span><span class="token number">10</span>沈阳<span class="token number">23</span><span class="token number">3311</span><span class="token number">2010</span><span class="token number">10</span>广州<span class="token number">34</span><span class="token number">3312</span><span class="token number">2010</span><span class="token number">10</span>广州<span class="token number">24</span><span class="token number">3313</span><span class="token number">2010</span><span class="token number">10</span>广州<span class="token number">35</span><span class="token number">3314</span> rows × <span class="token number">4</span> columns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-显示某种信息值-精准查询"><a href="#3-2-显示某种信息值-精准查询" class="headerlink" title="3.2 显示某种信息值 精准查询"></a>3.2 显示某种信息值 精准查询</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">df1<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>年月销售区域销售数量<span class="token number">0</span><span class="token number">2009</span><span class="token number">1</span>广州<span class="token number">70</span><span class="token number">1</span><span class="token number">2009</span><span class="token number">1</span>南宁<span class="token number">25</span><span class="token number">2</span><span class="token number">2009</span><span class="token number">1</span>北京<span class="token number">17</span><span class="token number">3</span><span class="token number">2009</span><span class="token number">1</span>广州<span class="token number">99</span><span class="token number">4</span><span class="token number">2009</span><span class="token number">1</span>北京<span class="token number">43</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-条件查找"><a href="#3-3-条件查找" class="headerlink" title="3.3 条件查找"></a>3.3 条件查找</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#  查询所有销售区域是北京的数据    条件查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">[</span>df1<span class="token punctuation">[</span><span class="token string">'销售区域'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'北京'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>年   月 销售区域  销售数量<span class="token number">2</span>     <span class="token number">2009</span>   <span class="token number">1</span>   北京    <span class="token number">17</span><span class="token number">4</span>     <span class="token number">2009</span>   <span class="token number">1</span>   北京    <span class="token number">43</span><span class="token number">9</span>     <span class="token number">2009</span>   <span class="token number">1</span>   北京    <span class="token number">77</span><span class="token number">12</span>    <span class="token number">2009</span>   <span class="token number">1</span>   北京    <span class="token number">18</span><span class="token number">21</span>    <span class="token number">2009</span>   <span class="token number">1</span>   北京    <span class="token number">45</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3279</span>  <span class="token number">2010</span>  <span class="token number">10</span>   北京     <span class="token number">2</span><span class="token number">3281</span>  <span class="token number">2010</span>  <span class="token number">10</span>   北京     <span class="token number">4</span><span class="token number">3292</span>  <span class="token number">2010</span>  <span class="token number">10</span>   北京    <span class="token number">70</span><span class="token number">3296</span>  <span class="token number">2010</span>  <span class="token number">10</span>   北京     <span class="token number">4</span><span class="token number">3307</span>  <span class="token number">2010</span>  <span class="token number">10</span>   北京    <span class="token number">96</span><span class="token punctuation">[</span><span class="token number">412</span> rows x <span class="token number">4</span> columns<span class="token punctuation">]</span><span class="token comment">#  查询销售数量值为4和10的数据信息    条件查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">[</span>df1<span class="token punctuation">[</span><span class="token string">'销售数量'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>年   月 销售区域  销售数量<span class="token number">58</span>    <span class="token number">2009</span>   <span class="token number">1</span>   杭州    <span class="token number">10</span><span class="token number">121</span>   <span class="token number">2009</span>   <span class="token number">1</span>   南宁    <span class="token number">10</span><span class="token number">351</span>   <span class="token number">2009</span>   <span class="token number">4</span>   沈阳    <span class="token number">10</span><span class="token number">385</span>   <span class="token number">2009</span>   <span class="token number">4</span>   北京    <span class="token number">10</span><span class="token number">417</span>   <span class="token number">2009</span>   <span class="token number">4</span>   杭州    <span class="token number">10</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3255</span>  <span class="token number">2010</span>  <span class="token number">10</span>   广州     <span class="token number">4</span><span class="token number">3271</span>  <span class="token number">2010</span>  <span class="token number">10</span>   杭州    <span class="token number">10</span><span class="token number">3280</span>  <span class="token number">2010</span>  <span class="token number">10</span>   南昌     <span class="token number">4</span><span class="token number">3281</span>  <span class="token number">2010</span>  <span class="token number">10</span>   北京     <span class="token number">4</span><span class="token number">3296</span>  <span class="token number">2010</span>  <span class="token number">10</span>   北京     <span class="token number">4</span><span class="token punctuation">[</span><span class="token number">138</span> rows x <span class="token number">4</span> columns<span class="token punctuation">]</span><span class="token comment">#   &gt;   &lt;   &gt;=    &lt;=    条件查找</span><span class="token comment">#查询销售数量大于100的信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">[</span>df1<span class="token punctuation">[</span><span class="token string">'销售数量'</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span>年   月 销售区域  销售数量<span class="token number">1143</span>  <span class="token number">2009</span>  <span class="token number">11</span>   北京   <span class="token number">495</span><span class="token number">1144</span>  <span class="token number">2009</span>  <span class="token number">11</span>   北京   <span class="token number">250</span><span class="token number">1145</span>  <span class="token number">2009</span>  <span class="token number">11</span>   北京   <span class="token number">143</span><span class="token number">1150</span>  <span class="token number">2009</span>  <span class="token number">11</span>   南昌   <span class="token number">175</span><span class="token number">1151</span>  <span class="token number">2009</span>  <span class="token number">11</span>   成都   <span class="token number">260</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3288</span>  <span class="token number">2010</span>  <span class="token number">10</span>   沈阳   <span class="token number">170</span><span class="token number">3289</span>  <span class="token number">2010</span>  <span class="token number">10</span>   广州   <span class="token number">150</span><span class="token number">3295</span>  <span class="token number">2010</span>  <span class="token number">10</span>   沈阳   <span class="token number">116</span><span class="token number">3306</span>  <span class="token number">2010</span>  <span class="token number">10</span>   沈阳   <span class="token number">240</span><span class="token number">3308</span>  <span class="token number">2010</span>  <span class="token number">10</span>   广州   <span class="token number">156</span><span class="token punctuation">[</span><span class="token number">353</span> rows x <span class="token number">4</span> columns<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-逻辑查找"><a href="#3-4-逻辑查找" class="headerlink" title="3.4 逻辑查找"></a>3.4 逻辑查找</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#  逻辑与 &amp;    或\       </span><span class="token comment">#查询北京地区，销售数量为10的所有信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">[</span> <span class="token punctuation">(</span>df1<span class="token punctuation">[</span><span class="token string">'销售数量'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>df1<span class="token punctuation">[</span><span class="token string">'销售区域'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'北京'</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>年  月 销售区域  销售数量<span class="token number">385</span>   <span class="token number">2009</span>  <span class="token number">4</span>   北京    <span class="token number">10</span><span class="token number">1860</span>  <span class="token number">2010</span>  <span class="token number">2</span>   北京    <span class="token number">10</span><span class="token number">2076</span>  <span class="token number">2010</span>  <span class="token number">3</span>   北京    <span class="token number">10</span><span class="token number">2210</span>  <span class="token number">2010</span>  <span class="token number">3</span>   北京    <span class="token number">10</span><span class="token number">2393</span>  <span class="token number">2010</span>  <span class="token number">4</span>   北京    <span class="token number">10</span><span class="token number">2557</span>  <span class="token number">2010</span>  <span class="token number">6</span>   北京    <span class="token number">10</span><span class="token number">2841</span>  <span class="token number">2010</span>  <span class="token number">8</span>   北京    <span class="token number">10</span><span class="token number">3053</span>  <span class="token number">2010</span>  <span class="token number">9</span>   北京    <span class="token number">10</span><span class="token number">3226</span>  <span class="token number">2010</span>  <span class="token number">9</span>   北京    <span class="token number">10</span><span class="token number">3237</span>  <span class="token number">2010</span>  <span class="token number">9</span>   北京    <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-缺省值处理"><a href="#4-缺省值处理" class="headerlink" title="4. 缺省值处理"></a>4. 缺省值处理</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/12.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/13.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>np<span class="token punctuation">.</span>NAN<span class="token punctuation">)</span> <span class="token comment"># nan</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'loss.csv'</span><span class="token punctuation">)</span>dfnameagesexscoreheight<span class="token number">0</span>tom<span class="token number">12</span>mNaN<span class="token number">167.0</span><span class="token number">1</span>ws<span class="token number">23</span>m<span class="token number">90.0</span><span class="token number">168.0</span><span class="token number">2</span>wsd<span class="token number">12</span>n<span class="token number">89.0</span>NaN<span class="token comment"># 查询缺失值</span>df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span>nameagesexscoreheight<span class="token number">0</span><span class="token boolean">False</span><span class="token boolean">False</span><span class="token boolean">False</span><span class="token boolean">True</span><span class="token boolean">False</span><span class="token number">1</span><span class="token boolean">False</span><span class="token boolean">False</span><span class="token boolean">False</span><span class="token boolean">False</span><span class="token boolean">False</span><span class="token number">2</span><span class="token boolean">False</span><span class="token boolean">False</span><span class="token boolean">False</span><span class="token boolean">False</span><span class="token boolean">True</span><span class="token comment">#score 有缺失的打印</span>df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>nameagesexscoreheight<span class="token number">0</span>tom<span class="token number">12</span>mNaN<span class="token number">167.0</span><span class="token comment">#score 无缺失的打印</span>df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>nameagesexscoreheight<span class="token number">1</span>ws<span class="token number">23</span>m<span class="token number">90.0</span><span class="token number">168.0</span><span class="token number">2</span>wsd<span class="token number">12</span>n<span class="token number">89.0</span>NaN<span class="token comment"># 查看有缺失值的列</span><span class="token comment"># 通过info函数处理</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#查看信息 info</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'pandas.core.frame.DataFrame'</span><span class="token operator">&gt;</span>RangeIndex<span class="token punctuation">:</span> <span class="token number">3</span> entries<span class="token punctuation">,</span> <span class="token number">0</span> to <span class="token number">2</span>Data columns <span class="token punctuation">(</span>total <span class="token number">5</span> columns<span class="token punctuation">)</span><span class="token punctuation">:</span>name      <span class="token number">3</span> non<span class="token operator">-</span>null <span class="token builtin">object</span>age       <span class="token number">3</span> non<span class="token operator">-</span>null int64sex       <span class="token number">3</span> non<span class="token operator">-</span>null <span class="token builtin">object</span>score     <span class="token number">2</span> non<span class="token operator">-</span>null float64height    <span class="token number">2</span> non<span class="token operator">-</span>null float64dtypes<span class="token punctuation">:</span> float64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>memory usage<span class="token punctuation">:</span> <span class="token number">248.0</span><span class="token operator">+</span> <span class="token builtin">bytes</span>    <span class="token comment"># 通过代码输出写出来    </span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#输出个数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'***'</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">#变成布尔值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'***'</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">[</span>df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">]</span>     <span class="token comment">#输出缺失值的列</span>name      <span class="token number">0</span>age       <span class="token number">0</span>sex       <span class="token number">0</span>score     <span class="token number">1</span>height    <span class="token number">1</span>dtype<span class="token punctuation">:</span> int64<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>name      <span class="token boolean">False</span>age       <span class="token boolean">False</span>sex       <span class="token boolean">False</span>score      <span class="token boolean">True</span>height     <span class="token boolean">True</span>dtype<span class="token punctuation">:</span> <span class="token builtin">bool</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">,</span> <span class="token string">'height'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token comment"># 打印缺失值比例</span><span class="token comment"># 处理方式 删除 添加</span><span class="token comment"># 通过比例选择不同的缺失值处理方式</span><span class="token comment"># score缺失值的比例</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">0.3333333333333333</span><span class="token comment"># 缺失值处理</span><span class="token comment"># 填充</span>df<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment">#针对列</span>dfnameagesexscoreheight<span class="token number">0</span>tom<span class="token number">12</span>m<span class="token number">95.0</span><span class="token number">167.0</span><span class="token number">1</span>ws<span class="token number">23</span>m<span class="token number">90.0</span><span class="token number">168.0</span><span class="token number">2</span>wsd<span class="token number">12</span>n<span class="token number">89.0</span>NaN<span class="token comment"># 去除缺失值</span><span class="token comment">#去除缺失值位置的行信息</span><span class="token comment">#如果缺失值的比例过大，不易使用</span>df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>  nameagesexscoreheight<span class="token number">0</span>tom<span class="token number">12</span>m<span class="token number">95.0</span><span class="token number">167.0</span><span class="token number">1</span>ws<span class="token number">23</span>m<span class="token number">90.0</span><span class="token number">168.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-数据统计"><a href="#5-数据统计" class="headerlink" title="5. 数据统计"></a>5. 数据统计</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/14.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">r'../datas/ftx.xls'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>年月销售区域销售数量<span class="token number">0</span><span class="token number">2009</span><span class="token number">1</span>广州<span class="token number">70</span><span class="token number">1</span><span class="token number">2009</span><span class="token number">1</span>南宁<span class="token number">25</span><span class="token number">2</span><span class="token number">2009</span><span class="token number">1</span>北京<span class="token number">17</span><span class="token number">3</span><span class="token number">2009</span><span class="token number">1</span>广州<span class="token number">99</span><span class="token number">4</span><span class="token number">2009</span><span class="token number">1</span>北京<span class="token number">43</span><span class="token comment">#  查询北京2009年1月的销售数量  的个数          count</span>df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'年'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2009</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'月'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'销售区域'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'销售数量'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 14</span><span class="token comment">#  查询北京2009年1月的销售数量  的总和       sum</span>sals_sum <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'年'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2009</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'月'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'销售区域'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'销售数量'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'北京2009年1月的销售数量的总和为：{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sals_sum<span class="token punctuation">)</span><span class="token punctuation">)</span>北京<span class="token number">2009</span>年<span class="token number">1</span>月的销售数量的总和为：<span class="token number">727</span><span class="token comment"># 频数统计</span><span class="token comment">## 数据种个销售区域的订单数</span>df<span class="token punctuation">[</span><span class="token string">'销售区域'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>沈阳    <span class="token number">600</span>杭州    <span class="token number">509</span>广州    <span class="token number">428</span>成都    <span class="token number">426</span>北京    <span class="token number">412</span>南宁    <span class="token number">405</span>上海    <span class="token number">273</span>南昌    <span class="token number">261</span>Name<span class="token punctuation">:</span> 销售区域<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64        <span class="token comment"># 各销售区域的订单比例</span>df<span class="token punctuation">[</span><span class="token string">'销售区域'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>沈阳    <span class="token number">0.181050</span>杭州    <span class="token number">0.153591</span>广州    <span class="token number">0.129149</span>成都    <span class="token number">0.128546</span>北京    <span class="token number">0.124321</span>南宁    <span class="token number">0.122209</span>上海    <span class="token number">0.082378</span>南昌    <span class="token number">0.078757</span>Name<span class="token punctuation">:</span> 销售区域<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64        <span class="token comment"># 排序</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'销售数量'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment">#降序</span>df年月销售区域销售数量<span class="token number">1497</span><span class="token number">2010</span><span class="token number">1</span>北京<span class="token number">1810</span><span class="token number">1337</span><span class="token number">2009</span><span class="token number">12</span>北京<span class="token number">1659</span><span class="token number">1498</span><span class="token number">2010</span><span class="token number">1</span>北京<span class="token number">1180</span><span class="token number">1514</span><span class="token number">2010</span><span class="token number">1</span>杭州<span class="token number">1175</span><span class="token number">1499</span><span class="token number">2010</span><span class="token number">1</span>成都<span class="token number">1169</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2269</span><span class="token number">2010</span><span class="token number">3</span>南宁<span class="token number">1</span><span class="token number">2394</span><span class="token number">2010</span><span class="token number">4</span>北京<span class="token number">1</span><span class="token number">1305</span><span class="token number">2009</span><span class="token number">12</span>杭州<span class="token number">1</span><span class="token number">2523</span><span class="token number">2010</span><span class="token number">5</span>南宁<span class="token number">1</span><span class="token number">1990</span><span class="token number">2010</span><span class="token number">2</span>杭州<span class="token number">1</span><span class="token number">3314</span> rows × <span class="token number">4</span> columnsdf<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'销售数量'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment">#   升序</span>df年月销售区域销售数量<span class="token number">1990</span><span class="token number">2010</span><span class="token number">2</span>杭州<span class="token number">1</span><span class="token number">1066</span><span class="token number">2009</span><span class="token number">10</span>成都<span class="token number">1</span><span class="token number">1072</span><span class="token number">2009</span><span class="token number">10</span>北京<span class="token number">1</span><span class="token number">1154</span><span class="token number">2009</span><span class="token number">11</span>南宁<span class="token number">1</span><span class="token number">1160</span><span class="token number">2009</span><span class="token number">11</span>上海<span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1499</span><span class="token number">2010</span><span class="token number">1</span>成都<span class="token number">1169</span><span class="token number">1514</span><span class="token number">2010</span><span class="token number">1</span>杭州<span class="token number">1175</span><span class="token number">1498</span><span class="token number">2010</span><span class="token number">1</span>北京<span class="token number">1180</span><span class="token number">1337</span><span class="token number">2009</span><span class="token number">12</span>北京<span class="token number">1659</span><span class="token number">1497</span><span class="token number">2010</span><span class="token number">1</span>北京<span class="token number">1810</span><span class="token number">3314</span> rows × <span class="token number">4</span> columnsdf<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'销售区域'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment">#   升序   根据AscII码排序</span>df年月销售区域销售数量<span class="token number">404</span><span class="token number">2009</span><span class="token number">4</span>上海<span class="token number">41</span><span class="token number">19</span><span class="token number">2009</span><span class="token number">1</span>上海<span class="token number">40</span><span class="token number">1954</span><span class="token number">2010</span><span class="token number">2</span>上海<span class="token number">10</span><span class="token number">2011</span><span class="token number">2010</span><span class="token number">2</span>上海<span class="token number">18</span><span class="token number">3251</span><span class="token number">2010</span><span class="token number">9</span>上海<span class="token number">23</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">660</span><span class="token number">2009</span><span class="token number">6</span>沈阳<span class="token number">87</span><span class="token number">768</span><span class="token number">2009</span><span class="token number">7</span>沈阳<span class="token number">87</span><span class="token number">715</span><span class="token number">2009</span><span class="token number">7</span>沈阳<span class="token number">87</span><span class="token number">2768</span><span class="token number">2010</span><span class="token number">7</span>沈阳<span class="token number">86</span><span class="token number">2351</span><span class="token number">2010</span><span class="token number">4</span>沈阳<span class="token number">24</span><span class="token number">3314</span> rows × <span class="token number">4</span> columns<span class="token comment"># 优先级排序</span><span class="token comment"># 优先按照销售数量升序 销售数量相同 按照月份降序排序</span><span class="token comment"># 写在前面的会优先处理</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'销售数量'</span><span class="token punctuation">,</span><span class="token string">'月'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment">#   </span>df年月销售区域销售数量<span class="token number">1370</span><span class="token number">2009</span><span class="token number">12</span>南宁<span class="token number">1</span><span class="token number">1237</span><span class="token number">2009</span><span class="token number">12</span>南宁<span class="token number">1</span><span class="token number">1252</span><span class="token number">2009</span><span class="token number">12</span>广州<span class="token number">1</span><span class="token number">1305</span><span class="token number">2009</span><span class="token number">12</span>杭州<span class="token number">1</span><span class="token number">1390</span><span class="token number">2009</span><span class="token number">12</span>沈阳<span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1499</span><span class="token number">2010</span><span class="token number">1</span>成都<span class="token number">1169</span><span class="token number">1514</span><span class="token number">2010</span><span class="token number">1</span>杭州<span class="token number">1175</span><span class="token number">1498</span><span class="token number">2010</span><span class="token number">1</span>北京<span class="token number">1180</span><span class="token number">1337</span><span class="token number">2009</span><span class="token number">12</span>北京<span class="token number">1659</span><span class="token number">1497</span><span class="token number">2010</span><span class="token number">1</span>北京<span class="token number">1810</span><span class="token number">3314</span> rows × <span class="token number">4</span> columns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-分组函数"><a href="#6-分组函数" class="headerlink" title="6. 分组函数"></a>6. 分组函数</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/15.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">r'../datas/ftx.xls'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>年月销售区域销售数量<span class="token number">0</span><span class="token number">2009</span><span class="token number">1</span>广州<span class="token number">70</span><span class="token number">1</span><span class="token number">2009</span><span class="token number">1</span>南宁<span class="token number">25</span><span class="token number">2</span><span class="token number">2009</span><span class="token number">1</span>北京<span class="token number">17</span><span class="token number">3</span><span class="token number">2009</span><span class="token number">1</span>广州<span class="token number">99</span><span class="token number">4</span><span class="token number">2009</span><span class="token number">1</span>北京<span class="token number">43</span><span class="token comment"># 按照销售区域分组</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'销售区域'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token punctuation">{</span><span class="token string">'上海'</span><span class="token punctuation">:</span> Int64Index<span class="token punctuation">(</span><span class="token punctuation">[</span>   <span class="token number">6</span><span class="token punctuation">,</span>   <span class="token number">11</span><span class="token punctuation">,</span>   <span class="token number">19</span><span class="token punctuation">,</span>   <span class="token number">27</span><span class="token punctuation">,</span>   <span class="token number">33</span><span class="token punctuation">,</span>   <span class="token number">48</span><span class="token punctuation">,</span>   <span class="token number">63</span><span class="token punctuation">,</span>   <span class="token number">64</span><span class="token punctuation">,</span>   <span class="token number">65</span><span class="token punctuation">,</span>   <span class="token number">66</span><span class="token punctuation">,</span>             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token number">3233</span><span class="token punctuation">,</span> <span class="token number">3236</span><span class="token punctuation">,</span> <span class="token number">3247</span><span class="token punctuation">,</span> <span class="token number">3249</span><span class="token punctuation">,</span> <span class="token number">3250</span><span class="token punctuation">,</span> <span class="token number">3251</span><span class="token punctuation">,</span> <span class="token number">3264</span><span class="token punctuation">,</span> <span class="token number">3267</span><span class="token punctuation">,</span> <span class="token number">3278</span><span class="token punctuation">,</span> <span class="token number">3293</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">273</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">:</span> Int64Index<span class="token punctuation">(</span><span class="token punctuation">[</span>   <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token number">9</span><span class="token punctuation">,</span>   <span class="token number">12</span><span class="token punctuation">,</span>   <span class="token number">21</span><span class="token punctuation">,</span>   <span class="token number">31</span><span class="token punctuation">,</span>   <span class="token number">32</span><span class="token punctuation">,</span>   <span class="token number">38</span><span class="token punctuation">,</span>   <span class="token number">44</span><span class="token punctuation">,</span>   <span class="token number">62</span><span class="token punctuation">,</span>             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token number">3234</span><span class="token punctuation">,</span> <span class="token number">3237</span><span class="token punctuation">,</span> <span class="token number">3258</span><span class="token punctuation">,</span> <span class="token number">3259</span><span class="token punctuation">,</span> <span class="token number">3269</span><span class="token punctuation">,</span> <span class="token number">3279</span><span class="token punctuation">,</span> <span class="token number">3281</span><span class="token punctuation">,</span> <span class="token number">3292</span><span class="token punctuation">,</span> <span class="token number">3296</span><span class="token punctuation">,</span> <span class="token number">3307</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">412</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'南宁'</span><span class="token punctuation">:</span> Int64Index<span class="token punctuation">(</span><span class="token punctuation">[</span>   <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token number">7</span><span class="token punctuation">,</span>   <span class="token number">34</span><span class="token punctuation">,</span>  <span class="token number">121</span><span class="token punctuation">,</span>  <span class="token number">133</span><span class="token punctuation">,</span>  <span class="token number">153</span><span class="token punctuation">,</span>  <span class="token number">154</span><span class="token punctuation">,</span>  <span class="token number">162</span><span class="token punctuation">,</span>  <span class="token number">163</span><span class="token punctuation">,</span>  <span class="token number">211</span><span class="token punctuation">,</span>             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token number">3213</span><span class="token punctuation">,</span> <span class="token number">3223</span><span class="token punctuation">,</span> <span class="token number">3227</span><span class="token punctuation">,</span> <span class="token number">3239</span><span class="token punctuation">,</span> <span class="token number">3240</span><span class="token punctuation">,</span> <span class="token number">3260</span><span class="token punctuation">,</span> <span class="token number">3262</span><span class="token punctuation">,</span> <span class="token number">3291</span><span class="token punctuation">,</span> <span class="token number">3294</span><span class="token punctuation">,</span> <span class="token number">3300</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">405</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'南昌'</span><span class="token punctuation">:</span> Int64Index<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token number">15</span><span class="token punctuation">,</span>   <span class="token number">46</span><span class="token punctuation">,</span>   <span class="token number">99</span><span class="token punctuation">,</span>  <span class="token number">100</span><span class="token punctuation">,</span>  <span class="token number">146</span><span class="token punctuation">,</span>  <span class="token number">149</span><span class="token punctuation">,</span>  <span class="token number">210</span><span class="token punctuation">,</span>  <span class="token number">232</span><span class="token punctuation">,</span>  <span class="token number">243</span><span class="token punctuation">,</span>  <span class="token number">260</span><span class="token punctuation">,</span>             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token number">3224</span><span class="token punctuation">,</span> <span class="token number">3238</span><span class="token punctuation">,</span> <span class="token number">3243</span><span class="token punctuation">,</span> <span class="token number">3244</span><span class="token punctuation">,</span> <span class="token number">3265</span><span class="token punctuation">,</span> <span class="token number">3277</span><span class="token punctuation">,</span> <span class="token number">3280</span><span class="token punctuation">,</span> <span class="token number">3283</span><span class="token punctuation">,</span> <span class="token number">3290</span><span class="token punctuation">,</span> <span class="token number">3299</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">261</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'广州'</span><span class="token punctuation">:</span> Int64Index<span class="token punctuation">(</span><span class="token punctuation">[</span>   <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token number">8</span><span class="token punctuation">,</span>   <span class="token number">10</span><span class="token punctuation">,</span>   <span class="token number">16</span><span class="token punctuation">,</span>   <span class="token number">23</span><span class="token punctuation">,</span>   <span class="token number">25</span><span class="token punctuation">,</span>   <span class="token number">29</span><span class="token punctuation">,</span>   <span class="token number">30</span><span class="token punctuation">,</span>             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token number">3252</span><span class="token punctuation">,</span> <span class="token number">3255</span><span class="token punctuation">,</span> <span class="token number">3272</span><span class="token punctuation">,</span> <span class="token number">3275</span><span class="token punctuation">,</span> <span class="token number">3289</span><span class="token punctuation">,</span> <span class="token number">3308</span><span class="token punctuation">,</span> <span class="token number">3309</span><span class="token punctuation">,</span> <span class="token number">3311</span><span class="token punctuation">,</span> <span class="token number">3312</span><span class="token punctuation">,</span> <span class="token number">3313</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">428</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'成都'</span><span class="token punctuation">:</span> Int64Index<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token number">26</span><span class="token punctuation">,</span>   <span class="token number">35</span><span class="token punctuation">,</span>   <span class="token number">36</span><span class="token punctuation">,</span>   <span class="token number">60</span><span class="token punctuation">,</span>   <span class="token number">85</span><span class="token punctuation">,</span>   <span class="token number">97</span><span class="token punctuation">,</span>  <span class="token number">101</span><span class="token punctuation">,</span>  <span class="token number">110</span><span class="token punctuation">,</span>  <span class="token number">112</span><span class="token punctuation">,</span>  <span class="token number">124</span><span class="token punctuation">,</span>             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token number">3144</span><span class="token punctuation">,</span> <span class="token number">3150</span><span class="token punctuation">,</span> <span class="token number">3169</span><span class="token punctuation">,</span> <span class="token number">3174</span><span class="token punctuation">,</span> <span class="token number">3191</span><span class="token punctuation">,</span> <span class="token number">3198</span><span class="token punctuation">,</span> <span class="token number">3202</span><span class="token punctuation">,</span> <span class="token number">3211</span><span class="token punctuation">,</span> <span class="token number">3222</span><span class="token punctuation">,</span> <span class="token number">3287</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">426</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'杭州'</span><span class="token punctuation">:</span> Int64Index<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token number">13</span><span class="token punctuation">,</span>   <span class="token number">14</span><span class="token punctuation">,</span>   <span class="token number">17</span><span class="token punctuation">,</span>   <span class="token number">20</span><span class="token punctuation">,</span>   <span class="token number">24</span><span class="token punctuation">,</span>   <span class="token number">41</span><span class="token punctuation">,</span>   <span class="token number">42</span><span class="token punctuation">,</span>   <span class="token number">47</span><span class="token punctuation">,</span>   <span class="token number">54</span><span class="token punctuation">,</span>   <span class="token number">55</span><span class="token punctuation">,</span>             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token number">3263</span><span class="token punctuation">,</span> <span class="token number">3270</span><span class="token punctuation">,</span> <span class="token number">3271</span><span class="token punctuation">,</span> <span class="token number">3273</span><span class="token punctuation">,</span> <span class="token number">3274</span><span class="token punctuation">,</span> <span class="token number">3284</span><span class="token punctuation">,</span> <span class="token number">3286</span><span class="token punctuation">,</span> <span class="token number">3301</span><span class="token punctuation">,</span> <span class="token number">3303</span><span class="token punctuation">,</span> <span class="token number">3305</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">509</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'沈阳'</span><span class="token punctuation">:</span> Int64Index<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token number">18</span><span class="token punctuation">,</span>   <span class="token number">22</span><span class="token punctuation">,</span>   <span class="token number">28</span><span class="token punctuation">,</span>   <span class="token number">49</span><span class="token punctuation">,</span>   <span class="token number">50</span><span class="token punctuation">,</span>   <span class="token number">51</span><span class="token punctuation">,</span>   <span class="token number">53</span><span class="token punctuation">,</span>   <span class="token number">56</span><span class="token punctuation">,</span>   <span class="token number">57</span><span class="token punctuation">,</span>   <span class="token number">61</span><span class="token punctuation">,</span>             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token number">3282</span><span class="token punctuation">,</span> <span class="token number">3285</span><span class="token punctuation">,</span> <span class="token number">3288</span><span class="token punctuation">,</span> <span class="token number">3295</span><span class="token punctuation">,</span> <span class="token number">3297</span><span class="token punctuation">,</span> <span class="token number">3298</span><span class="token punctuation">,</span> <span class="token number">3302</span><span class="token punctuation">,</span> <span class="token number">3304</span><span class="token punctuation">,</span> <span class="token number">3306</span><span class="token punctuation">,</span> <span class="token number">3310</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">## 打印所有销售区域的销售数量的均值</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'销售区域'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'销售数量'</span><span class="token punctuation">]</span>销售区域上海    <span class="token number">49.714286</span>北京    <span class="token number">62.009709</span>南宁    <span class="token number">55.970370</span>南昌    <span class="token number">67.862069</span>广州    <span class="token number">63.453271</span>成都    <span class="token number">62.352113</span>杭州    <span class="token number">52.053045</span>沈阳    <span class="token number">67.765000</span>Name<span class="token punctuation">:</span> 销售数量<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64        <span class="token comment">## 打印销售区域每年的销售数量的总和</span><span class="token comment">## 列名先后顺序有关</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'年'</span><span class="token punctuation">,</span><span class="token string">'销售区域'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'销售数量'</span><span class="token punctuation">]</span>年     销售区域<span class="token number">2009</span>  上海      <span class="token number">50.735537</span>      北京      <span class="token number">72.308140</span>      南宁      <span class="token number">55.753731</span>      南昌      <span class="token number">59.380597</span>      广州      <span class="token number">53.711864</span>      成都      <span class="token number">62.180328</span>      杭州      <span class="token number">50.636771</span>      沈阳      <span class="token number">56.414343</span><span class="token number">2010</span>  上海      <span class="token number">48.901316</span>      北京      <span class="token number">54.629167</span>      南宁      <span class="token number">56.077491</span>      南昌      <span class="token number">76.811024</span>      广州      <span class="token number">75.427083</span>      成都      <span class="token number">62.481481</span>      杭州      <span class="token number">53.157343</span>      沈阳      <span class="token number">75.928367</span>Name<span class="token punctuation">:</span> 销售数量<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-映射"><a href="#7-映射" class="headerlink" title="7. 映射"></a>7. 映射</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/16.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## 映射函数</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'map.csv'</span><span class="token punctuation">)</span>df1nameagesexscore<span class="token number">0</span>tom<span class="token number">26</span>m<span class="token number">80</span><span class="token number">1</span>alex<span class="token number">34</span>m<span class="token number">67</span><span class="token number">2</span>al<span class="token number">43</span>f<span class="token number">88</span><span class="token comment"># 写一个函数实现此功能</span><span class="token comment"># 将score进行处理，大于60 修改为及格   否则为不及格</span><span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    大于60 修改为及格   否则为不及格    args:        x:df中输入的信息    return:        及格 不及格 pass fail    '''</span>    <span class="token keyword">if</span> x<span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'pass'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'fail'</span>    df1<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df1<span class="token punctuation">.</span>score<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>df1nameagesexscore<span class="token number">0</span>tom<span class="token number">26</span>m<span class="token keyword">pass</span><span class="token number">1</span>alex<span class="token number">34</span>m<span class="token keyword">pass</span><span class="token number">2</span>al<span class="token number">43</span>f<span class="token keyword">pass</span><span class="token comment"># lambda实现此功能</span><span class="token comment"># lambda 表达式</span><span class="token comment"># 年龄大于30 中年 else年轻人</span>df1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df1<span class="token punctuation">.</span>age<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token string">'中年人'</span> <span class="token keyword">if</span> x<span class="token operator">&gt;=</span> <span class="token number">30</span> <span class="token keyword">else</span> <span class="token string">'年轻人'</span><span class="token punctuation">)</span>df1nameagesexscore<span class="token number">0</span>tom年轻人m<span class="token keyword">pass</span><span class="token number">1</span>alex中年人m<span class="token keyword">pass</span><span class="token number">2</span>al中年人f<span class="token keyword">pass</span><span class="token comment"># 处理类比标签</span><span class="token comment"># sex f 修改女   m修改男</span><span class="token comment"># 处理类比标签用到</span>df1<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df1<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'m'</span><span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">:</span><span class="token string">'女'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df1nameagesexscore<span class="token number">0</span>tom年轻人男<span class="token keyword">pass</span><span class="token number">1</span>alex中年人男<span class="token keyword">pass</span><span class="token number">2</span>al中年人女<span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-银行案例"><a href="#8-银行案例" class="headerlink" title="8. 银行案例"></a>8. 银行案例</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/5-pandas/17.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 读入bank数据</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">r'../datas/loans.xls'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>贷款号账户号发放贷款日期贷款金额贷款期限每月归还额还款状态<span class="token number">0</span><span class="token number">5314</span><span class="token number">1787</span><span class="token number">1993</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">05</span><span class="token number">96396.0</span><span class="token number">12.0</span><span class="token number">8033.0</span>B<span class="token number">1</span><span class="token number">5316</span><span class="token number">1801</span><span class="token number">1993</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">11</span><span class="token number">165960.0</span><span class="token number">36.0</span><span class="token number">4610.0</span>A<span class="token number">2</span><span class="token number">6863</span><span class="token number">9188</span><span class="token number">1993</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">28</span><span class="token number">127080.0</span><span class="token number">60.0</span><span class="token number">2118.0</span>A<span class="token number">3</span><span class="token number">5325</span><span class="token number">1843</span><span class="token number">1993</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">03</span><span class="token number">105804.0</span><span class="token number">36.0</span><span class="token number">2939.0</span>A<span class="token number">4</span><span class="token number">7240</span><span class="token number">11013</span><span class="token number">1993</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">06</span><span class="token number">274740.0</span><span class="token number">60.0</span><span class="token number">4579.0</span>A<span class="token comment"># 删除每月归还额</span><span class="token keyword">del</span> df<span class="token punctuation">[</span><span class="token string">'每月归还额'</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>贷款号账户号发放贷款日期贷款金额贷款期限还款状态<span class="token number">0</span><span class="token number">5314</span><span class="token number">1787</span><span class="token number">1993</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">05</span><span class="token number">96396.0</span><span class="token number">12.0</span>B<span class="token number">1</span><span class="token number">5316</span><span class="token number">1801</span><span class="token number">1993</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">11</span><span class="token number">165960.0</span><span class="token number">36.0</span>A<span class="token number">2</span><span class="token number">6863</span><span class="token number">9188</span><span class="token number">1993</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">28</span><span class="token number">127080.0</span><span class="token number">60.0</span>A<span class="token number">3</span><span class="token number">5325</span><span class="token number">1843</span><span class="token number">1993</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">03</span><span class="token number">105804.0</span><span class="token number">36.0</span>A<span class="token number">4</span><span class="token number">7240</span><span class="token number">11013</span><span class="token number">1993</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">06</span><span class="token number">274740.0</span><span class="token number">60.0</span>A<span class="token comment"># 对指定列频数左频数统计，列名为贷款期限</span>df<span class="token punctuation">[</span><span class="token string">'贷款期限'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">60.0</span>    <span class="token number">145</span><span class="token number">48.0</span>    <span class="token number">138</span><span class="token number">24.0</span>    <span class="token number">137</span><span class="token number">36.0</span>    <span class="token number">130</span><span class="token number">12.0</span>    <span class="token number">128</span>Name<span class="token punctuation">:</span> 贷款期限<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64        <span class="token comment"># 对指定列坐分组统计，列名为还款状态，在次基础上，计算分组贷款金额列的均值</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'还款状态'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'贷款金额'</span><span class="token punctuation">]</span>还款状态A     <span class="token number">91802.580000</span>B    <span class="token number">140720.903226</span>C    <span class="token number">171410.352357</span>D    <span class="token number">249284.533333</span>Name<span class="token punctuation">:</span> 贷款金额<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64        <span class="token comment"># 统计贷款金额的均值、最小值、最大值、中位数、方差</span>df<span class="token punctuation">[</span><span class="token string">'贷款金额'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span>count       <span class="token number">679.000000</span>mean     <span class="token number">151721.708395</span>std      <span class="token number">113423.941545</span><span class="token builtin">min</span>        <span class="token number">4980.000000</span><span class="token number">25</span><span class="token operator">%</span>       <span class="token number">67080.000000</span><span class="token number">50</span><span class="token operator">%</span>      <span class="token number">117024.000000</span><span class="token number">75</span><span class="token operator">%</span>      <span class="token number">211572.000000</span><span class="token builtin">max</span>      <span class="token number">590820.000000</span>Name<span class="token punctuation">:</span> 贷款金额<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64        df<span class="token punctuation">[</span><span class="token string">'贷款金额'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>var<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#方差</span><span class="token number">12864990515.543165</span><span class="token comment">#对数据进行排序，按照发放贷款日期（降序）贷款金额（升序）排序 </span><span class="token comment"># inplace True 修改本身数据，没有返回值，打印不了信息 False有返回值</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'发放贷款日期'</span><span class="token punctuation">,</span><span class="token string">'贷款金额'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>贷款号账户号发放贷款日期贷款金额贷款期限还款状态<span class="token number">681</span><span class="token number">6748</span><span class="token number">8645</span><span class="token number">1998</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">08</span><span class="token number">240900.0</span><span class="token number">60.0</span>C<span class="token number">680</span><span class="token number">5346</span><span class="token number">1928</span><span class="token number">1998</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">06</span><span class="token number">55632.0</span><span class="token number">24.0</span>C<span class="token number">679</span><span class="token number">6402</span><span class="token number">6922</span><span class="token number">1998</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">06</span><span class="token number">139488.0</span><span class="token number">24.0</span>C<span class="token number">678</span><span class="token number">5221</span><span class="token number">1284</span><span class="token number">1998</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">05</span><span class="token number">52512.0</span><span class="token number">12.0</span>C<span class="token number">677</span><span class="token number">4989</span><span class="token number">105</span><span class="token number">1998</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">05</span><span class="token number">352704.0</span><span class="token number">48.0</span>C<span class="token comment">#按照贷款金额除以贷款期限计算生成新列，并命名为每月归还额    无中生有</span>df<span class="token punctuation">[</span><span class="token string">'每月归还额'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'贷款金额'</span><span class="token punctuation">]</span><span class="token operator">/</span>df<span class="token punctuation">[</span><span class="token string">'贷款期限'</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>贷款号账户号发放贷款日期贷款金额贷款期限还款状态每月归还额<span class="token number">681</span><span class="token number">6748</span><span class="token number">8645</span><span class="token number">1998</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">08</span><span class="token number">240900.0</span><span class="token number">60.0</span>C<span class="token number">4015.0</span><span class="token number">680</span><span class="token number">5346</span><span class="token number">1928</span><span class="token number">1998</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">06</span><span class="token number">55632.0</span><span class="token number">24.0</span>C<span class="token number">2318.0</span><span class="token number">679</span><span class="token number">6402</span><span class="token number">6922</span><span class="token number">1998</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">06</span><span class="token number">139488.0</span><span class="token number">24.0</span>C<span class="token number">5812.0</span><span class="token number">678</span><span class="token number">5221</span><span class="token number">1284</span><span class="token number">1998</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">05</span><span class="token number">52512.0</span><span class="token number">12.0</span>C<span class="token number">4376.0</span><span class="token number">677</span><span class="token number">4989</span><span class="token number">105</span><span class="token number">1998</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">05</span><span class="token number">352704.0</span><span class="token number">48.0</span>C<span class="token number">7348.0</span><span class="token comment"># 提取行（账户号在3000到4500之间）列（发放贷款日期和贷款金额）的数据</span>df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'账户号'</span><span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'账户号'</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">4500</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'发放贷款日期'</span><span class="token punctuation">,</span><span class="token string">'贷款金额'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>发放贷款日期贷款金额<span class="token number">673</span><span class="token number">1998</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">27</span><span class="token number">276084.0</span><span class="token number">666</span><span class="token number">1998</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">04</span><span class="token number">41988.0</span><span class="token number">665</span><span class="token number">1998</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">30</span><span class="token number">327660.0</span><span class="token number">652</span><span class="token number">1998</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">22</span><span class="token number">174840.0</span><span class="token number">650</span><span class="token number">1998</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">21</span><span class="token number">253560.0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">89</span><span class="token number">1994</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span><span class="token number">23628.0</span><span class="token number">88</span><span class="token number">1994</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">02</span><span class="token number">82896.0</span><span class="token number">86</span><span class="token number">1994</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">27</span><span class="token number">79632.0</span><span class="token number">66</span><span class="token number">1994</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">05</span><span class="token number">4980.0</span><span class="token number">65</span><span class="token number">1994</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">29</span><span class="token number">244560.0</span><span class="token number">82</span> rows × <span class="token number">2</span> columns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-numpy</title>
      <link href="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/"/>
      <url>/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/</url>
      
        <content type="html"><![CDATA[<h3 id="1-数组创建"><a href="#1-数组创建" class="headerlink" title="1. 数组创建"></a>1. 数组创建</h3><h4 id="1-1-常规创建"><a href="#1-1-常规创建" class="headerlink" title="1.1 常规创建"></a>1.1 常规创建</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/1.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/2.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/3.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'轴：'</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'形状：'</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'大小：'</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'格式：'</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">轴： <span class="token number">2</span>形状： <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>大小： <span class="token number">12</span>格式： float32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-常规常见函数"><a href="#1-2-常规常见函数" class="headerlink" title="1.2 常规常见函数"></a>1.2 常规常见函数</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/4.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/5.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/6.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/7.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment">#空矩阵</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment">#全零矩阵     模型计算添加数值</span>a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">#全1矩阵     权重初始值</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.</span> <span class="token number">0.</span> <span class="token number">0.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span> <span class="token number">0.</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.</span> <span class="token number">0.</span> <span class="token number">0.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span> <span class="token number">0.</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span> <span class="token number">1.</span> <span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span> <span class="token number">1.</span> <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span> a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>      <span class="token comment">#指定范围指定步长数据</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span>       <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a4 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">)</span>              <span class="token comment">#等差数列创建</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">10.</span><span class="token punctuation">,</span>  <span class="token number">20.</span><span class="token punctuation">,</span>  <span class="token number">30.</span><span class="token punctuation">,</span>  <span class="token number">40.</span><span class="token punctuation">,</span>  <span class="token number">50.</span><span class="token punctuation">,</span>  <span class="token number">60.</span><span class="token punctuation">,</span>  <span class="token number">70.</span><span class="token punctuation">,</span>  <span class="token number">80.</span><span class="token punctuation">,</span>  <span class="token number">90.</span><span class="token punctuation">,</span> <span class="token number">100.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a5 <span class="token operator">=</span> np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>             <span class="token comment">#生成等比数列</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.00000000e+000</span><span class="token punctuation">,</span> <span class="token number">2.15443469e+033</span><span class="token punctuation">,</span> <span class="token number">4.64158883e+066</span><span class="token punctuation">,</span> <span class="token number">1.00000000e+100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#创建1个数值范围在[0,1)    权重初始化方式    均匀分布</span>r1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.37707461</span><span class="token punctuation">,</span> <span class="token number">0.87018938</span><span class="token punctuation">,</span> <span class="token number">0.76736847</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.0573234</span> <span class="token punctuation">,</span> <span class="token number">0.4563468</span> <span class="token punctuation">,</span> <span class="token number">0.87337784</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.25829389</span><span class="token punctuation">,</span> <span class="token number">0.61999168</span><span class="token punctuation">,</span> <span class="token number">0.02058661</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#随机值是按照标准       正太分布创建</span><span class="token comment"># print(help(np.random.randn))</span>r2 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>          <span class="token comment">#不用中括号</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.02394524</span><span class="token punctuation">,</span>  <span class="token number">0.1779403</span> <span class="token punctuation">,</span>  <span class="token number">0.87865321</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.61261297</span><span class="token punctuation">,</span>  <span class="token number">0.78523718</span><span class="token punctuation">,</span>  <span class="token number">0.96986331</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.41789282</span><span class="token punctuation">,</span>  <span class="token number">1.7421474</span> <span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.03368967</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#随机整数</span><span class="token comment"># print(help(np.random.randint))</span>r3 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">#100个样本点 ，在-3~3之间均匀采样</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">#加入随机值</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'***'</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.51124148e+00</span>  <span class="token number">2.03660259e+00</span> <span class="token operator">-</span><span class="token number">2.15472516e+00</span> <span class="token operator">-</span><span class="token number">8.18240600e-04</span> <span class="token operator">-</span><span class="token number">1.19606514e+00</span> <span class="token operator">-</span><span class="token number">1.20075680e-01</span>  <span class="token number">2.49171751e+00</span>  <span class="token number">2.98195954e+00</span> <span class="token operator">-</span><span class="token number">2.04760667e+00</span> <span class="token operator">-</span><span class="token number">7.63610276e-01</span>  <span class="token number">1.47028024e+00</span>  <span class="token number">5.11383306e-01</span>  <span class="token number">1.00519915e+00</span> <span class="token operator">-</span><span class="token number">2.32197647e+00</span>  <span class="token number">2.48713405e+00</span>  <span class="token number">1.20590934e+00</span> <span class="token operator">-</span><span class="token number">9.56193386e-01</span> <span class="token operator">-</span><span class="token number">5.42012601e-01</span> <span class="token operator">-</span><span class="token number">1.15057958e+00</span>  <span class="token number">1.01771431e-01</span> <span class="token operator">-</span><span class="token number">2.50972528e+00</span>  <span class="token number">6.12287450e-01</span>  <span class="token number">1.55901307e+00</span>  <span class="token number">2.88358774e-01</span> <span class="token operator">-</span><span class="token number">2.93652007e+00</span>  <span class="token number">4.64107672e-01</span>  <span class="token number">2.56066689e+00</span> <span class="token operator">-</span><span class="token number">1.93441843e+00</span>  <span class="token number">1.50924110e+00</span> <span class="token operator">-</span><span class="token number">3.23028379e-01</span> <span class="token operator">-</span><span class="token number">2.69106634e-01</span>  <span class="token number">2.31742644e+00</span>  <span class="token number">2.22654250e+00</span>  <span class="token number">1.37581578e+00</span> <span class="token operator">-</span><span class="token number">9.30002433e-01</span> <span class="token operator">-</span><span class="token number">2.03444716e+00</span> <span class="token operator">-</span><span class="token number">1.29176433e-01</span>  <span class="token number">3.79479656e-01</span> <span class="token operator">-</span><span class="token number">1.55489582e+00</span> <span class="token operator">-</span><span class="token number">1.18669462e+00</span> <span class="token operator">-</span><span class="token number">2.18525951e+00</span> <span class="token operator">-</span><span class="token number">1.63959480e-02</span> <span class="token operator">-</span><span class="token number">8.51558654e-01</span>  <span class="token number">9.19406144e-01</span> <span class="token operator">-</span><span class="token number">6.86941569e-01</span> <span class="token operator">-</span><span class="token number">8.76052219e-01</span>  <span class="token number">2.72553965e+00</span>  <span class="token number">2.95623049e+00</span>  <span class="token number">1.28546811e-01</span> <span class="token operator">-</span><span class="token number">6.54257257e-01</span>  <span class="token number">2.62488356e+00</span> <span class="token operator">-</span><span class="token number">2.80697672e+00</span> <span class="token operator">-</span><span class="token number">1.36664059e+00</span> <span class="token operator">-</span><span class="token number">2.87715916e+00</span> <span class="token operator">-</span><span class="token number">1.61482268e+00</span>  <span class="token number">1.07821992e+00</span>  <span class="token number">1.18181770e+00</span> <span class="token operator">-</span><span class="token number">2.44110471e+00</span>  <span class="token number">7.34343496e-01</span> <span class="token operator">-</span><span class="token number">6.20339134e-01</span> <span class="token operator">-</span><span class="token number">2.08748964e+00</span> <span class="token operator">-</span><span class="token number">7.01168020e-01</span> <span class="token operator">-</span><span class="token number">2.63864136e+00</span>  <span class="token number">2.02496075e-01</span>  <span class="token number">1.97248584e+00</span>  <span class="token number">3.54492031e-01</span>  <span class="token number">1.62628262e+00</span> <span class="token operator">-</span><span class="token number">2.20105370e+00</span>  <span class="token number">1.06603446e+00</span>  <span class="token number">3.78871321e-01</span> <span class="token operator">-</span><span class="token number">2.41048795e+00</span> <span class="token operator">-</span><span class="token number">8.08952462e-01</span> <span class="token operator">-</span><span class="token number">5.30919668e-01</span>  <span class="token number">7.98410262e-02</span>  <span class="token number">2.88996227e+00</span> <span class="token operator">-</span><span class="token number">1.10477790e+00</span>  <span class="token number">2.88034390e-01</span>  <span class="token number">1.52202987e+00</span>  <span class="token number">2.84529794e+00</span>  <span class="token number">1.72502683e+00</span> <span class="token operator">-</span><span class="token number">3.10621904e-01</span> <span class="token operator">-</span><span class="token number">4.67226006e-01</span> <span class="token operator">-</span><span class="token number">1.58400865e+00</span> <span class="token operator">-</span><span class="token number">4.73728584e-01</span> <span class="token operator">-</span><span class="token number">1.22318531e+00</span> <span class="token operator">-</span><span class="token number">8.11088666e-01</span>  <span class="token number">8.59937723e-01</span>  <span class="token number">1.57045669e+00</span>  <span class="token number">1.38819431e+00</span> <span class="token operator">-</span><span class="token number">2.72005022e+00</span>  <span class="token number">2.29497801e+00</span>  <span class="token number">2.94519730e+00</span> <span class="token operator">-</span><span class="token number">8.31398040e-01</span> <span class="token operator">-</span><span class="token number">2.76485310e+00</span> <span class="token operator">-</span><span class="token number">2.01133309e-01</span> <span class="token operator">-</span><span class="token number">3.07868178e-01</span>  <span class="token number">2.22002802e+00</span> <span class="token operator">-</span><span class="token number">1.74292936e-01</span> <span class="token operator">-</span><span class="token number">1.77704412e+00</span>  <span class="token number">4.52126521e-01</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.51162043</span> <span class="token operator">-</span><span class="token number">0.24423603</span>  <span class="token number">0.9191062</span>  <span class="token operator">-</span><span class="token number">0.69589885</span>  <span class="token number">0.16897023</span> <span class="token operator">-</span><span class="token number">0.26372852</span> <span class="token operator">-</span><span class="token number">1.5247518</span>   <span class="token number">1.12635113</span> <span class="token operator">-</span><span class="token number">0.42001838</span> <span class="token operator">-</span><span class="token number">0.31862708</span>  <span class="token number">0.12968071</span>  <span class="token number">0.27668026</span>  <span class="token number">1.48752911</span> <span class="token operator">-</span><span class="token number">0.82402323</span>  <span class="token number">0.46774902</span>  <span class="token number">0.53312749</span>  <span class="token number">0.46561733</span>  <span class="token number">1.46649595</span> <span class="token operator">-</span><span class="token number">0.93619369</span> <span class="token operator">-</span><span class="token number">1.37426664</span>  <span class="token number">1.17364484</span> <span class="token operator">-</span><span class="token number">0.82794795</span> <span class="token operator">-</span><span class="token number">1.30719396</span> <span class="token operator">-</span><span class="token number">0.03550735</span>  <span class="token number">0.08684006</span> <span class="token operator">-</span><span class="token number">0.0228094</span>   <span class="token number">0.95778673</span> <span class="token operator">-</span><span class="token number">1.2294135</span>   <span class="token number">0.49234427</span> <span class="token operator">-</span><span class="token number">0.72552998</span> <span class="token operator">-</span><span class="token number">0.88490058</span>  <span class="token number">0.60355517</span>  <span class="token number">0.98590752</span>  <span class="token number">0.30653453</span>  <span class="token number">0.34879415</span>  <span class="token number">0.07890444</span> <span class="token operator">-</span><span class="token number">0.09171657</span> <span class="token operator">-</span><span class="token number">0.59030905</span>  <span class="token number">0.52354345</span> <span class="token operator">-</span><span class="token number">0.65086164</span> <span class="token operator">-</span><span class="token number">0.59616081</span>  <span class="token number">0.8905217</span>  <span class="token number">0.93654765</span> <span class="token operator">-</span><span class="token number">0.1877585</span>   <span class="token number">0.73502913</span> <span class="token operator">-</span><span class="token number">1.05216753</span> <span class="token operator">-</span><span class="token number">1.40097694</span> <span class="token operator">-</span><span class="token number">0.40583802</span>  <span class="token number">0.77086494</span>  <span class="token number">0.21678846</span> <span class="token operator">-</span><span class="token number">0.56135209</span>  <span class="token number">0.66124647</span> <span class="token operator">-</span><span class="token number">0.4976936</span>   <span class="token number">0.48930342</span> <span class="token operator">-</span><span class="token number">0.08376478</span> <span class="token operator">-</span><span class="token number">1.31421476</span> <span class="token operator">-</span><span class="token number">0.75088754</span>  <span class="token number">0.02237503</span> <span class="token operator">-</span><span class="token number">1.36489238</span>  <span class="token number">0.66021696</span> <span class="token operator">-</span><span class="token number">0.56214922</span>  <span class="token number">0.96797598</span>  <span class="token number">0.60793769</span> <span class="token operator">-</span><span class="token number">0.54725249</span> <span class="token operator">-</span><span class="token number">0.49340533</span> <span class="token operator">-</span><span class="token number">0.32526143</span> <span class="token operator">-</span><span class="token number">0.40300367</span> <span class="token operator">-</span><span class="token number">0.81942884</span>  <span class="token number">0.17156274</span> <span class="token operator">-</span><span class="token number">0.26428972</span>  <span class="token number">0.97196702</span> <span class="token operator">-</span><span class="token number">0.61132067</span>  <span class="token number">1.14655922</span>  <span class="token number">0.16877197</span> <span class="token operator">-</span><span class="token number">0.01292954</span> <span class="token operator">-</span><span class="token number">0.05690833</span>  <span class="token number">0.04501482</span> <span class="token operator">-</span><span class="token number">0.32461178</span> <span class="token operator">-</span><span class="token number">0.45686774</span> <span class="token operator">-</span><span class="token number">1.70130204</span>  <span class="token number">0.01238641</span> <span class="token operator">-</span><span class="token number">1.32135884</span> <span class="token operator">-</span><span class="token number">0.74389428</span>  <span class="token number">0.73799979</span> <span class="token operator">-</span><span class="token number">0.60436316</span> <span class="token operator">-</span><span class="token number">0.79175781</span>  <span class="token number">0.78295765</span>  <span class="token number">0.30194448</span> <span class="token operator">-</span><span class="token number">1.76395796</span> <span class="token operator">-</span><span class="token number">0.79345675</span> <span class="token operator">-</span><span class="token number">0.84801604</span> <span class="token operator">-</span><span class="token number">0.14057884</span> <span class="token operator">-</span><span class="token number">0.86086056</span> <span class="token operator">-</span><span class="token number">0.31449199</span>  <span class="token number">0.22756526</span> <span class="token operator">-</span><span class="token number">1.11759639</span> <span class="token operator">-</span><span class="token number">0.24503984</span> <span class="token operator">-</span><span class="token number">1.19641485</span> <span class="token operator">-</span><span class="token number">0.9258622</span>  <span class="token operator">-</span><span class="token number">1.16094632</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数组修改获取"><a href="#2-数组修改获取" class="headerlink" title="2. 数组修改获取"></a>2. 数组修改获取</h3><h4 id="2-1-切片和索引"><a href="#2-1-切片和索引" class="headerlink" title="2.1 切片和索引"></a>2.1 切片和索引</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/8.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># [3 4 5 6]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#1,3,5,7,9     起始值：终止值：步长</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 9,8,7,6,5,4,3,2,1</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 8,9</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 8,9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-二维数据切片操作"><a href="#2-2-二维数据切片操作" class="headerlink" title="2.2 二维数据切片操作"></a>2.2 二维数据切片操作</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/9.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># [4 5 6]</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">#b[行][列]    5</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">#b[行][列]    比较好  ， 维度   5</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#打印前2行</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#打印后2列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-广播"><a href="#3-广播" class="headerlink" title="3. 广播"></a>3. 广播</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/10.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">4</span>  <span class="token number">5</span>  <span class="token number">6</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">7</span>  <span class="token number">8</span>  <span class="token number">9</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">10</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">2</span>  <span class="token number">3</span>  <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">5</span>  <span class="token number">6</span>  <span class="token number">7</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">8</span>  <span class="token number">9</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">11</span> <span class="token number">11</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-数组操作"><a href="#4-数组操作" class="headerlink" title="4. 数组操作"></a>4. 数组操作</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/11.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>  <span class="token comment"># [ 1  2  3  4  5  6  7  8  9 10]</span>d <span class="token operator">=</span> d<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#2行5列      不会改变本身值  要重新赋值</span>d <span class="token operator">=</span> d<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#5行2列 </span>d <span class="token operator">=</span> d<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#数据无穷多，变成1行n列的数据</span>d <span class="token operator">=</span> d<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#展开为1行数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/12.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">e <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">#一</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>T<span class="token punctuation">)</span>                <span class="token comment">#常用方式</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">4</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">4</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>f <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 压缩维度   将维度为1的进行消除 处理无用的维度，向量</span>f <span class="token operator">=</span> f<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>           <span class="token comment">#5个，1个，2个</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">6</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 链接数组</span>g <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>h <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 链接数组</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>g<span class="token punctuation">,</span>h<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#行拼接     常用的</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>g<span class="token punctuation">,</span>h<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#列拼接</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">[</span>g<span class="token punctuation">,</span>h<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#列拼接</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">[</span>g<span class="token punctuation">,</span>h<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#行拼接</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span> <span class="token number">0.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span> <span class="token number">0.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span> <span class="token number">0.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span> <span class="token number">0.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#数组分割</span>i <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#将数据按照列平分3份</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#数组分割</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>hsplit<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#将数据按照列平分3份</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>hsplit<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#将数据按照列索引分割</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>vsplit<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#将数据按照行平分3份</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>vsplit<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#将数据按照行索引分割</span><span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-常用函数"><a href="#5-常用函数" class="headerlink" title="5. 常用函数"></a>5. 常用函数</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/13.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>pi<span class="token operator">*</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment">#计算面积    power（） 12.566370614359172</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/14.png"></p><h4 id="5-1-最值-平均数"><a href="#5-1-最值-平均数" class="headerlink" title="5.1 最值 平均数"></a>5.1 最值 平均数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span>  <span class="token number">9</span>  <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">4</span>  <span class="token number">5</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">7</span>  <span class="token number">8</span>  <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>a<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 指定轴的最大值索引  查找出每行数值最大的列的索引    行    反的</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">]</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>a<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#对行求均值     行</span> <span class="token punctuation">[</span><span class="token number">4.33333333</span> <span class="token number">6.33333333</span> <span class="token number">8.</span>        <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-排序"><a href="#5-2-排序" class="headerlink" title="5.2 排序"></a>5.2 排序</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># [2 3 4 7]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-3-矩阵操作"><a href="#5-3-矩阵操作" class="headerlink" title="5.3 矩阵操作"></a>5.3 矩阵操作</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/4-numpy/15.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">#矩阵乘法</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>c<span class="token punctuation">,</span>c<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">5</span> <span class="token number">11</span> <span class="token number">17</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">11</span> <span class="token number">25</span> <span class="token number">39</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">17</span> <span class="token number">39</span> <span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">#特征值分解</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>vals<span class="token punctuation">,</span>vecs <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>eig<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span>            <span class="token comment"># 特征值</span><span class="token keyword">print</span><span class="token punctuation">(</span>vecs<span class="token punctuation">)</span>            <span class="token comment">#特征向量</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1.</span> <span class="token number">2.</span> <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span>         <span class="token number">0.70710678</span> <span class="token number">0.66666667</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>         <span class="token number">0.70710678</span> <span class="token number">0.66666667</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0.</span>         <span class="token number">0.</span>         <span class="token number">0.33333333</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-概率论</title>
      <link href="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/"/>
      <url>/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/</url>
      
        <content type="html"><![CDATA[<h3 id="1-概率基础"><a href="#1-概率基础" class="headerlink" title="1. 概率基础"></a>1. 概率基础</h3><h4 id="1-1-基础概念"><a href="#1-1-基础概念" class="headerlink" title="1.1 基础概念"></a>1.1 基础概念</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/1.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/2.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/3.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/4.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/5.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/6.png"></p><h4 id="1-2-古典概型"><a href="#1-2-古典概型" class="headerlink" title="1.2 古典概型"></a>1.2 古典概型</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/7.png"></p><h4 id="1-3-几何概型"><a href="#1-3-几何概型" class="headerlink" title="1.3 几何概型"></a>1.3 几何概型</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/8.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/9.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/10.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/11.png"></p><h4 id="1-4-案例"><a href="#1-4-案例" class="headerlink" title="1.4 案例"></a>1.4 案例</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/12.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/13.png"></p><h3 id="2-概率统计"><a href="#2-概率统计" class="headerlink" title="2. 概率统计"></a>2. 概率统计</h3><h4 id="2-1-随机变量"><a href="#2-1-随机变量" class="headerlink" title="2.1 随机变量"></a>2.1 随机变量</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/14.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/15.png"></p><h4 id="2-2-期望"><a href="#2-2-期望" class="headerlink" title="2.2 期望"></a>2.2 期望</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/16.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/17.png"></p><h4 id="2-3-方差"><a href="#2-3-方差" class="headerlink" title="2.3 方差"></a>2.3 方差</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/18.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/19.png"></p><h4 id="2-4-协方差-相关性"><a href="#2-4-协方差-相关性" class="headerlink" title="2.4 协方差 相关性"></a>2.4 协方差 相关性</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/20.png"></p><h4 id="2-5-标准差"><a href="#2-5-标准差" class="headerlink" title="2.5 标准差"></a>2.5 标准差</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/21.png"></p><h4 id="2-6-协方差"><a href="#2-6-协方差" class="headerlink" title="2.6 协方差"></a>2.6 协方差</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/22.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/23.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/24.png"></p><h4 id="2-7-协方差矩阵"><a href="#2-7-协方差矩阵" class="headerlink" title="2.7 协方差矩阵"></a>2.7 协方差矩阵</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/25.png"></p><h3 id="3-概率分布"><a href="#3-概率分布" class="headerlink" title="3. 概率分布"></a>3. 概率分布</h3><h4 id="3-1-大数定律"><a href="#3-1-大数定律" class="headerlink" title="3.1 大数定律"></a>3.1 大数定律</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/26.png"></p><h4 id="3-2-中心极限定理"><a href="#3-2-中心极限定理" class="headerlink" title="3.2 中心极限定理"></a>3.2 中心极限定理</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/27.png"></p><p>3.3 一维正态分布</p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/28.png"></p><h3 id="4-极大似然估计"><a href="#4-极大似然估计" class="headerlink" title="4. 极大似然估计"></a>4. 极大似然估计</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/29.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/30.png"></p><h3 id="5-信息论"><a href="#5-信息论" class="headerlink" title="5. 信息论"></a>5. 信息论</h3><h4 id="5-1-均匀分布"><a href="#5-1-均匀分布" class="headerlink" title="5.1 均匀分布"></a>5.1 均匀分布</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/31.png"></p><h4 id="5-2-指数分布"><a href="#5-2-指数分布" class="headerlink" title="5.2 指数分布"></a>5.2 指数分布</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/32.png"></p><h3 id="5-3-正态分布"><a href="#5-3-正态分布" class="headerlink" title="5.3 正态分布"></a>5.3 正态分布</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/33.png"></p><h4 id="5-4-信息量"><a href="#5-4-信息量" class="headerlink" title="5.4 信息量"></a>5.4 信息量</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/34.png"></p><h4 id="5-5-交叉熵"><a href="#5-5-交叉熵" class="headerlink" title="5.5 交叉熵"></a>5.5 交叉熵</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/3-gai-lu-lun/35.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-线性代数</title>
      <link href="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/"/>
      <url>/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-向量"><a href="#1-向量" class="headerlink" title="1. 向量"></a>1. 向量</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/1.png"></p><h3 id="2-向量运算法则"><a href="#2-向量运算法则" class="headerlink" title="2. 向量运算法则"></a>2. 向量运算法则</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/2.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/3.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/4.png"></p><h3 id="3-矩阵"><a href="#3-矩阵" class="headerlink" title="3. 矩阵"></a>3. 矩阵</h3><h4 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/5.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/6.png"></p><h4 id="3-2-n阶方阵"><a href="#3-2-n阶方阵" class="headerlink" title="3.2 n阶方阵"></a>3.2 n阶方阵</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/7.png"></p><h4 id="3-3-单位矩阵"><a href="#3-3-单位矩阵" class="headerlink" title="3.3 单位矩阵"></a>3.3 单位矩阵</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/8.png"></p><h4 id="3-4-零矩阵"><a href="#3-4-零矩阵" class="headerlink" title="3.4 零矩阵"></a>3.4 零矩阵</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/9.png"></p><h4 id="3-5-矩阵加减法"><a href="#3-5-矩阵加减法" class="headerlink" title="3.5 矩阵加减法"></a>3.5 矩阵加减法</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/10.png"></p><h4 id="3-6-矩阵与标量乘法"><a href="#3-6-矩阵与标量乘法" class="headerlink" title="3.6  矩阵与标量乘法"></a>3.6  矩阵与标量乘法</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/11.png"></p><h4 id="3-7-矩阵与向量乘法"><a href="#3-7-矩阵与向量乘法" class="headerlink" title="3.7 矩阵与向量乘法"></a>3.7 矩阵与向量乘法</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/12.png"></p><h4 id="3-8-矩阵与矩阵乘法"><a href="#3-8-矩阵与矩阵乘法" class="headerlink" title="3.8 矩阵与矩阵乘法"></a>3.8 矩阵与矩阵乘法</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/13.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/14.png"></p><h4 id="3-9-矩阵转置"><a href="#3-9-矩阵转置" class="headerlink" title="3.9 矩阵转置"></a>3.9 矩阵转置</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/15.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/16.png"></p><h4 id="3-10-矩阵纬度计算"><a href="#3-10-矩阵纬度计算" class="headerlink" title="3.10 矩阵纬度计算"></a>3.10 矩阵纬度计算</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/17.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/18.png"></p><h4 id="3-11-方阵行列式"><a href="#3-11-方阵行列式" class="headerlink" title="3.11 方阵行列式"></a>3.11 方阵行列式</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/19.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/20.png"></p><h4 id="3-12-实对称矩阵"><a href="#3-12-实对称矩阵" class="headerlink" title="3.12 实对称矩阵"></a>3.12 实对称矩阵</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/21.png"></p><h4 id="3-13-方阵的逆"><a href="#3-13-方阵的逆" class="headerlink" title="3.13 方阵的逆"></a>3.13 方阵的逆</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/22.png"></p><h4 id="3-14-矩阵初等变换"><a href="#3-14-矩阵初等变换" class="headerlink" title="3.14 矩阵初等变换"></a>3.14 矩阵初等变换</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/23.png"></p><h4 id="3-15-矩阵的秩"><a href="#3-15-矩阵的秩" class="headerlink" title="3.15 矩阵的秩"></a>3.15 矩阵的秩</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/24.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/25.png"></p><h4 id="3-16-齐次线性方程组"><a href="#3-16-齐次线性方程组" class="headerlink" title="3.16 齐次线性方程组"></a>3.16 齐次线性方程组</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/26.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/27.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/28.png"></p><h3 id="4-特征值分解"><a href="#4-特征值分解" class="headerlink" title="4. 特征值分解"></a>4. 特征值分解</h3><h4 id="4-1-特征值特征向量"><a href="#4-1-特征值特征向量" class="headerlink" title="4.1 特征值特征向量"></a>4.1 特征值特征向量</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/29.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/30.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/31.png"></p><h4 id="4-2-特征值分解"><a href="#4-2-特征值分解" class="headerlink" title="4.2 特征值分解"></a>4.2 特征值分解</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/32.png"></p><h4 id="4-3-向量求导"><a href="#4-3-向量求导" class="headerlink" title="4.3 向量求导"></a>4.3 向量求导</h4><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/33.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/2-xian-xing-dai-shu/34.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-高等数学</title>
      <link href="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/"/>
      <url>/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/</url>
      
        <content type="html"><![CDATA[<h3 id="1-机器学习常见数字符号"><a href="#1-机器学习常见数字符号" class="headerlink" title="1. 机器学习常见数字符号"></a>1. 机器学习常见数字符号</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/1.png"></p><h3 id="2-常见函数"><a href="#2-常见函数" class="headerlink" title="2. 常见函数"></a>2. 常见函数</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/2.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/3.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/4.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/5.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/6.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/7.png"></p><h3 id="3-斜率-导数"><a href="#3-斜率-导数" class="headerlink" title="3. 斜率 导数"></a>3. 斜率 导数</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/8.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/9.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/10.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/11.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/12.png"></p><h3 id="4-函数单调性"><a href="#4-函数单调性" class="headerlink" title="4. 函数单调性"></a>4. 函数单调性</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/13.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/14.png"></p><h3 id="5-梯度下降"><a href="#5-梯度下降" class="headerlink" title="5. 梯度下降"></a>5. 梯度下降</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/15.png"></p><h3 id="6-距离公式"><a href="#6-距离公式" class="headerlink" title="6. 距离公式"></a>6. 距离公式</h3><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/16.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/17.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/18.png"></p><p><img src="/2023/03/21/shu-ju-fen-xi-ji-chu/1-gao-deng-shu-xue/19.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-图片风格迁移</title>
      <link href="/2023/03/21/zhi-shi-zong-jie/11-feng-ge-qian-yi/"/>
      <url>/2023/03/21/zhi-shi-zong-jie/11-feng-ge-qian-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基本依据"><a href="#1-基本依据" class="headerlink" title="1. 基本依据"></a>1. 基本依据</h2><p>基本原理：</p><ul><li>两张图像经过预训练好的分类网络，若提取出的高维特征之间的(欧氏)距离越小，则这两张图像内容越相似</li><li>两张图像经过预训练好的分类网络，若提取出的低维特征在数值上基本相等，则这两张图像越相似，换句话说，两张图像相似等价于二者特征的Gram矩阵具有较小的弗罗贝尼乌斯范数。</li></ul><p><img src="/2023/03/21/zhi-shi-zong-jie/11-feng-ge-qian-yi/neural_style.jpeg"></p><h2 id="2-VGGNet"><a href="#2-VGGNet" class="headerlink" title="2. VGGNet"></a>2. VGGNet</h2><p>VGGNet是牛津大学计算机视觉组（Visual Geometry Group）和Google DeepMind公司的研究员一起在2014年研发出的新深度卷积神经网络，并取得了ILSVRC2014比赛分类项目的第二名（第一名是GoogLeNet，也是同年提出的）和定位项目的第一名。VGGNet探索了卷积神经网络的深度与其性能之间的关系，成功地构筑了16~19层深的卷积神经网络，证明了增加网络的深度能够在一定程度上影响网络最终的性能，使错误率大幅下降，同时拓展性又很强，迁移到其它图片数据上的泛化性也非常好。</p><p>VGGNet是AlexNet（2012）的加深版，都是由卷积层、全连接层两大部分构成。VGGNet常用的结构有16层和19层，下面给出VGGNet16结构：</p><p><img src="/2023/03/21/zhi-shi-zong-jie/11-feng-ge-qian-yi/vggnet.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/11-feng-ge-qian-yi/vgg16_2.png"></p><p>VGGNet结构说明：</p><ul><li>输入224x224x3的图片，经64个3x3的卷积核作两次卷积+ReLU，卷积后的尺寸变为224x224x64</li><li>作max pooling（最大化池化），池化单元尺寸为2x2（效果为图像尺寸减半），池化后的尺寸变为112x112x64</li><li>经128个3x3的卷积核作两次卷积+ReLU，尺寸变为112x112x128</li><li>作2x2的max pooling池化，尺寸变为56x56x128</li><li>经256个3x3的卷积核作三次卷积+ReLU，尺寸变为56x56x256</li><li>作2x2的max pooling池化，尺寸变为28x28x256</li><li>经512个3x3的卷积核作三次卷积+ReLU，尺寸变为28x28x512</li><li>作2x2的max pooling池化，尺寸变为14x14x512</li><li>经512个3x3的卷积核作三次卷积+ReLU，尺寸变为14x14x512</li><li>作2x2的max pooling池化，尺寸变为7x7x512</li><li>与两层1x1x4096，一层1x1x1000进行全连接+ReLU（共三层）</li><li>通过softmax输出1000个预测结果</li></ul><p>简单而言，VGGNet的本意是输入图像、提取特征并输出图像类别，前面的卷积层是从图像中提取特征，后面的全连接层是把图片特征转换为概率，其中VGGNet中的浅层（如conv1_1, conv1_2）提取的特征主要是像检测点、线、亮度此类比较简单的特征，中间层（如conv5_1, conv5_2, conv5_3）提取的特征主要是像有无人脸或某种特定物体的复杂特征。</p><h2 id="3-梯度下降"><a href="#3-梯度下降" class="headerlink" title="3. 梯度下降"></a>3. 梯度下降</h2><p>梯度下降法（英语：Gradient descent）是一个一阶最优化算法，通常也称为最速下降法。 要使用梯度下降法找到一个函数的局部极小值，必须向函数上当前点对应梯度（或者是近似梯度）的反方向的规定步长距离点进行迭代搜索。如果相反地向梯度正方向迭代进行搜索，则会接近函数的局部极大值点；这个过程则被称为梯度上升法。</p><p><img src="/2023/03/21/zhi-shi-zong-jie/11-feng-ge-qian-yi/Gradient_ascent_contour.png"></p><p>梯度下降法的缺点包括：</p><ul><li>靠近极小值时速度减慢。</li><li>直线搜索可能会产生问题。</li><li>可能会“之字型”地下降</li></ul><h2 id="4-Gram-矩阵"><a href="#4-Gram-矩阵" class="headerlink" title="4. Gram 矩阵"></a>4. Gram 矩阵</h2><p>Gram矩阵是一组向量的内积的对称矩阵，例如，向量组$\overrightarrow{x_{1}},\overrightarrow{x_{2}},\cdots,\overrightarrow{x_{n}}$的Gram矩阵为</p><p>$$ \begin{bmatrix}<br>(\overrightarrow{x_{1}}, \overrightarrow{x_{1}}) &amp; (\overrightarrow{x_{1}}, \overrightarrow{x_{2}}) &amp; \cdots &amp; (\overrightarrow{x_{1}}, \overrightarrow{x_{n}}) \<br>(\overrightarrow{x_{2}}, \overrightarrow{x_{1}}) &amp; (\overrightarrow{x_{2}}, \overrightarrow{x_{2}}) &amp; \cdots &amp; (\overrightarrow{x_{2}}, \overrightarrow{x_{n}}) \<br>\cdots &amp; \cdots &amp; \cdots &amp; \cdots \<br>(\overrightarrow{x_{n}}, \overrightarrow{x_{1}}) &amp; (\overrightarrow{x_{n}}, \overrightarrow{x_{2}}) &amp; \cdots &amp; (\overrightarrow{x_{n}}, \overrightarrow{x_{n}}) \<br>\end{bmatrix} $$</p><p>此处的内积通常为欧几里得空间中的标准内积，$(\overrightarrow{x_{i}}, \overrightarrow{x_{j}}) = \overrightarrow{x_{i}}^{T}\overrightarrow{x_{j}}$</p><p>设卷积层的输出为$F_{ij}^{l}$，则卷积特征对应的Gram矩阵为</p><p>$$D_{ij}^{l} = \sum_{k}F_{ik}^{l}F_{jk}^{l}$$</p><p>设在第$l$层，卷积特征的通道数为$N_{l}$，卷积第高、宽乘积为$M_{1}$，则$F_{ij}^{l}$满足$1 \leq i \leq N_{l}, 1 \leq j \leq M_{l}$，G就是向量组$\overrightarrow{F_{1}^{l}},\overrightarrow{F_{2}^{l}},\cdots,\overrightarrow{F_{N_{l}}^{l}}$的Gram矩阵，其中$F_{i}^{l} = (F_{i1}^{l}, F_{i2}^{l}, \dots, F_{iM_{l}}^{l})$</p><h2 id="5-损失定义"><a href="#5-损失定义" class="headerlink" title="5. 损失定义"></a>5. 损失定义</h2><h3 id="5-1-内容损失"><a href="#5-1-内容损失" class="headerlink" title="5.1 内容损失"></a>5.1 内容损失</h3><p>风格迁移就是使用卷积层的中间特征还原出对应这种特征的原始图像，如下图所示，先提取一副原始图像，经过VGGNet计算后得到各个卷积层的特征。然后根据这些特征，还原出对应这种特征的原始图像。从左到又分别是conv1_2，conv2_2，conv3_2，conv4_2，conv5_2。</p><p><img src="/2023/03/21/zhi-shi-zong-jie/11-feng-ge-qian-yi/vgg_layer.png"></p><p>浅层的还原效果比较好，卷积特征基本保留了原始图像中的形状、位置、颜色和纹理等信息，深层对应的还原图像丢失了部分颜色和纹理信息，但大体保留了原始图像中的形状和位置。</p><p>还原图像采用梯度下降法。设原始图像为$\overrightarrow{p}$，期望还原（自动生成）的图像为$\overrightarrow{x}$，使用$l$层卷积，则将原始特征$\overrightarrow{p}$在第$l$层的卷积特征定义为$P_{ij}^{l}$。其中$i$表示卷积的第$i$个通道，$j$表示卷积的第$j$个位置，通常卷积有宽、高、通道三纬度，此处不考虑宽高，只考虑位置，相当于把图片扁平化了。如一个$10 \times 10 \times 32$ 的卷积特征，对应$1 \leq i \leq 32, 1 \leq j \leq 100$。同样的，生成图像$\overrightarrow{x}$在$l$层卷积特征为$F_{ij}^{l}$。</p><p>于是内容损失可以定义为：</p><p>$$L_{content}(\overrightarrow{p}, \overrightarrow{x}, l) = \frac{1}{2}\sum_{i,j}(F_{ij}^{l} - P_{ij}^{l})^{2}$$</p><p>内容损失描述了原始图像$\overrightarrow{p}$和生成图像$\overrightarrow{x}$在内容上的“差异”，$L_{content}(\overrightarrow{p}, \overrightarrow{x}, l)$越小，说明它们的内容越接近，反之亦然。</p><p>先用原始图像$\overrightarrow{p}$计算出卷积特征$P_{ij}^{l}$，同时随机初始化$\overrightarrow{x}$，然后以内容损失$L_{content}(\overrightarrow{p}, \overrightarrow{x}, l)$为优化目标，通过梯度下降法逐步改变$\overrightarrow{x}$，经过一定步数后，得到的$\overrightarrow{x}$就是喜欢还原的图像，在该过程中，内容损失会不断下降（具体下降到什么地方有专门的正则化方法）。</p><h3 id="5-2-风格损失"><a href="#5-2-风格损失" class="headerlink" title="5.2 风格损失"></a>5.2 风格损失</h3><p>除了内容，图像的风格怎么表示呢，一种方法就是使用图像的Gram矩阵。</p><p>还是假设某一层（$l$层）输入的卷积特征为$10 \times 10 \times 32$，即一个宽、高均为10，通道数为32的张量，$F_{1}^{l}$表示第一个通道的特征，它是一个100维第向量，$F_{2}^{l}$表示第二个通道的特征，它也是一个100维第向量，它对应第Gram矩阵G为</p><p>$$ \begin{bmatrix}<br>(\overrightarrow{F_{1}^{l}})^{T}(\overrightarrow{F_{1}^{l}}) &amp; (\overrightarrow{F_{1}^{l}})^{T}(\overrightarrow{F_{2}^{l}}) &amp; \cdots &amp; (\overrightarrow{F_{1}^{l}})^{T}(\overrightarrow{F_{32}^{l}}) \<br>(\overrightarrow{F_{2}^{l}})^{T}(\overrightarrow{F_{1}^{l}}) &amp; (\overrightarrow{F_{2}^{l}})^{T}(\overrightarrow{F_{2}^{l}}) &amp; \cdots &amp; (\overrightarrow{F_{2}^{l}})^{T}(\overrightarrow{F_{32}^{l}}) \<br>\cdots &amp; \cdots &amp; \cdots &amp; \cdots \<br>(\overrightarrow{F_{32}^{l}})^{T}(\overrightarrow{F_{1}^{l}}) &amp; (\overrightarrow{F_{32}^{l}})^{T}(\overrightarrow{F_{2}^{l}}) &amp; \cdots &amp; (\overrightarrow{F_{32}^{l}})^{T}(\overrightarrow{F_{32}^{l}}) \<br>\end{bmatrix} $$</p><p>这样的Gram矩阵就可以在一定程度上反映原始图片第风格，仿照内容损失函数，可以定义风格损失函数。</p><p>设原始图像为$\overrightarrow{a}$，要还原第风格图像是$\overrightarrow{x}$，先计算出原始图像某一层卷积第Gram矩阵$A^{l}$，要还原的图像$\overrightarrow{x}$经过同样计算得到对应卷积的Gram矩阵$X^{l}$，风格损失定义为</p><p>$$L_{style}(\overrightarrow{a}, \overrightarrow{x}, l) = \frac{1}{4 N_{l}^{2} M_{l}^{2}}\sum_{i,j}(A_{ij}^{l} - X_{ij}^{l})^{2}$$</p><p>在实际应用中，常使用多层而非一层的风格损失，多层风格损失是单层风格损失的加权累加，即</p><p>$$L_{style}(\overrightarrow{a}, \overrightarrow{x}) = \sum_{l}w_{l}L_{style}(\overrightarrow{a}, \overrightarrow{x}, l)$$</p><p>其中$w_{l}$为$l$层的权重。</p><p>于是我们就能得到这样的风格图</p><p><img src="/2023/03/21/zhi-shi-zong-jie/11-feng-ge-qian-yi/style.png"></p><p>从左到又分别依据以下还原</p><ul><li>conv1_1</li><li>conv1_1, conv2_1</li><li>conv1_1, conv2_1，conv3_1</li><li>conv1_1, conv2_1，conv3_1，conv4_1</li><li>conv1_1, conv2_1，conv3_1，conv4_1，conv5_1</li></ul><p>和内容还原结果类似，浅层还原的风格图像纹理尺度较小，只保留了颜色和局部的纹理，组合浅层、深层还原出的风格图像更加真实且接近于原图片。</p><h2 id="6-风格迁移"><a href="#6-风格迁移" class="headerlink" title="6. 风格迁移"></a>6. 风格迁移</h2><p>现在有了内容损失和风格损失，可以分别还原图像内容和图像风格，那现在就可以将内容损失和风格损失组合起来，在还原一张图像的同时还原另一张图像的风格，这就是图像风格迁移。</p><p>设原始内容图像$\overrightarrow{p}$，原始的风格图像为$\overrightarrow{a}$，待生成的图像为$\overrightarrow{x}$，希望生成的$\overrightarrow{x}$保持$\overrightarrow{p}$的内容，同时由保留$\overrightarrow{a}$的风格，因此组合$\overrightarrow{p}$的内容损失和$\overrightarrow{a}$的风格损失，定义总的损失为</p><p>$$L_{total}(\overrightarrow{p}, \overrightarrow{a}, \overrightarrow{x}) = \alpha L_{content}(\overrightarrow{p}, \overrightarrow{x}) + \beta L_{style}(\overrightarrow{a}, \overrightarrow{x})$$</p><p>其中$\alpha, \beta$是平衡权重的超参数，使用总的损失函数可以组合$\overrightarrow{p}$的内容和$\overrightarrow{a}$的风格，这就实现了图像风格迁移。部分迁移效果如下（原始风格迁移）</p><p><img src="/2023/03/21/zhi-shi-zong-jie/11-feng-ge-qian-yi/style_demo.png"></p><h2 id="7-风格迁移优化"><a href="#7-风格迁移优化" class="headerlink" title="7. 风格迁移优化"></a>7. 风格迁移优化</h2><h3 id="7-1-原始风格迁移"><a href="#7-1-原始风格迁移" class="headerlink" title="7.1 原始风格迁移"></a>7.1 原始风格迁移</h3><p>基于前面定义的损失就能搭建原始的风格迁移模型，但是该风格迁移模型运行非常慢，CPU上生成单张图片需要十几分钟到几个小时不等，即使在GPU上也需要数分钟。慢的原因是用总损失$L_{total}(\overrightarrow{p}, \overrightarrow{a}, \overrightarrow{x})$来优化图片$\overrightarrow{x}$，意味着每生成一张图片都需要数百步的梯度下降迭代，所以耗时就上来了。</p><p>原始风格迁移把优化$\overrightarrow{x}$定义成了训练的过程，训练是非常耗时的，一种提升速度的方法就是把这个过程变成执行的过程。</p><p>论文地址： <a href="https://arxiv.org/abs/1508.06576">A Neural Algorithm of Artistic Style</a></p><h3 id="7-2-快速风格迁移"><a href="#7-2-快速风格迁移" class="headerlink" title="7.2 快速风格迁移"></a>7.2 快速风格迁移</h3><p>快速风格迁移不使用优化的方法来逐步迭代生成$\overrightarrow{x}$，而是使用一个神经网络来直接生成$\overrightarrow{x}$，网络结构如下</p><p><img src="/2023/03/21/zhi-shi-zong-jie/11-feng-ge-qian-yi/fast_style.png"></p><p>整个系统由两部分组成，左边是图像生成网络，右边是图像损失网络。损失网络实际上就是VGGNet，这与原始的风格迁移一致。利用损失网络来定义内容损失和风格损失，然后用这个损失来训练生成网络。</p><p>图像生成网络的目的就是生成某一种风格的图像，输入是一个图像，输出还是一张图像，此时图片生成就变成了一个执行神经网络的过程，所以速度就变很快，CPU上几秒钟，GPU上一般低于1秒。</p><p>论文地址：<a href="https://arxiv.org/abs/1603.08155">Perceptual Losses for Real-Time Style Transfer and Super-Resolution</a></p><h2 id="8-实践"><a href="#8-实践" class="headerlink" title="8. 实践"></a>8. 实践</h2><h3 id="9-效果图"><a href="#9-效果图" class="headerlink" title="9. 效果图"></a>9. 效果图</h3><p><img src="/2023/03/21/zhi-shi-zong-jie/11-feng-ge-qian-yi/ret_1.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/11-feng-ge-qian-yi/ret_2.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/11-feng-ge-qian-yi/ret_3.png"></p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 风格迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-机器学习-统计学</title>
      <link href="/2023/03/21/zhi-shi-zong-jie/10-ji-qi-xue-xi-tong-ji-xue/"/>
      <url>/2023/03/21/zhi-shi-zong-jie/10-ji-qi-xue-xi-tong-ji-xue/</url>
      
        <content type="html"><![CDATA[<h2 id="1-机器学习与统计学习"><a href="#1-机器学习与统计学习" class="headerlink" title="1. 机器学习与统计学习"></a>1. 机器学习与统计学习</h2><p>统计强调推理，而机器学习则强调预测，他们一个很大的区别在于目的不同。机器学习与统计学习都是支撑数据建模，不同的是机器学习是数据建模的计算机视角，侧重技能；统计学习是数据建模的数学视角，侧重推断。</p><h2 id="2-部分机器学习算法中的统计学"><a href="#2-部分机器学习算法中的统计学" class="headerlink" title="2. 部分机器学习算法中的统计学"></a>2. 部分机器学习算法中的统计学</h2><table><thead><tr><th align="left">算法</th><th align="left">数理统计理论</th></tr></thead><tbody><tr><td align="left">贝叶斯分类器</td><td align="left">随机变量，贝叶斯公式，随机变量独立性，正态分布，最大似然估计</td></tr><tr><td align="left">贝叶斯网络</td><td align="left">条件概率，贝叶斯公式</td></tr><tr><td align="left">决策数</td><td align="left">概率，熵</td></tr><tr><td align="left">主成分分析</td><td align="left">协方差矩阵，特征值与特征向量</td></tr><tr><td align="left">logistic</td><td align="left">概率，随机变量，最大似然估计</td></tr><tr><td align="left">随机森林</td><td align="left">抽样，方差</td></tr><tr><td align="left">隐马尔可夫链</td><td align="left">概率，离散型随机变量，条件概率，随机变量独立性，虽大似然估计</td></tr><tr><td align="left">条件随机场</td><td align="left">条件概率，数学期望，最大似然估计</td></tr><tr><td align="left">高斯混合模型</td><td align="left">正态分布，最大似然估计</td></tr><tr><td align="left">生成对抗神经网络</td><td align="left">条件分布</td></tr></tbody></table><h2 id="3-一些统计学概念"><a href="#3-一些统计学概念" class="headerlink" title="3. 一些统计学概念"></a>3. 一些统计学概念</h2><h3 id="3-1-概率与条件概率"><a href="#3-1-概率与条件概率" class="headerlink" title="3.1 概率与条件概率"></a>3.1 概率与条件概率</h3><h4 id="3-1-1-概率"><a href="#3-1-1-概率" class="headerlink" title="3.1.1 概率"></a>3.1.1 概率</h4><p>现实世界中有一些概念是确定的，如石头下落，树木生长；同时一些是不确定的，如抛掷硬币，打靶射击。</p><p>不确定说明具有随机性，如果一个试验可以重复但每次结果不止一个，事先知道所有可能（样本空间）但不能确定每次出现什么结果（样本点），这就叫随机试验；随机试验中我们关心的子集就是随机事件。</p><p>抛掷一枚硬币100次，正面朝上与反面朝上分别60次（频数）和40次，频率分别是0.6和0.4，当重复试验次数增加，频率会变得稳定，下图表示英文单词中每个字母出现的频率。</p><p><img src="/2023/03/21/zhi-shi-zong-jie/10-ji-qi-xue-xi-tong-ji-xue/English_letter_frequency.png" alt="英文单词中每个字母出现的频率"></p><p>但现实中我们不可能每个事件都做大量的试验，所以使用概率来表征时间可能性。后面会聊到大数定律，就是当数量足够大后，频率趋近与概率。</p><p>如果集合函数 $P(\cdot)$ 满足下列条件，$P(A)$就是事件A的概率：</p><ol><li>非负性：对于每一个事件 A，有 $P(A)\geq 0$;</li><li>规范性：对于必然事件 S，有 $P(S)=1$;</li><li>可列可加性：设 $A_{1}$, $A_{2}$, ……是两两互不相容的事件，及对$A_{i}A_{j} = \Phi$,$i \neq j$, $i$, $j$ = 1,2,……，有<br>$$P(A_{1} \cup A_{2} \cup …) = P(A_{1}) + P(A_{2}) + … $$</li></ol><p>例：在1-2000的整数中随机取一个数，取到的整数既不能被6整除又不能被8整除的概率是多少：</p><p>$$P(\bar{A}\bar{B}) = P(\overline{A \cup B}) = 1 - P(A \cup  B)$$<br>$$= 1 - [P(A) + P(B) - P(AB)]$$<br>$$p = 1 - (\frac{333}{2000} + \frac{250}{2000} - \frac{83}{2000}) = \frac{3}{4}$$</p><h4 id="3-1-2-条件概率"><a href="#3-1-2-条件概率" class="headerlink" title="3.1.2 条件概率"></a>3.1.2 条件概率</h4><p>条件概率是在事件A发生了的基础上B发生的概率，且 $P(A) &gt; 0$，则<br>$$P(B | A) = \frac{P(AB)}{P(A)}$$<br>为事件A发生的条件下事件B发生的条件概率。</p><p>同概率的定义，条件概率同样满足3个条件。</p><ol><li>非负性</li><li>规范性</li><li>可列可加性</li></ol><p>所以对于任意事件 $B_{1}$，$B_{2}$，有<br>$$P(B_{1} \cup B_{2} | A) = P(B_{1} | A) + P(B_{2} | A) - P(B_{1}B_{2}| A)$$</p><h3 id="3-2-随机变量与分布"><a href="#3-2-随机变量与分布" class="headerlink" title="3.2 随机变量与分布"></a>3.2 随机变量与分布</h3><h4 id="3-2-1-随机变量"><a href="#3-2-1-随机变量" class="headerlink" title="3.2.1 随机变量"></a>3.2.1 随机变量</h4><p>随机试验的结果可以用数表示，每个样本空间中的元素都是数，但有时候样本空间S的元素不是一个数，此时难以研究，所以将S中的每个元素与实数空间联对应起来，于是有了随机变量。</p><p>同样抛掷硬币为例，一枚硬币投掷3次，样本空间为（假设正面为H，反面为T）：<br>$$S = {HHH, HHT, HTH, THH, HTT, THT, TTH, TTT}$$<br>若以X记三次投掷得倒正面H的总数，则S中的每一个样本点，在X中都有一个数与之对应，于是得到一个定义域为S，值域为${0, 1, 2, 3}$的函数：</p><p>$$X = X(e) =<br>\begin{cases}<br>3 &amp; e = HHH, \<br>2 &amp; e = HHT, HTH, THH, \<br>1 &amp; e = HTT, THT, TTH, \<br>0 &amp; e = TTT.<br>\end{cases}$$</p><p>以上记${X = 2}$，对应样本点集合 $A = {HHT, HTH, THH}$<br>，这一事件当且仅当事件A发生时有${X = 2}$。类似有：<br>$$P{X \leq 1} = P(HTT, THT, TTH, TTT) = \frac{1}{2}$$</p><h4 id="3-2-2-离散型随机变量分布"><a href="#3-2-2-离散型随机变量分布" class="headerlink" title="3.2.2 离散型随机变量分布"></a>3.2.2 离散型随机变量分布</h4><h5 id="3-2-2-1离散型随机分布"><a href="#3-2-2-1离散型随机分布" class="headerlink" title="3.2.2.1离散型随机分布"></a>3.2.2.1离散型随机分布</h5><p>离散型随机变量定义：全部可能取到的值是有限个或可列无限多个。<br>设全部可能取到的值为$x_{k}(k=1,2,3,…)$，则事件${X = x_{k}}$的概率为：<br>$$P{X = x_{k}} = p_{k}, k = 1,2,3,…$$<br>以上也叫随机变量X的分布律</p><h5 id="3-2-2-2-0-1-分布"><a href="#3-2-2-2-0-1-分布" class="headerlink" title="3.2.2.2 (0-1)分布"></a>3.2.2.2 (0-1)分布</h5><p>设随机变量X只可能是取0与1两个值，它的分布律是<br>$$P{X = k} = p^{k}(1 - p)^{1 - k}, k = 0, 1 (0 &lt; p &lt; 1)$$<br>则称X服从$p$为参数的(0-1)分布或两点分布<br>其随机变量函数为：<br>$$X = X(e) =<br>\begin{cases}<br>0 &amp; e = e_{1}, \<br>1 &amp; e = e_{2}.<br>\end{cases}$$<br>实际中的0-1分布如：新生儿性别，产品质量是否合格，PM2.5是否超标等。</p><h5 id="3-2-2-3-二项分布（伯努利试验）"><a href="#3-2-2-3-二项分布（伯努利试验）" class="headerlink" title="3.2.2.3 二项分布（伯努利试验）"></a>3.2.2.3 二项分布（伯努利试验）</h5><p>设试验E只有两种可能结果：$A$ 及 $\overline{A}$，则称E为伯努利试验。设$P(A) = p(0 &lt; p &lt; 1)$，此时$P(\overline{A}) = 1 - p$，将E独立重复（指每次$P(A) = p$保持不变）地进行n次，则这一串重复的独立试验为 n重伯努利试验。</p><p>n重伯努利试验某个A事件发生k次的概率可以记为：<br>$$\underbrace{p \cdot p \cdot … \cdot p}_{k个} \cdot \underbrace{(1 - p) \cdot (1 - p) \cdot … \cdot (1 - p)}_{n - k个} = p^{k}(1 - p)^{n - k}$$<br>这种指定的方式共有${n \choose k}$种，它们两两互不容，故在n次实验中A发生k次的概率为:<br>$$P{X = k} = {n \choose k}p^{k}q^{n - k}, k = 0,1,2,…,n.$$<br>$P{X = k} = {n \choose k}p^{k}q^{n - k}$正好是$(p + q)^{n}$的展开式中出现$p^{k}$的哪一项，故称变量X服从$n,p$的二项分布。</p><p>特别地：当$n = 1$时二项分布就是为<br>$$P{X = k} = p^{k}q^{1-k}$$</p><p>实际中二项分布的例子：单次射击命中率为0.02，独立射击400次</p><p>求至少命中两次的概率。<br>$$P{X = k} = {400 \choose k}(0.02)^{k}(0.98)^{400-k}, k = 0,1,2,…,400$$<br>于是所求概率为：<br>$$P{X \geq 2} = 1 - P{X = 0} - P{X = 1}$$</p><h5 id="3-2-2-4-柏松分布"><a href="#3-2-2-4-柏松分布" class="headerlink" title="3.2.2.4 柏松分布"></a>3.2.2.4 柏松分布</h5><p>设随机变量X所有可能取的值为0,1,2,…，取各个值的概率为<br>$$P{X = k} = \frac{\lambda^{k}e^{-\lambda}}{k!}, k = 0,1,2,…$$<br>其中$\lambda$是常数，则称X服从参数为$\lambda$的柏松分布。</p><p>实际中服从柏松分布的例子如：一本书一页中的印刷错误数，某地区一天内邮递遗失的信件数，某一医院一天内的急症病人数，某地区一个事件间隔内发生的交通事故次数。</p><p>柏松定理，设$\lambda$是一个常数，n是任意正整数，设$np_{n} = \lambda$，则对于任一个固定的非负整数k，有<br>$$\lim_{y \to \infty}{n \choose k}p^{k}_{n}(1 - p_{n})^{n - k} = \frac{\lambda^{k}e^{-\lambda}}{k!}$$<br>直观理解一下<br>柏松分布就是当n很大，但p很小时候的二项分布逼近</p><h4 id="3-2-3-连续型随机变量分布"><a href="#3-2-3-连续型随机变量分布" class="headerlink" title="3.2.3 连续型随机变量分布"></a>3.2.3 连续型随机变量分布</h4><h5 id="3-2-3-1-连续型随机分布"><a href="#3-2-3-1-连续型随机分布" class="headerlink" title="3.2.3.1 连续型随机分布"></a>3.2.3.1 连续型随机分布</h5><p>区别与离散型随机变量，连续型随机变量的样本空间值是不能被一一列举的，比如误差，元件寿命等。对于这样的随机变量，我们不太关注具体数值出现的概率，而是落在某一区间内的概率。于是有：<br>$$P{x_{1} &lt; X \leq x_{2}} = P{X \leq x_{2}} - P{X \leq x_{1}}$$</p><p>记：<br>$$F(x) = P{X \leq x}, -\infty &lt; x &lt; \infty$$<br>为X的分布函数</p><p>对于分布函数F(x)，存在非负函数f(x)，使得任意实数x有：<br>$$F(x) = \int^{x}_{-\infty}{f(t)dt}$$<br>则X为连续型随机变量，其中函数f(x)为X的概率密度函数（概率密度）。</p><h5 id="3-2-3-2-均匀分布"><a href="#3-2-3-2-均匀分布" class="headerlink" title="3.2.3.2 均匀分布"></a>3.2.3.2 均匀分布</h5><p>均匀分布的概率密度函数：<br>$$f(x) =<br>\begin{cases}<br>\frac{1}{b - a} &amp; a &lt; x &lt; b, \<br>0 &amp; 其他,<br>\end{cases}$$<br>该密度函数表示随机变量X落在区间(a,b)中任意长度的子区间内的可能性是相同的，概率只依赖于子区间长度，而与子区间未知无关。</p><p>通过对均匀分布密度函数求积分可得分布函数为：</p><p>$$F(x) =<br>\begin{cases}<br>0 &amp; x &lt; a, \<br>\frac{x - a}{b - a} &amp; a \leq x &lt; b, \<br>1 &amp; x \geq b,<br>\end{cases}$$</p><p>均匀分布密度函数与分布函数分别如下</p><p><img src="/2023/03/21/zhi-shi-zong-jie/10-ji-qi-xue-xi-tong-ji-xue/uniform_distribution.png" alt="均匀分布密度函数与分布函数"></p><h5 id="3-2-3-3-指数分布"><a href="#3-2-3-3-指数分布" class="headerlink" title="3.2.3.3 指数分布"></a>3.2.3.3 指数分布</h5><p>指数分布的密度函数为（$\theta &gt; 0$ 为常数）：<br>$$f(x) =<br>\begin{cases}<br>\frac{1}{\theta}e^{-x/\theta} &amp; x &gt; 0, \<br>0 &amp; 其他,<br>\end{cases}$$</p><p>通过对指数分布密度函数求积分可得分布函数为：<br>$$f(x) =<br>\begin{cases}<br>1 - e^{-x/\theta} &amp; x &gt; 0, \<br>0 &amp; 其他,<br>\end{cases}$$<br>指数分布有一个重要的性质是无记忆性，比如一个电子元件已经使用了s小时，它总共能使用至少s+t小时的条件概率，与从开始使用时候算起至少使用t小时的概率相等，即对已经使用的s小时没有记忆。</p><p>指数分布无记忆性公式：<br>$$P{X &gt; s + t | X &gt; s} = P{X &gt; t}$$</p><h5 id="3-2-3-4-正态分布"><a href="#3-2-3-4-正态分布" class="headerlink" title="3.2.3.4 正态分布"></a>3.2.3.4 正态分布</h5><p>正态分布的密度函数为（$\mu,\sigma(\sigma &gt; 0)$为常数）：<br>$$f(x) = \frac{1}{\sqrt{2\pi}\sigma}e^-{\frac{(x - \mu)^{2}}{2\sigma ^{2}}}, -\infty &lt; x &lt; \infty$$</p><p>特别地，当$\mu = 0,\sigma = 1$时候称随机变量X服从标准正态分布。</p><p>对于任意一个正态分布，经过一个线性变换就能转化成标准正态分布。</p><p>若$X ～ N(\mu,\sigma^{2})$，则$Z = \frac{X - \mu}{\sigma} ～ N(0, 1)$</p><p>正态分布函数与密度函数分别如下</p><p><img src="/2023/03/21/zhi-shi-zong-jie/10-ji-qi-xue-xi-tong-ji-xue/normal_distribution.png" alt="正态分布函数与密度函数"></p><p>尽管正态变量的取之范围是$(-\infty, \infty)$，但它的值落在$(\mu - 3\sigma, \mu + 3\sigma)$内几乎是肯定的事，所以常被认为是$3\sigma$法则（$1\sigma$概率68.26%，$2\sigma$概率95.44%，$3\sigma$概率99.76%）。</p><h3 id="3-3-随机变量的数字特征"><a href="#3-3-随机变量的数字特征" class="headerlink" title="3.3 随机变量的数字特征"></a>3.3 随机变量的数字特征</h3><h4 id="3-3-1-数学期望（一阶原点矩）"><a href="#3-3-1-数学期望（一阶原点矩）" class="headerlink" title="3.3.1 数学期望（一阶原点矩）"></a>3.3.1 数学期望（一阶原点矩）</h4><p>若离散型随机变量X的分布律为：<br>$$P{X = x_{k}} = p_{k}, k = 1,2,…$$<br>若级数<br>$$\sum^{\infty}_{k = 1}{x_{k}p_{k}}$$<br>绝对收敛，则该级数的和为随机变量X的数学期望，记为$E(X)$。</p><p>同理：</p><p>设连续型随机变量X的概率密度函数为$f(x)$，若积分<br>$$\int^{\infty}_{-\infty}{xf(x)dx}$$<br>绝对收敛，则该积分的值为随机变量X的数学期望，记为$E(X)$。</p><p>数学期望$E(X)$由随机变量X的概率分布确定，若X服从某一分布，则$E(X)$为这一分布的数学期望。</p><h4 id="3-3-2-方差（二阶中心矩）"><a href="#3-3-2-方差（二阶中心矩）" class="headerlink" title="3.3.2 方差（二阶中心矩）"></a>3.3.2 方差（二阶中心矩）</h4><p>数学期望可以评估平均水平，但实际中往往还需要评估偏离程度，于是用<br>$$E{|X - E(X)|}$$<br>来度量偏离程度，因绝对值运算不方便，故使用<br>$$E{[X - E(X)]^{2}}$$<br>来度量偏离程度，记为$D(X)$或$Var(X)$（在实际应用中引入$\sqrt{D(X)}$，记为$\sigma(X)$）表示标准差。</p><p>对于分布率为$P{X = x_{k}} = p_{k}, k = 1,2,…$的离散型随机变量有：<br>$$D(X) = \sum^{\infty}_{k = 1}{[X_{k} - E(X)]^{2}p_{k}}$$</p><p>对于概率密度是$f(x)$的连续型随机变量有：<br>$$D(X) = \int^{\infty}_{-\infty}{[x - E(X)]^{2}f(x)dx}$$</p><h4 id="3-3-3-协方差与相关系数"><a href="#3-3-3-协方差与相关系数" class="headerlink" title="3.3.3 协方差与相关系数"></a>3.3.3 协方差与相关系数</h4><p>对于二维随机变量(X, Y)，除了X与Y的数学期望和方差之外，还需要度量X与Y之间的相互关系。</p><p>若两个随机变量X与Y相互独立，则容易得出：<br>$$E{[X - E(X)][Y - E(Y)]} = 0$$<br>这说明当$E{[X - E(X)][Y - E(Y)]} \neq 0$时，X与Y存在一定关系（不相互独立）。</p><p>于是记$E{[X - E(X)][Y - E(Y)]}$为随机变量X与Y的协方差，记为$Cov(X, Y)$，即：<br>$$Cov(X, Y) = E{[X - E(X)][Y - E(Y)]}$$<br>而<br>$$\rho_{xy} = \frac{Cov(X, Y)}{\sqrt{D(X)}\sqrt{D(Y)}}$$<br>就是随机变量X与Y的相关系数。</p><p>于是对于任意两个随机变量X与Y，有<br>$$D(X + Y) = D(X) + D(Y) + 2Cov(X, Y)$$<br>$$Cov(X, Y) = E(XY) - E(X)E(Y)$$</p><h2 id="4-机器学习中的统计学基础"><a href="#4-机器学习中的统计学基础" class="headerlink" title="4. 机器学习中的统计学基础"></a>4. 机器学习中的统计学基础</h2><h3 id="4-1-训练样本预测测试样本是可行的——样本与抽样分布"><a href="#4-1-训练样本预测测试样本是可行的——样本与抽样分布" class="headerlink" title="4.1 训练样本预测测试样本是可行的——样本与抽样分布"></a>4.1 训练样本预测测试样本是可行的——样本与抽样分布</h3><p>在概率论中，我们所研究的随机变量，它的分布都是假设已知的，在这一前提下去研究它性质，特点和规律；在数理统计中，我们研究的随机变量，总体的分布一般是未知的，或只知道它包含某种未知数的某种形式，于是通过对所研究对随机变量进行独立重复的观察，抽取一部分个体（样本）的观察值进行分析，根据获得的数据来对总体分布进行统计推断。对样本进行抽样时候一般有无放回抽样和有放回抽样，整理观察值一般有直方图与箱线图。</p><p>为了进行统计推断，一般不直接使用统计本身，而是针对不同问题构造适当的函数，常称其为统计量，以下为几个常用统计量。</p><p>样本平均值：<br>$$\overline{X} = \frac{1}{n}\sum^{n}_{i =1} X_{i}$$<br>更广泛地有样本k阶（原点）矩：<br>$$A_{k} = \frac{1}{n}\sum^{n}_{i = 1}X^{k}_{i}, k = 1,2,…$$</p><p>样本方差为二阶中心矩的（无偏估计）：<br>$$S^{2} = \frac{1}{n-1}\sum^{n}_{i = 1}{(X_{i} - \overline{X})^{2}} = \frac{1}{n - 1}{(\sum^{n}_{i = 1}X^{2}<em>{i} - n\overline{X}^{2})}$$<br>更广泛地有样本k阶中心矩：<br>$$B</em>{k} = \frac{1}{n}\sum^{n}_{i = 1}{(X_{i} - \overline{X})^{k}}, k = 2,3,…$$</p><p>同理，可以作出与总体分布函数$F(x)$相应的统计量——经验分布函数。</p><p>设$X_{1}, X_{2},… ,X_{n}$是总体F中的一个样本，用$S(x), -\infty &lt; x &lt; \infty$表示$X_{1}, X_{2},… ,X_{n}$中不大雨x的随机变量的个数，定义经验分布函数$F_{n}(x)$为<br>$$F_{n}(x) = \frac{1}{n}S(x), -\infty &lt; x &lt; \infty$$</p><p>对于经验分布函数$F_{n}(x)$，格里汶科（Glivenko）在1993年证明了以下结果：对于任意实数x，当$n \to \infty$时，$F_{n}(x)$以概率1一致收敛与分布函数$F(x)$，即<br>$$P{\lim_{n \to \infty} \sup_{-\infty &lt; x &lt; \infty} | F_{n}(x) - F(x) | = 0} = 1$$</p><p>因此，对于任一实数x当n充分大时，经验分布函数的任意观察值$F_{n}(x)$与总体分布函数$F(x)$只有微小的差别，从而在实际中可以当作$F(x)$来使用。</p><h3 id="4-2-机器学习中的预测——参数估计"><a href="#4-2-机器学习中的预测——参数估计" class="headerlink" title="4.2 机器学习中的预测——参数估计"></a>4.2 机器学习中的预测——参数估计</h3><h4 id="4-2-1-点估计"><a href="#4-2-1-点估计" class="headerlink" title="4.2.1 点估计"></a>4.2.1 点估计</h4><p>设总体X的分布函数的形式已知，但它的一个或多个参数未知，借助于总体X的一个样本来估计总体未知参数的值的问题记为点估计。</p><p>点估计问题的一般提法如下：</p><p>设总体X的分布函数$F(x; \theta)$的形式为已知，$\theta$是待估参数，$X_{1},X_{2},…,X_{n}$是X的一个样本，$x_{1},x_{2},…,x_{n}$是相应的一个样本值，点估计的问题就是构造一个适当的统计量$\hat{\theta}(X_{1},X_{2},…,X_{n})$，用它的观测值$\hat{\theta}(x_{1},x_{2},…,x_{n})$作为未知参数$\theta$的近似值，我们称$\hat{\theta}(X_{1},X_{2},…,X_{n})$为估计量，称$\hat{\theta}(x_{1},x_{2},…,x_{n})$为估计值。</p><p>常用构造估计量的方法为矩估计法和最大似然估计法</p><h5 id="4-2-1-1-矩估计法"><a href="#4-2-1-1-矩估计法" class="headerlink" title="4.2.1.1 矩估计法"></a>4.2.1.1 矩估计法</h5><p>设X为连续型随机变量，其概率密度为$f(x; \theta_{1}, \theta_{2}, …, \theta_{k})$，或X为离散型随机变量，其分布律为$P{X = x} = p(x; \theta_{1}, \theta_{2}, …, \theta_{k})$，其中$\theta_{1}, \theta_{2}, …, \theta_{k}$为待估参数，$X_{1},X_{2},…,X_{n}$是来自X的样本，假设总体X的前k阶矩（$l = 1,2,…,k$）</p><p>X连续型<br>$$\mu_{l} = E(X^{l}) = \int^{\infty}_{-\infty}x^{l}f(x; \theta_{1}, \theta_{2}, …, \theta_{k})dx$$</p><p>X离散型（$R_{X}$是X可能取值的范围）<br>$$\mu_{l} = E(X^{l}) = \sum_{x \in R_{X}}x^{l}p(x; \theta_{1}, \theta_{2}, …, \theta_{k})$$</p><p>存在，一般来说，它们是$\theta_{1}, \theta_{2}, …, \theta_{k}$的函数，基于样本矩</p><p>$$A_{i} = \frac{1}{n}\sum^{n}_{i = 1}X^{l}_{i}$$</p><p>依概率收敛于相应的总体矩$\mu_{l}(l = 1,2,…,k)$，样本矩的连续函数依概率收敛于相应的总体矩的连续函数，我们就用样本矩作为相应的总体矩的估计量，而以样本矩的连续函数作为相应总体矩的连续函数的估计量。这种估计方法就是矩估计法。</p><p>具体而言，设</p><p>$$\begin{cases}<br>\mu_{1} = \mu_{1}(\theta_{1}, \theta_{2}, …, \theta_{k}), \<br>\mu_{2} = \mu_{2}(\theta_{1}, \theta_{2}, …, \theta_{k}), \<br>… … \<br>\mu_{k} = \mu_{k}(\theta_{1}, \theta_{2}, …, \theta_{k})<br>\end{cases}$$</p><p>一般而言对联立方程组求解可得</p><p>$$\begin{cases}<br>\theta_{1} = \theta_{1}(\mu_{1}, \mu_{2}, …, \mu_{k}), \<br>\theta_{2} = \theta_{2}(\mu_{1}, \mu_{2}, …, \mu_{k}), \<br>… … \<br>\theta_{k} = \theta_{k}(\mu_{1}, \mu_{2}, …, \mu_{k})<br>\end{cases}$$</p><p>以$A_{i}$分别代替$\mu_{i}$，就以<br>$$\hat{\theta_{i}} = \theta_{i}(A_{1}, A_{2}, …, A_{k}), i = 1,2,…,k$$</p><p>分别作为$\theta_{i}$的估计量，这种估计量称为矩估计量。</p><h5 id="4-2-1-2-最大似然估计"><a href="#4-2-1-2-最大似然估计" class="headerlink" title="4.2.1.2 最大似然估计"></a>4.2.1.2 最大似然估计</h5><p>若总体X属于离散型，其分布律$P{X = x} = p(x; \theta), \theta \in \Theta$的形式为已知，$\theta$为待估参数，$\Theta$是$\theta$可能取值的范围，设$X_{1},X_{2},…,X_{n}$是来自X的样本，则$X_{1},X_{2},…,X_{n}$的联合分布律为</p><p>$$\prod^{n}_{i = 1}{p(x_{i}; \theta)}$$</p><p>又设$x_{i},x_{2},…,x_{n}$是相应于样本$X_{i},X_{2},…,X_{n}$的一个样本值，可得到$X_{i},X_{2},…,X_{n}$取到观察值$x_{i},x_{2},…,x_{n}$的概率值，即事件${X_{1} = x_{1}, X_{2} = x_{2},…,X_{n} = x_{n}}$发生的概率为</p><p>$$L(\theta) = L(x_{i},x_{2},…,x_{n}; \theta) = \prod^{n}_{i = 1}{p(x_{i}; \theta)}, \theta \in \Theta$$</p><p>这以概率随$\theta$的取值而变化，它是$\theta$的函数，$L(\theta)$称为样本的似然函数。</p><p>直观理解，现在已经取到样本值$x_{i},x_{2},…,x_{n}$，这表明取到这一样本值的概率$L(\theta)$较大，所以我们不会考虑那些不能使样本$x_{i},x_{2},…,x_{n}$出现的$\theta \in \Theta$作为$\theta$的估计；反之，如果已知$\theta = \theta_{0} \in \Theta$时有$L(\theta)$取得很大值，而$\Theta$中的其他$\theta$的值使$L(\theta)$取很小值，我们自然可以认为取$\theta_{0}$作为未知参数$\theta$的估计值较为合理。</p><p>由费希尔（R.A.Fisher）引进的最大似然估计法就是固定样本观察值$x_{i},x_{2},…,x_{n}$，在$\theta$取值的可能范围$\Theta$内挑选使似然函数$L(x_{i},x_{2},…,x_{n}; \theta)$达到最大的参数值$\hat{\theta}$，作为参数$\theta$的估计值，即取$\hat{\theta}$使</p><p>$$L(x_{i},x_{2},…,x_{n}; \hat{\theta}) = \max_{\theta \in \Theta}{L(x_{i},x_{2},…,x_{n}; \theta)}$$</p><p>这样得到的$\hat{\theta}$与样本值$x_{i},x_{2},…,x_{n}$有关，常记为$\hat{\theta}(x_{i},x_{2},…,x_{n})$，称为参数$\theta$的最大似然估计值，而相应的统计量$\hat{\theta}(X_{i},X_{2},…,X_{n})$称为参数$\theta$的最大似然估计量。</p><h4 id="4-2-2-区间估计"><a href="#4-2-2-区间估计" class="headerlink" title="4.2.2 区间估计"></a>4.2.2 区间估计</h4><p>对于一个未知量，在测量和计算时，有时近似值不足以满足要求，还需要估计误差，即要知道近似值的精确程度，类似地，对未知参数$\theta$，除了对其进行点估计$\hat{\theta}$外，我们还需要估计出一个范围，并希望知道这个范围包含参数$\theta$真值的可信程度，这样的范围通常以区间的形式给出，这样的区间就是置信区间。</p><p>设总体X的分布函数$F(x; \theta)$含有一个未知参数$\theta, \theta \in \Theta$（$\Theta$是$\theta$可能取值的范围），对于给定值$\alpha$（$0 &lt; \alpha &lt; 1$），若由来自样本$X_{i},X_{2},…,X_{n}$确定的两个统计量$\overline{\theta}_{1} = \overline{\theta}_{1}{(X_{i},X_{2},…,X_{n})}$和$\overline{\theta}_{2} = \overline{\theta}_{2}{(X_{i},X_{2},…,X_{n})}(\overline{\theta}_{1} &lt; \overline{\theta}_{2})$，对于任意$\theta \in \Theta$满足</p><p>$$P{\overline{\theta}_{1}{(X_{i},X_{2},…,X_{n})} &lt; \theta &lt; \overline{\theta}_{2} = {(X_{i},X_{2},…,X_{n})}} \geq 1- \alpha$$</p><p>则称随机区间$(\overline{\theta}_{1}, \overline{\theta}_{2})$是$\theta$的置信水平为$1 - \alpha$的置信区间，$\overline{\theta}_{1}$和$\overline{\theta}_{2}$分别为置信下限和置信上限。</p><p>直观理解，若反复抽样多次（各次得打的样本容量相等，都是n），每个样本值确定一个区间$(\overline{\theta}_{1}, \overline{\theta}_{2})$，每个这样的区间要么包含$\theta$的真值，要不不包含$\theta$的真值，按伯努利大数定理，这么多的区间中，包含$\theta$真值的约占$100(1 - \alpha)%$，不包含$\theta$真值的约占$100\alpha%$。</p><h3 id="4-3-判定模型是否合理——假设检验"><a href="#4-3-判定模型是否合理——假设检验" class="headerlink" title="4.3 判定模型是否合理——假设检验"></a>4.3 判定模型是否合理——假设检验</h3><h4 id="4-3-1-假设检验与两类错误"><a href="#4-3-1-假设检验与两类错误" class="headerlink" title="4.3.1 假设检验与两类错误"></a>4.3.1 假设检验与两类错误</h4><p>在总体的分布函数完全未知或只知其形式，但不知具体参数的情况下，为了推断总体的某些未知特性，提出关于某些关于总体的假设，我们要根据样本对所提出的假设作出接受或拒绝的决策，假设检验就是这一决策的过程。</p><p>对于一个假设检验问题，在显著性水平$\alpha$下，检验假设</p><p>$$H_{0}: \mu = \mu_{0},$$<br>$$H_{1}: \mu \neq \mu_{0}.$$</p><p>其中$H_{0}$为原假设或零假设，$H_{1}$为备择假设。</p><p>由于检验是根据样本作出的，总有可能作出错误的决策，在假设$H_{0}$为真时，我们可能犯拒绝$H_{0}$的错误，称这一类“弃真”的错误为第I类错误；又当$H_{0}$实际上不真时，我们也有可能接受$H_{0}$，称这种“取伪”当错误为第II错误。</p><p>在确定检验法则时我们尽可能使犯两类错误的概率都小，但死当样本量固定的条件下，若减少犯一类错误的概率，往往另一类错误的概率会增加。一般来说，我们总是控制犯第I类错误的概率，使它不大于$\alpha$（$\alpha$一般取0.1, 0.05, 0.01, 0.005），这种只对犯第I类错误对概率进行控制，而不考虑犯第II类错误的概率的检验称为显著性检验。</p><h4 id="4-3-2-一个正态分布的均值检验（例）"><a href="#4-3-2-一个正态分布的均值检验（例）" class="headerlink" title="4.3.2 一个正态分布的均值检验（例）"></a>4.3.2 一个正态分布的均值检验（例）</h4><p>例：某机器生产的产品净重是一个随机变量，它服从均值0.5kg，标准差0.015kg，某日随机抽取9袋进行检查，称得净重为(kg)</p><p>0.497 | 0.506 | 0.518 | 0.524 | 0.498 | 0.511 | 0.520 | 0.515 | 0.512</p><p>问机器是否正常（置信度0.05）？</p><p>解：<br>$$H_{0}: \mu = \mu_{0} = 0.5$$<br>$$H_{1}: \mu \neq \mu_{0}$$</p><p>当$H_{0}$为真时有</p><p>$$\frac{\overline{X} - \mu_{0}}{\sigma/\sqrt{n}} ～ N(0, 1)$$</p><p>重而衡量$|\overline{x} - \mu_{0}|$当大小可以归结为衡量$\frac{\overline{X} - \mu_{0}}{\sigma/\sqrt{n}}$的大小。我们可适当选择一正数k，使当观察值$\overline{x}$满足$\frac{\overline{X} - \mu_{0}}{\sigma/\sqrt{n}} \geq k$时就拒绝假设$H_{0}$，反之$\frac{\overline{X} - \mu_{0}}{\sigma/\sqrt{n}} &lt; k$就接受$H_{0}$。</p><p>即当满足</p><p>$$|z| = |\frac{\overline{X} - \mu_{0}}{\sigma/\sqrt{n}}| \geq k = z_{\alpha/2}$$</p><p>则接受$H_{0}$，而若</p><p>$$|z| = |\frac{\overline{X} - \mu_{0}}{\sigma/\sqrt{n}}| &lt; k = z_{\alpha/2}$$</p><p>则接受$H_{0}$。</p><p>取$\alpha = 0.05$计算得</p><p>$$|\frac{\overline{X} - \mu_{0}}{\sigma/\sqrt{n}}| = 2.2 &gt; 1.96$$</p><p>故在0.05置信度下拒绝$H_{0}$，机器不正常。</p><h4 id="4-3-3-假设检验解决的一些问题"><a href="#4-3-3-假设检验解决的一些问题" class="headerlink" title="4.3.3 假设检验解决的一些问题"></a>4.3.3 假设检验解决的一些问题</h4><ul><li>单个总体均值检验</li><li>多个总体均值检验</li><li>单个总体方差检验</li><li>多个总体方差检验</li><li>样本容量选取</li><li>分布拟合检验</li></ul><h3 id="4-4-大数据让机器学习效果更好－大数定律与中心极限定理"><a href="#4-4-大数据让机器学习效果更好－大数定律与中心极限定理" class="headerlink" title="4.4 大数据让机器学习效果更好－大数定律与中心极限定理"></a>4.4 大数据让机器学习效果更好－大数定律与中心极限定理</h3><h4 id="4-4-1-大数定律"><a href="#4-4-1-大数定律" class="headerlink" title="4.4.1 大数定律"></a>4.4.1 大数定律</h4><p>当随机事件A进行大量重复试验以后，其频率$f_{n}(x)$会随着n的增大而出现稳定性，稳定在一个常数附近，这种稳定性是概率定义的客观基础。</p><p>辛钦大数定理（弱大数定律）表示在数学期望存在的条件下其数学期望依概率收敛。设$X_{1},X_{2},…$是相互独立同分布的随机变量序列，且具有数学期望$E(X_{k}) = \mu (k = 1,2,…)$作前n和变量的算术平均$\frac{1}{n}\sum^{n}_{k = 1}{X_{k}}$，对任意的$\epsilon &gt; 0$有：<br>$$\lim_{n \to \infty}P({|\frac{1}{n}\sum^{n}_{k = 1}{X_{k}} - \mu| &lt; \epsilon}) = 1$$</p><p>对于连续型随机变量，设$f_{A}$是n次独立重复试验中事件A发生的次数，p是事件A在每次试验中发生的概率，则对于任意正数$\epsilon &gt; 0$有：<br>$$\lim_{n \to \infty}P({|\frac{f_{A}}{n} - p| &lt; \epsilon}) = 1$$<br>或<br>$$\lim_{n \to \infty}P({|\frac{f_{A}}{n} - p| \geq \epsilon}) = 0$$<br>这就是著名的伯努利大数定理。</p><p>强大数定理由波莱尔在1909年对伯努利试验场合验证，一般情形的强大数定理证明由柯尔莫哥洛夫给出。</p><p>弱大数定律是依概率收敛，强大数定律则是以概率1收敛（几乎处处收敛），只要n足够大，任意指定一个正整数$\epsilon$，总能找到一个N，使当n &gt; N时，前n个变量的算术平均与$\mu$的差大于$\epsilon$的次数有限的。表达式可定义为：<br>$$P{\lim_{n \to \infty}{\frac{X_{1} + X_{2} + … + X_{n}}{n} = \mu}} = 1$$</p><p>弱大数定律表明对于足够大的值$n^{<em>}$，随机变量$\frac{X_{1} + X_{2} + … + X_{n^{*}}}{n^{*}}$的值靠近$\mu$，但它不能保证所有的$n &gt; n^{</em>}$，$\frac{X_{1} + X_{2} + … + X_{n^{*}}}{n^{*}}$仍然停留在$\mu$附近，因此$|\frac{X_{1} + X_{2} + … + X_{n^{*}}}{n^{*}} - \mu|$可以无限多次离开0（尽管较大偏离的频率不会很高）。而强大数定律能保证这种情况不会发生，特别地，强大数定律表明这种表示以概率1成立。即对于任意的$\epsilon &gt; 0$有：<br>$$|\sum^{n}_{i = i}{\frac{X_{i}}{n}} - \mu| &gt; \epsilon$$<br>只会出现有限次。</p><h4 id="4-4-2-中心极限定理"><a href="#4-4-2-中心极限定理" class="headerlink" title="4.4.2 中心极限定理"></a>4.4.2 中心极限定理</h4><p>在客观实际中有许多随机变量，他们由大量相互独立的随机因素综合影响所形成，其中每一个别因素影响在总的影响中所起的作用都是微小的，这种随机变量往往服从正态分布。这种现象构成了中心极限定理的客观背景。</p><p>这就是为什么正态分布在概率论甚至整个现实世界中重要的原因，在很多问题中，所考虑的随机变量可以表示成很多独立的随机变量只和。而对于不相互独立的随机变量，就会出现马太效应。</p><p>独立同分布的中心极限定理（表达式构造比较复杂）表示均值为$\mu$，方差为$\sigma^{2} &gt; 0$的独立同分布的随机变量$X_{1},X_{2},…,X_{n}$之和$\sum^{n}_{k = 1}{X_{k}}$的标准化变量，当n充分大时，近似成立</p><p>$$\frac{\sum^{n}_{k = 1}{X_{A}} - n\mu}{\sqrt{n}\sigma} ～N(0, 1)$$</p><p>李雅普诺夫（Lyapunov定理）（表达式构造比较复杂）表示，在定理的条件下，随机变量</p><p>$$Z_{n} = \frac{\sum^{n}_{k = 1}{X_{k}} - \sum^{n}_{k = 1}{\mu_{k}}}{B_{n}}$$</p><p>当n很大时，近似地服从正态分布N(0, 1)。</p><p>棣莫弗-拉普拉斯（De Moivre-Laplace）定理（表达式构造比较复杂）说明正态分布是二项分布的极限分布。</p><h2 id="5-用数理统计解决实际问题"><a href="#5-用数理统计解决实际问题" class="headerlink" title="5. 用数理统计解决实际问题"></a>5. 用数理统计解决实际问题</h2><h3 id="5-1-回归"><a href="#5-1-回归" class="headerlink" title="5.1 回归"></a>5.1 回归</h3><p>这里主要讨论一元线性回归，一般表达式为$y = a + bx$。</p><p>假设对于x（在某一区间内）的每一个值有</p><p>$$Y ～ N(a + bx, \sigma^{2})$$</p><p>其中$a,b$及$\sigma^{2}$都不是依赖于x的未知参数，及$\epsilon = Y - (x + bx)$，相当于假设</p><p>$$Y = a + bx + \epsilon, \epsilon ～ N(0, \sigma^{2})$$</p><p>下面对$a, b$进行参数估计（中间结果省略）得到一个方程组</p><p>$$\begin{cases}<br>na + (\sum^{n}_{i = 1}{x_{i}})b = \sum^{n}_{i = 1}{y_{i}},\<br>(\sum^{n}_{i = 1}{x_{i}})a + (\sum^{n}_{i = 1}{x_{i}^{2}})b = \sum^{n}_{i = 1}{x_{i}y_{i}}<br>\end{cases}$$</p><p>解得最大似然估计值为</p><p>$$\hat{b} = \frac{n\sum^{n}_{i = 1}{x_{i}y_{i}} - (\sum^{n}_{i = 1}{x_{i}})(\sum^{n}_{i = 1}{y_{i}})}{n\sum^{n}_{i = 1}{x_{i}^{2}} - (\sum^{n}_{i = 1}{x_{i}})^{2}} = \frac{\sum^{n}_{i = 1}{(x_{i} - \overline{x})(y_{i} - \overline{y})}}{\sum^{n}_{i = 1}{(x_{i} - \overline{x})^{2}}}$$</p><p>$$\hat{a} = \frac{1}{n}\sum^{n}_{i = 1}{y_{i}} - \frac{\hat{b}}{n}{\sum^{n}_{i = 1}{x_{i}}} = \overline{y} - \hat{b}\overline{x}$$</p><p>在得到$a,b$的估计$\hat{a}, \hat{b}$后，我们就取$\hat{a} + \hat{b}x$为回归函数$\mu(x) = a + bx$的估计。</p><p>$$\hat{y} = \hat{a} + \hat{b}x$$</p><p>就为一元回归方程。</p><h3 id="5-2-朴素贝叶斯"><a href="#5-2-朴素贝叶斯" class="headerlink" title="5.2 朴素贝叶斯"></a>5.2 朴素贝叶斯</h3><p>贝叶斯的思想主要为通过先验概率加数据得后验概率。这里主要讨论朴素贝叶斯的算法过程。</p><p>设训练集为m和样本n和纬度</p><p>$$(x^{(1)}_{1},x^{(1)}_{2},…,x^{(1)}_{n},y_{1}), (x^{(2)}_{1},x^{(2)}_{2},…,x^{(2)}_{n},y_{2}), …,<br>(x^{(m)}_{1},x^{(m)}_{2},…,x^{(m)}_{n},y_{m})$$</p><p>共有k个特征输出类别，分别为$C_{1},C_{2},…,C_{k}$，每个特征输出的类别的样本数为$m_{1},m_{2},…,m_{k}$，在第k个类别中，如果是离散特征，则特征$X_{j}$各个类别取值为$m_{jl},l = 1,2,…,S_{j}$，$S_{j}$为特征j的 不同取值数。</p><p>输出为$X^{t}$的分类</p><p>算法流程如下：</p><p>1.如果没有Y的先验概率，则计算Y的K个先验概率</p><p>$$P(Y = C_{k}) = (m_{k} + \lambda)/(m + K\lambda)$$</p><p>否则$P(Y = C_{k})为输入的先验概率$</p><p>2.分别计算第k个类别的第j纬特征的第$l$个取值条件概率</p><p>$$P(X_{j} = x_{jl} | Y = C_{k})$$</p><p>如果是离散值</p><p>$$P(X_{j} = x_{jl} | Y = C_{k}) = \frac{m_{kjl} + \lambda}{m_{k} + S_{j}\lambda}, \lambda &gt; 0$$</p><p>如果是连续值直接求正态分布参数</p><p>$$P(X_{j} = x_{j} | Y = C_{k}) = \frac{1}{\sqrt{2\pi}\sigma_{k}}e^-{\frac{(x_{j} - \mu_{k})^{2}}{2\sigma_{k}^{2}}}$$</p><p>$\mu_{k}$为样本$C_{k}$中的所有$X_{j}$平均值，$\sigma_{k}^{2}$为方差。</p><p>对于需要预测的$X^{t}$，分别计算</p><p>$$P(Y = X_{k})\prod^{n}_{j = 1}P(X_{j} = x^{t}_{j} | Y = C_{k})$$</p><p>$X^{t}$的分类$C_{result}$为</p><p>$$C_{result} =\max_{C_{k}}P(Y = C_{k})\prod^{n}_{j = 1}P(X_{j} = X^{t}_{j} | Y = C_{k}))$$</p><h3 id="5-3-航空公司预售票策略"><a href="#5-3-航空公司预售票策略" class="headerlink" title="5.3 航空公司预售票策略"></a>5.3 航空公司预售票策略</h3><h4 id="5-3-1-问题分析"><a href="#5-3-1-问题分析" class="headerlink" title="5.3.1 问题分析"></a>5.3.1 问题分析</h4><p>对于一次航班，若航空公司限制订票对数量恰等于飞机法容量，那么由于总会有一些定了机票但不按时登机的乘客，致使飞机因不满员飞行而利润下降。而如果不限制预订票数量，那么当持票按时前来的乘客超过飞机容量时，必然引起乘客的抱怨，影响其社会声誉。所以航空公司需要综合考虑紧急利益与社会声誉，确定订票数量的最佳限额。</p><p>公司的经济利益可以用机票收入扣除飞行费用和赔偿金后的利润来衡量，社会声誉可以用持票前来登机，但因满员无法飞走的乘客限制在一定数量来衡量。该问题的关键因素——预定票乘客是否能按时来登机，这个因素是随机的。所以经济利益和社会声誉都需要在平均意义下衡量。这两个目标的优化问题，决策变量都是预定票数量的限额。</p><h4 id="5-3-2-模型假设"><a href="#5-3-2-模型假设" class="headerlink" title="5.3.2 模型假设"></a>5.3.2 模型假设</h4><p>1.飞机容量为n，假票价格为g，飞行费用为r，机票价格按照$g = r / \lambda n$来制定，其中$\lambda$为利润调节因子，如$\lambda = 0.6$表示飞机60%满员率就不亏本。</p><p>2.预定票数量的限额为m（m &gt; n），每位乘客不按时登机的概率为$p$，各位乘客之间是否按时登机相互独立。</p><p>3.无法飞走的乘客获得赔偿金为b</p><h4 id="5-3-3-模型建立"><a href="#5-3-3-模型建立" class="headerlink" title="5.3.3 模型建立"></a>5.3.3 模型建立</h4><p>公司经济利益用平均理论S来衡量，每次航班的利润s为从机票收入中减飞行费用和可能发生的赔偿金。当m为乘客有k为不按时来登机时</p><p>$$s =<br>\begin{cases}<br>(m - k)g -r &amp; m - k \leq n, \<br>ng - r - (m - k - n)b &amp; m - k &gt; n<br>\end{cases}$$</p><p>由假设2，不按前来登机当乘客数k服从二项分布，于是概率</p><p>$$p_{k} = P(K = k) = {m \choose k}p^{k}q^{m - k}, q = 1 - p$$</p><p>平均利润S(s的期望)为</p><p>$$S(m) = \sum^{m - n -1}_{k = 0}{[ng - r - (m - k - n)b]p_{k}} + \sum^{m}_{k = m - n}{[(m - k)g - r]p_{k}}$$</p><p>其中$\sum^{m}_{k = 0}{k p_{k}} = mp$</p><p>$$S(m) = qmg - r - (g + b) \sum^{m - n - 1}_{k = 0}{(m - k - n)p_{k}}$$</p><p>当$n, g, r, p$给定后，可以求m使得S(m)最大。</p><p>从公司声誉和经济利益两方面考虑，应该让不能飞走当乘客不要太多，而由于这个数量是随机的，可以用不能飞走的乘客数超过若干人的概率作为度量指标，记不超过j个人的概率为$P_{j}(m)$，因为不能飞走的乘客超过j人，等价于m位预定票的乘客中不按时来登机的不超过$m - n - j -1$人，所以</p><p>$$P_{j}(m) = \sum^{m - n - j - 1}_{k = 0}{p_{k}}$$</p><p>对于给定的n, j，显然当 m = n + j时不能飞走的乘客不超过 j 人，$P_{j}{m} = 0$，而当m变大时$P_{j}{m}$单调增加。</p><p>以上$S(m)$和$P_{j}{(m)}$无法解析求解，需要进行数值计算求解。</p><h2 id="6-更多数学模型"><a href="#6-更多数学模型" class="headerlink" title="6. 更多数学模型"></a>6. 更多数学模型</h2><ul><li>优化模型</li><li>数学规划模型</li><li>微分方程模型</li><li>代数方程与差分方程模型</li><li>稳定性模型</li><li>离散模型</li><li>概率模型</li><li>统计回归模型</li><li>博弈模型</li><li>马氏链模型</li><li>动态优化模型</li></ul><p>end~</p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 数理统计 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-支持向量机</title>
      <link href="/2023/03/21/zhi-shi-zong-jie/9-zhi-chi-xiang-liang-ji/"/>
      <url>/2023/03/21/zhi-shi-zong-jie/9-zhi-chi-xiang-liang-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="1-支持向量机算法"><a href="#1-支持向量机算法" class="headerlink" title="1. 支持向量机算法"></a>1. 支持向量机算法</h2><p>支持向量机（support vector machines，SVM）是一种分类模型，其基本定义为特征空间上的间隔最大化的线性分类器，本质上是一个求解凸二次规划的问题。</p><p>支持向量机是求解特征空间上的最大间隔（软间隔、硬间隔），是一个线性分类器，为了支持非线性的分类，引入了核技巧，用于将输入从输入空间映射到特征空间。相比较而言，核变换方法算是比支持向量机用得更广泛的一种机器学习方法。</p><p>支持向量机主要分为三类：</p><ul><li>线性可分支持向量机</li><li>线性支持向量机</li><li>非线性支持向量机</li></ul><p>简要说明它们差异前，先认识两个概念之间的关系，分别是输入空间、特征空间。假设一个分类问题的输入空间于特征空间不同，则线性可分向量机和线性支持向量机假设这两个空间的元素可以一一对应，非线性支持向量机则利用一个非线性核技巧完成映射。支持向量机的学习都是基于特征空间进行的。</p><p>下面分别进行原理解析。</p><h2 id="2-线性可分支持向量机"><a href="#2-线性可分支持向量机" class="headerlink" title="2. 线性可分支持向量机"></a>2. 线性可分支持向量机</h2><h3 id="2-1-线性可分支持向量机"><a href="#2-1-线性可分支持向量机" class="headerlink" title="2.1 线性可分支持向量机"></a>2.1 线性可分支持向量机</h3><p>假设特征空间中的训练数据集为</p><p>$$T = {(x_{1}, y_{1}), (x_{2}, y_{2}), \cdots, (x_{N}, y_{N}))}$$</p><p>学习的目标就是找到一个超平面，能将实例分到不同类中，分离超平面方程可以写为：</p><p>$$w \cdot x + b = y$$</p><p>其中 $w$ 是法向量， 法向量指向的一侧是正类，另一侧是负类。</p><p>一般情况下，当训练数据集线性可分时，存在无穷多个分离超平面。如果使用感知机算法（误分类最小的策略），此时的解会有无穷多个；线性可分支持向量机利用间隔最大化求解超平面，此时的解是唯一解。</p><h3 id="2-2-函数间隔与几何间隔"><a href="#2-2-函数间隔与几何间隔" class="headerlink" title="2.2 函数间隔与几何间隔"></a>2.2 函数间隔与几何间隔</h3><p>看下面这幅图，重点看 $A、B、C$ 三点。</p><p><img src="/2023/03/21/zhi-shi-zong-jie/9-zhi-chi-xiang-liang-ji/svm_abc.png"></p><ul><li>$A$ 点距离超平面远，预测为正类的可信度高</li><li>$C$ 点距离超平面近，预测为正类的可信度低</li><li>$B$ 点介于 $A、C$ 之间，可信度也介于之间</li></ul><p>也就是说，一个点距离分类超平面的远近可以表示分类预测的准确程度，那么在 $w \cdot x + b = 0$ 时，$|w \cdot x + b|$ 就能表示 $x$ 距离超平面的远近，而此时 $y$ 的符号是否一致可以表示分类是否正确。于是函数间隔就可以写成。</p><p>$$\hat{\gamma_{i}} = y_{i}(w \cdot x_{i} + b)$$</p><p>超平面与所有数据集的间隔就是所有样本点的函数间隔的最小值（$\gamma = \min \hat{\gamma_{i}}$ ，在这个间隔内，任意一个超平面都可以把数据集正确分类）。</p><p>不过只有函数间隔存在一个问题，只要成比例的改变 $w$ 和 $b$ （比如变成 $2w$ 和 $2b$ ），超平面不会改变，但是函数间隔却变成了原来的2倍。即有必要对 $w$ 加一些约束，如规范化:</p><p>$$||w|| = 1$$</p><p>如此可以使得函数间隔是确定的，此时函数间隔就变成了几何间隔。</p><p>$$\gamma_{i} = y_{i}(\frac{w}{||w||} \cdot x_{i} + \frac{b}{||w||})$$</p><p>同样，超平面与所有数据集的间隔就是所有样本点的函数间隔的最小值（$\gamma = \min \gamma_{i}$ ）</p><h3 id="2-3-间隔最大化"><a href="#2-3-间隔最大化" class="headerlink" title="2.3 间隔最大化"></a>2.3 间隔最大化</h3><p>可分离超平面有无穷多个，但是几何间隔最大的分离超平面是唯一的，在线性可分的情况下，这种间隔称为硬间隔（近似线性可分的情况下为软间隔）。</p><p>求解间隔最大的超平面可以表示为如下约束问题：</p><p>$$\begin{array}{l}<br>\max_{w, b} &amp; \gamma \\<br>s.t &amp; y_{i}(\frac{w}{||w||} \cdot x_{i} + \frac{b}{||w||}) \geq \gamma, &amp; i = 1, 2,\cdots, N \\<br>\end{array}$$</p><p>基于几何间隔和函数间隔的关系，上式可以改写为</p><p>$$\begin{array}{l}<br>\max_{w, b} &amp; \frac{\gamma}{||w||} \\<br>s.t &amp; y_{i}(w \cdot x_{i} + b) \geq \hat{\gamma}, &amp; i = 1, 2,\cdots, N \\<br>\end{array}$$</p><p>因为函数间隔的倍数不会改变超平面，所以我们可以取 $\hat{\gamma} = 1$，同时最大化 $\frac{1}{||w||}$ 和最小化 $\frac{1}{2}||w||^{2}$ （$\frac{1}{2}$和平方均码是为了求导方便）等价。 所以上式还可以进一步改写：</p><p>$$\begin{array}{l}<br>\min_{w, b} &amp; \frac{1}{2}||w||^{2} \\<br>s.t &amp; y_{i}(w \cdot x_{i} + b) - 1 \geq 0, &amp; i = 1, 2,\cdots, N \\<br>\end{array}$$</p><p>目标函数式二次函数，约束条件是仿射函数，上述的凸优化问题就成了凸二次规划问题，可求解得最优解 $w^{<em>}$，$b^{</em>}$，由此得最优分离超平面 </p><p>$$w^{*} \cdot x + b^{*} = 0$$</p><h3 id="2-4-间隔边界"><a href="#2-4-间隔边界" class="headerlink" title="2.4 间隔边界"></a>2.4 间隔边界</h3><p>训练数据集中与分离超平面距离最近的样本点的实例即为支持向量，那么在约束条件下，支持向量就是：</p><p>$$y_{i}(w \cdot x_{i} + b) - 1 = 0$$</p><p>对于 $y_{i} = +1$ 的点，支持向量超平面为</p><p>$$H_{1}: w \cdot x + b = 1$$</p><p>对于 $y_{i} = -1$ 的点，支持向量超平面为</p><p>$$H_{2}: w \cdot x + b = -1$$</p><p><img src="/2023/03/21/zhi-shi-zong-jie/9-zhi-chi-xiang-liang-ji/support_vector.png"></p><p>所以间隔依赖法向量 $w$，为 $\frac{2}{||w||}$，$H_{1}$ 和 $H_{2}$ 为间隔边界。</p><h3 id="2-5-线性可分支持向量机对偶算法"><a href="#2-5-线性可分支持向量机对偶算法" class="headerlink" title="2.5 线性可分支持向量机对偶算法"></a>2.5 线性可分支持向量机对偶算法</h3><h4 id="2-5-1-凸优化问题转化为对偶问题"><a href="#2-5-1-凸优化问题转化为对偶问题" class="headerlink" title="2.5.1 凸优化问题转化为对偶问题"></a>2.5.1 凸优化问题转化为对偶问题</h4><p>求解最优化问题可以应用拉格朗日对偶性，求解对偶问题得到原始问题的解，求解对偶问题至少有两个好处：</p><ul><li>对偶问题更容易求解</li><li>可以自然的引入核函数，推广到非线性分类问题</li></ul><p>首先构建一个拉格朗日函数，对每个不等式约束引入拉格朗日乘子（拉格朗日乘子向量$\alpha = (\alpha_{1}, \alpha_{2}, \cdots, \alpha_{N})^{T}$）。定义拉格朗日函数为</p><p>$$L(w, b, \alpha) = \frac{1}{2}||w||^{2} - \sum_{i=1}^{N}\alpha_{i}y_{i}(w \cdot x_{i} + b) + \sum_{i=1}^{N}\alpha_{i}$$</p><p>原始问题的对偶问题变成了极大极小问题。</p><p>$$\max_{\alpha} \min_{w, b} L(w, b, \alpha)$$</p><p>解该对偶问题，首先求 $L(w, b, \alpha)$ 对 $w, b$ 的极小，再求对 $\alpha$ 的极大。</p><h4 id="2-5-2-求-min-w-b-L-w-b-alpha"><a href="#2-5-2-求-min-w-b-L-w-b-alpha" class="headerlink" title="2.5.2 求 $\min_{w, b} L(w, b, \alpha)$"></a>2.5.2 求 $\min_{w, b} L(w, b, \alpha)$</h4><p>将 $L(w, b, \alpha)$ 分别对 $w, b$ 求偏导数并令其为0。</p><p>$$\frac{\partial L(w, b, \alpha)}{\partial w} = w - \sum_{i = 1}^{N}\alpha_{i}y_{i}x_{i} = 0$$</p><p>$$\frac{\partial L(w, b, \alpha)}{\partial b} = -\sum_{i = 1}^{N}\alpha_{i}y_{i} = 0$$</p><p>得</p><p>$$w = \sum_{i = 1}^{N}\alpha_{i}y_{i}x_{i}$$</p><p>$$\sum_{i = 1}^{N}\alpha_{i}y_{i} = 0$$</p><p>带入拉格朗日函数得</p><p>$$\begin{align}<br>L(w, b, \alpha)<br>&amp; = \frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}(x_{i} \cdot x_{j}) - \sum_{i = 1}^{N}\alpha_{i}y_{i}((\sum_{j = 1}^{N}\alpha_{j}y_{j}x_{j}) \cdot x_{i} + b) + \sum_{i = i}^{N}\alpha_{i} \\<br>&amp; = -\frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}(x_{i} \cdot x_{j}) + \sum_{i = i}^{N}\alpha_{i} \\<br>\end{align}$$</p><h4 id="2-5-3-求-min-w-b-L-w-b-alpha-对-alpha-的极大"><a href="#2-5-3-求-min-w-b-L-w-b-alpha-对-alpha-的极大" class="headerlink" title="2.5.3 求$\min_{w, b} L(w, b, \alpha)$ 对 $\alpha$ 的极大"></a>2.5.3 求$\min_{w, b} L(w, b, \alpha)$ 对 $\alpha$ 的极大</h4><p>得如下对偶问题</p><p>$$\begin{array}{l}<br>\max_{\alpha} &amp; -\frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}(x_{i} \cdot x_{j}) + \sum_{i = i}^{N}\alpha_{i} \\<br>s.t &amp; \sum_{i = 1}^{N} \alpha_{i} y_{i} = 0 \\<br>s.t &amp; \alpha_{i} \geq 0, &amp; i = 1, 2,\cdots, N<br>\end{array}$$</p><p>将极大转化为极小就得到如下的对偶最优化问题</p><p>$$\begin{array}{l}<br>\min_{\alpha} &amp; \frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}(x_{i} \cdot x_{j}) - \sum_{i = i}^{N}\alpha_{i} \\<br>s.t &amp; \sum_{i = 1}^{N} \alpha_{i} y_{i} = 0 \\<br>s.t &amp; \alpha_{i} \geq 0, &amp; i = 1, 2,\cdots, N<br>\end{array}$$</p><h4 id="2-5-4-反解原始最优化问题"><a href="#2-5-4-反解原始最优化问题" class="headerlink" title="2.5.4 反解原始最优化问题"></a>2.5.4 反解原始最优化问题</h4><p>求得 $\alpha$ 后反解的原始最优化问题的解，存在一个下标 $j$ ，使得 $\alpha_{j} \geq 0$ ，有</p><p>$$w^{*} = \sum_{i = 1}^{N} \alpha_{i}^{*}y_{i}x_{i}$$</p><p>$$b^{*} = y_{j} - \sum_{i = 1}^{N}\alpha_{i}y_{i}(x_{i} \cdot x_{j})$$</p><p>以上就完成了线性可分支持向量机的算法，但是实际数据经常不是线性可分的，于是有了线性支持向量机。</p><h2 id="3-线性支持向量机"><a href="#3-线性支持向量机" class="headerlink" title="3. 线性支持向量机"></a>3. 线性支持向量机</h2><h3 id="3-1-线性支持向量机"><a href="#3-1-线性支持向量机" class="headerlink" title="3.1 线性支持向量机"></a>3.1 线性支持向量机</h3><p>线性可分支持向量机中有较强的不等式约束，在更一般的情况下，这些不等式约束并非全部成立，因此需要从上面的硬间隔改为软间隔。</p><p>同样假设特征空间的训练数据集为</p><p>$$T = {(x_{1}, y_{1}), (x_{2}, y_{2}), \cdots, (x_{N}, y_{N}))}$$</p><p>线性不可分意味着函数间隔不能满足大于等于1的约束条件，为了解决这个问题，引入一个松弛变量 $\xi_{i} \geq 0$ ，使得函数间隔加上这个松弛变量后满足大于等于1的条件。于是，约束条件就变成了</p><p>$$y_{i}(w \cdot x_{i} + b) \geq 1 - \xi_{i}$$</p><p>同时，每一个松弛变量 $\xi_{i}$ 会有一个代价，于是原目标函数就变成了</p><p>$$\frac{1}{2}||w||^{2} + C \sum_{i = 1}^{N} \xi_{i}$$</p><p>其中 $C \geq 0$ 为惩罚函数，$C$ 值越大时对误分类的惩罚越大，反之越小。上式表示让间隔仅可能大，同时使误分类尽可能小，而 $C$ 就是二者的调和系数。</p><p>于是线性不可能分的支持向量机就变成了如下的凸二次规划问题。</p><p> $$\begin{array}{l}<br>\min_{w, b, \xi} &amp; \frac{1}{2}||w||^{2} + C \sum_{i = 1}^{N} \xi_{i} \\<br>s.t &amp; y_{i}(w \cdot x_{i} + b) \geq 1 - \xi_{i} &amp; i = 1, 2, \cdots, N \\<br>s.t &amp; \xi \geq 0, &amp; i = 1, 2, \cdots, N<br>\end{array}$$</p><h3 id="3-2-线性支持向量机对偶算法"><a href="#3-2-线性支持向量机对偶算法" class="headerlink" title="3.2 线性支持向量机对偶算法"></a>3.2 线性支持向量机对偶算法</h3><p>首先还是构造拉格朗日函数（ $\alpha_{i} \geq 0, \mu \geq 0$ ）</p><p>$$L(w, b, \xi, \alpha, \mu) = \frac{1}{2}||w||^{2} + C \sum_{i = 1}^{N}\xi_{i} - \sum_{i = 1}^{N}\alpha_{i}(y_{i}(w \cdot x_{i} + b) - 1 + \xi_{i}) - \sum_{i = 1}^{N}\mu \xi_{i}$$</p><p>首先求 $L(w, b, \xi, \alpha, \mu)$ 对 $w, b, \xi$ 的极小</p><p>$$\frac{\partial L(w, b, \xi, \alpha, \mu)}{\partial w} = w - \sum_{i = 1}^{N}\alpha_{i}y_{i}x_{i} = 0$$</p><p>$$\frac{\partial L(w, b, \xi, \alpha, \mu)}{\partial b} = \sum_{i = 1}^{N}\alpha_{i}y_{i} = 0$$</p><p>$$\frac{\partial L(w, b, \xi, \alpha, \mu)}{\partial \xi_{i}} = C - \alpha_{i} - \mu_{i} = 0$$</p><p>带入拉格朗日函数中有</p><p>$$\min_{w, b, \xi} L(w, b, \xi, \alpha, \mu) = -\frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}(x_{i} \cdot x_{j}) + \sum_{i = i}^{N}\alpha_{i}$$</p><p>再对 $\min_{w, b, \xi} L(w, b, \xi, \alpha, \mu)$ 求 $\alpha$ 的极大，得对偶问题</p><p>$$\begin{array}{l}<br>\max_{\alpha} &amp; -\frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}(x_{i} \cdot x_{j}) + \sum_{i = i}^{N}\alpha_{i} \\<br>s.t &amp; \sum_{i = 1}^{N} \alpha_{i} y_{i} = 0 \\<br>s.t &amp; C - \alpha_{i} - \mu_{i} = 0 \\<br>s.t &amp; \alpha_{i} \geq 0 \\<br>s.t &amp; \mu_{i} \geq 0, &amp; i = 1, 2,\cdots, N<br>\end{array}$$</p><p>对约束条件进行变换可以得到</p><p>$$\begin{array}{l}<br>\min_{\alpha} &amp; \frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}(x_{i} \cdot x_{j}) - \sum_{i = i}^{N}\alpha_{i} \\<br>s.t &amp; \sum_{i = 1}^{N} \alpha_{i} y_{i} = 0 \\<br>s.t &amp; 0 \leq \alpha_{i} \leq C, &amp; i = 1, 2,\cdots, N<br>\end{array}$$</p><p>反解原始最优化问题就有，若存在一个 $\alpha^{*}$ 的一个分量 $\alpha_{j}^{*}, 0 \leq \alpha_{j} \leq C$ 有</p><p>$$w^{*} = \sum_{i = 1}^{N} \alpha_{i}^{*}y_{i}x_{i}$$</p><p>$$b^{*} = y_{j} - \sum_{i = 1}^{N}\alpha_{i}y_{i}(x_{i} \cdot x_{j})$$</p><h3 id="3-3-合页损失函数"><a href="#3-3-合页损失函数" class="headerlink" title="3.3 合页损失函数"></a>3.3 合页损失函数</h3><p>线性支持向量机还可以写成如下的最小化目标函数</p><p>$$\min_{w, b} \sum_{i = 1}^{N}[1 - y_{i}(w \cdot x_{i} + b)]_{+} + \lambda||w||^{2}$$</p><p>其中下标 $+$ 表示取正值的函数</p><p>$$[z]_{+}= \begin{cases} z, &amp; z &gt; 0 \ 0, &amp; z \leq 0 \end{cases}$$</p><p>令 </p><p>$$[1 - y_{i}(w \cdot x_{i} + b)]<em>{+} = \xi</em>{i}$$</p><p>则需要最小化的目标函数可以可以写成</p><p>$$\min_{w, b} \sum_{i = 1}^{N}\xi_{i} + \lambda||w||^{2}$$</p><p>取 $\lambda = \frac{1}{2C}$ 则</p><p>$$\min_{w, b} \frac{1}{C}(\frac{1}{2}||w||^{2} + C \sum_{i = 1}^{N}\xi_{i})$$</p><p>与原目标函数等价。</p><p>因为该损失函数形似合页，故得名为合页函数，下图即是一个函数图形。横轴是函数间隔，纵轴是损失。</p><p><img src="/2023/03/21/zhi-shi-zong-jie/9-zhi-chi-xiang-liang-ji/hinge_loss.png"></p><h2 id="4-非线性支持向量机"><a href="#4-非线性支持向量机" class="headerlink" title="4. 非线性支持向量机"></a>4. 非线性支持向量机</h2><h3 id="4-1-核技巧"><a href="#4-1-核技巧" class="headerlink" title="4.1 核技巧"></a>4.1 核技巧</h3><p>对于一个给定的训练数据集，有时候一个实数空间上的线性平面不可分，需要一个超曲面才能分开，这样的问题就是非线性可分问题。</p><p>为了解决非线性问题，可以先通过一个非线性变换，将非线性问题变换为线性问题，然后通过解变换后的线性问题来求解原来的非线性问题。如下面的两幅图，可以将左图椭圆变换为右图中的直线。</p><p><img src="/2023/03/21/zhi-shi-zong-jie/9-zhi-chi-xiang-liang-ji/kernel.png"></p><p>对于示图问题，可以定义一个原空间到新空间的映射变换</p><p>$$z = \phi(x) = ((x^{(1)})^{2}, (x^{(2)})^{2})^{T}$$</p><p>那么原空间中过椭圆</p><p>$$w_{1}(x^{(1)})^{2} + w_{2}(x^{(2)})^{2} + b = 0$$</p><p>变换成新空间中的直线</p><p>$$w_{1}z^{(1)} + w_{2}z^{(2)} + b = 0$$</p><p>如此，原空间的非线性可分就变成了新空间中的线性可分。</p><p>现在定义核函数，对于一个从输入空间 $X$ 到输出空间 $H$ 的映射</p><p>$$\phi(x): X \to H$$</p><p>使得所有的 $x, z \in X$ ，函数 $K(x, z)$ ，满足内积运算</p><p>$$K(x, z) = \phi(x) \cdot \phi(z)$$</p><p>则称 $K(x, z)$ 为核函数，$\phi(x)$ 为映射函数。</p><p>通常情况下，核技巧在学习和预测时只定义核函数 $K(x, z)$ ，而不会显式的定义映射函数 $\phi$ ，因为特征空间经常是高维的（甚至无穷维），而且对于特定的 $K(x, z)$ ，可能有很多不同的映射 $\phi$。</p><p>在线性支持向量机的对偶问题中，目标函数只涉及了实例与实例之间的内积，所以将内积 $x_{i} \cdot x_{j}$ 使用核函数 $K(x_{i}, x_{j})$ 来代替，此时对偶问题的目标函数就成为了</p><p>$$W(\alpha) = \frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}K(x_{i},x_{j}) - \sum_{i = 1}^{N}\alpha_{i}$$</p><p>这等价于经过映射函数将原来的输入空间变换到一个新的特征空间，将输入空间中的内积 $x_{i} \cdot x_{j}$ 变换成特征空间的内积 $\phi(x_{i}) \cdot \phi(x_{j})$ ，在新的特征空间里学习线性支持向量机。</p><p>所以对于非线性支持向量机学习算法，可以构造如下的最优化问题：</p><p>$$\begin{array}{l}<br>\min_{\alpha} &amp; \frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}K(x_{i}, x_{j}) - \sum_{i = i}^{N}\alpha_{i} \\<br>s.t &amp; \sum_{i = 1}^{N} \alpha_{i} y_{i} = 0 \\<br>s.t &amp; 0 \leq \alpha_{i} \leq C, &amp; i = 1, 2,\cdots, N<br>\end{array}$$</p><p>求得最优解 $\alpha^{*} = (\alpha_{1}^{*}, \alpha_{2}^{*}, \cdots, \alpha_{N}^{*})^{T}$</p><p>选择 $\alpha^{*}$ 的一个正分量 $0 \leq \alpha_{j}^{*} &lt; C$ 得</p><p>$$b^{*} = y_{i} - \sum_{i = 1}^{N}\alpha_{i}^{*}y_{i}K(x_{i}, x_{j})$$</p><h3 id="4-2-核函数"><a href="#4-2-核函数" class="headerlink" title="4.2 核函数"></a>4.2 核函数</h3><h4 id="4-2-1-正定核"><a href="#4-2-1-正定核" class="headerlink" title="4.2.1 正定核"></a>4.2.1 正定核</h4><p>既然映射函数可以通过内积求得核函数，而且核函数可以直接在特征空间上使用线性支持向量机算法，那么，如何判定一个函数 $K(x, z)$ 是不是一个核函数呢。</p><p>通常情况下所说的核函数都是正定核函数，下面就来看看成为正定核函数的充要条件。</p><p>函数 $K(x, z)$ 是正定核函数的充要条件是对于任意的 $x_{i}$ ，$K(x, z)$ 对应的 Gram 矩阵</p><p>$$K = [K(x_{i}, x_{j})]_{m \times m}$$</p><p>是半正定的。</p><p>必要性比较好证明，对于一个正定核，有</p><p>$$K(x, z) = \phi(x) \cdot \phi(z)$$</p><p>构造 $K(x, z)$ 关于 $x_{i}, x_{2}, \cdots, x_{m}$ 的Gram矩阵为</p><p>$$[K_{ij}]<em>{m \times m} = [K(x</em>{i}, x_{j})]_{m \times m}$$</p><p>于是</p><p>$$\begin{align}<br>\sum_{i,j = 1}^{N}c_{i}c_{j}K(x_{i},x_{j}) =<br>&amp; \sum_{i, j = 1}^{N}c_{i}c_{j}(\phi(x_{i}) \cdot \phi(x_{j})) \\<br>&amp; (\sum_{i}c_{i}\phi(x_{i})) \cdot (\sum_{j}c_{j}\phi(x_{j})) \\<br>&amp; ||\sum_{i}c_{i}\phi(x_{i})||^{2} \geq 0<br>\end{align}$$</p><p>这就说明Gram矩阵是半正定的。</p><p>充分性相对比较复杂，需要构造一个向量空间的映射，略（主要是我也还没有吃透）。</p><p>虽然知道了正定核的充要条件，但是检验一个函数是不是正定核也并不容易，因为需要对任意输入数据集验证 $K$ 对应的 Gram 矩阵是否是半正定的。实际使用中一般都用已有的核函数。</p><h4 id="4-2-2-常用的核函数有"><a href="#4-2-2-常用的核函数有" class="headerlink" title="4.2.2 常用的核函数有:"></a>4.2.2 常用的核函数有:</h4><ul><li><p>多项式核函数</p><p>$$K(x, z) = (x \cdot z + 1)^{p}$$</p></li><li><p>高斯核函数</p><p>$$K(x, z) = exp(-\frac{||x - z||^{2}}{2\sigma^{2}})$$</p></li></ul><p>除了这两个核函数，在离线数据集上还有一个字符串核函数，在文本分类、信息检索、生物信息学中有应用，大概逻辑是两个字符串中长度相同的子字符串组成的特征向量的余弦相似度。直观而言，两个字符串的相同的子串越多，它们就越相似，反之越不相似。</p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 支持向量机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-PySpark</title>
      <link href="/2023/03/21/zhi-shi-zong-jie/8-pyspark/"/>
      <url>/2023/03/21/zhi-shi-zong-jie/8-pyspark/</url>
      
        <content type="html"><![CDATA[<h2 id="1-初识spark"><a href="#1-初识spark" class="headerlink" title="1. 初识spark"></a>1. 初识spark</h2><p>一个人的心算能力是有限的，所以在很多年前，人们就开始了在各种东西上进行演算。最开始，在沙摊上，后来开始在布上，再后来开始在纸上，再后来有了计算器，再往后有了计算机。</p><p>在计算机上进行演算的确是很快，而且随着摩尔定律的一步步被验证（以后还这样下去可能有点够呛了），计算机处理效率越来越高。</p><p>虽然计算机是进步了，可是我们人类产生数据的速度简直是超乎想象的快，现在很多企业数据在单台计算机上已经难以处理（当然并不是说单台计算机处理数据的价值就比较低，需要分场景）。</p><p>为了可以处理更多的数据，人们把很多机器链接起来，形成了分布式集群，在这些集群上存储数据是可以，那么如何高效的处理这些数据，于是Apache Apark出现了，它是一个开源、强大的分布式查询和处理引擎，再此之前，有MapReduce也可以做分布式数据处理，但是spark更强。</p><p>spark酷毙的地方是除了它的快（内存中比Hadoop快100倍，读磁盘也快10倍），还有它惊人的灵活性。</p><p>在数据处理的时候，它支持被每个数据分析师烂熟于心的SQL，支持看惯关系型数据库的DataFrame，支持关联挖掘的GraphFrames，支持机器学习的ML，甚至在深度学习上都有TensorFrames。</p><p>在使用语言上，它基于Java，原生代码是Scala，但是也支持Python，SQL，R，可以说对程序员的照顾是发自内心的。除了这些，spark还支持流式计算Streaming，也就是说不用等到数据全部完成落到分布式集群上了再开始计算，在线实时采集一会儿就可以。</p><p>简单看一下它的结构</p><p><img src="/2023/03/21/zhi-shi-zong-jie/8-pyspark/spark_ecosystem.png"></p><p>多说一句，在分布式集群上执行数据处理，那必然会有主节点和多个工作节点，而spark通过有向无环（DAG）来组织这些依赖关系。</p><p>既然是处理数据，那么spark的数据是什么样的呢？答案是RDD。RDD中文叫弹性分布式数据集，是不可变Java虚拟机（JVM）对象的分布式集合，数据就是存储在这些JVM中的，这里的弹性，也说明了spark依赖数据的灵活性。</p><p>要做到快，就尽可能的把串行搞成并行，而RDD也正是这么做的。RDD包括两两组并行操作：</p><ul><li>转换，反馈指向新的RDD指针</li><li>动作，运行计算</li></ul><p>而且，spark还很“懒”，在没有收到具体的动作指令前，它不会做任何的转换，只有动作执行了而且需要有结果反馈时，才会计算，这种延迟计算可以让它有针对性的查询优化。也算“懒”得很有理由（对于熟悉深度学习的朋友，这个tensorflow的计算图差不多）。</p><p>为了对更多的程序员友好，光有RDD当然不够，毕竟RDD也不能支持那么多语言，所以RDD基础上衍生出了对Python、Pandas、R更友好的DataFrame，这就和关系型数据库非常类似了，这也是spark被很多数据工程师广泛应用的重要原因。</p><p>除了提高支持更多语言灵活性，在速度上spark也追求更快，所有有了Dataset，不过有点遗憾，Dataset由于设计的缘故，特别不适合做交互式分析，特别是Python，所以现在也不支持Python。</p><p>他们之间在spark 2.0上关系为</p><p><img src="/2023/03/21/zhi-shi-zong-jie/8-pyspark/history_of_spark.png"></p><p>RDD是spark原生的数据结构，快是应该的，可是既然说了灵活，也不能因为转换到SQL，Python上就慢了，不妨看看慢的原因，主要就是python这类新的API与RDD之间的通信拖慢了计算速度，所以spark有了Catalyst优化器，他将计算过程进行逻辑优化，极大的提高了计算速度，优化过程大概长这样。</p><p><img src="/2023/03/21/zhi-shi-zong-jie/8-pyspark/Catalyst.png"></p><h2 id="2-spark的核心——RDD"><a href="#2-spark的核心——RDD" class="headerlink" title="2. spark的核心——RDD"></a>2. spark的核心——RDD</h2><p>前面说了spark的快主要是因为RDD的并行操作，那这种并行操作是个什么概念了，我们来举个例子。</p><ol><li>统计出某一列中不同值出现的次数</li><li>选出以字母A开开头的</li><li>输出结果</li></ol><p>spark在计算的时候会先算2，再算1，最后算3，而不是1，2，3依次算，如果一个数据有1000万行，而A的只有10万行，这种计算速度的提升不言而喻了。</p><p>知道了并行的好处，现在开始创建RDD。创建方式有两种，一种的自己写，一种是读外部的。</p><ul><li>自己写通过.parallelize()，这里面的数据结构非常丰富，像元组、字典、列表啥的都可以</li><li>读外部的通过.textFile()，指定读取的文件地址就可以，还可以顺便定个分区</li></ul><p>前面我们说过，spark并行的两个东西分别是转换和动作，建好数据，现在就可以转换了。</p><p>RDD本身是一行一行的数据，所以自然首当其冲会有转换行的需求，可以使用.map()。</p><p>这种转换以后还是一行一行的，可是如果想转换到同一行呢，那就弄成水平的，用.flatMap()。</p><p>行转换完了，有时候我们也不需要全部的元素，选择条件就出现了，用.filter()，这就和SQL里面的where非常像了。</p><p>同样，去重也和SQL中的一样，用.distinct()，关联的时候用.join()，.leftOuterJoin()。当比join更严格，只要完全相同的时候，那就用.intersection()。</p><p>对于有明确条件的可以用filter，只想随机选择的时候就用.sample()。</p><p>spark是基于分布式集群的，那必定会涉及到分区，前面创建RDD的时候也会指定分区，那如果要改变分区了，可以用.repartition()。</p><p>说完转换，下面说动作。</p><p>对大量数据而言，我们最常用的就是看下数据大概长什么样。</p><p>比如反馈前面几行啥的，可以用.take()。</p><p>如果实在要看全部数据，那就用.collect()，不过这最好慎用。</p><p>当然，查看数据一般不能看完，如果想数一数有多少行，可以用.count()。</p><p>在转换的时候对行转换有map，那使用指定的方法呢，用.reduce()，这个是不是感觉用hadoop的mapreduce有点说不出的感觉了。</p><p>reduce是用一个函数，如果用相同的方法迭代的处理每个元素呢，那就用.foreach()。</p><p>最后，我们读了数据，最后也要记得把处理过后的数据保存下来，可以用.saveAsTextFile()。</p><h2 id="3-pyspark的核心——DataFrame"><a href="#3-pyspark的核心——DataFrame" class="headerlink" title="3. pyspark的核心——DataFrame"></a>3. pyspark的核心——DataFrame</h2><p>如前面所说，DataFrame和Catalyst优化器的意义在于非优化的RDD查询时提升PySpark查询的性能，这里提升的性能主要是Python与JVM之间的通信开销。</p><p>要分析DataFrame数据，首先创建DataFrame数据，创建方法和RDD相同，不过需要经过一次到DataFrame的转化，使用spark.raed.json()。前面有说到spark是惰性的，所以只read了还不行，实际使用的时候可以转换为临时表，使用.createOrReplaceTempView()。</p><p>从RDD转换到DataFrame，共计有两种方式。</p><ul><li>第一种是直接把json格式的数据给Dataframe，让spark自动推断是什么类型，这也叫反射推断模式。</li><li>另一种是定义StructTtpe定义schema，在CreateDataFrame的时候指定schema，这种叫编程指定模式。</li></ul><p>DataFrame创建完成后，可以使用python进行高效的查询，查询方法主要有两大类。</p><ul><li>使用DataFrame API指定，比如.show()和.head()都可以查看前几行，.count()可以统计行数，而且直接支持select操作。</li><li>另一种方式是用过SQL查询，使用spark.sql()。这里正常的SQL语句都可以，非常方便。</li></ul><h2 id="4-数据建模准备"><a href="#4-数据建模准备" class="headerlink" title="4. 数据建模准备"></a>4. 数据建模准备</h2><p>理解完基础数据RDD和DataFrame后，现在开始准备数据建模。</p><p>知道数据建模或机器学习的朋友应该都知道，在数据建模时，基本上80%的工作都是整理清洗处理数据。</p><p>准备数据无外乎就是让实际数据变得更可用，比如去重，缺失值处理，异常数据等，为了做到这些，PySpark提供了比较丰富的方法。</p><p>首先看重复数据，为了检测到重复数据，可以可用常用的.distinct()，检测到了，使用.dropDuplicates()可以删除重复项，这里可以增加subset参数指定特定的列。</p><p>对于缺失数据，处理缺失值最简单的方法就是益处，这和去除数据的方法一样，但是直接移除可能会对数据集的可用性带来比较大的影响。所以通常情况下，我们会采用稍微折中一些的方式处理缺失值。</p><ul><li>比如，当数据是离散布尔型时或已经是分类的，我们可以添加新列——Missing，并将其转化为一个分类变量。</li><li>如果数据是顺序类或数值类的，则可以使用描述性统计指标进行填充，如均值、分位数、众数等。</li></ul><p>如果是缺失值比较少，可以使用.dropna()删除，如果缺失值比较多就需要使用上面的方法填充，填充的方式是.fillna()，该方法会将所有缺失值都是用该值填充，以平均值填充为例，需要先计算平均值，然后将平均值传递给.fillna()方法。</p><p>除了缺失值，还有一个对原数据会产生较大影响的还有离群值，离群值可以看作是一种特殊的离群值，填充方法都是相同的，不过这种离群值怎么检测出来呢？</p><p>常用于检测离群值的方法为四分位法（Q1 - 1.5IQR, Q3 + 1.5IQR），这个方法对于经常做数据分析的朋友来说应该是非常熟悉。在PySpark中使用.approxQuantile()方法可以或得分位数，获取后就可以计算IQR。</p><p>为了快速了解数据，我们可以打印前面几行查看数据内容，比如前面所说的take，head和show，但是有时候除了数据本身，我们还需要看数据每个列的类型，就可以使用.printSchema()，进一步为了描述数据的描述性统计指标，可以使用.describe()。如果想使用更多的统计指标，如峰度、偏度等，可以使用agg函数指定。</p><p>除了单列特征的统计性指标，我们还会经常描述两个特征之间相关性，PySpark同样提供了相应的方法，为.corr()，这里是Pearson相关系数。</p><p>除了直接的指标外，要了解数据，通过图像也是一个非常好的方式，特别是直方图和散点图，但是对于大数据来说，绘图是一件不太理智的行为，这里就不说了。</p><h2 id="5-机器学习模型的福音——ML"><a href="#5-机器学习模型的福音——ML" class="headerlink" title="5. 机器学习模型的福音——ML"></a>5. 机器学习模型的福音——ML</h2><p>ML是支持DataFrame的一个机器学习库，对于RDD，有MLlib支持（现在并未被积极维护）。对于一个机器学习模型而言，无外乎就是处理数据、建立模型，不过在spark惰性计算的条件下，ML的使用和python的一般使用方法略有不同。</p><p>PySpark将ML建模分为了三个部分，分别是转换器、评估器和管道，直观来说，转换器就是处理数据的过程，评估器就是建模的过程，管道则是整个建模的过程。</p><p>从高层次看，当用转换器的抽象类派生时，每个新的转换器需要实现.transfrom()方法，该方法需要传递一个待被转换的DataFrame。下面简单列一些转换器及介绍。</p><ul><li>Binarizer: 根据指定的阈值将连续变量转换为对应的二进制值</li><li>Bucketizer: 根据阈值列别将连续变量转换为多项式</li><li>ChiSqSelector: 只用卡方（Chi-Square）进行参数特征选择</li><li>CountVectorizer: 用于文本标记</li><li>DCT: 离散余弦变换取实数值向量，并返回不同长度的向量，但余弦函数只和在不同频率下震荡</li><li>ElementwiseProduct: 返回传入该方法方向量和另一个传入参数scaling Vec向量的乘积</li><li>HashintTF: 返回一个带有计数的有预定长度的hash转换向量</li><li>IDF: 逆向逆向文件频率</li><li>IndexToString: 使用StringIndexerModel对象中的编码将字符串索引反转到原始值</li><li>MaxAbsScaler: 数据调整到[-1.0, 1.0]范围内</li><li>MinMaxScaler: 数据调整到[0.0, 1.0]范围内</li><li>NGram: 返回结果包含一些列n-gram</li><li>Normalizer: 是用p范数将数据缩放为单位范数（默认为L2范数）</li><li>OneHotEncoder: 分类列编码成二进制向量</li><li>PCA: 主成分分析数据降维</li><li>PolynomialExpansion: 向量的多项式展开</li><li>QuantileDiscretizer: 与Bucketizer类似，不过传递的是一个numBuckets，计算数据的近似分位数进行分割</li><li>RegexTokenizer: 使用正则表达式对字符串进行分词</li><li>RFormula: 使用公式生成新列</li><li>SQLTransformer: 使用SQL生成新列</li><li>StandardScaler: 标准化（均值0，标准查1）</li><li>StopWordsRemover: 删除文本中的停用词</li><li>StringIndexer: 生成一个索引向量</li><li>Tokenizer: 以空格为分割词进行分词</li><li>VectorAssembler: 多个数字列合并为一列向量</li><li>VectorIndexer: 为类别列生成索引向量</li><li>VectorSlicer: 给定一个索引列表，其从特征向量只能够提取值</li><li>Word2Vec: 将字符串转换为{string, vector}格式</li></ul><p>转换器是数据的加工过程，评估器则是建模的过程，可以被视为需要评估的统计模型，对观测的对象做预测和分类。</p><p>常用的评估器有分类、回归和聚类。ML中一共提供了7中分类模型，7中回归模型和4中聚类模型。</p><p>分类模型有：</p><ul><li>LogisticRegression: 逻辑回归</li><li>DecisionTreeClassifier: 决策树</li><li>GBTClassifier: 梯度提升树</li><li>RandomForestClassifier: 随机森林</li><li>NaiveBayes: 朴素贝叶斯</li><li>MultilayerPerceptronClassifier: 多层感知器</li><li>OneVsRest: 将多分类问题简化为二分类问题</li></ul><p>回归模型有：</p><ul><li>AFTSurvivalRegression: 生存回归，适用于明确的阶段性过程建模</li><li>DecisionTreeRegression: 决策树回归</li><li>GBTRegression: 梯度提升树回归</li><li>GeneralizedLinearRegression: 广义线性回归</li><li>IsotonicRegression: 保序回归</li><li>LinearRegression: 线性回归</li><li>RandomForestRegression: 随机森林回归</li></ul><p>聚类模型有：</p><ul><li>BisectingKMeans: 二分k均值算法</li><li>KMeans: k均值算法</li><li>GaussianMixture: 高斯混合模型</li><li>LDA: 隐含狄利克雷分布模型</li></ul><p>PySpark ML 中的管道用来表示从转换到评估的端到端的过程。一个管道可以被认为是一系列不同阶段组成，通常情况下，前一阶段的输出会成为下一阶段的输入。</p><h2 id="6-大数据上的深度学习——TensorFrames"><a href="#6-大数据上的深度学习——TensorFrames" class="headerlink" title="6. 大数据上的深度学习——TensorFrames"></a>6. 大数据上的深度学习——TensorFrames</h2><p>TensorFrames是利用TensorFlow来操作Spark DataFrame，其大概结构为：</p><p><img src="/2023/03/21/zhi-shi-zong-jie/8-pyspark/tensorframes.png"></p><p>TensorFrames可以将DataFrame作为输入应用到TensorFlow计算图中，同时还允许将TensorFlow计算图输出返回到DataFrame中进行下一步到Spark处理。</p><p>TensorFrames当前在工业界生产环境中未有比较典型的应用，毕竟tensorflow自身提供了更友好的分布式学习架构。这里简单说两句深度学习。</p><p>深度学习是机器学习的一部分，其主要包含三个层次结构，分别是输入层、隐藏层和输出层。每个层由一个或多个具有连接的节点组成，输入层被动接受信息，隐藏层和输出层主动修改数据。深度学习相比传统机器学习，可以做非常复杂的特征工程，让神经网络中的不同神经元自动去学习输入数据的特征结构。</p><h2 id="7-结构化图数据——GraphFrames"><a href="#7-结构化图数据——GraphFrames" class="headerlink" title="7. 结构化图数据——GraphFrames"></a>7. 结构化图数据——GraphFrames</h2><p>除了前面我们熟知的机器学习与深度学习，spark还有一个亮点是支持图结构数据的相关运算，图是我们生活中非常普遍的数据结构，比如人与人之间的社交关系，人与商品之间的消费关系，商品与地址的物流关系等等都是图结构。</p><p>而GraphFrames就是利用DataFrame来进行图计算的利器，图中的点和边由DataFrame表示，允许存储每个节点和边的任意数据，这里有必要说一下GraphFrames与GraphX的关键性区别。</p><ul><li>GraphFrames利用了DataFrame API的性能优化和简单性</li><li>GraphFrames可以使用Python、Java和Scala访问，但是GraphX只能使用Scala访问</li></ul><p>GraphFrame构建图形时需要对点和边对命名做一些特殊处理。</p><ul><li>表示节点的列需要id的名称</li><li>表示边的列需要一个起点（src）和一个终点（dst）</li></ul><p>在查询过程中，可以使用.edges.filter()选择边，通过degree可以查询图中节点的度，并且还有inDegree和outDegree。</p><p>说到图，不得不说一下Google Search Engine中的PageRank。在越是重要的网站接收到的其他网站的链接就越多的假设下，其工作原理是对连接页面的数量和质量进行计数，从而估计该页面的重要性。GraphFrames中已经包含了PageRank的API，可以使用.PageRank(resetProbability, maxIter)，其中resetProbability表示复位到随机节点的概率，maxIter表示最大迭代次数。</p><h2 id="8-结构化流——Spark-Streaming"><a href="#8-结构化流——Spark-Streaming" class="headerlink" title="8. 结构化流——Spark Streaming"></a>8. 结构化流——Spark Streaming</h2><p>Spark Streaming是一种可扩展、容错的数据流系统，它采用RDD的批量处理模式并加快处理速度，它的工作流大致如下：</p><p><img src="/2023/03/21/zhi-shi-zong-jie/8-pyspark/spark_streaming.png"></p><p>Spark Streaming接收输入数据流，并在内部将数据流分为多个较小的batch，Spark引擎将这些输入数据的batch处理后，输出被处理过的batch结果集。</p><p>当前Spark Streaming已经支持流非常多的组建，比较常用的有：Kafka，Flume，HDFS/S3，Kinesis和Twitter等。</p><p>结成了这么多组建，适应的应用场景也很刚需，Spark Streaming常用场景有：</p><ul><li>流ETL：将数据推送到下游系统之前进行持续的清洗和聚合</li><li>粗发器：实时检测行为和异常事件，及时触发下游动作</li><li>数据浓缩：将实时数据与其他数据集连接，进行更丰富的分析</li><li>复杂会话和持续学习：持续分析关联数据，以更新机器学习模型</li></ul><p>在了解完具体的应用场景后，最后来了解一下数据流的工作流程，大致工作流程如下图所示：</p><p><img src="/2023/03/21/zhi-shi-zong-jie/8-pyspark/sparkdriver.png"></p><ol><li>当Spark Streaming上下文启动时，驱动进程将对executor执行长时间运行的任务</li><li>executor中的Receiver从Streaming源接收数据流，Receiver将输入的数据流分为多个数据块并将这些块保留在内存中</li><li>为流避免丢失，这些块会被复制到另一个executor中</li><li>块ID信息被传送到driver上的Block Management Master。</li><li>对于在Spark Streaming Context内配置的批次间隔，驱动程序将启动Spark任务来处理这些数据，然后被持久化到任意数据的目标数据存储中，比如云存储，关系数据库和NoSQL。</li></ol><h2 id="9-打包spark——spark-submit"><a href="#9-打包spark——spark-submit" class="headerlink" title="9. 打包spark——spark-submit"></a>9. 打包spark——spark-submit</h2><p>描述性分析数据的时候可以在jupyter等交互式分析界面完成，但是当需要同时运行一堆程序时，就需要对应用程序打包，spark-submit就提供这样一个API，通过配置一些参数就可以将一堆程序跑起来，这些参数有：</p><ul><li>–master: 设置主节点URL的参数，支持的语法有<ul><li>local: 执行本地机器的代码</li><li>spark://host:port : Spark单机集群</li><li>mesos://host:port : 部署在Mesos上的Spark集群</li><li>yarn: 从运行Yarn的头节点提交作业</li></ul></li><li>–deploy-model: 是否在本地启动Spark驱动程序，或在集群内的其中一台机器上启动</li><li>–name: 应用程序名称</li><li>–py-files: .py、.egg或.zip的Python应用程序，这些文件会被交付给每一个执行器</li><li>–files: 以逗号分割的文件列表</li><li>–conf: 应用程序的配置（spar应用程序配置优先级SparkContext &gt; spark-submit &gt; spark-defaults.conf）</li><li>–properties-file: 配置文件，与spark-defaults.conf相似</li><li>–driver-memory: 在驱动程序上分配多少的内存</li><li>–executor-memory: 每个执行器上分配的内存</li><li>–help: 帮助信息</li><li>–verbose: 打印附加调试信息</li><li>–version: 版本信息</li><li>–driver-cores: 驱动程序内核数量（仅在单机或Yarn上可用）</li><li>–queue: 在Yarn上运行的队列（仅在Yarn上可用）</li><li>–num-executors: 指定执行器数量（仅在Yarn上可用）</li><li>–supervise: 当驱动程序丢失或失败的时候，重启该驱动（仅在单机或Mesos上可用）</li><li>–kill: 用于杀死任务，赋予submission_id</li><li>–status: 请求指定的应用程序状态</li></ul><h2 id="10-小结"><a href="#10-小结" class="headerlink" title="10. 小结"></a>10. 小结</h2><p>整体而言，PySpark作为一个大数据工具，性能是杠杠的，里面的方法也比较简单，可常用的SQL、Python相关方法联系都比较紧密，使用成本并不高。</p><p>spark上的MLlib（对scala）模块和ML（对python）模块对大数据机器学习而言是不过的选择，只是在模型选择上相对稀缺，而且不易自定义一些模型。同样，对于Graphx也是如此。至于深度学习，虽然有tensorDataFrame，但是咋生产环境上不建议使用，如果真要用深度学习，还是用深度学习原生框架会比较好。</p><p>总之，spark处理大数据是非常有优势的，但是过多、过细、过于复杂的数据还是尽量不要在上面进行，毕竟在非常大的数据上使用非常复杂的模型也得不偿失。</p><p>reference：<a href="https://github.com/drabastomek/learningPySpark">learningPySpark</a></p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> pyspark </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-从CNN到GNN看图神经网络</title>
      <link href="/2023/03/21/zhi-shi-zong-jie/7-cong-cnn-dao-gnn-kan-tu-shen-jing-wang-luo/"/>
      <url>/2023/03/21/zhi-shi-zong-jie/7-cong-cnn-dao-gnn-kan-tu-shen-jing-wang-luo/</url>
      
        <content type="html"><![CDATA[<h2 id="1-图这种数据结构"><a href="#1-图这种数据结构" class="headerlink" title="1. 图这种数据结构"></a>1. 图这种数据结构</h2><h3 id="1-1-图是啥"><a href="#1-1-图是啥" class="headerlink" title="1.1 图是啥"></a>1.1 图是啥</h3><p>图在不同领域会有一些差异，比如数学上的图论研究，数据科学上的图关系性数据库，在计算机工程领域上的图数据结构。</p><p>这里主要的研究对象是图数据结构（Graph）。</p><h3 id="1-2-图的定义"><a href="#1-2-图的定义" class="headerlink" title="1.2 图的定义"></a>1.2 图的定义</h3><p>图表示为定点与边的集合，记为 $G = (V, E)$，其中 $V$是定点的集合，$E$是边的集合。</p><h3 id="1-3-图的类型"><a href="#1-3-图的类型" class="headerlink" title="1.3 图的类型"></a>1.3 图的类型</h3><ul><li>同构图：图中的节点类型和关系类型都有且仅有一种</li><li>异构图：节点类型或关系类型不只一种</li><li>属性图：相比异构图，属性图给节点或边增加了属性信息</li><li>非显式图：数据之间没有显式的定义关系，需要一句某种规则和计算方式将关系表达出来，如3D视觉中的点云数据</li></ul><h3 id="1-4-图的组成"><a href="#1-4-图的组成" class="headerlink" title="1.4 图的组成"></a>1.4 图的组成</h3><ul><li>有向图：边有方向，$&lt;v_{i}, v_{j}&gt;$</li><li>无向图：边无方向，$&lt;v_{i}, v_{j}&gt; = &lt;v_{j}, v_{i}&gt;$</li><li>加权图：每条边都有是个不同的实数，通常是$\in[0, 1]$</li><li>无权图：可理解为每条边的权重都相同，都是1</li><li>非连通图：存在孤立的定点，无任何边与之相连</li><li>连通图：不存在孤立顶点</li><li>二部图：任一边$e_{ij}$，$v_{i} \in A, v_{j} \in B$，如用户与商品</li><li>邻居：存在以一条边相连</li><li>度：以$v_{i}$为端点的数目，所有节点的度与边数关系为 $\sum_{v_{i}}deg(v_{i}) = 2|E|$</li><li>子图：$G^{‘} = (V^{‘}, E^{‘})$的顶点分别是另一个图$G = (V, E)$的顶点的子集和边的子集</li><li>路径：从顶点$v_{i}$出发，沿着一些边经过一些顶点$v_{p1}, v_{p2},\cdots, v_{pm}$到达顶点$v_{j}$，则经过的边就构成连路径，这里有路径的长度，顶点的距离，k阶邻居，k阶子图等概念。</li></ul><h3 id="1-5-图的存储"><a href="#1-5-图的存储" class="headerlink" title="1.5 图的存储"></a>1.5 图的存储</h3><h4 id="1-5-1-邻接矩阵"><a href="#1-5-1-邻接矩阵" class="headerlink" title="1.5.1 邻接矩阵"></a>1.5.1 邻接矩阵</h4><p>用矩阵来表示图中节点与节点的关系。公式为：</p><p>$$<br>A_{ij}= \begin{cases}<br>1, &amp; \text {if $(v_{i}, v_{j}) \subseteq E $} \<br>0, &amp; \text {else} \end{cases}<br>$$</p><p>邻接矩阵经常是稀疏的，因此常用稀疏矩阵存储，空间复杂度能到$O(M)$。</p><h4 id="1-5-2-关联矩阵"><a href="#1-5-2-关联矩阵" class="headerlink" title="1.5.2 关联矩阵"></a>1.5.2 关联矩阵</h4><p>与邻接矩阵不同，关联矩阵是用矩阵来表示图中节点与边的关系。公式为</p><p>$$<br>B_{ij}= \begin{cases}<br>1, &amp; \text {if $v_{i}$与$e_{j}$} 相连\<br>0, &amp; \text {else} \end{cases}<br>$$</p><h2 id="2-一种特殊的图数据——图像"><a href="#2-一种特殊的图数据——图像" class="headerlink" title="2. 一种特殊的图数据——图像"></a>2. 一种特殊的图数据——图像</h2><p>图是一种数据结构关系，图像也是一种数据结构关系（像素），如果把图像中的像素视为一个节点，那么某一像素附近的栅格就等价于图数据结构中的邻居，像素之间的空间坐标的连线就是图数据中的邻居之间的边。这样图像数据就演变成了非常规则的图数据。这样，在CNN中的各种卷积、池化操作可以推广到更普遍的非结构化的图数据上。达到数据表示、非结构化图数据分类、图表示学习等目的。</p><p>这里看一个经典的图同构问题，可能有点感觉。</p><p><img src="/2023/03/21/zhi-shi-zong-jie/7-cong-cnn-dao-gnn-kan-tu-shen-jing-wang-luo/graph_isomorphism.png" alt="图的同构"></p><p>看上去并不相似的两个图，可能是完全等价的。</p><h2 id="3-卷积神经网络——CNN"><a href="#3-卷积神经网络——CNN" class="headerlink" title="3. 卷积神经网络——CNN"></a>3. 卷积神经网络——CNN</h2><h3 id="3-1-卷积和池化"><a href="#3-1-卷积和池化" class="headerlink" title="3.1 卷积和池化"></a>3.1 卷积和池化</h3><p>CNN是作为常用的模型，这个不详细推导，仅说明一些主要过程。卷积神经网络中最重要的两个过程为卷积与池化。</p><p>卷积诞生于信号领域，它针对某个线性不变的系统，给定输入信号 $f(\tau)$ 和系统响应 $g(\tau)$ ，得系统的输出。</p><p>数据定义为</p><p>$$(f * g)(t) = \int^{\infty}_{-\infty}f(\tau)(t - \tau) d \tau$$</p><p>为了处理这种信号变换，产生了著名的卷机定理，将时域中复杂的卷积运算转换为频域中简单的乘积运算，如下式。</p><p>$$(f * g)(t) \iff F(w)G(w)$$</p><p>对于图像上的卷积，就把连续变量的积分变成了离散变量的求和，原理相同，然后进行乘积运算。$F$ 为输入的图像，$G$ 为滤波器，也就是我们所说的卷积核。常用的卷积操作有单通道卷积和多通道卷积。</p><p>除了常用的单通道卷积和多通道卷积，随着图像任务越来越丰富，也衍生出了很多其他的卷积形式，如 $1 \times 1$ 卷积，转置卷积，空洞卷积以及分组卷积等。 </p><p>除了卷积，CNN中还有一个重要的组成是池化，其主要目的是降维，以降低计算量。并提供一些平移不变性等特性。常用的有最大池化和平均池化，顾名思义，最大池化就是取滑窗的最大值，平均池化就是取滑窗的平均值。</p><h3 id="3-2-卷积神经网络的特点"><a href="#3-2-卷积神经网络的特点" class="headerlink" title="3.2 卷积神经网络的特点"></a>3.2 卷积神经网络的特点</h3><p>基于卷积层于池化层，容易理解卷积神经我网络有如下特点：</p><ul><li>局部连接</li><li>权重共享</li><li>层次化表达</li><li>平移不变性</li></ul><p>简单回顾了卷积神经网络，现在可以看图卷积神经网络了。</p><h2 id="4-图卷积神经网络——GCN"><a href="#4-图卷积神经网络——GCN" class="headerlink" title="4. 图卷积神经网络——GCN"></a>4. 图卷积神经网络——GCN</h2><h3 id="4-1-CNN与GCN"><a href="#4-1-CNN与GCN" class="headerlink" title="4.1 CNN与GCN"></a>4.1 CNN与GCN</h3><p>图卷积是一个很深的领域，追其根本，是在处理图信号，其设计到拉普拉斯矩阵和图傅立叶变换，整个过程非常复杂，这里不作深入说明，仅论述GCN的工作方式。</p><p>前面有说图像是一种特殊的图数据，两者的网络连接方式也非常相似，用一幅图直观感受一下。</p><p><img src="/2023/03/21/zhi-shi-zong-jie/7-cong-cnn-dao-gnn-kan-tu-shen-jing-wang-luo/cnn_and_gcn.jpg" alt="CNN与GCN的感受域"></p><p>同样在学习任务上，两者同样具有很强的相似性，GCN及其衍生模型主要解决的任务包括图分类（CNN中的图像分类）和节点分类（CNN中的目标检测）。</p><h3 id="4-2-GCN提供了端到端的学习表示"><a href="#4-2-GCN提供了端到端的学习表示" class="headerlink" title="4.2 GCN提供了端到端的学习表示"></a>4.2 GCN提供了端到端的学习表示</h3><p>图数据的处理有两类比较经典的方式，分别是：</p><ul><li>基于手工特征：基本思想是将图中节点的结构信息以一些图的统计特征进行替代，如节点的度、节点的PageRank值等，然后送到下游进行学习。</li><li>基于随机游走：基本思想是将图中节点所满足的关系与结构的性质通过随机游走的采样方式映射到一个新的向量空间去，然后送到下游进行学习。</li></ul><p>基于手工的特征的特征向量需要人为定义，工作量大，而且很难确定这些统计特征是否对后面的学习任务是否有用。基于随机游走的方法相比基于手工更加高效，但是由于随机游走采样，提取的图信息可能不够完全，而且对于连通图很大时，游走序列难以控制。</p><p>GCN提供了一种端到端的学习方式，一端是数据，一端是任务，相比前面的两种方式，GCN至少有下面两个优势。</p><ul><li>GCN对表示学习与任务学习一起进行端到端的优化，相比先提取特征向量，再进行任务学习，更能有效的训练图数据的表示。</li><li>GCN对结构信息和属性信息的学习是同步进行的，而很多时候图的属性信息和结构信息是互补关系，特别是对于一些稀疏图，这样的同步学习非常有用。</li></ul><h3 id="4-3-GCN是一个滤波器"><a href="#4-3-GCN是一个滤波器" class="headerlink" title="4.3 GCN是一个滤波器"></a>4.3 GCN是一个滤波器</h3><p>为了理解图卷机是滤波器，先理解一下图滤波器（在图信号滤波器前，还有离散信号滤波器、时域信息，频域信息（图上是空域信息）），在图信号中，图滤波器是图信号的频域信息中各频率分量的强度进行增强和衰减的操作，用公式表示为</p><p>$$y = Hx = \sum_{N}^{k = 1}(h(\lambda_{k})x_{k})v_{k}$$</p><p>图滤波器有下面的性质：</p><ul><li>线性：$H(x + y) = Hx + Hy$</li><li>无序（这是因为图信号变换是傅立叶变换，这点差别与小波变换）：$H_{1}(H_{2}x) = H_{2}(H_{1}x)$</li><li>当 $h(\lambda) \neq 0$时，滤波操作可逆</li></ul><p>常用的滤波器有四种，分别是低通滤波器、高通滤波器、带通滤波器和带阻滤波器，如下所示：</p><p><img src="/2023/03/21/zhi-shi-zong-jie/7-cong-cnn-dao-gnn-kan-tu-shen-jing-wang-luo/wave_filter.jpg" alt="低通滤波器、高通滤波器、带通滤波器和带阻滤波器"></p><p>滤波器通过低频并阻止高频，则称为低通滤波器；如果它阻挡低频并通过高频，它就是一个高通滤波器。带通滤波器，其仅通过相对窄的频率范围，带阻滤波器，其仅阻挡相对窄的频率范围。</p><p>对于图信号处理中的卷积操作，经过简单推导，不难得出</p><p>$$x_{1} * x_{2} = H_{x_{1}}x_{2}$$</p><p>其中$H_{x_{1}}$是一个图位移算子。所以从这个层面上图卷机等价于图滤波。</p><p>更进一步，在 <a href="https://arxiv.org/abs/1905.09550">Revisiting Graph Neural Networks: All We Have is Low-Pass Filters</a> 这边论文中，作者认为GCN是低通滤波器是在，只对特征向量进行低通滤波，不具有非线性流形学习特性。放一个直观的图感受一下。</p><p><img src="/2023/03/21/zhi-shi-zong-jie/7-cong-cnn-dao-gnn-kan-tu-shen-jing-wang-luo/GCN_low_pass_filter.png"></p><h2 id="5-图神经网络——GNN"><a href="#5-图神经网络——GNN" class="headerlink" title="5. 图神经网络——GNN"></a>5. 图神经网络——GNN</h2><h3 id="5-1-图神经网络"><a href="#5-1-图神经网络" class="headerlink" title="5.1 图神经网络"></a>5.1 图神经网络</h3><p>GCN的出现带动了神经网络在图数据学习中的价值，后续就把所有在图数据中使用神经网络学习的方法都归集为了GNN（图神经网络）。</p><p>GCN的本质是迭代式的聚合邻居，后续出现了很多在此基础上改进的模型，以提升在不同图数据上的适应性。</p><p>这里简单描述GraphSAGE的变化，后续有时间再聊常用的GAT和R-GCN。</p><h3 id="5-2-GraphSAGE"><a href="#5-2-GraphSAGE" class="headerlink" title="5.2 GraphSAGE"></a>5.2 GraphSAGE</h3><h4 id="5-2-1-采样邻居"><a href="#5-2-1-采样邻居" class="headerlink" title="5.2.1 采样邻居"></a>5.2.1 采样邻居</h4><p>相比GCN，GraphSAGE有两个改进，分别是采样邻居与聚合邻居。</p><p>GCN的训练是一种全图模式，每一轮迭代的梯度需要所有节点参与，但是通常DNN模型是需要mini-batch训练的，这在大规模数据的工程化实现非常重要。GraphSAGE对聚合邻居随机采样来控制运算时节点k阶子图的数据规模，然后在采样的字图上随机组合来完成小批量学习。</p><p>以下面采样方法为例</p><p><img src="/2023/03/21/zhi-shi-zong-jie/7-cong-cnn-dao-gnn-kan-tu-shen-jing-wang-luo/graphsage_sample.png" alt="采样邻居"></p><p>对于GCN而言，如果要得到2层特征，图中的所有节点都需要参与计算，这对于一个大规模的图而言，这非常不现实。</p><ul><li>执行 $k$ 层GCN，则 $k$ 阶子图平均出现 $1 + d + d^{2} + \cdots + d^{k}$ 个节点，这会导致非常高的计算复杂度。</li><li>真实场景中经常会出现超级节点，这类型节点高层特征计算的代价非常高</li></ul><p>GraphSAGE为了解决这个问题，给出了采样倍率的解决方法，做法是设每个节点在第 $k$ 层的邻居采样倍率（每个邻居采样的一阶邻居总数不超过的数量）是 $S_{k}$ ，如此，任意一个中心节点的表达计算，所涉及的总节点数控制在了 $O(\prod_{k = 1}^{k}S_{k})$ ，对于超级节点，GraphSAGE选择了均匀采样的方法。如此，GraphSAGE可以把子图节点规模控制在阶乘级数以下，有利于工程化实现。</p><h4 id="5-2-2-聚合邻居"><a href="#5-2-2-聚合邻居" class="headerlink" title="5.2.2 聚合邻居"></a>5.2.2 聚合邻居</h4><p>聚合算子需要满足自适应（不管节点邻居如何变化，输出维度都是一样的）和排列不变性（图数据本身么有顺序，所以不管邻居节点的排列顺序如何，输出结果都是一样的），常用的算子为：</p><ul><li>平均/加权聚合算子</li><li>长短时记忆（LSTM）算子</li><li>池化算子</li></ul><h3 id="5-3-其他图神经网络"><a href="#5-3-其他图神经网络" class="headerlink" title="5.3 其他图神经网络"></a>5.3 其他图神经网络</h3><h4 id="5-3-1-GAT"><a href="#5-3-1-GAT" class="headerlink" title="5.3.1 GAT"></a>5.3.1 GAT</h4><p>GAT即图注意力网络。它使用注意力机制来对邻居节点进行聚合，实现不同邻居权重对自适应分配。</p><h4 id="5-3-2-R-GCN"><a href="#5-3-2-R-GCN" class="headerlink" title="5.3.2 R-GCN"></a>5.3.2 R-GCN</h4><p>实际工程场景中，节点之间的关系通常是不同的，例如在知识图谱中，关系的类别可能会有非常多，而通常使用的GCN、GraphSAGE以及GAT都只处理单一节点关系的图。R-GCN的出现，就是将图卷机神经网络拓展到包含多种实体关系的图数据中。核心是做了两次聚合操作（分别针对节点和关系权重）。</p><p>图神经网络内容很丰富，一片文章远远写不完，这片文章只是从常用的CNN走到GNN，前路多艰。</p><p>end～</p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 卷积神经网络 </tag>
            
            <tag> 图卷积神经网络 </tag>
            
            <tag> 图神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-目标检测算法的演进</title>
      <link href="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/"/>
      <url>/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/</url>
      
        <content type="html"><![CDATA[<p>本文为我在公司内部做技术分享时（面向人群不全是算法工程师）的PPT，去掉了部分敏感信息。</p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8701.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8702.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8703.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8704.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8705.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8706.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8707.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8708.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8709.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8710.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8711.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8712.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8713.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8714.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8715.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8716.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8717.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8718.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8719.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8720.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8721.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8722.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8723.png"></p><p><img src="/2023/03/21/zhi-shi-zong-jie/6-mu-biao-jian-ce-suan-fa-de-yan-jin/%E5%B9%BB%E7%81%AF%E7%89%8726.png"></p><p>原论文地址</p><p>R-CNN: <a href="https://arxiv.org/abs/1311.2524">Rich feature hierarchies for accurate object detection and semantic segmentation</a></p><p>SPP-Net: <a href="https://arxiv.org/abs/1406.4729">Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition</a></p><p>Fast-RCN: <a href="https://arxiv.org/abs/1504.08083">Fast R-CNN</a></p><p>Faster-RCNN: <a href="https://arxiv.org/abs/1506.01497">Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks</a></p><p>SSD: <a href="https://arxiv.org/abs/1512.02325">SSD: Single Shot MultiBox Detector</a></p><p>提到目标检测，怎么能不说YOLO，后面再来。</p><p>end～</p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> CNN </tag>
            
            <tag> R-CNN </tag>
            
            <tag> SPP-Net </tag>
            
            <tag> Fast-RCNN </tag>
            
            <tag> Faster-RCNN </tag>
            
            <tag> SSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-十大经典排序算法python实现</title>
      <link href="/2023/03/21/zhi-shi-zong-jie/5-shi-da-jing-dian-pai-xu-suan-fa-python-shi-xian/"/>
      <url>/2023/03/21/zhi-shi-zong-jie/5-shi-da-jing-dian-pai-xu-suan-fa-python-shi-xian/</url>
      
        <content type="html"><![CDATA[<h3 id="1-性能比较"><a href="#1-性能比较" class="headerlink" title="1. 性能比较"></a>1. 性能比较</h3><table><thead><tr><th align="center">排序算法</th><th align="center">时间复杂度（平均）</th><th align="center">时间复杂度（最差）</th><th align="center">时间复杂度（最好）</th><th align="center">空间复杂度</th><th align="center">稳定性</th></tr></thead><tbody><tr><td align="center">快速排序</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O($n^{2}$)</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">不稳定</td></tr><tr><td align="center">冒泡排序</td><td align="center">O($n^{2}$)</td><td align="center">O($n^{2}$)</td><td align="center">O($n$)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">选择排序</td><td align="center">O($n^{2}$)</td><td align="center">O($n^{2}$)</td><td align="center">O($n^{2}$)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">归并排序</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O($n$)</td><td align="center">稳定</td></tr><tr><td align="center">插入排序</td><td align="center">O($n^{2}$)</td><td align="center">O($n^{2}$)</td><td align="center">O($n$)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">希尔排序</td><td align="center">O($n^{1.3}$)</td><td align="center">O($n^{2}$)</td><td align="center">O($n$)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">堆排序</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">桶排序</td><td align="center">O($n + k$)</td><td align="center">O($n^{2}$)</td><td align="center">O($n$)</td><td align="center">O($n + k$)</td><td align="center">稳定</td></tr><tr><td align="center">计数排序</td><td align="center">O($n + k$)</td><td align="center">O($n + k$)</td><td align="center">O($n + k$)</td><td align="center">O($n + k$)</td><td align="center">稳定</td></tr><tr><td align="center">基数排序</td><td align="center">O($n * k$)</td><td align="center">O($n * k$)</td><td align="center">O($n * k$)</td><td align="center">O($n + k$)</td><td align="center">稳定</td></tr></tbody></table><h3 id="2-快速排序"><a href="#2-快速排序" class="headerlink" title="2. 快速排序"></a>2. 快速排序</h3><p>原理：对于任意一个需要排序的序列，首先选择序列中的人一个数为关键数据，然后将所有比它小的数都放左边，所有比它大的数都放右边，这就完成了一次快速排序，如此递归完成所有排序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    快速排序    """</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    <span class="token keyword">else</span><span class="token punctuation">:</span>        base <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        data<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>base<span class="token punctuation">)</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">&gt;=</span> base<span class="token punctuation">:</span>                right<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                left<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token keyword">return</span> quick_sort<span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span>base<span class="token punctuation">]</span> <span class="token operator">+</span> quick_sort<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-冒泡排序"><a href="#3-冒泡排序" class="headerlink" title="3. 冒泡排序"></a>3. 冒泡排序</h3><p>原理：遍历需要排序的序列元素，依次比较两个相邻的元素，如果他们的顺序错误就进行交换。重复遍历直到没有相邻元素需要交换，即该序列已经排序完成。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    冒泡排序    """</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-选择排序"><a href="#4-选择排序" class="headerlink" title="4. 选择排序"></a>4. 选择排序</h3><p>原理：一共需要遍历n-1次，没遍历一次选择出最小的元素，完成排序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    选择排序    """</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_index <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_index <span class="token operator">=</span> j        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-归并排序"><a href="#5-归并排序" class="headerlink" title="5. 归并排序"></a>5. 归并排序</h3><p>原理：先使每个子序列有序，再使子序列段间有序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    归并排序    """</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        归并过程        """</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 保存归并后的结果</span>        i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                j <span class="token operator">+=</span> <span class="token number">1</span>        result <span class="token operator">=</span> result <span class="token operator">+</span> left<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> right<span class="token punctuation">[</span>j<span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> result        <span class="token comment"># 递归过程</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    mid <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    left <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>    right <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>data<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-插入排序"><a href="#6-插入排序" class="headerlink" title="6. 插入排序"></a>6. 插入排序</h3><p>原理：通过构建有序序列，对未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    插入排序    """</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                 data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-希尔排序"><a href="#7-希尔排序" class="headerlink" title="7. 希尔排序"></a>7. 希尔排序</h3><p>原理：整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，它与插入排序的不同之处在于，它会优先比较距离较远的元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    希尔排序    """</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    gap <span class="token operator">=</span> <span class="token number">1</span>      <span class="token keyword">while</span> gap <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">:</span>        gap <span class="token operator">=</span> gap <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">while</span> gap <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>gap<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> i            <span class="token keyword">while</span> j <span class="token operator">&gt;=</span> gap <span class="token keyword">and</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">:</span>                data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                j <span class="token operator">-=</span> gap        gap <span class="token operator">//=</span> <span class="token number">3</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-堆排序"><a href="#8-堆排序" class="headerlink" title="8. 堆排序"></a>8. 堆排序</h3><p>原理：在堆的数据结构中，堆中的最大值总是位于根节点，把序列放入堆数据中一直维持最大堆积性质。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    堆排序    """</span>    <span class="token keyword">def</span> <span class="token function">sift_down</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        最大堆调整        """</span>        root <span class="token operator">=</span> start        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> root <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">if</span> child <span class="token operator">&gt;</span> end<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> child <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> end <span class="token keyword">and</span> data<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                child <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> data<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">:</span>                data<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>root<span class="token punctuation">]</span>                root <span class="token operator">=</span> child            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>    <span class="token comment"># 创建最大堆</span>    <span class="token keyword">for</span> start <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sift_down<span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 堆排序</span>    <span class="token keyword">for</span> end <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        sift_down<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-桶排序"><a href="#9-桶排序" class="headerlink" title="9. 桶排序"></a>9. 桶排序</h3><p>原理：桶排序是计数排序的升级版，它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bucket_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> bucket_size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    桶排序    默认5个桶    """</span>    max_num<span class="token punctuation">,</span> min_num <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    bucket_count <span class="token operator">=</span> <span class="token punctuation">(</span>max_num <span class="token operator">-</span> min_num<span class="token punctuation">)</span> <span class="token operator">//</span> bucket_size <span class="token operator">+</span> <span class="token number">1</span>    buckets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bucket_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        buckets<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> data<span class="token punctuation">:</span>        buckets<span class="token punctuation">[</span><span class="token punctuation">(</span>num <span class="token operator">-</span> min_num<span class="token punctuation">)</span> <span class="token operator">//</span> bucket_size<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>    data<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> bucket <span class="token keyword">in</span> buckets<span class="token punctuation">:</span>        insert_sort<span class="token punctuation">(</span>bucket<span class="token punctuation">)</span>        data<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>bucket<span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-计数排序"><a href="#10-计数排序" class="headerlink" title="10. 计数排序"></a>10. 计数排序</h3><p>原理：先开辟一个覆盖序列范围的数组空间，将输入的数据值转化为键存储在额外开辟的数组空间中，再依次取出。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    计数排序    需要是整数序列    """</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    bucket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> data<span class="token punctuation">:</span>        bucket<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>bucket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j            bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-基数排序"><a href="#11-基数排序" class="headerlink" title="11. 基数排序"></a>11. 基数排序</h3><p>原理：将序列所有数字统一为相同数字长度，数字较短的数前面补零。从最低位开始，依次进行一次排序，然后从低位到高位依次完成排序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">radix_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    基数排序    """</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    radix <span class="token operator">=</span> <span class="token number">10</span>    div <span class="token operator">=</span> <span class="token number">1</span>    max_bit <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    bucket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>radix<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> max_bit<span class="token punctuation">:</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> data<span class="token punctuation">:</span>            bucket<span class="token punctuation">[</span>num <span class="token operator">//</span> div <span class="token operator">%</span> radix<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>        j <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> b <span class="token keyword">in</span> bucket<span class="token punctuation">:</span>            <span class="token keyword">while</span> b<span class="token punctuation">:</span>                data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                j <span class="token operator">+=</span> <span class="token number">1</span>        div <span class="token operator">*=</span> <span class="token number">10</span>        max_bit <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-测试结果"><a href="#12-测试结果" class="headerlink" title="12. 测试结果"></a>12. 测试结果</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"input data {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>quick_ret <span class="token operator">=</span> quick_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment"># 快速排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"quick_ret {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>quick_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>bubble_ret <span class="token operator">=</span> bubble_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment"># 冒泡排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bubble_ret {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>bubble_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>select_ret <span class="token operator">=</span> select_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment"># 选择排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"select_ret {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>select_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>merge_ret <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment"># 归并排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"merge_ret {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>merge_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>insert_ret <span class="token operator">=</span> insert_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment"># 插入排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"insert_ret {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>insert_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>shell_ret <span class="token operator">=</span> shell_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment"># 希尔排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"shell_ret {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>shell_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>heap_ret <span class="token operator">=</span> heap_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment"># 堆排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"heap_ret {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>heap_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>bucket_ret <span class="token operator">=</span> bucket_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment"># 桶排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bucket_ret {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>bucket_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>count_ret <span class="token operator">=</span> count_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment"># 计数排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"count_ret {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>radix_ret <span class="token operator">=</span> radix_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment"># 基数排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"radix_ret {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>radix_ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">input</span> data <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span>quick_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>bubble_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>select_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>merge_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>insert_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>shell_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>heap_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>bucket_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>count_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>radix_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-Hexo+Github搭建博客</title>
      <link href="/2023/03/21/zhi-shi-zong-jie/4-hexo-github-da-jian-bo-ke/"/>
      <url>/2023/03/21/zhi-shi-zong-jie/4-hexo-github-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>现在写文章、写博客的地方这么多，为什么要自己搭建一个，还是希望有一个自己的自留地。</p><p>本来想自己完全写一个博客网站，但是苦于自己对前端的了解着实不深，而且后续也没有深入研究前端知识的计划，外加对网站自维护成本的担忧，最后选择了Hexo+Github的框架搭建博客。</p><p>网上有很多使用Hexo+Github搭建博客的教程，其实已经比较丰富了，为了供后续参考，也在这里记录一下自己的搭建过程。</p><p>Hexo是一个基于Node.js的静态站点生成框架，基于Hexo，我们可以直接用Markdown（对于我来说，现在写东西都用Markdown，感觉再也回不去Office Word了）来写博客。写完后通过三、四条命令就可以更新到博客上，专注在内容上，避免重复造轮子。</p><p>常用命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean  <span class="token comment"># 清楚缓存文件</span>hexo g  <span class="token comment"># 生成静态文件 hexo generate</span>hexo s  <span class="token comment"># 启动本地服务预览 hexo server</span>hexo d  <span class="token comment"># 上传到github部署 hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更多命令见：<a href="https://hexo.io/zh-cn/docs/commands.html">Hexo指令</a></p><h3 id="2-主要步骤"><a href="#2-主要步骤" class="headerlink" title="2. 主要步骤"></a>2. 主要步骤</h3><ul><li>安装Node.js</li><li>安装Git</li><li>Github上创建博客项目</li><li>安装Hexo</li><li>github与本地绑定</li><li>绑定域名</li><li>创建文章</li><li>个性化设置（Theme matery）</li></ul><h3 id="3-安装Node-js"><a href="#3-安装Node-js" class="headerlink" title="3. 安装Node.js"></a>3. 安装Node.js</h3><p>mac上可以直接通过homebrew安装，可以通过<code>brew -v</code>看自己使用已经安装homebrew，如果没有安装可以在命令行执行以下命令安装。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ruby <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/master/install<span class="token variable">)</span></span>"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令安装Node.js</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">link</span> <span class="token function">node</span>brew uninstall <span class="token function">node</span>brew <span class="token function">install</span> <span class="token function">node</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以在 <a href="https://nodejs.org/en/#download">Node.js官网</a> 下载安装。</p><p>如果执行<code>npm -v</code>和<code>node -v</code>能看到版本号，则说明安装成功。</p><p>由于npm服务器在国外，如果没有梯子，在国内访问经常会超时，可以使用梯子，或者使用国内镜像，比如阿里、清华的镜像都挺好用，比如阿里镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org  <span class="token comment"># 或 npm install -g cnpm --registry=https://registry.npm.taobao.org</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-安装Git"><a href="#4-安装Git" class="headerlink" title="4. 安装Git"></a>4. 安装Git</h3><p>安装git主要是为了本地文件与github文件同步，可以通过brew安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以在<a href="https://git-scm.com/download/win">Git网站</a>下载安装。</p><h3 id="5-Github上创建博客项目"><a href="#5-Github上创建博客项目" class="headerlink" title="5. Github上创建博客项目"></a>5. Github上创建博客项目</h3><p>首先需要一个github账号，这对于很多程序员来说或许都有。打开打开<a href="https://github.com/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE">https://github.com/新建一个项目</a></p><p><img src="/2023/03/21/zhi-shi-zong-jie/4-hexo-github-da-jian-bo-ke/image-20201025172701362.png"></p><p><strong>注：名字一定要和github名字一样，要以<code>.github.io</code>为后缀</strong>。</p><p><img src="/2023/03/21/zhi-shi-zong-jie/4-hexo-github-da-jian-bo-ke/image-20201025173105081.png"></p><p>创建好以后点击<code>Settings -&gt; GitHub Pages -&gt; Choose a theme</code>，选择一个主题。</p><p><img src="/2023/03/21/zhi-shi-zong-jie/4-hexo-github-da-jian-bo-ke/image-20201025173608226.png"></p><p>点击上面那个链接，就会有如下这样一个页面。</p><p><img src="/2023/03/21/zhi-shi-zong-jie/4-hexo-github-da-jian-bo-ke/image-20201025173650071.png"></p><p>到这里，博客网站算是正式成功了。</p><h3 id="6-安装Hexo"><a href="#6-安装Hexo" class="headerlink" title="6. 安装Hexo"></a>6. 安装Hexo</h3><p>博客页面搭建成功后，现在在本地建一个写博客的文件夹，<code>cd</code>到该目录下安装 Hexo。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-cli <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后运运行 <code>hexo -v</code>如果打印版本号则说明安装成功了。</p><p>接下来初始化文件夹和安装必备的插件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/4-hexo-github-da-jian-bo-ke/image-20201025174129296.png"></p><p>然后按照最开始说的命令生成静态文件和本地预览</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token operator">&amp;&amp;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时打开<a href="http://localhost:4000/%E5%BA%94%E8%AF%A5%E5%B0%B1%E6%9C%89%E6%95%88%E6%9E%9C%E4%BA%86">http://localhost:4000/应该就有效果了</a></p><p><img src="/2023/03/21/zhi-shi-zong-jie/4-hexo-github-da-jian-bo-ke/image-20201025174451649.png"></p><h3 id="7-github与本地绑定"><a href="#7-github与本地绑定" class="headerlink" title="7. github与本地绑定"></a>7. github与本地绑定</h3><p>如果以前在github上同步过文件，忽略这一步。</p><p>在命令行输入github用户名和邮箱。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"booleqin"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"booleqin@gmail.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后生成密钥SSH key</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"booleqin@gmail.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在github上<code>右上角头像-&gt;Settings -&gt; SSH and GPG keys</code>新建一个SSH。</p><p>把刚才cat出阿里的内容复制到这里。</p><p><img src="/2023/03/21/zhi-shi-zong-jie/4-hexo-github-da-jian-bo-ke/image-20201025175335846.png"></p><p>本地命令行输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果看到下图，则说明成功了</p><p><img src="/2023/03/21/zhi-shi-zong-jie/4-hexo-github-da-jian-bo-ke/image-20201025175617954.png"></p><p>现在开始配置hexo对应到github项目地址，打开<code>_config.yml</code>（这个文件在配置博客的时候经常会用到）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token string">'git'</span>  repository: https://github.com/booleqin/booleqin.github.io  branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-绑定域名"><a href="#8-绑定域名" class="headerlink" title="8. 绑定域名"></a>8. 绑定域名</h3><p>申请好自己的域名，我是在百度智能云上申请的，需要实名以后才能用，官方说法是实名申请3-5个工作日可以通过，但是我提交后几个小时就通过了，很方便。</p><p>添加域名解析，添加如下两条信息，如下图</p><p><img src="/2023/03/21/zhi-shi-zong-jie/4-hexo-github-da-jian-bo-ke/baiduyumin.png"></p><p>然后在github项目的<code>Settings -&gt; Custom domain</code>里面填上自己的域名保存就可以了。</p><p>保存后在项目的根目录下会会生成一个CNAME文件（记住，这是github项目上已经有，但是本地还没有，可以把项目pull到本地），或者本地hexo根目录创建一个CNAME（注意没有任何后缀），如果本地不建这个文件，下次<code>hexo d</code>，访问网站会报404。</p><h3 id="9-创建文章"><a href="#9-创建文章" class="headerlink" title="9. 创建文章"></a>9. 创建文章</h3><p>创建文章一共有三个post、draft、page三种</p><table><thead><tr><th>参数</th><th>功能</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>新建文章</td><td>/source/_posts/</td></tr><tr><td>draft</td><td>新建草稿</td><td>/source/_drafts/</td></tr><tr><td>page</td><td>新建页面（标签页，分类页等）</td><td>/source/</td></tr></tbody></table><p>如果用post使用下面命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new post <span class="token operator">&lt;</span>article<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>source/_posts/</code>文件夹中多了一个<code>article.md</code>文件</p><p>draft可使用如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new draft <span class="token operator">&lt;</span>article<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Hexo 另外提供 <code>draft</code> 机制，它的原理是新文章将建立在 <code>source/_drafts</code> 目录下，因此 <code>hexo generate</code> 并不会将其编译到 <code>public</code> 目录下，所以 <code>hexo deploy</code> 也不会将其部署到 GitHub。</p><p>虽然 <code>hexo generate</code> 不会编译 <code>source/_drafts</code> 目录下的文章，但 Hexo 的 <code>Hexo server</code> 另外提供 <code>--draft</code> 参数，只要搭配 <code>hexo-browsersync</code> plugins，就可以达到一边编辑 <code>markdown</code> 文章，一边使用浏览器预览的目的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo S <span class="token parameter variable">--draft</span><span class="token comment"># 将草稿发布为正式文章（其实就是移动了文件和相应文件夹）</span>hexo P <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果有图片文件，可以修改一下根目录下<code>_config.yml</code>,这样就会创建一个article同名的文件夹，用于存放图片等。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">post_asset_folder: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是当我们写博客越来越多的时候，所有文章都在一个目录下，会非常不易管理，所以可以考虑按年归档（按月、天归档类似）。</p><p>打开根目录下<code>_config.yml</code>，可以修改如下配置。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">new_post_name: :year/:title.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后修改文章模版，再<code>scaffolds/post.md</code>增加 <code>permalink</code>一项</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---title: <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span>permalink: <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span>date: <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">date</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>tags:categories:---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此编写完成后，运行<code>hexo g</code>生成静态文件，<code>hexo s</code>本地预览，<code>hexo d</code>更新到github，主页就能看到文章了。</p><h3 id="10-个性化设置（Theme-matery）"><a href="#10-个性化设置（Theme-matery）" class="headerlink" title="10. 个性化设置（Theme matery）"></a>10. 个性化设置（Theme matery）</h3><p>我使用的是 <a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a> 主题，个人感觉简单大气，如果你想要更多主题，可以在 <a href="https://hexo.voxel.site/">Hexo 主题</a> 获取更多主题。</p><p>主题配置文档非常详细，有需要随时改。</p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-CV2图像处理</title>
      <link href="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/"/>
      <url>/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> division<span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 本文中主要使用cv2处理图片，但不利于在notebook中展示，所以使用plt输出前做简单处理</span><span class="token keyword">def</span> <span class="token function">img_convert</span><span class="token punctuation">(</span>cv2_img<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    cv2使用BGR，plt使用RGB    包含灰度，3通道，4通道    下面这个不好使    ret_img = cv2.cvtColor(ret_img, cv2.COLOR_BGR2RGB)    """</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cv2_img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cv2_img    <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cv2_img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> cv2_img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        b<span class="token punctuation">,</span> g<span class="token punctuation">,</span> r <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>cv2_img<span class="token punctuation">)</span>        <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cv2_img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> cv2_img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        b<span class="token punctuation">,</span> g<span class="token punctuation">,</span> r<span class="token punctuation">,</span> a <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>cv2_img<span class="token punctuation">)</span>        <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cv2_img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-阈值"><a href="#1-阈值" class="headerlink" title="1. 阈值"></a>1. 阈值</h3><h4 id="1-1-threshold-简单阈值"><a href="#1-1-threshold-简单阈值" class="headerlink" title="1.1 threshold 简单阈值"></a>1.1 threshold 简单阈值</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>顾名思义，通过阈值处理，大于为1，小于则为0，使用函数cv2.threshold()。参数解释如下：</p><p>ret, dst = cv2.threshold (src, thresh, maxval, type)</p><ul><li>src：源图片，必须是单通道</li><li>dst：输出图</li><li>thresh：阈值，取值范围0～255</li><li>maxval：填充色，取值范围0～255</li><li>type：阈值类型，具体见下表</li></ul><table><thead><tr><th>阈值</th><th>小于阈值的像素点</th><th>大于阈值的像素点</th></tr></thead><tbody><tr><td>0</td><td>置0</td><td>置填充色</td></tr><tr><td>1</td><td>置填充色</td><td>置0</td></tr><tr><td>2</td><td>保持原色</td><td>置灰色</td></tr><tr><td>3</td><td>置0</td><td>保持原色</td></tr><tr><td>4</td><td>保持原色</td><td>置0</td></tr></tbody></table><p>type还可以写为如下：</p><p>type：二值化操作的类型，包含以下5种类型： cv2.THRESH_BINARY； cv2.THRESH_BINARY_INV； cv2.THRESH_TRUNC； cv2.THRESH_TOZERO；cv2.THRESH_TOZERO_INV</p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">ori_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'../Fast_neural_style/img_d2cfac63.jpeg'</span><span class="token punctuation">)</span><span class="token comment"># 现转化为单通道图</span>img_gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_RGB2GRAY<span class="token punctuation">)</span>imgs <span class="token operator">=</span> <span class="token punctuation">[</span>ori_img<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>img_gray<span class="token punctuation">]</span>title <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ori_img'</span><span class="token punctuation">,</span> <span class="token string">'img_gray'</span><span class="token punctuation">]</span><span class="token comment"># 简单阈值处理</span><span class="token keyword">for</span> typ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    _<span class="token punctuation">,</span> thresh <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span>typ<span class="token punctuation">)</span>    title<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'type_'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>typ<span class="token punctuation">)</span><span class="token punctuation">)</span>    imgs <span class="token operator">=</span> imgs <span class="token operator">+</span> <span class="token punctuation">[</span>thresh<span class="token punctuation">]</span><span class="token comment"># 可视化</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'gray'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/output_7_0.png" alt="threshold"></p><h4 id="1-2-adaptiveThreshold-自适应阈值"><a href="#1-2-adaptiveThreshold-自适应阈值" class="headerlink" title="1.2 adaptiveThreshold 自适应阈值"></a>1.2 adaptiveThreshold 自适应阈值</h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><p>简单阈值对图片对处理过于简单粗暴，特别是对对色彩复杂图片，处理后很多细节都无法复现。自适应阈值则根据图像上的每个小区域计算与其对应的阈值，不同区域采用不同阈值。可使用cv2.adaptiveThreshold()实现。参数解释如下：</p><p>dst = cv2.adaptiveThreshold(src, maxval, thresh_type, type, Block Size, C)</p><ul><li>src：源图片，只能输入单通道图像</li><li>dst： 输出图</li><li>maxval： 当像素值超过了阈值（或者小于阈值，根据type来决定），所赋予的值</li><li>thresh_type： 阈值的计算方法，包含以下2种类型：cv2.ADAPTIVE_THRESH_MEAN_C，阈值即取相邻领域的平均值； cv2.ADAPTIVE_THRESH_GAUSSIAN_C，阈值同样取自相邻领域，只是不再是平均值，而是加权平均，权重为一个高斯窗口</li><li>type：二值化操作的类型，与固定阈值函数相同，包含以下2种类型： cv2.THRESH_BINARY； cv2.THRESH_BINARY_INV“</li><li>Block Size： 图片中分块的大小</li><li>C ：阈值计算方法中的常数项</li></ul><h5 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">ret<span class="token punctuation">,</span> th1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">)</span>th2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>adaptiveThreshold<span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>ADAPTIVE_THRESH_MEAN_C<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY_INV<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>th3 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>adaptiveThreshold<span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>ADAPTIVE_THRESH_GAUSSIAN_C<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY_INV<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>th1<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'th_binary'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">223</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>th2<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'mean'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>th3<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'gauss'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/output_10_0.png" alt="adaptiveThreshold"></p><p>改变Block Size和c能得到不同的图片处理结果，以GAUSSIAN为例。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">imgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>title <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 简单阈值处理</span><span class="token keyword">for</span> block <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        th <span class="token operator">=</span> cv2<span class="token punctuation">.</span>adaptiveThreshold<span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>ADAPTIVE_THRESH_GAUSSIAN_C<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">,</span> block<span class="token punctuation">,</span> c<span class="token punctuation">)</span>        title<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'GAUSSIAN: block = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">', c = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>        imgs <span class="token operator">=</span> imgs <span class="token operator">+</span> <span class="token punctuation">[</span>th<span class="token punctuation">]</span><span class="token comment"># 可视化</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'gray'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/output_12_0.png" alt="png"></p><h3 id="2-Otsu’s-Binarization-基于直方图"><a href="#2-Otsu’s-Binarization-基于直方图" class="headerlink" title="2. Otsu’s Binarization 基于直方图"></a>2. Otsu’s Binarization 基于直方图</h3><h4 id="2-1-Otsu过程"><a href="#2-1-Otsu过程" class="headerlink" title="2.1 Otsu过程"></a>2.1 Otsu过程</h4><ol><li>计算图像直方图</li></ol><ul><li>设定一阈值，把直方图强度大于阈值的像素分成一组，把小于阈值的像素分成另外一组</li><li>分别计算两组内的偏移数，并把偏移数相加</li><li>把0~255依照顺序多为阈值，重复1-3的步骤，直到得到最小偏移数，其所对应的值即为结果阈值</li></ul><h4 id="2-2-Otsu数学原理"><a href="#2-2-Otsu数学原理" class="headerlink" title="2.2 Otsu数学原理"></a>2.2 Otsu数学原理</h4><p>Otsu的算法类似于聚类，针对的是双峰图，所以目的就是要找到一个阈值t，将这两峰分开，同时使得峰内的方差最小，这样便可以将两峰最大化的分开。判别过程中最大类间方差，主要函数如下：</p><p>$$w_{0} + w_{1} = 1$$<br>$$\mu = w_{0}\mu_{0} + w_{1}\mu_{1}$$</p><p>$$<br>\begin{align}<br>var &amp; = w_{0} * (\mu_{0} - \mu)^{2} + w_{1} * (\mu_{1} - \mu)^{2} \<br> &amp; = w_{0}w_{1}(\mu_{0} - \mu_{1})^{2}<br>\end{align}<br>$$</p><p>源论文：<a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=4310076">https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=4310076</a> </p><h4 id="2-3-实现"><a href="#2-3-实现" class="headerlink" title="2.3 实现"></a>2.3 实现</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">ret1<span class="token punctuation">,</span> th1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">)</span>ret2<span class="token punctuation">,</span> th2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY <span class="token operator">+</span> cv2<span class="token punctuation">.</span>THRESH_OTSU<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">131</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">132</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>th1<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'threshold'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">133</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>th2<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Otsu'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/output_15_0.png" alt="Otsu’s Binarization"></p><h3 id="3-噪声"><a href="#3-噪声" class="headerlink" title="3. 噪声"></a>3. 噪声</h3><h4 id="3-1-椒盐噪声"><a href="#3-1-椒盐噪声" class="headerlink" title="3.1 椒盐噪声"></a>3.1 椒盐噪声</h4><h5 id="3-1-1-简介"><a href="#3-1-1-简介" class="headerlink" title="3.1.1 简介"></a>3.1.1 简介</h5><p>椒盐噪声也称为脉冲噪声，是图像中经常见到的一种噪声，它是一种随机出现的白点或者黑点，可能是亮的区域有黑色像素或是在暗的区域有白色像素（或是两者皆有）。</p><p>椒盐噪声包含两种噪声，一种是盐噪声（salt noise），另一种是胡椒噪声（pepper noise）。 盐=白色，椒=黑色</p><p>常用的去除这种噪声的有效手段是使用中值滤波器。</p><h5 id="3-1-2-实现"><a href="#3-1-2-实现" class="headerlink" title="3.1.2 实现"></a>3.1.2 实现</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sp_noise</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> prob<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    添加椒盐噪声     prob:噪声比例     '''</span>    output <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>    thres <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> prob     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            rdn <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> rdn <span class="token operator">&lt;</span> prob<span class="token punctuation">:</span>                output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">elif</span> rdn <span class="token operator">&gt;</span> thres<span class="token punctuation">:</span>                output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> image<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">out_img <span class="token operator">=</span> sp_noise<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>out_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'sp_noise'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/output_19_0.png" alt="椒盐噪声"></p><h4 id="3-2-高斯噪声"><a href="#3-2-高斯噪声" class="headerlink" title="3.2 高斯噪声"></a>3.2 高斯噪声</h4><h5 id="3-2-1-简介"><a href="#3-2-1-简介" class="headerlink" title="3.2.1 简介"></a>3.2.1 简介</h5><p>椒盐噪声是直接随机的增加白点和黑点，高斯噪声则不然，它是指概率密度函数服从高斯分布（即正态分布）的一类噪声。和椒盐噪声最大的区别就为：</p><ul><li>椒盐噪声使用random.random，高斯噪声使用random.normal</li><li>椒盐噪声直接置0、255，高斯噪声做加操作</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gasuss_noise</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> var<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''         添加高斯噪声        mean : 均值         var : 方差    '''</span>    image <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>image<span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span>    noise <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>mean<span class="token punctuation">,</span> var <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    out <span class="token operator">=</span> image <span class="token operator">+</span> noise    <span class="token keyword">if</span> out<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        low_clip <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1.</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        low_clip <span class="token operator">=</span> <span class="token number">0.</span>    out <span class="token operator">=</span> np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>out<span class="token punctuation">,</span> low_clip<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>    out <span class="token operator">=</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">(</span>out<span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span>    <span class="token comment">#cv.imshow("gasuss", out)</span>    <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">out_img <span class="token operator">=</span> gasuss_noise<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>out_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'gasuss_noise'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/output_22_0.png" alt="高斯噪声"></p><h3 id="4-滤波-x2F-平滑"><a href="#4-滤波-x2F-平滑" class="headerlink" title="4. 滤波/平滑"></a>4. 滤波/平滑</h3><h4 id="4-1-2D卷积"><a href="#4-1-2D卷积" class="headerlink" title="4.1 2D卷积"></a>4.1 2D卷积</h4><h5 id="4-1-1-简介"><a href="#4-1-1-简介" class="headerlink" title="4.1.1 简介"></a>4.1.1 简介</h5><p>2D卷积，即使用一个指定打下的卷积核对源图进行自定义处理，cv2.filter2D()函数供我们进行2D卷积。</p><p>dst=cv.filter2D(src, ddepth, kernel, anchor, delta, borderType)</p><ul><li>src：原图像</li><li>dst：目标图像，与原图像尺寸和通过数相同</li><li>ddepth：目标图像的所需深度</li><li>kernel：卷积核（或相当于相关核），单通道浮点矩阵;如果要将不同的内核应用于不同的通道，请使用拆分将图像拆分为单独的颜色平面，然后单独处理它们。</li><li>anchor：内核的锚点，指示内核中过滤点的相对位置;锚应位于内核中;默认值（-1，-1）表示锚位于内核中心。</li><li>detal：在将它们存储在dst中之前，将可选值添加到已过滤的像素中。类似于偏置。</li><li>borderType：像素外推法，参见BorderTypes</li></ul><p>参考：<a href="https://www.kancloud.cn/aollo/aolloopencv/269599">https://www.kancloud.cn/aollo/aolloopencv/269599</a></p><h5 id="4-1-2-实现"><a href="#4-1-2-实现" class="headerlink" title="4.1.2 实现"></a>4.1.2 实现</h5><h5 id="4-1-3-卷积核定义"><a href="#4-1-3-卷积核定义" class="headerlink" title="4.1.3 卷积核定义"></a>4.1.3 卷积核定义</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 分身（identity）就是不考虑边界时的原图（不考虑边界时</span>kernel0 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token comment"># 单位核</span>kernel1 <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">9</span><span class="token comment"># 模糊（blur）内核消除了相邻像素值之间的差异</span>kernel2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">0.0625</span><span class="token punctuation">,</span> <span class="token number">0.125</span><span class="token punctuation">,</span> <span class="token number">0.0625</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0.125</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.125</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0.0625</span><span class="token punctuation">,</span> <span class="token number">0.125</span><span class="token punctuation">,</span> <span class="token number">0.0625</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token comment"># 索贝尔（sobel）内核用于仅显示特定方向上相邻像素值的差异，</span><span class="token comment"># 分为left sobel、right sobel（检测梯度的水平变化）、top sobel、buttom sobel（检测梯度的垂直变化）</span>kernel3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token comment"># 浮雕（emboss）通过强调像素的差在给定方向的Givens深度的错觉。在这种情况下，沿着从左上到右下的直线的方向。</span>kernel4 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token comment"># 大纲（outline）是一个轮廓内核（也称为“边缘”的内核）用于突出显示的像素值大的差异。</span><span class="token comment"># 具有接近相同强度的相邻像素旁边的像素在新图像中将显示为黑色，而与强烈不同的相邻像素相邻的像素将显示为白色。</span>kernel5 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token comment"># 锐化（sharpen）内核强调在相邻的像素值的差异。这使图像看起来更生动。</span>kernel6 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token comment"># 拉普拉斯算子（laplacian operator）可以用于边缘检测，对于检测图像中的模糊也非常有用。</span>kernel7 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">331</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">332</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'identity'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'ones'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">334</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'blur'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">335</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'sobel'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">336</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'emboss'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">337</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'outline'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">338</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'sharpen'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">339</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'laplacian'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/output_26_0.png" alt="2D卷积"></p><h4 id="4-2-平均滤波"><a href="#4-2-平均滤波" class="headerlink" title="4.2 平均滤波"></a>4.2 平均滤波</h4><h5 id="4-2-1-简介"><a href="#4-2-1-简介" class="headerlink" title="4.2.1 简介"></a>4.2.1 简介</h5><p>平均滤波使用归一化卷积核完成，即卷积核的所有元素和为1。主要思想为将卷积核覆盖的所有像素求平均值，并将这个值作为结果赋给中心像素。也可以使用filter2D完成，不过cv2提供了直接的函数。可以使用cv2.blur()或cv2.boxFilter() 实现。如果不想使用归一化卷积核，那么应该用后者，并且设置参数normalize = False</p><h5 id="4-2-2-实现"><a href="#4-2-2-实现" class="headerlink" title="4.2.2 实现"></a>4.2.2 实现</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>blur<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'dst'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/output_28_0.png" alt="平均滤波"></p><h4 id="4-3-高斯滤波"><a href="#4-3-高斯滤波" class="headerlink" title="4.3 高斯滤波"></a>4.3 高斯滤波</h4><h5 id="4-3-1-简介"><a href="#4-3-1-简介" class="headerlink" title="4.3.1 简介"></a>4.3.1 简介</h5><p>其原理与平均滤波相同，不同的是此处变成了加权平均，而这个权服从二维高斯分布。方框中心的值最大，其余方框根据距离中心元素的距离递减，构成一个高斯小山包，原来的求平均数变成求加权平均数，权就是方框里的值。实现的函数是cv2.GaussianBlur()。需要指定高斯核的宽和高（必须是奇数），以及高斯函数沿X,Y方向的标准差。</p><h5 id="4-3-2-实现"><a href="#4-3-2-实现" class="headerlink" title="4.3.2 实现"></a>4.3.2 实现</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'gauss'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/output_30_0.png" alt="高斯滤波"></p><h4 id="4-4-中值滤波"><a href="#4-4-中值滤波" class="headerlink" title="4.4 中值滤波"></a>4.4 中值滤波</h4><h5 id="4-4-1-简介"><a href="#4-4-1-简介" class="headerlink" title="4.4.1 简介"></a>4.4.1 简介</h5><p>用与卷积框对应像素的中值来替代中心像素的值，这个滤波器经常用来去除椒盐噪声。前面的滤波器都是用计算得到的一个新值来取代中心像素的值，而中值滤波是用中心像素周围或者本身的值来取代他，他能有效去除噪声。卷积核的大小为是一个奇数。</p><h5 id="4-4-2-实现"><a href="#4-4-2-实现" class="headerlink" title="4.4.2 实现"></a>4.4.2 实现</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>medianBlur<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'median'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/output_32_0.png" alt="中值滤波"></p><h4 id="4-5-双边滤波"><a href="#4-5-双边滤波" class="headerlink" title="4.5 双边滤波"></a>4.5 双边滤波</h4><h5 id="4-5-1-简介"><a href="#4-5-1-简介" class="headerlink" title="4.5.1 简介"></a>4.5.1 简介</h5><p>高斯滤波器只考虑像素之间的空间关系，而不会考虑像素值之间的关系（像素的相似度），所以这种方法不会考虑一个像素是否位于边界，因此边界也会被模糊掉。<br>双边滤波在同时使用空间高斯权重和灰度值相似性高斯权重。空间高斯函数确保只有邻近区的像素对中心点有影响，灰度值相似性高斯函数确保只有与中心像素灰度值相近的才会被用来做模糊运算，边界处的灰度值变化比较大，所以能保证边界不会被模糊。函数cv2.bilateralFilter()能在保持边界清晰的情况下有效的去除噪音，但比较慢。</p><h5 id="4-5-2-实现"><a href="#4-5-2-实现" class="headerlink" title="4.5.2 实现"></a>4.5.2 实现</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>bilateralFilter<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'bilateral'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/output_34_0.png" alt="双边滤波"></p><h4 id="4-6-算术均值滤波"><a href="#4-6-算术均值滤波" class="headerlink" title="4.6 算术均值滤波"></a>4.6 算术均值滤波</h4><h5 id="4-6-1-介绍"><a href="#4-6-1-介绍" class="headerlink" title="4.6.1 介绍"></a>4.6.1 介绍</h5><p>顾名思义，算术均值滤波器即求某一范围内图像的均值，代替范围中心点的值。算术平均数计算如下：</p><p>$$A = \frac{x_{1} + x_{2} + \cdots + x_{n}}{n}$$</p><h5 id="4-6-2-实现"><a href="#4-6-2-实现" class="headerlink" title="4.6.2 实现"></a>4.6.2 实现</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">arithmetic_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_image <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>BORDER_DEFAULT<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            new_image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    new_image <span class="token operator">=</span> <span class="token punctuation">(</span>new_image <span class="token operator">-</span> np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">/</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> new_image<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rgb_arithmetic_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    r <span class="token operator">=</span> arithmetic_mean<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    g <span class="token operator">=</span> arithmetic_mean<span class="token punctuation">(</span>g<span class="token punctuation">)</span>    b <span class="token operator">=</span> arithmetic_mean<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span>out_img <span class="token operator">=</span> rgb_arithmetic_mean<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>out_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'arithmetic_mean'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/output_36_0.png" alt="算术均值滤波"></p><h4 id="4-7-几何均值滤波"><a href="#4-7-几何均值滤波" class="headerlink" title="4.7 几何均值滤波"></a>4.7 几何均值滤波</h4><h5 id="4-7-1-介绍"><a href="#4-7-1-介绍" class="headerlink" title="4.7.1 介绍"></a>4.7.1 介绍</h5><p>和算术均值滤波不同的是，此处取某一选定区域内的几何均值，几何均值计算如下：</p><p>$$A = \sqrt[n]{x_{1} * x_{2} * \cdots * x_{n}}$$</p><h5 id="4-7-2-实现"><a href="#4-7-2-实现" class="headerlink" title="4.7.2 实现"></a>4.7.2 实现</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">geometric_mean_operator</span><span class="token punctuation">(</span>roi<span class="token punctuation">)</span><span class="token punctuation">:</span>    roi <span class="token operator">=</span> roi<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>    p <span class="token operator">=</span> np<span class="token punctuation">.</span>prod<span class="token punctuation">(</span>roi<span class="token punctuation">)</span>    <span class="token keyword">return</span> p <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span>roi<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> roi<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">geometric_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_image <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>BORDER_DEFAULT<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            new_image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> geometric_mean_operator<span class="token punctuation">(</span>image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    new_image <span class="token operator">=</span> <span class="token punctuation">(</span>new_image <span class="token operator">-</span> np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">/</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> new_image<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rgb_geometric_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    r <span class="token operator">=</span> geometric_mean<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    g <span class="token operator">=</span> geometric_mean<span class="token punctuation">(</span>g<span class="token punctuation">)</span>    b <span class="token operator">=</span> geometric_mean<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span>out_img <span class="token operator">=</span> rgb_geometric_mean<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>out_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'geometric_mean'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/output_38_0.png" alt="几何均值滤波"></p><h4 id="4-8-谐波均值"><a href="#4-8-谐波均值" class="headerlink" title="4.8 谐波均值"></a>4.8 谐波均值</h4><h5 id="4-8-1-介绍"><a href="#4-8-1-介绍" class="headerlink" title="4.8.1 介绍"></a>4.8.1 介绍</h5><p>即调和均值，计算如下：</p><p>$$H = \frac{n}{\frac{1}{x_{1}} + \frac{1}{x_{2}} + \cdots + \frac{1}{x_{n}}}$$</p><p>注意：$x$不能为0</p><h5 id="4-8-2-实现"><a href="#4-8-2-实现" class="headerlink" title="4.8.2 实现"></a>4.8.2 实现</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scipy<span class="token keyword">import</span> scipy<span class="token punctuation">.</span>stats<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">harmonic_mean_operator</span><span class="token punctuation">(</span>roi<span class="token punctuation">)</span><span class="token punctuation">:</span>    roi <span class="token operator">=</span> roi<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token number">0</span> <span class="token keyword">in</span> roi<span class="token punctuation">:</span>        roi <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        roi <span class="token operator">=</span> scipy<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>hmean<span class="token punctuation">(</span>roi<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> roi<span class="token keyword">def</span> <span class="token function">harmonic_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_image <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>BORDER_DEFAULT<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            new_image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> harmonic_mean_operator<span class="token punctuation">(</span>image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    new_image <span class="token operator">=</span> <span class="token punctuation">(</span>new_image <span class="token operator">-</span> np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">/</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> new_image<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rgb_harmonic_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    r <span class="token operator">=</span> harmonic_mean<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    g <span class="token operator">=</span> harmonic_mean<span class="token punctuation">(</span>g<span class="token punctuation">)</span>    b <span class="token operator">=</span> harmonic_mean<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span>out_img <span class="token operator">=</span> rgb_harmonic_mean<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>out_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'harmonic_mean'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/output_41_0.png" alt="谐波均值"></p><h4 id="4-9-逆谐波均值"><a href="#4-9-逆谐波均值" class="headerlink" title="4.9 逆谐波均值"></a>4.9 逆谐波均值</h4><h5 id="4-9-1-介绍"><a href="#4-9-1-介绍" class="headerlink" title="4.9.1 介绍"></a>4.9.1 介绍</h5><p>计算公式为：</p><p>$$f(x, y) = \frac{\sum_{(x, t) \in S_{xy}}g(s, t)^{Q + 1}}{\sum_{(x, t) \in S_{xy}}g(s, t)^{Q}}$$</p><ul><li>当Q是正值时滤波对去除“胡椒”噪声有效</li><li>当Q是负值时滤波对去除“盐”噪声有效</li></ul><h5 id="4-9-2-实现"><a href="#4-9-2-实现" class="headerlink" title="4.9.2 实现"></a>4.9.2 实现</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">iharmonic_mean_operator</span><span class="token punctuation">(</span>roi<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>    roi <span class="token operator">=</span> roi<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>roi<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token punctuation">(</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>roi<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">iharmonic_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_image <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>BORDER_DEFAULT<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            new_image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> iharmonic_mean_operator<span class="token punctuation">(</span>image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span>    new_image <span class="token operator">=</span> <span class="token punctuation">(</span>new_image <span class="token operator">-</span> np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">/</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> new_image<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rgb_iharmonic_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    r <span class="token operator">=</span> iharmonic_mean<span class="token punctuation">(</span>r<span class="token punctuation">,</span> q<span class="token punctuation">)</span>    g <span class="token operator">=</span> iharmonic_mean<span class="token punctuation">(</span>g<span class="token punctuation">,</span> q<span class="token punctuation">)</span>    b <span class="token operator">=</span> iharmonic_mean<span class="token punctuation">(</span>b<span class="token punctuation">,</span> q<span class="token punctuation">)</span>    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span>out_img <span class="token operator">=</span> rgb_iharmonic_mean<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>out_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'iharmonic_mean'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/21/zhi-shi-zong-jie/3-cv2-tu-xiang-chu-li/output_43_0.png" alt="逆谐波均值"></p><h3 id="5-简单总结"><a href="#5-简单总结" class="headerlink" title="5. 简单总结"></a>5. 简单总结</h3><p>阈值方法可以对图片像素进行分类处理，噪声可以对原图片进行干扰，滤波和平滑可以对经过加噪声干扰过的图片进行部分修复复原。</p><p>end~</p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCv </tag>
            
            <tag> cv2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-python面试题50道</title>
      <link href="/2023/03/17/zhi-shi-zong-jie/2-python-mian-shi-ti-50-dao/"/>
      <url>/2023/03/17/zhi-shi-zong-jie/2-python-mian-shi-ti-50-dao/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Python-2-和-Python-3-的差异（这里写15个）"><a href="#1-Python-2-和-Python-3-的差异（这里写15个）" class="headerlink" title="1. Python 2 和 Python 3 的差异（这里写15个）"></a>1. Python 2 和 Python 3 的差异（这里写15个）</h3><ol><li>__future__模块：如果在想在python2中使用python3的一些关键字或特性，可以使用python2中内置的__future__模块导入，如想在python2中使用python3的输出模块，可以使用from __future__ import print_function</li></ol><ul><li>print：python2中print是一个特殊语句，在python3中该语句没有了，取而代之的是print()函数</li><li>异常捕获：python2中捕获异常的语法是except exc, var python3中改为了except exc as var</li><li>除法运算：python2整数相除的结果是一个整数，python3是一个浮点数</li><li>编码：python2中使用ascii编码，python中使用utf-8编码</li><li>输入函数：python2中是raw_input()函数，python3中是input()函数</li><li>range：python2中range()返回列表，python3中返回迭代器</li><li>xrange：Python3中，range()是像xrange()那样实现，不存在一个专门的xrange()函数</li><li>不等号运算：Python2中不等于有两种写法 != 和 &lt;&gt;，Python3中去掉了&lt;&gt;, 只有!=一种写法</li><li>repr反引号：Python2中反引号相当于repr函数的作用，Python3中去掉了反引号这种写法，只允许使用repr函数</li><li>模块命名变化：如ConfigParser变成了configparser，SocketServer变成了socketserver</li><li>模块合并：python2中的StringIO和cStringIO合并为python3中的io，python2中的pickle和cPickle合并为python3中的pickle，python2中的urllib、urllib2和urlparse合并为python3中的urllib</li><li>字典：python2中的dict类中的keys、values和items均返回list对象，iterkeys、itervalues和iteritems返回生成器对象，python3中只返回一个生成器的对象，方法名为keys、values和items。</li><li>申明原类：python2中声明元类：<strong>metaclass</strong> = MetaClass，python3中声明元类：class newclass(metaclass=MetaClass):pass</li><li>字符串类型</li></ul><table><thead><tr><th align="center">版本</th><th align="center">python2</th><th align="center">python3</th></tr></thead><tbody><tr><td align="center">字节字符串</td><td align="center">str</td><td align="center">bytes</td></tr><tr><td align="center">文本字符串</td><td align="center">Unicode</td><td align="center">str</td></tr></tbody></table><h3 id="2-read、readline、readlines读取文件的区别"><a href="#2-read、readline、readlines读取文件的区别" class="headerlink" title="2. read、readline、readlines读取文件的区别"></a>2. read、readline、readlines读取文件的区别</h3><ul><li>read 读取整个文件</li><li>readline 读取下一行,使用生成器方法</li><li>readlines 读取整个文件到一个迭代器以供我们遍历</li></ul><h3 id="3-r、r-、rb、rb-等文件打开模式的区别"><a href="#3-r、r-、rb、rb-等文件打开模式的区别" class="headerlink" title="3. r、r+、rb、rb+等文件打开模式的区别"></a>3. r、r+、rb、rb+等文件打开模式的区别</h3><p>r和w的用一张图表示，后面加b的是二进制文件，其他相同。</p><p><img src="/2023/03/17/zhi-shi-zong-jie/2-python-mian-shi-ti-50-dao/openfile.png"></p><h3 id="4-列出python中主要可变数据类型和不可变数据类型并解释原理"><a href="#4-列出python中主要可变数据类型和不可变数据类型并解释原理" class="headerlink" title="4. 列出python中主要可变数据类型和不可变数据类型并解释原理"></a>4. 列出python中主要可变数据类型和不可变数据类型并解释原理</h3><p>不可变数据类型：int，float，string，tuple等</p><p>不允许变量的值发生变化，如果改变了变量的值，相当于是新建了一个对象（一个地址），相同值的对象，在内存中只有一个。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4427273360 14427273392 2</code></pre><p>可变数据类型：list，dict，set，</p><p>允许变量的值发生变化，如对list执行append操作，只是改变了list的值，而不会新建一个对象，变量引用的对象的地址也不会变化，相同的值的不同对象，在内存中则会存在不同的对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4489262656 [1, 2]4489262656 [1, 2, 3]4495298720 [1, 2]</code></pre><h3 id="5-python传参数是传值还是传址"><a href="#5-python传参数是传值还是传址" class="headerlink" title="5. python传参数是传值还是传址"></a>5. python传参数是传值还是传址</h3><p>Python的参数传递有：位置参数、默认参数、可变参数、关键字参数。</p><p>函数的传值到底是值传递还是引用传递、要分情况：</p><p>不可变参数用值传递：像整数和字符串这样的不可变对象，是通过拷贝进行传递的，因为你无论如何都不可能在原处改变不可变对象。</p><p>可变参数是引用传递：比如像列表，字典这样的对象是通过引用传递、和C语言里面的用指针传递数组很相似，可变对象能在函数内部改变。</p><h3 id="6-什么是lambda函数，有什么好处"><a href="#6-什么是lambda函数，有什么好处" class="headerlink" title="6. 什么是lambda函数，有什么好处"></a>6. 什么是lambda函数，有什么好处</h3><p>lambda函数是匿名函数，是一个可以接收任意多个参数(包括可选参数)并且返回单个表达式值的函数。这种函数得名于省略了用def声明函数的标准步骤。</p><ol><li>lambda函数比较轻便，即用即仍，很适合需要完成一项功能，但是此功能只在此一处使用</li></ol><ul><li><p>匿名函数，一般用来给filter，map这样的函数式编程服务</p></li><li><p>作为回调函数，传递给某些应用，比如消息处理</p></li></ul><h3 id="7-如何在函数内部修改全局变量并解释原理"><a href="#7-如何在函数内部修改全局变量并解释原理" class="headerlink" title="7. 如何在函数内部修改全局变量并解释原理"></a>7. 如何在函数内部修改全局变量并解释原理</h3><p>把id打出来一目了然</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>func1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4427273360 44272733604427273392 44272733924427273360 44272733601</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a     a <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>func2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4427273360 44272733604427273392 44272733924427273392 44272733602</code></pre><h3 id="8-python中断言"><a href="#8-python中断言" class="headerlink" title="8. python中断言"></a>8. python中断言</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"断言成功，继续，a等于%d"</span> <span class="token operator">%</span> a<span class="token punctuation">)</span>    a <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>断言成功，继续，a等于1断言成功，继续，a等于2断言成功，继续，a等于3断言成功，继续，a等于4---------------------------------------------------------------------------AssertionError                            Traceback (most recent call last)&lt;ipython-input-13-7bc103f31806&gt; in &lt;module&gt;      1 a = 1      2 while True:----&gt; 3     assert(a &lt; 5)      4     print("断言成功，继续，a等于%d" % a)      5     a += 1AssertionError: </code></pre><h3 id="9-自定义异常"><a href="#9-自定义异常" class="headerlink" title="9. 自定义异常"></a>9. 自定义异常</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"数字大于2了，最新数字为%d"</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>func<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0123数字大于2了，最新数字为3</code></pre><h3 id="10-主要的异常"><a href="#10-主要的异常" class="headerlink" title="10. 主要的异常"></a>10. 主要的异常</h3><ul><li>IOError：输入输出异常</li><li>AttributeError：试图访问一个对象没有的属性</li><li>ImportError：无法引入模块或包，基本是路径问题</li><li>IndentationError：语法错误，代码没有正确的对齐</li><li>IndexError：下标索引超出序列边界</li><li>KeyError：试图访问你字典里不存在的键</li><li>SyntaxError：Python代码逻辑语法出错，不能执行</li><li>NameError：使用一个还未赋予对象的变量</li></ul><h3 id="11-异常模块中try-except-else-finally的相关意义"><a href="#11-异常模块中try-except-else-finally的相关意义" class="headerlink" title="11. 异常模块中try except else finally的相关意义"></a>11. 异常模块中try except else finally的相关意义</h3><ul><li>try..except..else没有捕获到异常，执行else语句</li><li>try..except..finally不管是否捕获到异常，都执行finally语句</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">10</span>    printerr<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">except</span> NameError <span class="token keyword">as</span> errmsg<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"产生错误，错误维%s"</span> <span class="token operator">%</span> errmsg<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有错误，继续执行"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">10</span>    printerr<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">except</span> NameError <span class="token keyword">as</span> errmsg<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"产生错误，错误维%s"</span> <span class="token operator">%</span> errmsg<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不管是否错误都执行"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>产生错误，错误维name 'printerr' is not defined--------------------产生错误，错误维name 'printerr' is not defined不管是否错误都执行</code></pre><h3 id="12-Python中是如何管理内存的"><a href="#12-Python中是如何管理内存的" class="headerlink" title="12. Python中是如何管理内存的"></a>12. Python中是如何管理内存的</h3><p>python中的内存管理由Python私有堆空间管理。所有Python对象和数据结构都位于私有堆中。程序员无权访问此私有堆。python解释器负责处理这个问题。</p><p>Python对象的堆空间分配由Python的内存管理器完成。核心API提供了一些程序员编写代码的工具。</p><p>Python还有一个内置的垃圾收集器，它可以回收所有未使用的内存，并使其可用于堆空间。</p><h3 id="13-内存泄露是什么，如何避免"><a href="#13-内存泄露是什么，如何避免" class="headerlink" title="13. 内存泄露是什么，如何避免"></a>13. 内存泄露是什么，如何避免</h3><p>内存泄漏指由于疏忽或错误造成程序未能释放已经不再使用的内存。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。</p><p>有__del__()函数的对象间的循环引用是导致内存泄露的主凶。不使用一个对象时使用: del object 来删除一个对象的引用计数就可以有效防止内存泄露问题。</p><p>通过Python扩展模块gc 来查看不能回收的对象的详细信息。</p><p>可以通过 sys.getrefcount(obj) 来获取对象的引用计数，并根据返回值是否为0来判断是否内存泄露</p><h3 id="14-python中的闭包是什么"><a href="#14-python中的闭包是什么" class="headerlink" title="14. python中的闭包是什么"></a>14. python中的闭包是什么</h3><p>在函数内部再定义一个函数，并且这个函数用到了外边函数的变量，那么将这个函数以及用到的一些变量称之为闭包。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outerfunc</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">innerfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    innerfunc<span class="token punctuation">(</span><span class="token punctuation">)</span>outerfunc<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>5</code></pre><h3 id="15-字典排序"><a href="#15-字典排序" class="headerlink" title="15. 字典排序"></a>15. 字典排序</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token comment"># 更根据键排序</span>d_list <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> i<span class="token punctuation">:</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>d_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 根据值排序</span>d_list <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> i<span class="token punctuation">:</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>d_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{'a': 3, 'b': 2, 'c': 1}{'c': 1, 'b': 2, 'a': 3}</code></pre><h3 id="16-列表嵌套字典的排序"><a href="#16-列表嵌套字典的排序" class="headerlink" title="16. 列表嵌套字典的排序"></a>16. 列表嵌套字典的排序</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span>new_a <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[{'name': 'a', 'age': 3}, {'name': 'b', 'age': 2}, {'name': 'c', 'age': 1}]</code></pre><h3 id="17-filter返回list中全部奇数"><a href="#17-filter返回list中全部奇数" class="headerlink" title="17. filter返回list中全部奇数"></a>17. filter返回list中全部奇数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>new_a <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> a<span class="token punctuation">)</span>new_a <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> new_a<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1, 3, 5]</code></pre><h3 id="18-至少用三种方式求1-100的和"><a href="#18-至少用三种方式求1-100的和" class="headerlink" title="18. 至少用三种方式求1-100的和"></a>18. 至少用三种方式求1-100的和</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># sum()函数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第一种："</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 递归</span><span class="token keyword">def</span> <span class="token function">sum_num</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> n <span class="token operator">+</span> sum_num<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第二种："</span><span class="token punctuation">,</span> sum_num<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 循环</span>sum_n <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum_n <span class="token operator">+=</span> i<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第三种："</span><span class="token punctuation">,</span> sum_n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>第一种： 5050第二种： 5050第三种： 5050</code></pre><h3 id="19-用生成器生成斐波拉契数列"><a href="#19-用生成器生成斐波拉契数列" class="headerlink" title="19. 用生成器生成斐波拉契数列"></a>19. 用生成器生成斐波拉契数列</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token builtin">max</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> b        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">'done'</span>f <span class="token operator">=</span> fib<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>11235813</code></pre><h3 id="20-如何就地打乱一个列表"><a href="#20-如何就地打乱一个列表" class="headerlink" title="20. 如何就地打乱一个列表"></a>20. 如何就地打乱一个列表</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> shufflea <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>shuffle<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9][3, 4, 5, 1, 8, 6, 9, 2, 7]</code></pre><h3 id="21-copy和deepcopy区别"><a href="#21-copy和deepcopy区别" class="headerlink" title="21. copy和deepcopy区别"></a>21. copy和deepcopy区别</h3><ul><li>copy：浅复制，不会拷贝其子对象，修改子对象，将受影响 </li><li>deepcopy 深复制，将拷贝其子对象，修改子对象，将不受影响</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> copyl1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>l3 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>l1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'l1:'</span><span class="token punctuation">,</span> l1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'l2:'</span><span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'l3:'</span><span class="token punctuation">,</span> l3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>l1: [1, 2, 3, ['a', 'b', 'c']]l2: [1, 2, 3, ['a', 'b', 'c']]l3: [1, 2, 3, ['a', 'b']]</code></pre><h3 id="22-map返回list中所有value的平方"><a href="#22-map返回list中所有value的平方" class="headerlink" title="22. map返回list中所有value的平方"></a>22. map返回list中所有value的平方</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> v <span class="token operator">**</span> <span class="token number">2</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>new_a <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> a<span class="token punctuation">)</span>new_a <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> new_a<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1, 4, 9, 16, 25]</code></pre><h3 id="23-Python数组和列表有什么区别"><a href="#23-Python数组和列表有什么区别" class="headerlink" title="23. Python数组和列表有什么区别"></a>23. Python数组和列表有什么区别</h3><p>Python中的数组和列表具有相同的存储数据方式。但是，数组只能包含单个数据类型元素，而列表可以包含任何数据类型元素。</p><h3 id="24-Python中help-和dir-函数分别是什么"><a href="#24-Python中help-和dir-函数分别是什么" class="headerlink" title="24. Python中help()和dir()函数分别是什么"></a>24. Python中help()和dir()函数分别是什么</h3><p>help()和dir()这两个函数都可以从Python解释器直接访问，并用于查看内置函数的合并转储。</p><p>help()函数：help()函数用于显示文档字符串，还可以查看与模块，关键字，属性等相关的使用信息。</p><p>dir()函数：dir()函数用于显示定义的符号。</p><h3 id="25-正则保留中文"><a href="#25-正则保留中文" class="headerlink" title="25. 正则保留中文"></a>25. 正则保留中文</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_chinese1</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'\d+|[a-zA-Z]+'</span><span class="token punctuation">)</span>    chinese <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chinese<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">find_chinese2</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'[^\u4e00-\u9fa5]'</span><span class="token punctuation">)</span>    chinese <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chinese<span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token string">"asdw正asdf则we43保547留sg756中45erg文3"</span>find_chinese1<span class="token punctuation">(</span>s<span class="token punctuation">)</span>find_chinese2<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>正则保留中文正则保留中文</code></pre><h3 id="16-和-匹配区别"><a href="#16-和-匹配区别" class="headerlink" title="16. (.)和(.?)匹配区别"></a>16. (.<em>)和(.</em>?)匹配区别</h3><ul><li><p>(.*)是贪婪匹配，会把满足正则的尽可能多匹配</p></li><li><p>(.*?)是非贪婪匹配，会把满足正则的尽可能少匹配</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rea <span class="token operator">=</span> <span class="token string">"&lt;a&gt;(非)贪婪&lt;/a&gt;&lt;a&gt;匹配&lt;/a&gt;"</span>res1 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;a&gt;(.*)&lt;/a&gt;"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"贪婪匹配: "</span><span class="token punctuation">,</span> res1<span class="token punctuation">)</span>res2 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;a&gt;(.*?)&lt;/a&gt;"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"非贪婪匹配: "</span><span class="token punctuation">,</span> res2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>贪婪匹配:  ['(非)贪婪&lt;/a&gt;&lt;a&gt;匹配']非贪婪匹配:  ['(非)贪婪', '匹配']</code></pre><h3 id="27-python中什么元素为假"><a href="#27-python中什么元素为假" class="headerlink" title="27. python中什么元素为假"></a>27. python中什么元素为假</h3><p>有0、空字符串、空列表、空字典、空元组、None、False</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>FalseFalseFalseFalseFalseFalseFalse</code></pre><h3 id="28-any-和all-的区别"><a href="#28-any-和all-的区别" class="headerlink" title="28. any()和all()的区别"></a>28. any()和all()的区别</h3><ul><li><p>any()：只要迭代器中有一个元素为真就为真</p></li><li><p>all()：迭代器中所有的判断项返回都是真，结果才为真</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"any: "</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"all: "</span><span class="token punctuation">,</span> <span class="token builtin">all</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>any:  Trueall:  False</code></pre><h3 id="29-列表的交集、并集和差集"><a href="#29-列表的交集、并集和差集" class="headerlink" title="29. 列表的交集、并集和差集"></a>29. 列表的交集、并集和差集</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>jj <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>intersection<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bj <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>union<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cj1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>difference<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cj2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>difference<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"交集"</span><span class="token punctuation">,</span> jj<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"并集"</span><span class="token punctuation">,</span> bj<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"差集"</span><span class="token punctuation">,</span> cj1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"差集"</span><span class="token punctuation">,</span> cj2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>a [1, 2, 3, 4]b [3, 4, 5, 6]交集 [3, 4]并集 [1, 2, 3, 4, 5, 6]差集 [1, 2]差集 [5, 6]</code></pre><h3 id="30-列表去重、合并、删除"><a href="#30-列表去重、合并、删除" class="headerlink" title="30. 列表去重、合并、删除"></a>30. 列表去重、合并、删除</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 去重</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># 合并</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># 删除</span>a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1, 2, 3, 4, 5, 6][1, 2, 3, 4, 5, 6, 7, 8, 9, 0][1, 2, 3, 4, 5, 6, 7, 8, 9]</code></pre><h3 id="31-找到数组中的第二大数"><a href="#31-找到数组中的第二大数" class="headerlink" title="31. 找到数组中的第二大数"></a>31. 找到数组中的第二大数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token comment"># 直接排序，输出倒数第二个数</span>tmp_list <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"方法一：Second_large_num is :"</span><span class="token punctuation">,</span> tmp_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 设置两个标志位一个存储最大数一个存储次大数</span>one <span class="token operator">=</span> num_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>two <span class="token operator">=</span> num_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> one<span class="token punctuation">:</span>        two <span class="token operator">=</span> one        one <span class="token operator">=</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">elif</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> two<span class="token punctuation">:</span>        two <span class="token operator">=</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"方法二：Second_large_num is :"</span><span class="token punctuation">,</span> two<span class="token punctuation">)</span><span class="token comment"># 用reduce与逻辑符号</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span>num <span class="token operator">=</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> ot<span class="token punctuation">,</span> x<span class="token punctuation">:</span> ot<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> x <span class="token keyword">and</span> <span class="token punctuation">(</span>ot<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token keyword">or</span> ot<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> x <span class="token keyword">and</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> ot<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">or</span> ot<span class="token punctuation">,</span> num_list<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"方法三：Second_large_num is :"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>方法一：Second_large_num is : 8方法二：Second_large_num is : 8方法三：Second_large_num is : 8</code></pre><h3 id="32-字典的删除与合并"><a href="#32-字典的删除与合并" class="headerlink" title="32. 字典的删除与合并"></a>32. 字典的删除与合并</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token keyword">del</span> dic<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>dic2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>dic<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dic2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{'name': 'a', 'age': 1}{'name': 'a'}{'name': 'a', 'age': 2}</code></pre><h3 id="33-remove、pop和del的区别"><a href="#33-remove、pop和del的区别" class="headerlink" title="33. remove、pop和del的区别"></a>33. remove、pop和del的区别</h3><ul><li>remove(item)直接对可变序中的元素进行检索删除，返回的是删除后的列表</li><li>pop(index)方法是对可变序列中元素下标进行检索删除，返回删除值</li><li>del(list[index])方法是对可变序列中元素下边进行检索删除，不返回删除值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"remove方法"</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"pop方法"</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"del方法"</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">del</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>remove方法[1, 2, 3, 4, 5, 6, 7]None[1, 2, 4, 5, 6, 7]pop方法[1, 2, 3, 4, 5, 6, 7]4[1, 2, 3, 5, 6, 7]del方法[1, 2, 3, 4, 5, 6, 7][1, 2, 3, 5, 6, 7]</code></pre><h3 id="34-二维列表变一维"><a href="#34-二维列表变一维" class="headerlink" title="34. 二维列表变一维"></a>34. 二维列表变一维</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 不借助package</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> item <span class="token keyword">in</span> a <span class="token keyword">for</span> i <span class="token keyword">in</span> item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 使用package</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> chain<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>chain<span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1, 2, 3, 4, 5, 6, 7, 8][1, 2, 3, 4, 5, 6, 7, 8]</code></pre><h3 id="35-is和-x3D-x3D-有什么区别"><a href="#35-is和-x3D-x3D-有什么区别" class="headerlink" title="35. is和==有什么区别"></a>35. is和==有什么区别</h3><ul><li><p>is：比较的是两个对象的id值是否相等，也就是比较俩对象是否为同一个实例对象。是否指向同一个内存地址</p></li><li><p>== ： 比较的两个对象的内容/值是否相等，默认会调用对象的eq()方法</p></li></ul><h3 id="36-时间与时间戳转换"><a href="#36-时间与时间戳转换" class="headerlink" title="36. 时间与时间戳转换"></a>36. 时间与时间戳转换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timenow <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"时间戳:"</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span>tl <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"格式化:"</span><span class="token punctuation">,</span> tl<span class="token punctuation">)</span>format_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span> tl<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"标准时间:"</span><span class="token punctuation">,</span> format_time<span class="token punctuation">)</span>ts <span class="token operator">=</span> time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>format_time<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"新时间戳:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>时间戳: 1586675347.695563格式化: time.struct_time(tm_year=2020, tm_mon=4, tm_mday=12, tm_hour=15, tm_min=9, tm_sec=7, tm_wday=6, tm_yday=103, tm_isdst=0)标准时间: 2020-04-12 15:09:07新时间戳: 1586675347.0</code></pre><h3 id="37-列出几种魔法方法并介绍用途"><a href="#37-列出几种魔法方法并介绍用途" class="headerlink" title="37. 列出几种魔法方法并介绍用途"></a>37. 列出几种魔法方法并介绍用途</h3><ul><li><p>__init__：构造器，当一个实例被创建的时候初始化的方法，但是它并不是实例化调用的第一个方法。</p></li><li><p>__new__：才是实例化对象调用的第一个方法，它只取下cls参数，并把其他参数传给__init__.</p></li><li><p>__call__：让一个类的实例像函数一样被调用</p></li><li><p>__getitem__：定义获取容器中指定元素的行为，相当于self[key]</p></li><li><p>__getattr__：定义当用户试图访问一个不存在属性的时候的行为。</p></li><li><p>__setattr__：定义当一个属性被设置的时候的行为</p></li><li><p>__getattribute__：定义当一个属性被访问的时候的行为</p></li></ul><h3 id="38-面向对象中-new-和-init-区别"><a href="#38-面向对象中-new-和-init-区别" class="headerlink" title="38. 面向对象中__new__和__init__区别"></a>38. 面向对象中__new__和__init__区别</h3><ul><li>__init__是初始化方法，创建对象后，就立刻被默认调用了，可接收参数，不需要返回值</li><li>__new__至少要有一个参数cls，代表当前类</li><li>__new__必须要有返回值，返回实例化出来的实例</li><li>__init__有一个参数self，就是这个__new__返回的实例，__init__在__new__的基础上可以完成一些其它初始化的动作</li><li>如果__new__创建的是当前类的实例，会自动调用__init__函数，通过return语句里面调用的__new__函数的第一个参数是cls来保证是当前类实例，如果是其他类的类名；那么实际创建返回的就是其他类的实例，其实就不会调用当前类的__init__函数，也不会调用其他类的__init__函数。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是init方法"</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是arg的id"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是new方法"</span><span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">object</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>Demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"类Demo的id为"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>Demo<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>这是arg的id 140646464536368这是new方法 &lt;__main__.Demo object at 0x10d41c590&gt;这是init方法 &lt;__main__.Demo object at 0x10d41c590&gt;类Demo的id为 140646464536368</code></pre><h3 id="39-创建一个单列模式"><a href="#39-创建一个单列模式" class="headerlink" title="39. 创建一个单列模式"></a>39. 创建一个单列模式</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    __instance <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> cls<span class="token punctuation">.</span>__instance<span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>__instance <span class="token operator">=</span> <span class="token builtin">object</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>__instancea <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>b <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3</code></pre><h3 id="40-类变量如何设置成私有变量"><a href="#40-类变量如何设置成私有变量" class="headerlink" title="40. 类变量如何设置成私有变量"></a>40. 类变量如何设置成私有变量</h3><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">people1</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">print_age</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name: %s, age: %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">people2</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">print_age</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name: %s, age: %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__age<span class="token punctuation">)</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> people1<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>print_age<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>p2 <span class="token operator">=</span> people2<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>p2<span class="token punctuation">.</span>print_age<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>name: a, age: 1aname: b, age: 2---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-192-9af57612b39b&gt; in &lt;module&gt;     20 p2 = people2("b", 2)     21 p2.print_age()---&gt; 22 print(p2.name)AttributeError: 'people2' object has no attribute 'name'</code></pre><h3 id="41-继承的好处并简单实现"><a href="#41-继承的好处并简单实现" class="headerlink" title="41. 继承的好处并简单实现"></a>41. 继承的好处并简单实现</h3><ul><li>继承最大的好处是子类获得了父类的全部功能。</li><li>继承的另一个好处：多态，当我们需要传入子类时，我们只需要接收父类类型即可。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Animal is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Animal is running...</code></pre><h3 id="42-如何反转一个整数"><a href="#42-如何反转一个整数" class="headerlink" title="42. 如何反转一个整数"></a>42. 如何反转一个整数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x        str_x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> str_x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"-"</span><span class="token punctuation">:</span>            str_x <span class="token operator">=</span> str_x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>str_x<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            str_x <span class="token operator">=</span> str_x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>str_x<span class="token punctuation">)</span>            x <span class="token operator">=</span> <span class="token operator">-</span>x        <span class="token keyword">return</span> x <span class="token keyword">if</span> <span class="token operator">-</span><span class="token number">2147483648</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">2147483647</span> <span class="token keyword">else</span> <span class="token number">0</span>s <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>reverse_int <span class="token operator">=</span> s<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>reverse_int<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>-321</code></pre><h3 id="43-fun-args-kwargs-中的-args-kwargs什么意思"><a href="#43-fun-args-kwargs-中的-args-kwargs什么意思" class="headerlink" title="43. fun(*args,**kwargs)中的*args,**kwargs什么意思"></a>43. fun(*args,**kwargs)中的*args,**kwargs什么意思</h3><p>*args,**kwargs主要用于函数的定义，允许将不定数量的参数传递给函数，即预先并不知道函数使用者会传递多少个参数给函数。</p><ul><li>*args是用来发送一个非键值对的可变数量的参数列别给一个函数</li><li>**kwargs是用来发送一个不定长度的键值对给一个函数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">args_demo</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> args<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">kwargs_demo</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>args_demo<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>kwargs_demo<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>abcname aage 1</code></pre><h3 id="44-装饰器的作用"><a href="#44-装饰器的作用" class="headerlink" title="44. 装饰器的作用"></a>44. 装饰器的作用</h3><p>装饰器本质上是一个 Python 函数或类，它可以让其他函数或类在不需要做任何代码修改的前提下增加额外功能，装饰器的返回值也是一个函数/类对象。有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码到装饰器中并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s is running"</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@log</span><span class="token keyword">def</span> <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@log</span><span class="token keyword">def</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>foo1<span class="token punctuation">(</span><span class="token punctuation">)</span>foo2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>foo1 is running1586700083.317305foo2 is running1586700083.317503</code></pre><h3 id="45-python的GIL是什么"><a href="#45-python的GIL是什么" class="headerlink" title="45. python的GIL是什么"></a>45. python的GIL是什么</h3><p>GIL(Global Interpreter Lock)是python的全局解释器锁，同一进程中假如有多个线程运行，一个线程在运行python程序的时候会霸占python解释器（加了一把锁即GIL），使该进程内的其他线程无法运行，等该线程运行完后其他线程才能运行。</p><p>如果线程运行过程中遇到耗时操作，则解释器锁解开，使其他线程运行。所以在多线程中，线程的运行仍是有先后顺序的，并不是同时进行。</p><p>多进程中因为每个进程都能被系统分配资源，相当于每个进程有了一个python解释器，所以多进程可以实现多个进程的同时运行，缺点是进程系统资源开销大。</p><h3 id="46-python引用计数机制"><a href="#46-python引用计数机制" class="headerlink" title="46. python引用计数机制"></a>46. python引用计数机制</h3><p>python的垃圾回收采用的是引用计数机制为主和分代回收机制为辅的结合机制，当对象的引用计数变为0时，对象将被销毁。</p><p>对象的引用计数+1的情况：</p><ol><li>对象被创建</li><li>对象被引用</li><li>对象被作为参数，传入到一个函数中</li><li>对象作为一个元素，存储在容器中</li></ol><p>对象的引用计数-1的情况：</p><ol><li>对象的别名被赋予新的对象</li><li>对象的别名被显式销毁</li><li>一个对象离开它的作用域</li><li>对象所在的容器被销毁，或从容器中删除对象</li></ol><h3 id="47-分别说明多进程和多线程的优缺点"><a href="#47-分别说明多进程和多线程的优缺点" class="headerlink" title="47. 分别说明多进程和多线程的优缺点"></a>47. 分别说明多进程和多线程的优缺点</h3><ul><li><p>多进程模式最大的优点就是稳定性高，一个子进程崩溃了，不会影响主进程和其他子进程。</p></li><li><p>多进程模式的缺点是创建进程的代价大，特别是在Windows下创建进程开销巨大，在Unix/Linux系统下，用fork调用还行。</p></li><li><p>操作系统能同时运行的进程数是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统几乎难以调度。</p></li><li><p>多线程模式通常比多进程稍快一点，在Windows速度明显。</p></li><li><p>多线程模式的致命缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。</p></li></ul><h3 id="48-什么是多线程竞争"><a href="#48-什么是多线程竞争" class="headerlink" title="48. 什么是多线程竞争"></a>48. 什么是多线程竞争</h3><p>线程是非独立的，同一个进程里线程是数据共享的，当各个线程访问数据资源时会出现竞争状态即：数据几乎同步会被多个线程占用，造成数据混乱，即所谓的线程不安全</p><p>那么怎么解决多线程竞争问题？—锁</p><p>锁的好处：确保了某段关键代码（共享数据资源）只能由一个线程从头到尾完整地执行能解决多线程资源竞争下的原子操作问题。</p><p>锁的坏处：阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了</p><p>锁的致命问题：若干子线程在系统资源竞争时，都在等待对方对某部分资源解除占用状态，结果是谁也不愿先解锁，互相干等着，程序无法执行下去，这就是死锁。</p><h3 id="49-PEP8-python-编码规范"><a href="#49-PEP8-python-编码规范" class="headerlink" title="49. PEP8 python 编码规范"></a>49. PEP8 python 编码规范</h3><p><strong>代码编排：</strong></p><ol><li>4个空格的缩进，不使用Tap，更不能混合使用Tap和空格。</li></ol><ul><li>每行最大长度79，换行可以使用反斜杠，最好使用圆括号。</li><li>类和top-level函数定义之间空两行；类中的方法定义之间空一行；函数内逻辑无关段落之间空一行；其他地方尽量不要再空行。</li></ul><p><strong>文档编排：</strong></p><ol><li>模块内容的顺序：模块说明-&gt;docstring—&gt;import—&gt;globals&amp;constants—&gt;其他定义</li></ol><ul><li>不要在一句import中多个库</li><li>如果采用from XX import XX引用库，可以省略module.</li></ul><p><strong>空格的使用：</strong></p><p>总体原则，避免不必要的空格。</p><ol><li>各种右括号前不要加空格。</li></ol><ul><li>逗号、冒号、分号前不要加空格。</li><li>函数的左括号前不要加空格。</li><li>序列的左括号前不要加空格。</li><li>操作符左右各加一个空格，不要为了对齐增加空格。</li><li>函数默认参数使用的赋值符左右省略空格。</li><li>不要将多句语句写在同一行。</li><li>if/for/while语句中，即使执行语句只有一句，也必须另起一行。</li></ul><p><strong>注释：</strong></p><ol><li>块注释，在一段代码前增加的注释, 在’#’后加一空格。</li></ol><ul><li>行注释，在一句代码后加注释, 在’#’后加一空格。</li><li>避免不必要的注释。</li></ul><p><strong>文档描述：</strong></p><ol><li>为所有的共有模块、函数、类、方法写docstrings。</li></ol><ul><li>描述使用三引号</li></ul><p><strong>命名规范：</strong></p><ol><li>模块命名尽量短小，使用全部小写的方式，可以使用下划线。</li></ol><ul><li>包命名尽量短小，使用全部小写的方式，不可以使用下划线。</li><li>类的命名使用CapWords的方式，模块内部使用的类采用_CapWords的方式。</li><li>异常命名使用CapWords+Error后缀的方式。</li><li>全局变量尽量只在模块内有效，类似C语言中的static。实现方法有两种，一是all机制，二是前缀一个下划线。</li><li>函数命名使用全部小写的方式，可以使用下划线。</li><li>常量命名使用全部大写的方式，可以使用下划线。</li><li>类的属性（方法和变量）命名使用全部小写的方式，可以使用下划线。</li><li>类的属性若与关键字名字冲突，后缀一下划线，尽量不要使用缩略等其他方式。</li><li>为避免与子类属性命名冲突，在类的一些属性前，前缀两条下划线。</li><li>类的方法第一个参数必须是self，而静态方法第一个参数必须是cls。</li></ul><h3 id="50-提高python运行效率的方法"><a href="#50-提高python运行效率的方法" class="headerlink" title="50. 提高python运行效率的方法"></a>50. 提高python运行效率的方法</h3><ul><li>使用dict或set查找元素</li><li>使用生成器（generator）和yield</li><li>循环之外能做的事不要放在循环内</li><li>优化多判断表达式顺序</li><li>使用join合并迭代器中的字符串</li><li>不借助中间变量交换两个变量的值</li><li>使用if is True代替if == True</li><li>使用while 1代替while True</li><li>使用级联比较x &lt; y &lt; z</li><li>multiprocessing实现并行编程</li><li>使用C扩展，如Cython</li><li>核型模块用PyPy</li></ul><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 笔试算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python教程 </tag>
            
            <tag> 面试问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-常用距离定义与计算</title>
      <link href="/2023/03/17/zhi-shi-zong-jie/1-chang-yong-ju-chi-ding-yi-yu-ji-suan/"/>
      <url>/2023/03/17/zhi-shi-zong-jie/1-chang-yong-ju-chi-ding-yi-yu-ji-suan/</url>
      
        <content type="html"><![CDATA[<h3 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h3><p>此处主要使用scipy中的距离计算模块，scipy.spatial.distance</p><p>源码在这里 <a href="https://github.com/scipy/scipy/blob/v0.17.1/scipy/spatial/distance.py#L606-L634">scipy距离计算源码</a> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>spatial <span class="token keyword">import</span> distance<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-数值向量距离"><a href="#2-数值向量距离" class="headerlink" title="2. 数值向量距离"></a>2. 数值向量距离</h3><h4 id="2-1-布雷柯蒂斯相异度（Bray-Curtis-distance）"><a href="#2-1-布雷柯蒂斯相异度（Bray-Curtis-distance）" class="headerlink" title="2.1 布雷柯蒂斯相异度（Bray-Curtis distance）"></a>2.1 布雷柯蒂斯相异度（Bray-Curtis distance）</h4><p>Bray-Curtis 相异度（Bray-Curtis dissimilarity）是生态学中用来衡量不同样地物种组成差异的测度。由J. Roger Bray and John T. Curtis 提出。其计算基于样本中不同物种组成的数量特征（多度，盖度，重要值等）。计算公式为：</p><p>$$\frac{\sum_{i = 1}^{n}|x_{i} - y_{i}|}{\sum_{i = 1}^{n}|x_{i} + y_{i}|}$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>braycurtis<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.5</code></pre><h4 id="2-2-坎贝拉距离（Canberra-distance）"><a href="#2-2-坎贝拉距离（Canberra-distance）" class="headerlink" title="2.2 坎贝拉距离（Canberra distance）"></a>2.2 坎贝拉距离（Canberra distance）</h4><p>Canberra distance是用来衡量两个向量空间的居间，1966年被提出，1977年被G. N. Lance和 W. T. Williams重新提出。是Manhattan distance的加权版本，Canberra distance已被用作比较排名列表和计算机安全中的入侵检测的测量。</p><p>$$\sum_{i = 1}^{n}\frac{|x_{i} - y_{i}|}{|x_{i}| + |y_{i}|}$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>canberra<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.3333333333333333</code></pre><h4 id="2-3-切比雪夫距离（Chebyshev-distance）"><a href="#2-3-切比雪夫距离（Chebyshev-distance）" class="headerlink" title="2.3 切比雪夫距离（Chebyshev distance）"></a>2.3 切比雪夫距离（Chebyshev distance）</h4><p>切比雪夫距离（Chebyshev distance）是向量空间中的一种度量，二个点之间的距离定义是其各坐标数值差绝对值的最大值。以数学的观点来看，切比雪夫距离是由一致范数（uniform norm）（或称为上确界范数）所衍生的度量，也是超凸度量（injective metric space）的一种。计算公式为</p><p>$$max_{i}|x_{i} - y_{i}|$$</p><p>下图是国际象棋棋盘上所有位置距f6位置的切比雪夫距离</p><p><img src="/2023/03/17/zhi-shi-zong-jie/1-chang-yong-ju-chi-ding-yi-yu-ji-suan/chebyshev_distance.jpg" alt="切比雪夫距离"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>chebyshev<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>5</code></pre><h4 id="2-4-曼哈顿距离（Manhattan／cityblock-distance）"><a href="#2-4-曼哈顿距离（Manhattan／cityblock-distance）" class="headerlink" title="2.4 曼哈顿距离（Manhattan／cityblock distance）"></a>2.4 曼哈顿距离（Manhattan／cityblock distance）</h4><p>曼哈顿距离（Manhattan Distance）是由十九世纪的赫尔曼·闵可夫斯基所创词汇，是种使用在几何度量空间的几何学用语，用以标明两个点在标准坐标系上的绝对轴距总和。曼哈顿距离的命名原因是从规划为方型建筑区块的城市（如曼哈顿）间，最短的行车路径而来（忽略曼哈顿的单向车道以及只存在于3、14大道的斜向车道）。任何往东三区块、往北六区块的的路径一定最少要走九区块，没有其他捷径。计算公式为：</p><p>$$\sum_{i}^{n}|x_{i} - y_{i}|$$</p><p>曼哈顿距离依赖坐标系统的转度，而非系统在坐标轴上的平移或映射。</p><p>如下图所示，红色表示曼哈顿距离，蓝色和黄色代表等价的曼哈顿距离。</p><p><img src="/2023/03/17/zhi-shi-zong-jie/1-chang-yong-ju-chi-ding-yi-yu-ji-suan/manhattan_distance.jpg" alt="曼哈顿距离"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>cityblock<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>10</code></pre><h4 id="2-5-相关系数距离（Correlation-distance）"><a href="#2-5-相关系数距离（Correlation-distance）" class="headerlink" title="2.5 相关系数距离（Correlation distance）"></a>2.5 相关系数距离（Correlation distance）</h4><p>相关系数距离是1与相关系数的差，相关系数的定义为</p><p>$$\frac{(X - \overline{X})(Y - \overline{Y})}<br>{||(X - \overline{X})||_{2}||(Y - \overline{Y})||_{2}}$$</p><p>常见的Pearson相关性系数即为</p><p>$$\rho(X, Y) = \frac{E[(X - \mu_{X})(Y - \mu_{Y})]}{\sigma_{X}\sigma_{Y}}<br>= \frac{E[(X - \mu_{X})(Y - \mu_{Y})]}{\sqrt{\sum_{i = 1}^{n}(X_{i} - \mu_{X})}\sqrt{\sum_{i = 1}^{n}(Y_{i} - \mu_{Y})}}$$</p><p>Pearson相关距离为</p><p>$$D_{X, Y} = 1 - \rho(X, Y)$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>correlation<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.1175024967072299</code></pre><h4 id="2-6-余弦相似度距离（Cosine-distance）"><a href="#2-6-余弦相似度距离（Cosine-distance）" class="headerlink" title="2.6 余弦相似度距离（Cosine distance）"></a>2.6 余弦相似度距离（Cosine distance）</h4><p>余弦相似性通过测量两个向量的夹角的余弦值来度量它们之间的相似性。0度角的余弦值是1，而其他任何角度的余弦值都不大于1；并且其最小值是-1。从而两个向量之间的角度的余弦值确定两个向量是否大致指向相同的方向。两个向量有相同的指向时，余弦相似度的值为1；两个向量夹角为90°时，余弦相似度的值为0；两个向量指向完全相反的方向时，余弦相似度的值为-1。这结果是与向量的长度无关的，仅仅与向量的指向方向相关。余弦相似度通常用于正空间，因此给出的值为0到1之间。</p><p>余弦相似度定义来自于欧几里得点积，点积定义如下</p><p>$$X \cdot Y = ||X||\space||Y||\space cos(\theta)$$</p><p>余弦相似度为</p><p>$$cos(\theta) = \frac{X \cdot Y}{||X||\space||Y||}$$</p><p>余弦相似度距离为1与余弦相似度的差</p><p>$$1 - \frac{X \cdot Y}{||X||_{2}\space||Y||_{2}}$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>cosine<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.1261737770471213</code></pre><h4 id="2-7-欧氏距离（Euclidean-distance）"><a href="#2-7-欧氏距离（Euclidean-distance）" class="headerlink" title="2.7 欧氏距离（Euclidean distance）"></a>2.7 欧氏距离（Euclidean distance）</h4><p>在数学中，欧几里得距离或欧几里得度量是欧几里得空间中两点间“普通”（即直线）距离。使用这个距离，欧氏空间成为度量空间。相关联的范数称为欧几里得范数。计算公式为</p><p>$$||X - Y||_{2}$$</p><p>二维空间中的欧氏距离</p><p>$$d = \sqrt{(x_{2} - x_{1})^{2} + (y_{2} - y_{1})^{2}}$$</p><p>三维空间中的欧式距离</p><p>$$d = \sqrt{(x_{2} - x_{1})^{2} + (y_{2} - y_{1})^{2} + (z_{2} - z_{1})^{2}}$$</p><p>n维空间中的欧式距离</p><p>$$d(X, Y) = \sqrt{\sum_{i = 1}^{n}(x_{i} - y_{i})^{2}}$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>euclidean<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.4142135623730951</code></pre><h4 id="2-8-JS散度距离（Jensen-Shannon-distance）"><a href="#2-8-JS散度距离（Jensen-Shannon-distance）" class="headerlink" title="2.8 JS散度距离（Jensen-Shannon distance）"></a>2.8 JS散度距离（Jensen-Shannon distance）</h4><p>JS散度度量了两个概率分布的相似度，基于KL散度的变体，解决了KL散度非对称的问题。一般地，JS散度是对称的，其取值是0到1之间。定义如下：</p><p>$$JS(P_{1}||P_{2}) = \frac{1}{2}KL(P_{1}||\frac{P_{1} + P_{2}}{2}) = \frac{1}{2}KL(P_{2}||\frac{P_{1} + P_{2}}{2})$$</p><p>其中KL表示KL散度，KL散度又称为相对熵，信息散度，信息增益。KL散度是是两个概率分布P和Q差别的非对称性的度量。KL散度是用来度量使用基于Q的编码来编码来自P的样本平均所需的额外的位元数。典型情况下，P表示数据的真实分布，Q表示数据的理论分布，模型分布，或P的近似分布。计算公式为</p><p>$$KL(P||Q) = -\sum_{x \in X}P(x)log\frac{1}{P(x)} + \sum_{x \in X}P(x)log\frac{1}{Q(x)}<br>= \sum_{x \in X}P(x)log\frac{P(x)}{Q(x)}$$</p><p>因为对数函数是凸函数，所以KL散度的值为非负数。</p><p>有时会将KL散度称为KL距离，但它并不满足距离的性质：</p><ul><li>KL散度不是对称的</li><li>KL散度不满足三角不等式</li></ul><p>KL散度和JS散度度量的时候有一个问题：</p><p>如果两个分配P,Q离得很远，完全没有重叠的时候，那么KL散度值是没有意义的，而JS散度值是一个常数。这在学习算法中是比较致命的，这就意味这这一点的梯度为0。梯度消失了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> scipy <span class="token keyword">import</span> stats <span class="token keyword">as</span> stsx <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">JS_divergence</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>    M <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> q<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    <span class="token keyword">return</span> <span class="token number">0.5</span> <span class="token operator">*</span> sts<span class="token punctuation">.</span>entropy<span class="token punctuation">(</span>p<span class="token punctuation">,</span> M<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> sts<span class="token punctuation">.</span>entropy<span class="token punctuation">(</span>q<span class="token punctuation">,</span> M<span class="token punctuation">)</span>dis <span class="token operator">=</span> JS_divergence<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.009225640794865278</code></pre><h4 id="2-9-马氏距离（Mahalanobis-distance）"><a href="#2-9-马氏距离（Mahalanobis-distance）" class="headerlink" title="2.9 马氏距离（Mahalanobis distance）"></a>2.9 马氏距离（Mahalanobis distance）</h4><p>协方差矩阵记为$S$，则马式距离为</p><p>$$\sqrt{(X - Y)S^{-1}(X - Y)^T}$$</p><p>若协方差矩阵是单位矩阵（各个样本向量之间独立同分布）,则公式就成了</p><p>$$\sqrt{(X - Y)(X - Y)^T}$$</p><p>也就是欧氏距离了，若协方差矩阵是对角矩阵，公式变成了标准化欧氏距离。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">M <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">iv <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>mahalanobis<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.7320508075688772</code></pre><h4 id="2-10-闵可夫斯基距离（Minkowski-distance）"><a href="#2-10-闵可夫斯基距离（Minkowski-distance）" class="headerlink" title="2.10 闵可夫斯基距离（Minkowski distance）"></a>2.10 闵可夫斯基距离（Minkowski distance）</h4><p>闵氏距离不是一种距离，而是一组距离的定义，将以下形式的距离都定义为Minkowski distance。</p><p>$$||X - Y||_{p} = (\sum_{i = 1}^{n}|x_{i} - y_{i}|^{p})^{\frac{1}{p}}$$</p><p>或</p><p>$$(\sum_{i = 1}^{n}w_{i}|x_{i} - y_{i}|^{p})^{\frac{1}{p}}$$</p><p>当$p=1$时，就是曼哈顿距离<br>当$p=2$时，就是欧氏距离<br>当$p \to \infty$时，就是切比雪夫距离</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>minkowski<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2.23606797749979</code></pre><h4 id="2-12-标准欧式距离（standardized-Euclidean-distance）"><a href="#2-12-标准欧式距离（standardized-Euclidean-distance）" class="headerlink" title="2.12 标准欧式距离（standardized Euclidean distance）"></a>2.12 标准欧式距离（standardized Euclidean distance）</h4><p>标准化欧氏距离是针对简单欧氏距离的缺点（量纲差异）而作的一种改进方案，标准化方法为</p><p>$$X_{*} = \frac{X - \mu}{s}$$</p><p>变换后标准欧式距离为</p><p>$$\sqrt{\sum_{i = 1}^{n}(\frac{X_{i} - Y_{i}}{s_{i}})^{2}}$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>seuclidean<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4.47213595499958</code></pre><h4 id="2-13-平方欧式距离（squared-Euclidean-distance）"><a href="#2-13-平方欧式距离（squared-Euclidean-distance）" class="headerlink" title="2.13 平方欧式距离（squared Euclidean distance）"></a>2.13 平方欧式距离（squared Euclidean distance）</h4><p>平方欧式距离是简单欧式距离每一项的平方，公式如下</p><p>$$||X - Y||_{2}^{2} = \sum_{i = 1}^{n}w_{i}|x_{i} - y_{i}|^{2}$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>sqeuclidean<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2.0</code></pre><h4 id="2-14-加权闵可夫斯基距离（Minkowski-distance）"><a href="#2-14-加权闵可夫斯基距离（Minkowski-distance）" class="headerlink" title="2.14 加权闵可夫斯基距离（Minkowski distance）"></a>2.14 加权闵可夫斯基距离（Minkowski distance）</h4><p>$$(\sum_{i = 1}^{n}|w_{i}(x_{i} - y_{i})|^{p})^{\frac{1}{p}}$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>wminkowski<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.4142135623730951</code></pre><h4 id="2-15-搬土距离（Earth-Mover-distance）"><a href="#2-15-搬土距离（Earth-Mover-distance）" class="headerlink" title="2.15 搬土距离（Earth Mover distance）"></a>2.15 搬土距离（Earth Mover distance）</h4><p>Earth Mover distance，是基于运输问题的效率提出的一种直方图相似度量。它是归一化的从一个分布变为另一个分布的最小代价, 可以用来测量两个分布(multi-dimensional distributions)之间的距离。EMD运算复杂度较高，平均而言至少是二次方级别。但是它作为距离函数，有一个非常好的特点是存在下界，两个分布的质心之间的距离，因此在粗略计算时，可以考虑用分布质心之间的距离代替EMD。</p><p>$$\frac{\sum_{i = 1}^{M}\sum_{j = 1}^{N}d_{ij}f_{ij}}{\sum_{i = 1}^{M}\sum_{j = 1}^{N}f_{ij}}$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">import</span> wasserstein_distancex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">3.9</span><span class="token punctuation">,</span> <span class="token number">7.5</span><span class="token punctuation">,</span> <span class="token number">7.8</span><span class="token punctuation">]</span>x_w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.4</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">3.1</span><span class="token punctuation">,</span> <span class="token number">7.2</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">]</span>y_w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3.2</span><span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> wasserstein_distance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x_w<span class="token punctuation">,</span> y_w<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2.7</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span>x_w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10.0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span>y_w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2.0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> wasserstein_distance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x_w<span class="token punctuation">,</span> y_w<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">3.3881989165193145e-06</span><span class="token punctuation">,</span> <span class="token number">0.007009673349221927</span><span class="token punctuation">,</span> <span class="token number">2.7785622593068027</span><span class="token punctuation">,</span> <span class="token number">2.7785622593068027</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.1480135071948422</span><span class="token punctuation">,</span> <span class="token number">2.7785622593068027</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.02111525564774837</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3.3881989165193145e-06</span><span class="token punctuation">,</span> <span class="token number">0.02111525564774837</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.02111525564774837</span><span class="token punctuation">,</span> <span class="token number">0.28901734104046245</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.02111525564774837</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">3.3881989165193145e-06</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">6.859405279689656</span><span class="token punctuation">,</span> <span class="token number">0.0037439161362785474</span><span class="token punctuation">,</span> <span class="token number">4020.4096644631295</span><span class="token punctuation">,</span> <span class="token number">0.005439330543933054</span><span class="token punctuation">,</span> <span class="token number">0.08928571428571429</span><span class="token punctuation">,</span> <span class="token number">0.04654587589796659</span><span class="token punctuation">,</span> <span class="token number">128609.0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0.7678571428571429</span><span class="token punctuation">,</span> <span class="token number">0.03798619846624095</span><span class="token punctuation">,</span> <span class="token number">0.24815204448802128</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.017954805269944772</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">358.62096982747676</span><span class="token punctuation">,</span> <span class="token number">13.421226391252906</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.017857142857142856</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8.571428571428571</span><span class="token punctuation">,</span> <span class="token number">0.1179245283018868</span><span class="token punctuation">,</span> <span class="token number">0.028545153041402063</span><span class="token punctuation">,</span> <span class="token number">0.06847760995576437</span><span class="token punctuation">,</span> <span class="token number">0.5714285714285714</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">358.62096982747676</span><span class="token punctuation">,</span> <span class="token number">64.26004935863212</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.2244897959183674</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">wasserstein_distance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2.7</code></pre><h3 id="3-布尔向量距离"><a href="#3-布尔向量距离" class="headerlink" title="3. 布尔向量距离"></a>3. 布尔向量距离</h3><h4 id="3-1-Dice系数（Dice-dissimilarity）"><a href="#3-1-Dice系数（Dice-dissimilarity）" class="headerlink" title="3.1 Dice系数（Dice dissimilarity）"></a>3.1 Dice系数（Dice dissimilarity）</h4><p>Dice系数是一种集合相似度度量函数，通常用于计算两个样本的相似度</p><p>$$\frac{2|X \bigcap Y|}{|X| + |Y|}$$</p><p>Dice距离为</p><p>$$1 - \frac{2|X \bigcap Y|}{|X| + |Y|} = \frac{C_{TF} + C_{FT}}{2C_{TT} + C_{TF} + C_{FT}}$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>dice<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.0</code></pre><h4 id="3-2-汉明距离（Hamming-distance）"><a href="#3-2-汉明距离（Hamming-distance）" class="headerlink" title="3.2 汉明距离（Hamming distance）"></a>3.2 汉明距离（Hamming distance）</h4><p>两个等长字符串s1与s2之间的汉明距离定义为将其中一个变为另外一个所需要作的最小替换次数。</p><p>$$\frac{C_{01} - C_{10}}{n}$$</p><p>例如字符串’1111’与’1001’之间的汉明距离为2。（汉明距离也可计算离散的数值向量）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>hamming<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.6666666666666666</code></pre><h4 id="3-3-杰卡德差异（Jaccard-Needham-dissimilarity）"><a href="#3-3-杰卡德差异（Jaccard-Needham-dissimilarity）" class="headerlink" title="3.3 杰卡德差异（Jaccard-Needham dissimilarity）"></a>3.3 杰卡德差异（Jaccard-Needham dissimilarity）</h4><p>两个集合A和B的交集元素在A，B的并集中所占的比例，称为两个集合的杰卡德相似系数。</p><p>$$\frac{|X \bigcap Y|}{|X \bigcup Y|}$$</p><p>杰卡德距离为</p><p>$$1 - \frac{|X \bigcap Y|}{|X \bigcup Y|} = \frac{C_{TF} + C_{FT}}{C_{TT} + C_{TF} + C_{FT}}$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>jaccard<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.0</code></pre><h4 id="3-4-库尔辛斯基差异（Kulsinski-dissimilarity）"><a href="#3-4-库尔辛斯基差异（Kulsinski-dissimilarity）" class="headerlink" title="3.4 库尔辛斯基差异（Kulsinski dissimilarity）"></a>3.4 库尔辛斯基差异（Kulsinski dissimilarity）</h4><p>$$\frac{C_{TF} + C_{FT} - C_{TT} + n}{C_{TF} + C_{FT} + n}$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>kulsinski<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.0</code></pre><h4 id="3-5-田本罗杰斯差异（Rogers-Tanimoto-dissimilarity）"><a href="#3-5-田本罗杰斯差异（Rogers-Tanimoto-dissimilarity）" class="headerlink" title="3.5 田本罗杰斯差异（Rogers-Tanimoto dissimilarity）"></a>3.5 田本罗杰斯差异（Rogers-Tanimoto dissimilarity）</h4><p>$$\frac{R}{C_{TT} + C_{FF} + R}$$</p><p>其中</p><p>$$R = 2(C_{TF} + C_{FT})$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>rogerstanimoto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.8</code></pre><h4 id="3-6-拉塞尔差异（Russell-Rao-dissimilarity）"><a href="#3-6-拉塞尔差异（Russell-Rao-dissimilarity）" class="headerlink" title="3.6 拉塞尔差异（Russell-Rao dissimilarity）"></a>3.6 拉塞尔差异（Russell-Rao dissimilarity）</h4><p>$$\frac{n - C_{TT}}{n}$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>russellrao<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.0</code></pre><h4 id="3-7-索卡尔米切纳差异（Sokal-Michener-dissimilarity）"><a href="#3-7-索卡尔米切纳差异（Sokal-Michener-dissimilarity）" class="headerlink" title="3.7 索卡尔米切纳差异（Sokal-Michener dissimilarity）"></a>3.7 索卡尔米切纳差异（Sokal-Michener dissimilarity）</h4><p>$$\frac{R}{S + R}$$</p><p>其中</p><p>$$R = 2(C_{TF} + C_{FT})$$<br>$$S = C_{FF} + C_{TT}$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>sokalmichener<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.8</code></pre><h4 id="3-8-索卡尔雪差异（Sokal-Sneath-dissimilarity）"><a href="#3-8-索卡尔雪差异（Sokal-Sneath-dissimilarity）" class="headerlink" title="3.8 索卡尔雪差异（Sokal-Sneath dissimilarity）"></a>3.8 索卡尔雪差异（Sokal-Sneath dissimilarity）</h4><p>$$\frac{R}{C_{TT} + R}$$</p><p>其中</p><p>$$R = 2(C_{TF} + C_{FT})$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>sokalsneath<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.0</code></pre><h4 id="3-9-Yule差异（Yule-dissimilarity）"><a href="#3-9-Yule差异（Yule-dissimilarity）" class="headerlink" title="3.9 Yule差异（Yule dissimilarity）"></a>3.9 Yule差异（Yule dissimilarity）</h4><p>$$\frac{R}{C_{TT} * C_{FF} + \frac{R}{2}}$$</p><p>其中</p><p>$$R = 2 * C_{TF} * C_{FT}$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>yule<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2.0</code></pre><p>end~</p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 距离算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-transformer</title>
      <link href="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/"/>
      <url>/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/</url>
      
        <content type="html"><![CDATA[<h3 id="0-背景"><a href="#0-背景" class="headerlink" title="0. 背景"></a>0. 背景</h3><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/1.png"></p><p>2017 年，Google 在论文 Attention is All you need 中提出了 Transformer 模型，其使用 Self-Attention 结构取代了在 NLP 任务中常用的 RNN 网络结构。相比 RNN 网络结构，其最大的优点是可以并行计算。Transformer 的整体模型架构如图所示</p><h3 id="1-Transformer-概览"><a href="#1-Transformer-概览" class="headerlink" title="1. Transformer 概览"></a>1. Transformer 概览</h3><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/2.png"></p><p>首先，让我们先将 Transformer 模型视为一个黑盒，如图所示。在机器翻译任务中，将一种语言的一个句子作为输入，然后将其翻译成另一种语言的一个句子作为输出。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/3.png"></p><p>Transformer 本质上是一个 Encoder-Decoder 架构。因此中间部分的 Transformer 可以分为两个部分：编码组件和解码组件。如图所示：</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/4.png"></p><p>其中，编码组件由多层编码器（Encoder）组成（在论文中作者使用了 6 层编码器，在实际使用过程中你可以尝试其他层数）。解码组件也是由相同层数的解码器（Decoder）组成（在论文也使用了 6 层）。如图所示</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/5.png"></p><p>每个编码器由两个子层组成：Self-Attention 层（自注意力层）和 Position-wise Feed Forward Network（前馈网络，缩写为 FFN）如图所示。每个编码器的结构都是相同的，但是它们使用不同的权重参数。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/6.png"></p><p>编码器的输入会先流入 Self-Attention 层。它可以让编码器在对特定词进行编码时使用输入句子中的其他词的信息（可以理解为：当我们翻译一个词时，不仅只关注当前的词，而且还会关注其他词的信息）。后面我们将会详细介绍 Self-Attention 的内部结构。然后，Self-Attention 层的输出会流入前馈网络。</p><p>  解码器也有编码器中这两层，但是它们之间还有一个注意力层（即 Encoder-Decoder Attention），其用来帮忙解码器关注输入句子的相关部分（类似于 seq2seq 模型中的注意力）。</p><h3 id="2-引入张量"><a href="#2-引入张量" class="headerlink" title="2. 引入张量"></a>2. 引入张量</h3><p>现在我们已经了解了模型的主要组成部分，让我们开始研究各种向量/张量，以及他们在这些组成部分之间是如何流动的，从而将输入经过已训练的模型转换为输出。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/7.png"></p><p>和通常的 NLP 任务一样，首先，我们使用词嵌入算法（Embedding）将每个词转换为一个词向量。在 Transformer 论文中，词嵌入向量的维度是 512。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/8.png"></p><p>嵌入仅发生在最底层的编码器中。所有编码器都会接收到一个大小为 512 的向量列表——底部编码器接收的是词嵌入向量，其他编码器接收的是上一个编码器的输出。这个列表大小是我们可以设置的超参数——基本上这个参数就是训练数据集中最长句子的长度。</p><p>对输入序列完成嵌入操作后，每个词都会流经编码器的两层。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/9.png"></p><p>接下来，我们将换一个更短的句子作为示例，来说明在编码器的每个子层中发生了什么。</p><p>上面我们提到，编码器会接收一个向量作为输入。编码器首先将这些向量传递到 Self-Attention 层，然后传递到前馈网络，最后将输出传递到下一个编码器。</p><h3 id="3-Self-Attention（自注意力）"><a href="#3-Self-Attention（自注意力）" class="headerlink" title="3. Self-Attention（自注意力）"></a>3. Self-Attention（自注意力）</h3><h4 id="3-1-Self-Attention-概览"><a href="#3-1-Self-Attention-概览" class="headerlink" title="3.1 Self-Attention 概览"></a>3.1 Self-Attention 概览</h4><p>首先我们通过一个例子，来对 Self-Attention 有一个直观的认识。假如，我们要翻译下面这个句子：</p><p>The animal didn’t cross the street because it was too tired</p><p>​这个句子中的 it 指的是什么？是指 animal 还是 street ？对人来说，这是一个简单的问题，但是算法来说却不那么简单。</p><p>  当模型在处理 it 时，Self-Attention 机制使其能够将 it 和 animal 关联起来。</p><p>  当模型处理每个词（输入序列中的每个位置）时，Self-Attention 机制使得模型不仅能够关注当前位置的词，而且能够关注句子中其他位置的词，从而可以更好地编码这个词。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/10.png"></p><p>  如果你熟悉 RNN，想想如何维护隐状态，使 RNN 将已处理的先前词/向量的表示与当前正在处理的词/向量进行合并。Transformer 使用 Self-Attention 机制将其他词的理解融入到当前词中。</p><h4 id="3-2-Self-Attention-机制"><a href="#3-2-Self-Attention-机制" class="headerlink" title="3.2 Self-Attention 机制"></a>3.2 Self-Attention 机制</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/11.png"></p><p>对于 Self Attention 来讲，Q（Query），K（Key）和 V（Value）三个矩阵均来自同一输入，并按照以下步骤计算：</p><ol><li>首先计算 Q 和 K 之间的点积，为了防止其结果过大，会除以 d k \sqrt{d_{k}} d k，其中 d k d_{k}d k为 Key 向量的维度。</li><li>然后利用 Softmax 操作将其结果归一化为概率分布，再乘以矩阵 V 就得到权重求和的表示。整个计算过程可以表示为：<br><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/12.png"></li></ol><h4 id="3-3-Self-Attention-详解"><a href="#3-3-Self-Attention-详解" class="headerlink" title="3.3 Self-Attention 详解"></a>3.3 Self-Attention 详解</h4><p>面通过一个例子，让我们看一下如何使用向量计算 Self-Attention。计算 Self-Attention 的步骤如下：</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/13.png"></p><p>第 1 步：对编码器的每个输入向量（在本例中，即每个词的词向量）创建三个向量：Query 向量、Key 向量和 Value 向量。它们是通过词向量分别和 3 个矩阵相乘得到的，这 3 个矩阵通过训练获得。</p><p>  请注意，这些向量的维数小于词向量的维数。新向量的维数为 64，而 embedding 和编码器输入/输出向量的维数为 512。新向量不一定非要更小，这是为了使多头注意力计算保持一致的结构性选择。</p><p>图 中，x 1 \boldsymbol{x_1}x 1乘以权重矩阵 W Q \boldsymbol{W^Q}W Q得到 q 1 \boldsymbol{q_1}q 1</p><p>，即与该单词关联的 Query 向量。最终会为输入句子中的每个词创建一个 Query，一个 Key 和一个 Value 向量。</p><p>什么是 Query，Key 和 Value 向量？它们是一种抽象，对于注意力的计算和思考非常有用。继续阅读下面的注意力计算过程，你将了解这些向量所扮演的角色。</p><p>第 2 步：计算注意力分数。假设我们正在计算这个例子中第一个词 “Thinking” 的自注意力。我们需要根据 “Thinking” 这个词，对句子中的每个词都计算一个分数。这些分数决定了我们在编码 “Thinking” 这个词时，需要对句子中其他位置的每个词放置多少的注意力。</p><p>  这些分数，是通过计算 “Thinking” 的 Query 向量和需要评分的词的 Key 向量的点积得到的。如果我们计算句子中第一个位置词的注意力分数，则第一个分数是 q 1 \boldsymbol{q_1}q 1和 k 1 \boldsymbol{k_1}k 1的点积，第二个分数是 q 1 \boldsymbol{q_1}q 1和 k 2 \boldsymbol{k_2}k 2的点积。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/14.png"></p><p>第 3 步：将每个分数除以 d k \sqrt{d_{k}} d k（d k d_{k}d k是 Key 向量的维度）。目的是在反向传播时，求梯度更加稳定。实际上，你也可以除以其他数。<br><strong>第 4 步</strong>：将这些分数进行 Softmax 操作。Softmax 将分数进行归一化处理，使得它们都为正数并且和为 1。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/15.png"></p><p>这些 Softmax 分数决定了在编码当前位置的词时，对所有位置的词分别有多少的注意力。很明显，当前位置的词汇有最高的分数，但有时注意一下与当前位置的词相关的词是很有用的。</p><p>第 5 步：将每个 Softmax 分数分别与每个 Value 向量相乘。这种做法背后的直觉理解是：对于分数高的位置，相乘后的值就越大，我们把更多的注意力放在它们身上；对于分数低的位置，相乘后的值就越小，这些位置的词可能是相关性不大，我们就可以忽略这些位置的词。</p><p>第 6 步：将加权 Value 向量（即上一步求得的向量）求和。这样就得到了自注意力层在这个位置的输出。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/16.png"></p><p>这样就完成了自注意力的计算。生成的向量会输入到前馈网络中。但是在实际实现中，此计算是以矩阵形式进行，以便实现更快的处理速度。下面我们来看看如何使用矩阵计算。</p><h4 id="3-4-使用矩阵计算-Self-Attention"><a href="#3-4-使用矩阵计算-Self-Attention" class="headerlink" title="3.4 使用矩阵计算 Self-Attention"></a>3.4 使用矩阵计算 Self-Attention</h4><p>第 1 步：计算 Query，Key 和 Value 矩阵。首先，将所有词向量放到一个矩阵 X \boldsymbol{X}X 中，然后分别和 3 个我们训练过的权重矩阵（W Q \boldsymbol{W^Q}W Q ，W k \boldsymbol{W^k}W k和 W V\boldsymbol{W^V}W V） 相乘，得到 Q \mathbf{Q}Q，K \boldsymbol{K}K 和 V \boldsymbol{V}V 矩阵。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/17.png"></p><p><strong>第 2 步</strong>：计算自注意力。由于这里使用了矩阵进行计算，可以将前面的第 2 步到第 6 步压缩为一步。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/18.png"></p><h3 id="4-多头注意力机制（Multi-head-Attention）"><a href="#4-多头注意力机制（Multi-head-Attention）" class="headerlink" title="4. 多头注意力机制（Multi-head Attention）"></a>4. 多头注意力机制（Multi-head Attention）</h3><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/19.png"></p><p>在 Transformer 论文中，通过添加一种多头注意力机制，进一步完善了自注意力层。具体做法：首先，通过 h hh 个不同的线性变换对 Query、Key 和 Value 进行映射；然后，将不同的 Attention 拼接起来；最后，再进行一次线性变换。基本结构如图所示：</p><p>每一组注意力用于将输入映射到不同的子表示空间，这使得模型可以在不同子表示空间中关注不同的位置。整个计算过程可表示为：</p><p>在多头注意力下，我们为每组注意力单独维护不同的 Query、Key 和 Value 权重矩阵，从而得到不同的 Query、Key 和 Value 矩阵</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/20.png"></p><p>按照上面的方法，使用不同的权重矩阵进行 8 次自注意力计算，就可以得到 8 个不同的 Z \boldsymbol{Z}Z 矩阵。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/21.png"></p><p>接下来就有点麻烦了。因为前馈神经网络层接收的是 1 个矩阵（每个词的词向量），而不是上面的 8 个矩阵。因此，我们需要一种方法将这 8 个矩阵整合为一个矩阵。具体方法如下：</p><ol><li>把 8 个矩阵 { Z 0 , Z 1 , ⋯   , Z 7 } {\boldsymbol{Z_0},\boldsymbol{Z_1},\cdots,\boldsymbol{Z_7}}{Z 0 ,Z<br>1 ,⋯,Z 7 } 拼接起来。</li><li>把拼接后的矩阵和一个权重矩阵 W O \boldsymbol{W^O}W O相乘。</li><li>得到最终的矩阵 Z \boldsymbol{Z}Z，这个矩阵包含了所有注意力头的信息。这个矩阵会输入到 FFN 层。</li></ol><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/22.png"></p><p>这差不多就是多头注意力的全部内容了。下面将所有内容放到一张图中，以便我们可以统一查看。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/23.png"></p><p>现在让我们重新回顾一下前面的例子，看看在对示例句中的“it”进行编码时，不同的注意力头关注的位置分别在哪：</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/24.png"></p><p>当我们对“it”进行编码时，一个注意力头关注“The animal”，另一个注意力头关注“tired”。从某种意义上来说，模型对“it”的表示，融入了“animal”和“tired”的部分表达。</p><p>  Multi-head Attention 的本质是，在参数总量保持不变的情况下，将同样的 Query，Key，Value 映射到原来的高维空间的不同子空间中进行 Attention 的计算，在最后一步再合并不同子空间中的 Attention 信息。这样降低了计算每个 head 的 Attention 时每个向量的维度，在某种意义上防止了过拟合；由于 Attention 在不同子空间中有不同的分布，Multi-head Attention 实际上是寻找了序列之间不同角度的关联关系，并在最后拼接这一步骤中，将不同子空间中捕获到的关联关系再综合起来。</p><h3 id="5-位置前馈网络（Position-wise-Feed-Forward-Networks）"><a href="#5-位置前馈网络（Position-wise-Feed-Forward-Networks）" class="headerlink" title="5. 位置前馈网络（Position-wise Feed-Forward Networks）"></a>5. 位置前馈网络（Position-wise Feed-Forward Networks）</h3><p>位置前馈网络就是一个全连接前馈网络，每个位置的词都单独经过这个完全相同的前馈神经网络。其由两个线性变换组成，即两个全连接层组成，第一个全连接层的激活函数为 ReLU 激活函数。</p><p>在每个编码器和解码器中，虽然这个全连接前馈网络结构相同，但是不共享参数。整个前馈网络的输入和输出维度都是 d m o d e l = 512 d_{model}=512d model =512，第一个全连接层的输出和第二个全连接层的输入维度为 d f f = 2048 d_{ff}=2048d ff =2048。</p><h3 id="6-残差连接和层归一化"><a href="#6-残差连接和层归一化" class="headerlink" title="6. 残差连接和层归一化"></a>6. 残差连接和层归一化</h3><p>编码器结构中有一个需要注意的细节：每个编码器的每个子层（Self-Attention 层和 FFN 层）都有一个残差连接，再执行一个层标准化操作</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/25.png"></p><p>将向量和自注意力层的层标准化操作可视化，如下图所示：</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/26.png"></p><p>上面的操作也适用于解码器的子层。假设一个 Transformer 是由 2 层编码器和 2 层解码器组成，其如下图所示：</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/27.png"></p><p>为了方便进行残差连接，编码器和解码器中的所有子层和嵌入层的输出维度需要保持一致，在 Transformer 论文中 d m o d e l = 512 d_{model} = 512d model =512。</p><h3 id="7-位置编码"><a href="#7-位置编码" class="headerlink" title="7. 位置编码"></a>7. 位置编码</h3><p>到目前为止，我们所描述的模型中缺少一个东西：表示序列中词顺序的方法。为了解决这个问题，Transformer 模型为每个输入的词嵌入向量添加一个向量。这些向量遵循模型学习的特定模式，有助于模型确定每个词的位置，或序列中不同词之间的距离。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/28.png"></p><p>如果我们假设词嵌入向量的维度是 4，那么实际的位置编码如下：</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/29.png"></p><p>那么位置编码向量到底遵循什么模式？其具体的数学公式如下：</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/30.png"></p><h3 id="8-解码器"><a href="#8-解码器" class="headerlink" title="8.  解码器"></a>8.  解码器</h3><p>现在我们已经介绍了编码器的大部分概念，我们也了解了解码器的组件的原理。现在让我们看下编码器和解码器是如何协同工作的。</p><p>通过上面的介绍，我们已经了解第一个编码器的输入是一个序列，最后一个编码器的输出是一组注意力向量 Key 和 Value。这些向量将在每个解码器的 Encoder-Decoder Attention 层被使用，这有助于解码器把注意力集中在输入序列的合适位置。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/31.gif"></p><p>在完成了编码阶段后，我们开始解码阶段。解码阶段的每个时间步都输出一个元素。</p><p>  接下来会重复这个过程，直到输出一个结束符，表示 Transformer 解码器已完成其输出。每一步的输出都会在下一个时间步输入到下面的第一个解码器，解码器像编码器一样将解码结果显示出来。就像我们处理编码器输入一样，我们也为解码器的输入加上位置编码，来指示每个词的位置。</p><p>  Encoder-Decoder Attention 层的工作原理和多头自注意力机制类似。不同之处是：Encoder-Decoder Attention 层使用前一层的输出构造 Query 矩阵，而 Key 和 Value 矩阵来自于编码器栈的输出。</p><h3 id="9-Mask（掩码）"><a href="#9-Mask（掩码）" class="headerlink" title="9. Mask（掩码）"></a>9. Mask（掩码）</h3><p>Mask 表示掩码，它对某些值进行掩盖，使其在参数更新时不产生效果。Transformer 模型里面涉及两种 mask，分别是 Padding Mask 和 Sequence Mask。其中，Padding Mask 在所有的 scaled dot-product attention 里面都需要用到，而 Sequence Mask 只有在 Decoder 的 Self-Attention 里面用到。</p><h4 id="9-1-Padding-Mask"><a href="#9-1-Padding-Mask" class="headerlink" title="9.1 Padding Mask"></a>9.1 Padding Mask</h4><p>什么是 Padding mask 呢？因为每个批次输入序列的长度是不一样的，所以我们要对输入序列进行对齐。具体来说，就是在较短的序列后面填充 0（但是如果输入的序列太长，则是截断，把多余的直接舍弃）。因为这些填充的位置，其实是没有什么意义的，所以我们的 Attention 机制不应该把注意力放在这些位置上，所以我们需要进行一些处理。</p><p>  具体的做法：把这些位置的值加上一个非常大的负数（负无穷），这样的话，经过 Softmax 后，这些位置的概率就会接近 0。</p><h4 id="9-2-Sequence-Mask"><a href="#9-2-Sequence-Mask" class="headerlink" title="9.2 Sequence Mask"></a>9.2 Sequence Mask</h4><p>Sequence Mask 是为了使得 Decoder 不能看见未来的信息。也就是对于一个序列，在 t tt 时刻，我们的解码输出应该只能依赖于 t tt 时刻之前的输出，而不能依赖 t tt 之后的输出。因为我们需要想一个办法，把 t tt 之后的信息给隐藏起来。</p><p>  具体的做法：产生一个上三角矩阵，上三角的值全为 0。把这个矩阵作用在每个序列上，就可以达到我们的目的。</p><p>  总结：对于 Decoder 的 Self-Attention，里面使用到的 scaled dot-product attention，同时需要 Padding Mask 和 Sequence Mask，具体实现就是两个 Mask 相加。其他情况下，只需要 Padding Mask。</p><h3 id="10-最后的线性层和-Softmax-层"><a href="#10-最后的线性层和-Softmax-层" class="headerlink" title="10. 最后的线性层和 Softmax 层"></a>10. 最后的线性层和 Softmax 层</h3><p>解码器栈的输出是一个 float 向量。我们怎么把这个向量转换为一个词呢？通过一个线性层再加上一个 Softmax 层实现。</p><p>  线性层是一个简单的全连接神经网络，其将解码器栈的输出向量映射到一个更长的向量，这个向量被称为 logits 向量。</p><p>  现在假设我们的模型有 10000 个英文单词（模型的输出词汇表）。因此 logits 向量有 10000 个数字，每个数表示一个单词的分数。</p><p>  然后，Softmax 层会把这些分数转换为概率（把所有的分数转换为正数，并且加起来等于 1）。最后选择最高概率所对应的单词，作为这个时间步的输出。<br><img src="/2023/03/09/pytorch-ji-ben-wang-luo/7-transformer/32.png"></p><h3 id="11-嵌入层和最后的线性层"><a href="#11-嵌入层和最后的线性层" class="headerlink" title="11. 嵌入层和最后的线性层"></a>11. 嵌入层和最后的线性层</h3><p>在 Transformer 论文，提到一个细节：编码组件和解码组件中的嵌入层，以及最后的线性层共享权重矩阵。不过，在嵌入层中，会将这个共享权重矩阵乘以 d m o d e l \sqrt{d_{model}} d model</p><h3 id="12-正则化操作"><a href="#12-正则化操作" class="headerlink" title="12.正则化操作"></a>12.正则化操作</h3><p>为了提高 Transformer 模型的性能，在训练过程中，使用了以下的正则化操作：</p><ol><li>Dropout。对编码器和解码器的每个子层的输出使用 Dropout 操作，是在进行残差连接和层归一化之前。词嵌入向量和位置编码向量执行相加操作后，执行 Dropout 操作。Transformer 论文中提供的参数 P d r o p = 0.1 P_{drop} = 0.1P drop =0.1。_</li><li><em>Label Smoothing（标签平滑）。Transformer 论文中提供的参数 ϵ l s = 0.1 \epsilon</em>{ls} = 0.1ϵ ls=0.1.</li></ol><h3 id="13-参考"><a href="#13-参考" class="headerlink" title="13.参考"></a>13.参考</h3><p>[1] <a href="https://arxiv.org/abs/1706.03762">Attention is All you need</a></p><p>[2] <a href="http://jalammar.github.io/illustrated-transformer/">The Illustrated Transformer</a></p><p>[3] <a href="https://blog.csdn.net/longxinchen_ml/article/details/86533005">图解Transformer（完整版）</a></p><p>[4] <a href="https://baijiahao.baidu.com/s?id=1681035171409952556&amp;wfr=spider&amp;for=pc">这么多年，终于有人讲清楚 Transformer 了！</a></p><p>[5] <a href="https://zhuanlan.zhihu.com/p/48508221">详解Transformer （Attention Is All You Need）</a></p><p>[6] <a href="https://blog.csdn.net/benzhujie1245com/article/details/117173090">https://blog.csdn.net/benzhujie1245com/article/details/117173090</a></p><p>[7] <a href="https://www.tensorflow.org/tutorials/text/transformer">理解语言的 Transformer 模型</a></p>]]></content>
      
      
      <categories>
          
          <category> PyTorch 基本网络结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> pytorch 基本网络结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-Resnet</title>
      <link href="/2023/03/09/pytorch-ji-ben-wang-luo/6-resnet/"/>
      <url>/2023/03/09/pytorch-ji-ben-wang-luo/6-resnet/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Resnet介绍"><a href="#1-Resnet介绍" class="headerlink" title="1. Resnet介绍"></a>1. Resnet介绍</h3><h4 id="1-1-来源"><a href="#1-1-来源" class="headerlink" title="1.1 来源"></a>1.1 来源</h4><p>ResNet 网络是在 2015年 由微软实验室中的何凯明等几位大神提出，斩获当年ImageNet竞赛中分类任务第一名，目标检测第一名。获得COCO数据集中目标检测第一名，图像分割第一名。</p><h4 id="1-2-亮点"><a href="#1-2-亮点" class="headerlink" title="1.2 亮点"></a>1.2 亮点</h4><p>1.超深的网络结构（超过1000层）。<br>2.提出residual（残差结构）模块。<br>3.使用Batch <a href="https://so.csdn.net/so/search?q=Normalization&amp;spm=1001.2101.3001.7020">Normalization</a> 加速训练（丢弃dropout）。</p><h4 id="1-3-为什么采用residual"><a href="#1-3-为什么采用residual" class="headerlink" title="1.3 为什么采用residual"></a>1.3 为什么采用residual</h4><p>在ResNet提出之前，所有的<a href="https://so.csdn.net/so/search?q=%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&amp;spm=1001.2101.3001.7020">神经网络</a>都是通过卷积层和池化层的叠加组成的。<br>人们认为卷积层和池化层的层数越多，获取到的图片特征信息越全，学习效果也就越好。但是在实际的试验中发现，随着卷积层和池化层的叠加，不但没有出现学习效果越来越好的情况，反而两种问题：</p><p>1.梯度消失和梯度爆炸<br>梯度消失：若每一层的误差梯度小于1，反向传播时，网络越深，梯度越趋近于0<br>梯度爆炸：若每一层的误差梯度大于1，反向传播时，网络越深，梯度越来越大</p><p>2.退化问题<br>随着层数的增加，预测效果反而越来越差。如下图所示</p><ul><li>为了解决梯度消失或梯度爆炸问题，ResNet论文提出通过数据的预处理以及在网络中使用 BN（Batch Normalization）层来解决。</li><li>为了解决深层网络中的退化问题，可以人为地让神经网络某些层跳过下一层神经元的连接，隔层相连，弱化每层之间的强联系。这种神经网络被称为 残差网络 (ResNets)。ResNet论文提出了 residual结构（残差结构）来减轻退化问题，下图是使用residual结构的卷积网络，可以看到随着网络的不断加深，效果并没有变差，而是变的更好了。（虚线是train error，实线是test error）</li></ul><h3 id="2-residual结构"><a href="#2-residual结构" class="headerlink" title="2. residual结构"></a>2. residual结构</h3><h4 id="2-1-residual的计算方式"><a href="#2-1-residual的计算方式" class="headerlink" title="2.1 residual的计算方式"></a>2.1 residual的计算方式</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/6-resnet/1.png"></p><p>residual结构使用了一种shortcut的连接方式，也可理解为捷径。让特征矩阵隔层相加，注意F(X)和X形状要相同，所谓相加是特征矩阵相同位置上的数字进行相加。</p><h4 id="2-2-ResNet中两种不同的residual"><a href="#2-2-ResNet中两种不同的residual" class="headerlink" title="2.2 ResNet中两种不同的residual"></a>2.2 ResNet中两种不同的residual</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/6-resnet/2.png"></p><p>1.左侧残差结构称为 BasicBlock<br>2.右侧残差结构称为 Bottleneck<br>（1）其中第一层的1× 1的卷积核的作用是对特征矩阵进行降维操作，将特征矩阵的深度由256降为64;<br>第三层的1× 1的卷积核是对特征矩阵进行升维操作，将特征矩阵的深度由64升成256。<br>降低特征矩阵的深度主要是为了减少参数的个数。<br>如果采用BasicBlock,参数的个数应该是：256×256×3×3×2=1179648<br>采用Bottleneck，参数的个数是：1×1×256×64+3×3×64×64+1×1×256×64=69632<br>（2）先降后升为了主分支上输出的特征矩阵和捷径分支上输出的特征矩阵形状相同，以便进行加法操作。</p><h4 id="2-3-降维时的-short-cut"><a href="#2-3-降维时的-short-cut" class="headerlink" title="2.3 降维时的 short cut"></a>2.3 降维时的 short cut</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/6-resnet/3.png"></p><p>观察上图的 ResNet18层网络，可以发现有些残差块的 short cut 是实线的，而有些则是虚线的。</p><p>这些虚线的 short cut 上通过1×1的卷积核进行了维度处理（特征矩阵在长宽方向降采样，深度方向调整成下一层残差结构所需要的channel）。</p><h3 id="3-Batch-Normalization"><a href="#3-Batch-Normalization" class="headerlink" title="3. Batch Normalization"></a>3. Batch Normalization</h3><p>Batch Normalization是指批标准化处理，将一批数据的feature map满足均值为0，方差为1的分布规律。</p><h4 id="3-1-Batch-Normalization原理"><a href="#3-1-Batch-Normalization原理" class="headerlink" title="3.1 Batch Normalization原理"></a>3.1 Batch Normalization原理</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/6-resnet/4.png"></p><p>我们在图像预处理过程中通常会对图像进行标准化处理，这样能够加速网络的收敛，如下图所示，对于Conv1来说输入的就是满足某一分布的特征矩阵，但对于Conv2而言输入的feature map就不一定满足某一分布规律了（注意这里所说满足某一分布规律并不是指某一个feature map的数据要满足分布规律，理论上是指整个训练样本集所对应feature map的数据要满足分布规律）。而我们Batch Normalization的目的就是使我们的feature map满足均值为0，方差为1的分布规律。</p><h3 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h3><h4 id="4-1-模块代码"><a href="#4-1-模块代码" class="headerlink" title="4.1 模块代码"></a>4.1 模块代码</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/6-resnet/5.png"></p><h4 id="4-2-完整代码"><a href="#4-2-完整代码" class="headerlink" title="4.2 完整代码"></a>4.2 完整代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span>  torch<span class="token keyword">from</span>    torch <span class="token keyword">import</span>  nn<span class="token keyword">from</span>    torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> functional <span class="token keyword">as</span> F<span class="token keyword">from</span>    torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span>    torchvision <span class="token keyword">import</span> datasets<span class="token keyword">from</span>    torchvision <span class="token keyword">import</span> transforms<span class="token keyword">from</span>    torch <span class="token keyword">import</span> nn<span class="token punctuation">,</span> optim<span class="token comment"># from    torchvision.models import resnet18</span><span class="token keyword">class</span> <span class="token class-name">ResBlk</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    resnet block    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ch_in<span class="token punctuation">,</span> ch_out<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param ch_in:        :param ch_out:        """</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>ResBlk<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>ch_in<span class="token punctuation">,</span> ch_out<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>ch_out<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>ch_out<span class="token punctuation">,</span> ch_out<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>ch_out<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>extra <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ch_out <span class="token operator">!=</span> ch_in<span class="token punctuation">:</span>            <span class="token comment"># [b, ch_in, h, w] =&gt; [b, ch_out, h, w]</span>            self<span class="token punctuation">.</span>extra <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>ch_in<span class="token punctuation">,</span> ch_out<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>ch_out<span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param x: [b, ch, h, w]        :return:        """</span>        out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># short cut.</span>        <span class="token comment"># extra module: [b, ch_in, h, w] =&gt; [b, ch_out, h, w]</span>        <span class="token comment"># element-wise add:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> out        <span class="token keyword">return</span> out<span class="token keyword">class</span> <span class="token class-name">ResNet18</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>ResNet18<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token comment"># followed 4 blocks</span>        <span class="token comment"># [b, 64, h, w] =&gt; [b, 128, h ,w]</span>        self<span class="token punctuation">.</span>blk1 <span class="token operator">=</span> ResBlk<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        <span class="token comment"># [b, 128, h, w] =&gt; [b, 256, h, w]</span>        self<span class="token punctuation">.</span>blk2 <span class="token operator">=</span> ResBlk<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>        <span class="token comment"># # [b, 256, h, w] =&gt; [b, 512, h, w]</span>        <span class="token comment"># self.blk3 = ResBlk(128, 256)</span>        <span class="token comment"># # [b, 512, h, w] =&gt; [b, 1024, h, w]</span>        <span class="token comment"># self.blk4 = ResBlk(256, 512)</span>        self<span class="token punctuation">.</span>outlayer <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param x:        :return:        """</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># [b, 64, h, w] =&gt; [b, 1024, h, w]</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>blk1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>blk2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment"># x = self.blk3(x)</span>        <span class="token comment"># x = self.blk4(x)</span>        <span class="token comment"># print(x.shape)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>outlayer<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    batchsz <span class="token operator">=</span> <span class="token number">32</span>    cifar_train <span class="token operator">=</span> datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">'cifar'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>        transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    cifar_train <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>cifar_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batchsz<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    cifar_test <span class="token operator">=</span> datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">'cifar'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>        transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    cifar_test <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>cifar_test<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batchsz<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    x<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>cifar_train<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x:'</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token string">'label:'</span><span class="token punctuation">,</span> label<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span><span class="token punctuation">)</span>    <span class="token comment"># model = Lenet5().to(device)</span>    model <span class="token operator">=</span> ResNet18<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    criteon <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e-3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> batchidx<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>cifar_train<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># [b, 3, 32, 32]</span>            <span class="token comment"># [b]</span>            x<span class="token punctuation">,</span> label <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            logits <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token comment"># logits: [b, 10]</span>            <span class="token comment"># label:  [b]</span>            <span class="token comment"># loss: tensor scalar</span>            loss <span class="token operator">=</span> criteon<span class="token punctuation">(</span>logits<span class="token punctuation">,</span> label<span class="token punctuation">)</span>            <span class="token comment"># backprop</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> <span class="token string">'loss:'</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># test</span>            total_correct <span class="token operator">=</span> <span class="token number">0</span>            total_num <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> x<span class="token punctuation">,</span> label <span class="token keyword">in</span> cifar_test<span class="token punctuation">:</span>                <span class="token comment"># [b, 3, 32, 32]</span>                <span class="token comment"># [b]</span>                x<span class="token punctuation">,</span> label <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>                <span class="token comment"># [b, 10]</span>                logits <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                <span class="token comment"># [b]</span>                pred <span class="token operator">=</span> logits<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment"># [b] vs [b] =&gt; scalar tensor</span>                correct <span class="token operator">=</span> torch<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>                total_correct <span class="token operator">+=</span> correct                total_num <span class="token operator">+=</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token comment"># print(correct)</span>            acc <span class="token operator">=</span> total_correct <span class="token operator">/</span> total_num            <span class="token keyword">print</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> <span class="token string">'acc:'</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PyTorch 基本网络结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> pytorch 基本网络结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-AE-VAE</title>
      <link href="/2023/03/09/pytorch-ji-ben-wang-luo/5-ae-vae/"/>
      <url>/2023/03/09/pytorch-ji-ben-wang-luo/5-ae-vae/</url>
      
        <content type="html"><![CDATA[<h3 id="1-AE（AutoEncoder）：自编码器"><a href="#1-AE（AutoEncoder）：自编码器" class="headerlink" title="1. AE（AutoEncoder）：自编码器"></a>1. AE（AutoEncoder）：自编码器</h3><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/5-ae-vae/1.png"></p><p>原理：自编码器是一种无监督的特征学习方式，其目的是利用无标签数据找到一个有效的低维特征提取器，即重构损失来训练低维的特征表示。主要用于数据去噪、可视化降维（类比PCA可以进行比较）</p><p>自动编码器是一种数据的压缩算法，其中数据的压缩和解压缩函数是数据相关的、有损的、从样本中自动学习的。在大部分提到自动编码器的场合，压缩和解压缩的函数是通过神经网络实现的。</p><p>自动编码器是数据相关的（data-specific 或 data-dependent），这意味着自动编码器只能压缩那些与训练数据类似的数据。比如，使用人脸训练出来的自动编码器在压缩别的图片，比如树木时性能很差，因为它学习到的特征是与人脸相关的。<br>自动编码器是有损的，意思是解压缩的输出与原来的输入相比是退化的，MP3，JPEG等压缩算法也是如此。这与无损压缩算法不同。<br>自动编码器是从数据样本中自动学习的，这意味着很容易对指定类的输入训练出一种特定的编码器，而不需要完成任何新工作。</p><p>搭建一个自动编码器需要完成下面三样工作：搭建编码器，搭建解码器，设定一个损失函数，用以衡量由于压缩而损失掉的信息。编码器和解码器一般都是参数化的方程，并关于损失函数可导，典型情况是使用神经网络。编码器和解码器的参数可以通过最小化损失函数而优化，例如SGD。</p><p>自编码器是一个自监督的算法，并不是一个无监督算法。自监督学习是监督学习的一个实例，其标签产生自输入数据。要获得一个自监督的模型，你需要一个靠谱的目标跟一个损失函数，仅仅把目标设定为重构输入可能不是正确的选项。<br>目前自编码器的应用主要有两个方面，第一是数据去噪，第二是为进行可视化而降维。配合适当的维度和稀疏约束，自编码器可以学习到比PCA等技术更有意思的数据投影。</p><h3 id="2-VAE：变分自编码器-Variational-AutoEncoder"><a href="#2-VAE：变分自编码器-Variational-AutoEncoder" class="headerlink" title="2. VAE：变分自编码器 (Variational AutoEncoder)"></a>2. VAE：变分自编码器 (Variational AutoEncoder)</h3><h4 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/5-ae-vae/2.png"></p><p>VAE过程的encoder输出两个vector，vector里每一维进行高斯采样得到均值m和标准差σ，再从标准正态分布里生成一个vector采样得到e，进行</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/5-ae-vae/3.png"></p><p>的计算得到码空间，σ与e相乘即noise，引入最小化重构误差</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/5-ae-vae/4.png"></p><p>来逼近AE的结果，但是采样的过程是一种连续的表达方法，我们可以得到很多原始训练数据中没有的数据了。</p><h4 id="2-2-形象化区分"><a href="#2-2-形象化区分" class="headerlink" title="2.2 形象化区分"></a>2.2 形象化区分</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/5-ae-vae/5.png"></p><p>假如在AE中，一张满月的图片作为输入，模型得到的输出是一张满月的图片；一张弦月的图片作为输入，模型得到的是一张弦月的图片。当从满月的code和弦月的code中间sample出一个点，我们希望是一张介于满月和弦月之间的图片，但实际上，对于AE我们没办法确定模型会输出什么样的图片，因为我们并不知道模型从满月的code到弦月的code发生了什么变化。</p><p>而VAE做的事情，实际上就是在原本满月和弦月生成的code上面加了noise，即在某个数值区间内，每个点理论上都可以输出满月的图片；在某个数值区间内，每个点理论上都可以输出弦月的图片，当调整这个noise的值的时候，也就是改变了这个数值区间，如下图所示，当两个区间出现重合的公共点，那么理论上，这个点既应该像满月，又应该像弦月，因此输出的图片就应该兼具满月和弦月的图片特点，也就生成一张介于满月和弦月之间的月相，而这个月相，在原本的输入中是不存在的，即生成了新的图片。</p><h4 id="2-3-总结"><a href="#2-3-总结" class="headerlink" title="2.3 总结"></a>2.3 总结</h4><p>VAE和AE的差异在于：</p><ol><li>两者虽然都是X-&gt;Z-&gt;X’的结构，但是AE寻找的是单值映射关系，即：z = f ( x ) z=f(x)z=f(x)。</li><li>而VAE寻找的是分布的映射关系，即：DX→DZ</li></ol><h3 id="3-AE-代码"><a href="#3-AE-代码" class="headerlink" title="3. AE 代码"></a>3. AE 代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''AE 重建 minist数据集'''</span><span class="token keyword">import</span>  torch<span class="token keyword">from</span>    torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span>    torch <span class="token keyword">import</span> nn<span class="token punctuation">,</span> optim<span class="token keyword">from</span>    torchvision <span class="token keyword">import</span> transforms<span class="token punctuation">,</span> datasets<span class="token keyword">import</span>  visdom<span class="token comment"># AE模型</span><span class="token keyword">class</span> <span class="token class-name">AE</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>AE<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#  encoder [b, 784] =&gt; [b, 20]   784维度 降到 20维</span>        self<span class="token punctuation">.</span>encoder <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token comment"># decoder [b, 20] =&gt; [b, 784]   20维度 升维 784维</span>        self<span class="token punctuation">.</span>decoder <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 压缩到0-1</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param x: [b, 1, 28, 28]        :return:        """</span>        batchsz <span class="token operator">=</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">#</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batchsz<span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">)</span>  <span class="token comment"># flatten   [b, 1, 28, 28] -》 [b,784]</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>encoder<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># encoder</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># decoder</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batchsz<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>  <span class="token comment"># reshape</span>        <span class="token keyword">return</span> x<span class="token punctuation">,</span> <span class="token boolean">None</span>  <span class="token comment"># 返回重建的数据</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 1、引入数据集</span>    mnist_train <span class="token operator">=</span> datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span><span class="token string">'mnist'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    mnist_train <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>mnist_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    mnist_test <span class="token operator">=</span> datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span><span class="token string">'mnist'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    mnist_test <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>mnist_test<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 打印数据集数据</span>    x<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>mnist_train<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 返回 数值 与 label</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x:'</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment"># 2、网络数据 模型 损失函数 优化器</span>    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span><span class="token punctuation">)</span>    model <span class="token operator">=</span> AE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    criteon <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e-3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    <span class="token comment"># 3、可视化</span>    viz <span class="token operator">=</span> visdom<span class="token punctuation">.</span>Visdom<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 4、训练</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> batchidx<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>mnist_train<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 索引号 数据 标签</span>            <span class="token comment"># [b, 1, 28, 28]</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            x_hat<span class="token punctuation">,</span> kld <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            loss <span class="token operator">=</span> criteon<span class="token punctuation">(</span>x_hat<span class="token punctuation">,</span> x<span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> <span class="token string">'loss:'</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># loss是tensor 打印出numpy数据</span>        <span class="token comment"># test 可视化生成的图片</span>        x<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>mnist_test<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            x_hat<span class="token punctuation">,</span> kld <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        viz<span class="token punctuation">.</span>images<span class="token punctuation">(</span>x<span class="token punctuation">,</span> nrow<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> win<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">,</span> opts<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment"># nrow一行8个图片</span>        viz<span class="token punctuation">.</span>images<span class="token punctuation">(</span>x_hat<span class="token punctuation">,</span> nrow<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> win<span class="token operator">=</span><span class="token string">'x_hat'</span><span class="token punctuation">,</span> opts<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'x_hat'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-VAE代码"><a href="#4-VAE代码" class="headerlink" title="4. VAE代码"></a>4. VAE代码</h3><h4 id="4-1-reparametrize-trick"><a href="#4-1-reparametrize-trick" class="headerlink" title="4.1 reparametrize trick"></a>4.1 reparametrize trick</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/5-ae-vae/6.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">h <span class="token operator">=</span> mu <span class="token operator">+</span> sigma <span class="token operator">*</span> torch<span class="token punctuation">.</span>randn_like<span class="token punctuation">(</span>sigma<span class="token punctuation">)</span>        <span class="token comment"># reparametrize trick, epison~N(0, 1)  解决sample不能sample的问题 可导的sample</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-2-KL散度计算"><a href="#4-2-KL散度计算" class="headerlink" title="4.2 KL散度计算"></a>4.2 KL散度计算</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/5-ae-vae/7.png"></p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/5-ae-vae/8.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># KL散度计算</span>kld <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>    torch<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span>mu<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span>    torch<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span>sigma<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span>    torch<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1e-8</span> <span class="token operator">+</span> torch<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span>sigma<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token comment"># 1e-8 为了限制幅度 防止过小 为无穷小</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>batchsz<span class="token operator">*</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-代码"><a href="#4-3-代码" class="headerlink" title="4.3 代码"></a>4.3 代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''VAE 重建 minist数据集'''</span><span class="token keyword">import</span>  torch<span class="token keyword">from</span>    torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span>    torch <span class="token keyword">import</span> nn<span class="token punctuation">,</span> optim<span class="token keyword">from</span>    torchvision <span class="token keyword">import</span> transforms<span class="token punctuation">,</span> datasets<span class="token keyword">import</span>  visdom<span class="token comment"># VAE模型</span><span class="token keyword">class</span> <span class="token class-name">VAE</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>VAE<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># [b, 784] =&gt; [b, 20]</span>        <span class="token comment"># u: [b, 10]</span>        <span class="token comment"># sigma: [b, 10]</span>        self<span class="token punctuation">.</span>encoder <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token comment"># [b, 10] =&gt; [b, 784]</span>        self<span class="token punctuation">.</span>decoder <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>criteon <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param x: [b, 1, 28, 28]        :return:        """</span>        <span class="token comment"># encoder</span>        batchsz <span class="token operator">=</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batchsz<span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">)</span>                        <span class="token comment"># flatten</span>        h_ <span class="token operator">=</span> self<span class="token punctuation">.</span>encoder<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                            <span class="token comment"># encoder  # [b, 20], including mean and sigma</span>        mu<span class="token punctuation">,</span> sigma <span class="token operator">=</span> h_<span class="token punctuation">.</span>chunk<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>                  <span class="token comment"># 拆分 [b, 20] =&gt; [b, 10] and [b, 10]  mean and sigma</span>        h <span class="token operator">=</span> mu <span class="token operator">+</span> sigma <span class="token operator">*</span> torch<span class="token punctuation">.</span>randn_like<span class="token punctuation">(</span>sigma<span class="token punctuation">)</span>        <span class="token comment"># reparametrize trick, epison~N(0, 1)  解决sample不能sample的问题 可导的sample</span>        <span class="token comment"># decoder</span>        x_hat <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">(</span>h<span class="token punctuation">)</span>        x_hat <span class="token operator">=</span> x_hat<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batchsz<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>          <span class="token comment"># reshape</span>        <span class="token comment"># KL散度计算</span>        kld <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>            torch<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span>mu<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span>            torch<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span>sigma<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span>            torch<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1e-8</span> <span class="token operator">+</span> torch<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span>sigma<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token comment"># 1e-8 为了限制幅度 防止过小 为无穷小</span>        <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>batchsz<span class="token operator">*</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> x_hat<span class="token punctuation">,</span> kld<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 1、引入数据集</span>    mnist_train <span class="token operator">=</span> datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span><span class="token string">'mnist'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    mnist_train <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>mnist_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    mnist_test <span class="token operator">=</span> datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span><span class="token string">'mnist'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    mnist_test <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>mnist_test<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 打印数据集数据</span>    x<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>mnist_train<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 返回 数值 与 label</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x:'</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment"># 2、网络数据 模型 损失函数 优化器</span>    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span><span class="token punctuation">)</span>    model <span class="token operator">=</span> VAE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    criteon <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e-3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    <span class="token comment"># 3、可视化</span>    viz <span class="token operator">=</span> visdom<span class="token punctuation">.</span>Visdom<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 4、训练</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> batchidx<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>mnist_train<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 索引号 数据 标签</span>            <span class="token comment"># [b, 1, 28, 28]</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            x_hat<span class="token punctuation">,</span> kld <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            loss <span class="token operator">=</span> criteon<span class="token punctuation">(</span>x_hat<span class="token punctuation">,</span> x<span class="token punctuation">)</span>            <span class="token keyword">if</span> kld <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                elbo <span class="token operator">=</span> <span class="token operator">-</span> loss <span class="token operator">-</span> <span class="token number">1.0</span> <span class="token operator">*</span> kld                loss <span class="token operator">=</span> <span class="token operator">-</span> elbo            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> <span class="token string">'loss:'</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'kld:'</span><span class="token punctuation">,</span> kld<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># loss是tensor 打印出numpy数据</span>        <span class="token comment"># test 可视化生成的图片</span>        x<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>mnist_test<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            x_hat<span class="token punctuation">,</span> kld <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        viz<span class="token punctuation">.</span>images<span class="token punctuation">(</span>x<span class="token punctuation">,</span> nrow<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> win<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">,</span> opts<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment"># nrow一行8个图片</span>        viz<span class="token punctuation">.</span>images<span class="token punctuation">(</span>x_hat<span class="token punctuation">,</span> nrow<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> win<span class="token operator">=</span><span class="token string">'x_hat'</span><span class="token punctuation">,</span> opts<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'x_hat'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span>VAE<span class="token punctuation">(</span>  <span class="token punctuation">(</span>encoder<span class="token punctuation">)</span><span class="token punctuation">:</span> Sequential<span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">784</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">(</span>decoder<span class="token punctuation">)</span><span class="token punctuation">:</span> Sequential<span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">784</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">(</span>criteon<span class="token punctuation">)</span><span class="token punctuation">:</span> MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Setting up a new session<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">0</span> loss<span class="token punctuation">:</span> <span class="token number">0.08264587819576263</span> kld<span class="token punctuation">:</span> <span class="token number">0.03679743781685829</span><span class="token number">1</span> loss<span class="token punctuation">:</span> <span class="token number">0.05616206303238869</span> kld<span class="token punctuation">:</span> <span class="token number">0.01888606697320938</span><span class="token number">2</span> loss<span class="token punctuation">:</span> <span class="token number">0.05455908179283142</span> kld<span class="token punctuation">:</span> <span class="token number">0.018955783918499947</span><span class="token number">3</span> loss<span class="token punctuation">:</span> <span class="token number">0.05179569870233536</span> kld<span class="token punctuation">:</span> <span class="token number">0.019154397770762444</span><span class="token number">4</span> loss<span class="token punctuation">:</span> <span class="token number">0.04935336112976074</span> kld<span class="token punctuation">:</span> <span class="token number">0.01918504573404789</span><span class="token number">17</span> loss<span class="token punctuation">:</span> <span class="token number">0.04976732283830643</span> kld<span class="token punctuation">:</span> <span class="token number">0.020686572417616844</span><span class="token number">18</span> loss<span class="token punctuation">:</span> <span class="token number">0.05070965737104416</span> kld<span class="token punctuation">:</span> <span class="token number">0.02066740207374096</span><span class="token number">19</span> loss<span class="token punctuation">:</span> <span class="token number">0.051941923797130585</span> kld<span class="token punctuation">:</span> <span class="token number">0.020781638100743294</span><span class="token number">20</span> loss<span class="token punctuation">:</span> <span class="token number">0.05143573880195618</span> kld<span class="token punctuation">:</span> <span class="token number">0.02083871327340603</span><span class="token number">21</span> loss<span class="token punctuation">:</span> <span class="token number">0.05247107893228531</span> kld<span class="token punctuation">:</span> <span class="token number">0.020524831488728523</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/5-ae-vae/9.png"></p>]]></content>
      
      
      <categories>
          
          <category> PyTorch 基本网络结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> pytorch 基本网络结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-GAN</title>
      <link href="/2023/03/09/pytorch-ji-ben-wang-luo/4-gan/"/>
      <url>/2023/03/09/pytorch-ji-ben-wang-luo/4-gan/</url>
      
        <content type="html"><![CDATA[<h3 id="1-GAN-介绍"><a href="#1-GAN-介绍" class="headerlink" title="1. GAN 介绍"></a>1. GAN 介绍</h3><p>生成式对抗网络</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/4-gan/0.png"></p><p>GAN的基本原理其实非常简单，这里以生成图片为例进行说明。假设我们有两个网络，G（Generator）和D（Discriminator）。正如它的名字所暗示的那样，它们的功能分别是：</p><ul><li>G是一个生成图片的网络，它接收一个随机的噪声z，通过这个噪声生成图片，记做G(z)。</li><li>D是一个判别网络，判别一张图片是不是“真实的”。它的输入参数是x，x代表一张图片，输出D（x）代表x为真实图片的概率，如果为1，就代表100%是真实的图片，而输出为0，就代表不可能是真实的图片。</li></ul><p>在训练过程中，<strong>生成网络G的目标就是尽量生成真实的图片去欺骗判别网络D。而D的目标就是尽量把G生成的图片和真实的图片分别开来。</strong>这样，G和D构成了一个动态的“博弈过程”。</p><p>最后博弈的结果是什么？<strong>在最理想的状态下，</strong>G可以生成足以“以假乱真”的图片G(z)。对于D来说，它难以判定G生成的图片究竟是不是真实的，因此D(G(z)) = 0.5。</p><p>公式</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/4-gan/1.jpg"></p><p>简单分析一下这个公式：</p><ul><li>整个式子由两项构成。x表示真实图片，z表示输入G网络的噪声，而G(z)表示G网络生成的图片。</li><li>D(x)表示D网络判断<strong>真实图片是否真实</strong>的概率（因为x就是真实的，所以对于D来说，这个值越接近1越好）。而D(G(z))是<strong>D网络判断G生成的图片的是否真实的概率。</strong></li><li>G的目的：上面提到过，D(G(z))是<strong>D网络判断G生成的图片是否真实的概率</strong>，G应该希望自己生成的图片“越接近真实越好”。也就是说，G希望D(G(z))尽可能得大，这时V(D, G)会变小。因此我们看到式子的最前面的记号是min_G。</li><li>D的目的：D的能力越强，D(x)应该越大，D(G(x))应该越小。这时V(D,G)会变大。因此式子对于D来说是求最大(max_D)</li></ul><p>下面这幅图片很好地描述了这个过程：</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/4-gan/2.jpg"></p><h3 id="2-GAN-问题"><a href="#2-GAN-问题" class="headerlink" title="2. GAN 问题"></a>2. GAN 问题</h3><p>·不收敛（non-convergence）的问题</p><p>·难以训练</p><p>   梯度消失（gradient vanishing）</p><p>   崩溃问题（mode collapse）</p><p>·模型过于自由不可控</p><h3 id="3-CGAN"><a href="#3-CGAN" class="headerlink" title="3. CGAN"></a>3. CGAN</h3><p>CGAN（条件生成对抗网络）</p><p>针对问题：模型过于自由不可控。</p><p>方法：输入更多信息到GAN模型学习，生成更好的样本。</p><p>效果：提高生成图像的质量，明确控制图像的某些方面。</p><h3 id="4-DCGAN原理介绍"><a href="#4-DCGAN原理介绍" class="headerlink" title="4. DCGAN原理介绍"></a>4. DCGAN原理介绍</h3><p>结合了有监督学习的CNN和无监督的GAN</p><p>针对问题：GAN训练不稳定，经常生成无意义的输出。</p><p>方法：生成模型和判别模型均采用CNN模型，并在结构上做了一些改变。</p><p>我们知道深度学习中对图像处理应用最好的模型是CNN，那么如何把CNN与GAN结合？DCGAN是这方面最好的尝试之一（论文地址：[<a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1511.06434">1511.06434] Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks</a>）</p><p>DCGAN的原理和GAN是一样的，这里就不在赘述。它只是把上述的G和D换成了两个卷积神经网络（CNN）。但不是直接换就可以了，DCGAN对卷积神经网络的结构做了一些改变，以提高样本的质量和收敛的速度，这些改变有：</p><ul><li>取消所有pooling层。G网络中使用转置卷积（transposed convolutional layer）进行上采样，D网络中用加入stride的卷积代替pooling。</li><li>在D和G中均使用batch normalization</li><li>去掉FC层，使网络变为全卷积网络</li><li>G网络中使用ReLU作为激活函数，最后一层使用tanh</li><li>D网络中使用LeakyReLU作为激活函数</li></ul><p>DCGAN中的G网络示意：</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/4-gan/3.png"></p><h3 id="5-WGAN-Wasserstein-GAN"><a href="#5-WGAN-Wasserstein-GAN" class="headerlink" title="5. WGAN Wasserstein GAN"></a>5. WGAN Wasserstein GAN</h3><h4 id="5-1-原始GAN训练困难的分析"><a href="#5-1-原始GAN训练困难的分析" class="headerlink" title="5.1 原始GAN训练困难的分析"></a>5.1 原始GAN训练困难的分析</h4><p>1）训练目标：</p><p>x表示真实图片，z表示输入G网络的噪声，而G(z)表示G网络生成的图片。</p><p>判别器LOSS（最小化）：</p><p>生成器LOSS（最小化）：</p><p>2）训练过程：</p><p>· 先固定生成器，训练判别器达到最优，然后训练生成器。</p><p>· 利用SGD训练判别器达到最优解为：</p><p>训练生成器（在判别器最优时）：最终变换形式：即最小化Pr和Pg之间的JS散度。由于P_r与P_g几乎不可能有不可忽略的重叠，所以无论它们相距多远JS散度都是常数log 2，最终导致生成器的梯度（近似）为0，梯度消失。</p><p>最小化目标分析：u最小化生成分布与真实分布的KL散度，却又要最大化两者的JS散度，在数值上则会导致梯度不稳定。uKL散度会造成两种错误：生成器没能生成真实样本（缺乏多样性），生成器生成不真实样本（缺乏准确性）</p><p>小结：<strong>在原始GAN的（近似）最优判别器下，第一种生成器loss面临梯度消失问题，第二种生成器loss面临优化目标荒谬、梯度不稳定、对多样性与准确性惩罚不平衡导致mode collapse这几个问题。</strong></p><h4 id="5-2-WGAN的贡献"><a href="#5-2-WGAN的贡献" class="headerlink" title="5.2 WGAN的贡献"></a>5.2 WGAN的贡献</h4><p>Wasserstein距离：（EM距离）相比KL散度、JS散度的优越性：即便两个分布没有重叠，Wasserstein距离仍能反映它们的远近。KL散度和JS散度是突变的，Wasserstein距离却是平滑的，可以提供有意义的梯度。</p><p>EM距离相对KL散度与JS散度具有优越的平滑特性，理论上可以解决梯度消失问题。在此近似最优判别器下优化生成器使得Wasserstein距离缩小，就能有效拉近生成分布与真实分布。WGAN既解决了训练不稳定的问题，也提供了一个可靠的训练进程指标，而且该指标确实与生成样本的质量高度相关。</p><h3 id="6-原生GAN实战例子"><a href="#6-原生GAN实战例子" class="headerlink" title="6. 原生GAN实战例子"></a>6. 原生GAN实战例子</h3><p>生成鉴别高斯混合模型数据，此处不是图片数据</p><p>真实x为高斯点数据</p><p>假数据经过G生成X</p><p>原生GAN问题：由于 x真实数据与 X假数据不重叠，训练不起来，D loss一直为0，G loss一直为-1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span>  torch<span class="token keyword">from</span>    torch <span class="token keyword">import</span> nn<span class="token punctuation">,</span> optim<span class="token punctuation">,</span> autograd<span class="token keyword">import</span>  numpy <span class="token keyword">as</span> np<span class="token keyword">import</span>  visdom<span class="token keyword">import</span>  randomtorch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token comment"># 1、定义参数</span>h_dim <span class="token operator">=</span> <span class="token number">400</span>batchsz <span class="token operator">=</span> <span class="token number">512</span>viz <span class="token operator">=</span> visdom<span class="token punctuation">.</span>Visdom<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 可视化</span><span class="token comment"># 2、生成数据集</span><span class="token comment"># 已知的8个gaussian mixture models</span><span class="token keyword">def</span> <span class="token function">data_generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    scale <span class="token operator">=</span> <span class="token number">2.</span>    centers <span class="token operator">=</span> <span class="token punctuation">[</span>                             <span class="token comment"># 8个gaussian mixture models</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>    centers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>scale <span class="token operator">*</span> x<span class="token punctuation">,</span> scale <span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> centers<span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        dataset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>batchsz<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 生成一个batch的数据集</span>            point <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">.02</span>     <span class="token comment"># 生成一个点</span>            center <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>centers<span class="token punctuation">)</span>            point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> center<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>               <span class="token comment"># 点符合为8个分布中的一个</span>            point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> center<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            dataset<span class="token punctuation">.</span>append<span class="token punctuation">(</span>point<span class="token punctuation">)</span>               <span class="token comment"># 点加入数据集</span>        dataset <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>   <span class="token comment"># 转换类型</span>        dataset <span class="token operator">/=</span> <span class="token number">1.414</span>  <span class="token comment"># stdev</span>        <span class="token keyword">yield</span> dataset<span class="token comment"># 3、生成器模型</span><span class="token keyword">class</span> <span class="token class-name">Generator</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Generator<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># z:[b,2] =&gt; [b,2]   gan的z输入 输出为x 此处不为图片 为（x1,x2）坐标</span>        self<span class="token punctuation">.</span>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> h_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>h_dim<span class="token punctuation">,</span> h_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>h_dim<span class="token punctuation">,</span> h_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>h_dim<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>net<span class="token punctuation">(</span>z<span class="token punctuation">)</span>        <span class="token keyword">return</span> output<span class="token comment"># 4、鉴别器模型</span><span class="token keyword">class</span> <span class="token class-name">Discriminator</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Discriminator<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> h_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>h_dim<span class="token punctuation">,</span> h_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>h_dim<span class="token punctuation">,</span> h_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>h_dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> output<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 5、主函数 训练模型</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 测试生成的真实数据</span>    data_iter <span class="token operator">=</span> data_generator<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'batch:'</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token punctuation">(</span>data_iter<span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment"># 实例化网络结构</span>    G <span class="token operator">=</span> Generator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    D <span class="token operator">=</span> Discriminator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 定义优化器</span>    optim_G <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>G<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e-3</span><span class="token punctuation">,</span> betas<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 经验参数 betas=(0.5, 0.9)</span>    optim_D <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>D<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e-3</span><span class="token punctuation">,</span> betas<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 可视化 划线</span>    viz<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> win<span class="token operator">=</span><span class="token string">'loss'</span><span class="token punctuation">,</span> opts<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'loss'</span><span class="token punctuation">,</span>legend<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 可视化 2个曲线</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 1. train discriminator for k steps  训练discriminator K次</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>data_iter<span class="token punctuation">)</span>                 <span class="token comment"># 训练真实数据</span>            xr <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># [b，2] =》 [b,1]   二维的点数据，输出鉴别的结果</span>            predr <span class="token operator">=</span> <span class="token punctuation">(</span>D<span class="token punctuation">(</span>xr<span class="token punctuation">)</span><span class="token punctuation">)</span>            lossr <span class="token operator">=</span> <span class="token operator">-</span> <span class="token punctuation">(</span>predr<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 最大化 max log(lossr)  由于随机梯度下降 加-号</span>            <span class="token comment"># [b, 2]</span>            z <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>batchsz<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 生成的假数据</span>            xf <span class="token operator">=</span> G<span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 由于之训练discriminator 但把Generator也加进来了，所以要.detach() 类似stop gradient 不计算梯度</span>            predf <span class="token operator">=</span> <span class="token punctuation">(</span>D<span class="token punctuation">(</span>xf<span class="token punctuation">)</span><span class="token punctuation">)</span>            lossf <span class="token operator">=</span> <span class="token punctuation">(</span>predf<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 最小化 min predf</span>            loss_D <span class="token operator">=</span> lossr <span class="token operator">+</span> lossf            optim_D<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            loss_D<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            optim_D<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 2. train Generator               # 训练Generator 1次</span>        z <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>batchsz<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 生成假数据</span>        xf <span class="token operator">=</span> G<span class="token punctuation">(</span>z<span class="token punctuation">)</span>        predf <span class="token operator">=</span> D<span class="token punctuation">(</span>xf<span class="token punctuation">)</span>                       <span class="token comment"># 由于是向后传，此处不能加.detach()</span>        loss_G <span class="token operator">=</span> <span class="token operator">-</span> <span class="token punctuation">(</span>predf<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment"># max predf</span>        optim_G<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss_G<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optim_G<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment"># 可视化曲线</span>            viz<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>loss_D<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loss_G<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>epoch<span class="token punctuation">]</span><span class="token punctuation">,</span> win<span class="token operator">=</span><span class="token string">'loss'</span><span class="token punctuation">,</span> update<span class="token operator">=</span><span class="token string">'append'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>loss_D<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loss_G<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-WGAN实战例子"><a href="#7-WGAN实战例子" class="headerlink" title="7. WGAN实战例子"></a>7. WGAN实战例子</h3><p>生成鉴别高斯混合模型数据，此处不是图片数据</p><p>真实x为高斯点数据</p><p>假数据经过G生成</p><p>原生GAN问题：由于 x真实数据与 X假数据不重叠，训练不起来，D loss一直为0，G loss一直为-1</p><p>解决用WGAN</p><p>1、加入惩罚项 gradient_penalty   loss_D = lossr + lossf + gp</p><p>2、初始化参数 D G 参数  可不加</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/4-gan/4.png"></p><h4 id="7-1-设置X帽"><a href="#7-1-设置X帽" class="headerlink" title="7.1 设置X帽"></a>7.1 设置X帽</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/4-gan/5.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">alpha <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>batchsz<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 生成数据 </span>alpha <span class="token operator">=</span> alpha<span class="token punctuation">.</span>expand_as<span class="token punctuation">(</span>xr<span class="token punctuation">)</span>             <span class="token comment"># 扩展成类似 xr的维度</span>interpolates <span class="token operator">=</span> alpha <span class="token operator">*</span> xr <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> alpha<span class="token punctuation">)</span> <span class="token operator">*</span> xf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-2-求gp"><a href="#7-2-求gp" class="headerlink" title="7.2 求gp"></a>7.2 求gp</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/4-gan/6.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">interpolates<span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment"># 设置为有导数信息</span>disc_interpolates <span class="token operator">=</span> D<span class="token punctuation">(</span>interpolates<span class="token punctuation">)</span><span class="token comment"># create_graph 二阶求导设置 retain_graph 图需要backword需要</span>gradients <span class="token operator">=</span> autograd<span class="token punctuation">.</span>grad<span class="token punctuation">(</span>outputs<span class="token operator">=</span>disc_interpolates<span class="token punctuation">,</span> inputs<span class="token operator">=</span>interpolates<span class="token punctuation">,</span>                          grad_outputs<span class="token operator">=</span>torch<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>disc_interpolates<span class="token punctuation">)</span><span class="token punctuation">,</span>                          create_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> only_inputs<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 总的线性插值求和</span>gp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>gradients<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> LAMBDA  <span class="token comment"># 求2范数，-1 平方 求均值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-3-代码"><a href="#7-3-代码" class="headerlink" title="7.3 代码"></a>7.3 代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''WGAN生成鉴别高斯混合模型数据，此处不是图片数据真实x为高斯点数据假数据经过G生成X‘原生GAN问题1、由于 x真实数据与 X假数据不重叠，训练不起来，D loss一直为0，G loss一直为-1解决用WGAN1、加入惩罚项 gradient_penalty   loss_D = lossr + lossf + gp2、初始化参数 D G 参数  可不加'''</span><span class="token keyword">import</span>  torch<span class="token keyword">from</span>    torch <span class="token keyword">import</span> nn<span class="token punctuation">,</span> optim<span class="token punctuation">,</span> autograd<span class="token keyword">import</span>  numpy <span class="token keyword">as</span> np<span class="token keyword">import</span>  visdom<span class="token keyword">import</span>  randomtorch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token comment"># 1、定义参数</span>h_dim <span class="token operator">=</span> <span class="token number">400</span>batchsz <span class="token operator">=</span> <span class="token number">512</span>viz <span class="token operator">=</span> visdom<span class="token punctuation">.</span>Visdom<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 可视化</span><span class="token comment"># 2、生成数据集</span><span class="token comment"># 已知的8个gaussian mixture models</span><span class="token keyword">def</span> <span class="token function">data_generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    scale <span class="token operator">=</span> <span class="token number">2.</span>    centers <span class="token operator">=</span> <span class="token punctuation">[</span>                             <span class="token comment"># 8个gaussian mixture models</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>    centers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>scale <span class="token operator">*</span> x<span class="token punctuation">,</span> scale <span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> centers<span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        dataset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>batchsz<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 生成一个batch的数据集</span>            point <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">.02</span>     <span class="token comment"># 生成一个点</span>            center <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>centers<span class="token punctuation">)</span>            point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> center<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>               <span class="token comment"># 点符合为8个分布中的一个</span>            point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> center<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            dataset<span class="token punctuation">.</span>append<span class="token punctuation">(</span>point<span class="token punctuation">)</span>               <span class="token comment"># 点加入数据集</span>        dataset <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>   <span class="token comment"># 转换类型</span>        dataset <span class="token operator">/=</span> <span class="token number">1.414</span>  <span class="token comment"># stdev</span>        <span class="token keyword">yield</span> dataset<span class="token comment"># 3、生成器模型</span><span class="token keyword">class</span> <span class="token class-name">Generator</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Generator<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># z:[b,2] =&gt; [b,2]   gan的z输入 输出为x 此处不为图片 为（x1,x2）坐标</span>        self<span class="token punctuation">.</span>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> h_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>h_dim<span class="token punctuation">,</span> h_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>h_dim<span class="token punctuation">,</span> h_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>h_dim<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>net<span class="token punctuation">(</span>z<span class="token punctuation">)</span>        <span class="token keyword">return</span> output<span class="token comment"># 4、鉴别器模型</span><span class="token keyword">class</span> <span class="token class-name">Discriminator</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Discriminator<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> h_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>h_dim<span class="token punctuation">,</span> h_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>h_dim<span class="token punctuation">,</span> h_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>h_dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> output<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 5、WGAN的 GP惩罚项设置</span><span class="token keyword">def</span> <span class="token function">gradient_penalty</span><span class="token punctuation">(</span>D<span class="token punctuation">,</span> xr<span class="token punctuation">,</span> xf<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param D:    :param xr: [b,2]    :param xf: [b,2]    :return: gp    """</span>    LAMBDA <span class="token operator">=</span> <span class="token number">0.3</span>    <span class="token comment"># only constrait for Discriminator</span>    xf <span class="token operator">=</span> xf<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 不需要对G求导</span>    xr <span class="token operator">=</span> xr<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># [b, 1] =&gt; [b, 2]</span>    alpha <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>batchsz<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 生成数据</span>    alpha <span class="token operator">=</span> alpha<span class="token punctuation">.</span>expand_as<span class="token punctuation">(</span>xr<span class="token punctuation">)</span>             <span class="token comment"># 扩展成类似 xr的维度</span>    interpolates <span class="token operator">=</span> alpha <span class="token operator">*</span> xr <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> alpha<span class="token punctuation">)</span> <span class="token operator">*</span> xf<span class="token punctuation">)</span>    interpolates<span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment"># 设置为有导数信息</span>    disc_interpolates <span class="token operator">=</span> D<span class="token punctuation">(</span>interpolates<span class="token punctuation">)</span>    <span class="token comment"># create_graph 二阶求导设置 retain_graph 图需要backword需要</span>    gradients <span class="token operator">=</span> autograd<span class="token punctuation">.</span>grad<span class="token punctuation">(</span>outputs<span class="token operator">=</span>disc_interpolates<span class="token punctuation">,</span> inputs<span class="token operator">=</span>interpolates<span class="token punctuation">,</span>                              grad_outputs<span class="token operator">=</span>torch<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>disc_interpolates<span class="token punctuation">)</span><span class="token punctuation">,</span>                              create_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> retain_graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> only_inputs<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment"># 总的线性插值求和</span>    gp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>gradients<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> LAMBDA    <span class="token comment"># 求2范数，-1 平方 求均值</span>    <span class="token keyword">return</span> gp<span class="token comment"># 6、初始化参数 D G 参数</span><span class="token keyword">def</span> <span class="token function">weights_init</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># m.weight.data.normal_(0.0, 0.02)</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>        m<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fill_<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 7、训练主函数</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 1、测试生成的真实数据</span>    data_iter <span class="token operator">=</span> data_generator<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'batch:'</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token punctuation">(</span>data_iter<span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment"># 2、实例化网络结构</span>    G <span class="token operator">=</span> Generator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    D <span class="token operator">=</span> Discriminator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    G<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>weights_init<span class="token punctuation">)</span>    D<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>weights_init<span class="token punctuation">)</span>    <span class="token comment"># 3、定义优化器</span>    optim_G <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>G<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e-3</span><span class="token punctuation">,</span> betas<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 经验参数 betas=(0.5, 0.9)</span>    optim_D <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>D<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e-3</span><span class="token punctuation">,</span> betas<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 4、可视化 loss 结果</span>    viz<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> win<span class="token operator">=</span><span class="token string">'loss'</span><span class="token punctuation">,</span> opts<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'loss'</span><span class="token punctuation">,</span>legend<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 可视化 2个曲线</span>    <span class="token comment"># 5、训练 epoch</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 1. 训练discriminator K次</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>data_iter<span class="token punctuation">)</span>                 <span class="token comment"># 训练真实数据</span>            xr <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 1、输出鉴别结果 [b，2] =》 [b,1]   二维的点数据，输出鉴别的结果</span>            predr <span class="token operator">=</span> <span class="token punctuation">(</span>D<span class="token punctuation">(</span>xr<span class="token punctuation">)</span><span class="token punctuation">)</span>            lossr <span class="token operator">=</span> <span class="token operator">-</span> <span class="token punctuation">(</span>predr<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 最大化 max log(lossr)  由于随机梯度下降 加-号</span>            <span class="token comment"># 2、G的结果 [b, 2]</span>            z <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>batchsz<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 生成的假数据</span>            xf <span class="token operator">=</span> G<span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 由于之训练discriminator 但把Generator也加进来了，所以要.detach() 类似stop gradient 不计算梯度</span>            predf <span class="token operator">=</span> <span class="token punctuation">(</span>D<span class="token punctuation">(</span>xf<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 3、损失函数设置</span>            lossf <span class="token operator">=</span> <span class="token punctuation">(</span>predf<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 最小化 min predf</span>            <span class="token comment"># gradient penalty      加入惩罚项</span>            gp <span class="token operator">=</span> gradient_penalty<span class="token punctuation">(</span>D<span class="token punctuation">,</span> xr<span class="token punctuation">,</span> xf<span class="token punctuation">)</span>            loss_D <span class="token operator">=</span> lossr <span class="token operator">+</span> lossf <span class="token operator">+</span> gp            <span class="token comment"># 4、优化设置</span>            optim_D<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            loss_D<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># for p in D.parameters():</span>            <span class="token comment">#     print(p.grad.norm())</span>            optim_D<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 2. 训练Generator 1次</span>        z <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>batchsz<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 生成假数据</span>        xf <span class="token operator">=</span> G<span class="token punctuation">(</span>z<span class="token punctuation">)</span>        predf <span class="token operator">=</span> D<span class="token punctuation">(</span>xf<span class="token punctuation">)</span>                       <span class="token comment"># 由于是向后传，此处不能加.detach()</span>        loss_G <span class="token operator">=</span> <span class="token operator">-</span> <span class="token punctuation">(</span>predf<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment"># max predf</span>        optim_G<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss_G<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optim_G<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 3. 每100次循环 可视化，打印结果一次</span>        <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment"># 可视化曲线</span>            viz<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>loss_D<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loss_G<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>epoch<span class="token punctuation">]</span><span class="token punctuation">,</span> win<span class="token operator">=</span><span class="token string">'loss'</span><span class="token punctuation">,</span> update<span class="token operator">=</span><span class="token string">'append'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>loss_D<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loss_G<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/4-gan/7.png"></p>]]></content>
      
      
      <categories>
          
          <category> PyTorch 基本网络结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> pytorch 基本网络结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-LSTM</title>
      <link href="/2023/03/09/pytorch-ji-ben-wang-luo/3-lstm/"/>
      <url>/2023/03/09/pytorch-ji-ben-wang-luo/3-lstm/</url>
      
        <content type="html"><![CDATA[<h3 id="1-LSTM简介"><a href="#1-LSTM简介" class="headerlink" title="1.LSTM简介"></a>1.LSTM简介</h3><p>长短期记忆网络 LSTM（long short-term memory）</p><p>短时记忆：RNN 会受到短时记忆的影响。如果一条序列足够长，那它们将很难将信息从较早的时间步传送到后面的时间步。 因此，如果你正在尝试处理一段文本进行预测，RNN 可能从一开始就会遗漏重要信息。</p><p>在反向传播期间，RNN 会面临梯度消失的问题。 梯度是用于更新神经网络的权重值，消失的梯度问题是当梯度随着时间的推移传播时梯度下降，如果梯度值变得非常小，就不会继续学习。</p><p>因此，在递归神经网络中，获得小梯度更新的层会停止学习—— 那些通常是较早的层。 由于这些层不学习，RNN 可以忘记它在较长序列中看到的内容，因此具有短时记忆。</p><p>作为解决方案的 LSTM 和 GRU</p><p>LSTM 和 GRU 是解决短时记忆问题的解决方案，它们具有称为“门”的内部机制，可以调节信息流。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/3-lstm/1.png"></p><p>这些“门”可以知道序列中哪些重要的数据是需要保留，而哪些是要删除的。 随后，它可以沿着长链序列传递相关信息以进行预测，几乎所有基于递归神经网络的技术成果都是通过这两个网络实现的。</p><p>LSTM 和 GRU 可以在语音识别、语音合成和文本生成中找到，你甚至可以用它们为视频生成字幕。对 LSTM 和 GRU 擅长处理长序列的原因</p><h3 id="2-LSTM结构"><a href="#2-LSTM结构" class="headerlink" title="2.LSTM结构"></a>2.LSTM结构</h3><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/3-lstm/2.png"></p><p>LSTM 的控制流程与 RNN 相似，它们都是在前向传播的过程中处理流经细胞的数据，不同之处在于 LSTM 中细胞的结构和运算有所变化</p><h4 id="2-1-Sigmoid"><a href="#2-1-Sigmoid" class="headerlink" title="2.1 Sigmoid"></a>2.1 Sigmoid</h4><p>门结构中包含着 sigmoid 激活函数。Sigmoid 激活函数与 tanh 函数类似，不同之处在于 sigmoid 是把值压缩到 0<del>1 之间而不是 -1</del>1 之间。这样的设置有助于更新或忘记信息，因为任何数乘以 0 都得 0，这部分信息就会剔除掉。同样的，任何数乘以 1 都得到它本身，这部分信息就会完美地保存下来。这样网络就能了解哪些数据是需要遗忘，哪些数据是需要保存。</p><h4 id="2-2-遗忘门"><a href="#2-2-遗忘门" class="headerlink" title="2.2 遗忘门"></a>2.2 遗忘门</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/3-lstm/3.gif"></p><p>遗忘门的功能是决定应丢弃或保留哪些信息。来自前一个隐藏状态的信息和当前输入的信息同时传递到 sigmoid 函数中去，输出值介于 0 和 1 之间，越接近 0 意味着越应该丢弃，越接近 1 意味着越应该保留。</p><h4 id="2-3-输入门"><a href="#2-3-输入门" class="headerlink" title="2.3 输入门"></a>2.3 输入门</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/3-lstm/4.gif"></p><p>输入门用于更新细胞状态。首先将前一层隐藏状态的信息和当前输入的信息传递到 sigmoid 函数中去。将值调整到 0~1 之间来决定要更新哪些信息。0 表示不重要，1 表示重要。其次还要将前一层隐藏状态的信息和当前输入的信息传递到 tanh 函数中去，创造一个新的侯选值向量。最后将 sigmoid 的输出值与 tanh 的输出值相乘，sigmoid 的输出值将决定 tanh 的输出值中哪些信息是重要且需要保留下来的</p><h4 id="2-4-细胞状态"><a href="#2-4-细胞状态" class="headerlink" title="2.4 细胞状态"></a>2.4 细胞状态</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/3-lstm/5.gif"></p><p>前一层的细胞状态与遗忘向量<strong>逐点相乘</strong>。如果它乘以接近 0 的值，意味着在新的细胞状态中，这些信息是需要丢弃掉的。然后再将该值与输入门的输出值<strong>逐点相加</strong>，将神经网络发现的新信息更新到细胞状态中去。至此，就得到了更新后的细胞状态</p><h4 id="2-5-输出门"><a href="#2-5-输出门" class="headerlink" title="2.5 输出门"></a>2.5 输出门</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/3-lstm/6.gif"></p><p>输出门用来确定下一个隐藏状态的值，隐藏状态包含了先前输入的信息。首先，我们将前一个隐藏状态和当前输入传递到 sigmoid 函数中，然后将新得到的细胞状态传递给 tanh 函数。最后将 tanh 的输出与 sigmoid 的输出相乘，以确定隐藏状态应携带的信息。再将隐藏状态作为当前细胞的输出，把新的细胞状态和新的隐藏状态传递到下一个时间步长中去</p><h3 id="3-LSTM调用"><a href="#3-LSTM调用" class="headerlink" title="3.LSTM调用"></a>3.LSTM调用</h3><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/3-lstm/7.png"></p><h4 id="3-1-方式一"><a href="#3-1-方式一" class="headerlink" title="3.1 方式一"></a>3.1 方式一</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/3-lstm/8.png"></p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/3-lstm/9.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方式一调用nn.LSTM</span><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nnlstm <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> num_layers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token comment"># 输入x的编码维度   h，c的维度  层数</span><span class="token keyword">print</span><span class="token punctuation">(</span>lstm<span class="token punctuation">)</span>                     <span class="token comment"># LSTM(100, 20, num_layers=4)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>     <span class="token comment"># 10个单词，3个句子，100维的向量</span>out<span class="token punctuation">,</span> <span class="token punctuation">(</span>h<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">=</span> lstm<span class="token punctuation">(</span>x<span class="token punctuation">)</span>           <span class="token comment"># 输入的h0，c0默认，</span><span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>                <span class="token comment"># torch.Size([10, 3, 20])  最后一时刻所有的h c的集合</span><span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>                  <span class="token comment"># torch.Size([4, 3, 20])    最后一时刻最后一个ht的数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>                  <span class="token comment"># torch.Size([4, 3, 20])    最后一时刻最后一个ct的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-方式二"><a href="#3-2-方式二" class="headerlink" title="3.2 方式二"></a>3.2 方式二</h4><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/3-lstm/10.png"></p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/3-lstm/11.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方式二调用</span><span class="token comment"># 单层的单cell</span>cell <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTMCell<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>   h <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>c <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>     <span class="token comment"># 10个单词，3个句子，100维的向量</span><span class="token keyword">for</span> xt <span class="token keyword">in</span> x<span class="token punctuation">:</span>                    <span class="token comment"># 循环10次</span>    h<span class="token punctuation">,</span> c <span class="token operator">=</span> cell<span class="token punctuation">(</span>xt<span class="token punctuation">,</span> <span class="token punctuation">[</span>h<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> c<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>   <span class="token comment"># torch.Size([3, 20]) torch.Size([3, 20])  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 双层的cell</span>cell1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTMCell<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>cell2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTMCell<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>   <span class="token comment"># 为第一层的h的维度</span>h1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>h2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>c1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>c2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>     <span class="token comment"># 10个单词，3个句子，100维的向量</span><span class="token keyword">for</span> xt <span class="token keyword">in</span> x<span class="token punctuation">:</span>                    <span class="token comment"># 循环10次</span>    h1<span class="token punctuation">,</span> c1 <span class="token operator">=</span> cell1<span class="token punctuation">(</span>xt<span class="token punctuation">,</span> <span class="token punctuation">[</span>h1<span class="token punctuation">,</span> c1<span class="token punctuation">]</span><span class="token punctuation">)</span>    h2<span class="token punctuation">,</span> c2 <span class="token operator">=</span> cell2<span class="token punctuation">(</span>h1<span class="token punctuation">,</span> <span class="token punctuation">[</span>h2<span class="token punctuation">,</span> c2<span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment"># 为第一层输出的h的维度</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>h2<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> c2<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>   <span class="token comment"># torch.Size([3, 20]) torch.Size([3, 20])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PyTorch 基本网络结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> pytorch 基本网络结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-RNN</title>
      <link href="/2023/03/09/pytorch-ji-ben-wang-luo/2-rnn/"/>
      <url>/2023/03/09/pytorch-ji-ben-wang-luo/2-rnn/</url>
      
        <content type="html"><![CDATA[<h3 id="1-RNN-循环神经网络-介绍"><a href="#1-RNN-循环神经网络-介绍" class="headerlink" title="1.RNN 循环神经网络 介绍"></a>1.RNN 循环神经网络 介绍</h3><p>循环神经网络（Recurrent Neural Network，RNN）是一类具有短期记忆能力的神经网络。在循环神经网络中，神经元不但可以接受其它神经元的信息，也可以接受自身的信息，形成具有环路的网络结构。和前馈神经网络相比，循环神经网络更加符合生物神经网络的结构。循环神经网络已经被广泛应用在语音识别、语言模型以及自然语言生成等任务上。循环神经网络的参数学习可以通过随时间反向传播算法(BPTT)[Werbos, 1990]来学习。随时间反向传播算法即按照时间的逆 序将错误信息一步步地往前传递。当输入序列比较长时，会存在梯度爆炸和消失问题,也称为长程依赖问题</p><h3 id="2-循环神经网络结构"><a href="#2-循环神经网络结构" class="headerlink" title="2.循环神经网络结构"></a>2.循环神经网络结构</h3><p>RNN的目的使用来处理序列数据。在传统的神经网络模型中，是从输入层到隐含层再到输出层，层与层之间是全连接的，每层之间的节点是无连接的。但是这种普通的神经网络对于很多问题却无能无力。例如，你要预测句子的下一个单词是什么，一般需要用到前面的单词，因为一个句子中前后单词并不是独立的。RNN之所以称为循环神经网路，即一个序列当前的输出与前面的输出也有关。具体的表现形式为网络会对前面的信息进行记忆并应用于当前输出的计算中，即隐藏层之间的节点不再无连接而是有连接的，并且隐藏层的输入不仅包括输入层的输出还包括上一时刻隐藏层的输出。理论上，RNN能够对任何长度的序列数据进行处理。但是在实践中，为了降低复杂性往往假设当前的状态只与前面的几个状态相关，模型结构如下：</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/2-rnn/1.png"></p><p>如果把上面有W的那个带箭头的圈去掉，它就变成了最普通的全连接神经网络。</p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/2-rnn/2.png"></p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/2-rnn/3.png"></p><h3 id="3-RNN特点"><a href="#3-RNN特点" class="headerlink" title="3.RNN特点"></a>3.RNN特点</h3><p>RNN的特点本来就是能“追根溯源“利用历史数据，现在告诉我可利用的历史数据竟然是有限的，这就令人非常难受，解决“梯度消失“是非常必要的。这里说两种改善“梯度消失”的方法：</p><p>1、选取更好的激活函数<br>2、改变传播结构</p><p>一般选用ReLU函数作为激活函数，ReLU函数的图像为：</p><p>ReLU函数的左侧导数为0，右侧导数恒为1，这就避免了小数的连乘，但反向传播中仍有权值的累乘，所以说ReLU函数不能说完全解决了“梯度消失”现象，只能说改善。有研究表明，在RNN中使用ReLU函数配合将权值初始化到单位矩阵附近，可以达到接近LSTM网络的效果。但恒为1的导数容易导致“梯度爆炸“，但设定合适的阈值可以解决这个问题。还有一点就是如果左侧横为0的导数有可能导致把神经元学死，不过设置合适的步长（学习率）也可以有效避免这个问题的发生。</p><p>关于第二点，LSTM结构就是传统RNN的改善。</p><h3 id="4-梯度消失解决方法："><a href="#4-梯度消失解决方法：" class="headerlink" title="4.梯度消失解决方法："></a>4.梯度消失解决方法：</h3><p>1.合理的初始化权重值。初始化权重，使每个神经元尽可能不要取极大或极小值，以躲开梯度消失的区域。<br>2.使用relu代替sigmoid和tanh作为激活函数。<br>3.使用其他结构的RNNs，比如长短时记忆网络（LTSM）和Gated Recurrent Unit（GRU），这是最流行的做法。</p><h3 id="5-RNN参数"><a href="#5-RNN参数" class="headerlink" title="5.RNN参数"></a>5.RNN参数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 词向量 [10,3,100] 10个单词 3句话 100维向量</span><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token comment"># RNN的参数</span><span class="token comment"># word是100维的向量 10的memory num_layers默认1</span>rnn <span class="token operator">=</span> nn<span class="token punctuation">.</span>RNN<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> num_layers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rnn<span class="token punctuation">.</span>_parameters<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># odict_keys(['weight_ih_l0', 'weight_hh_l0', 'bias_ih_l0', 'bias_hh_l0'])</span><span class="token keyword">print</span><span class="token punctuation">(</span>rnn<span class="token punctuation">.</span>weight_hh_l0<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment"># torch.Size([10, 10])</span><span class="token keyword">print</span><span class="token punctuation">(</span>rnn<span class="token punctuation">.</span>weight_ih_l0<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment"># torch.Size([10, 100])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-单层的RNN构建"><a href="#6-单层的RNN构建" class="headerlink" title="6.单层的RNN构建"></a>6.单层的RNN构建</h3><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/2-rnn/4.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1、单层的RNN</span>rnn <span class="token operator">=</span> nn<span class="token punctuation">.</span>RNN<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> num_layers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment"># 定义输入的3句子</span><span class="token comment"># x 输入的句子  10个单词 3句话 100维向量</span><span class="token comment"># h0=torch.zeros(1,3,10) numlayers，3个句子，10的维度 不写自动初始化</span><span class="token comment"># out h最后一个时刻所有的H的聚合（h0，h1，，） （10个h 3句话 10的）</span><span class="token comment"># h h最后一个时刻，最后一个h的返回 （numlayers，3个句子，10的维度）</span>out<span class="token punctuation">,</span> h <span class="token operator">=</span> rnn<span class="token punctuation">(</span>x<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment"># torch.Size([10, 3, 10])</span><span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>      <span class="token comment"># torch.Size([1, 3, 10])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-多层RNN构建"><a href="#6-多层RNN构建" class="headerlink" title="6.多层RNN构建"></a>6.多层RNN构建</h3><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/2-rnn/5.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 2、多层的RNN</span>rnn <span class="token operator">=</span> nn<span class="token punctuation">.</span>RNN<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> num_layers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment"># 定义输入的3句子</span><span class="token comment"># x 输入的句子  10个单词 3句话 100维向量</span><span class="token comment"># h0=torch.zeros(4,3,10) numlayers，3个句子，10的维度 不写自动初始化</span><span class="token comment"># out h最后一个时刻，最后一层的所有的H的聚合（h0，h1，，） （10个h 3句话 10的）</span><span class="token comment"># h h最后一个时刻，最后一个h，所有层的返回 （numlayers，3个句子，10的维度）</span>out<span class="token punctuation">,</span> h <span class="token operator">=</span> rnn<span class="token punctuation">(</span>x<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment"># torch.Size([10, 3, 10])</span><span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>      <span class="token comment"># torch.Size([4, 3, 10])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-单次定义多次喂数据"><a href="#7-单次定义多次喂数据" class="headerlink" title="7.单次定义多次喂数据"></a>7.单次定义多次喂数据</h3><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/2-rnn/6.png"></p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/2-rnn/7.png"></p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/2-rnn/8.png"></p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/2-rnn/9.png"></p><h3 id="8-RNN预测时间序列案例"><a href="#8-RNN预测时间序列案例" class="headerlink" title="8.RNN预测时间序列案例"></a>8.RNN预测时间序列案例</h3><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/2-rnn/10.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''用RNN 预测时间序列的下一个时间段的数据形式时间序列  [battch，数据长度，数据维度]'''</span><span class="token keyword">import</span>  numpy <span class="token keyword">as</span> np<span class="token keyword">import</span>  torch<span class="token keyword">import</span>  torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span>  torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">from</span>    matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltnum_time_steps <span class="token operator">=</span> <span class="token number">50</span>    <span class="token comment"># 点的数量</span>input_size <span class="token operator">=</span> <span class="token number">1</span>          <span class="token comment"># 输入数据编码的维度1</span>hidden_size <span class="token operator">=</span> <span class="token number">16</span>        <span class="token comment"># h0 16</span>output_size <span class="token operator">=</span> <span class="token number">1</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token comment"># 定义网络</span><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 定义RNN结构</span>        self<span class="token punctuation">.</span>rnn <span class="token operator">=</span> nn<span class="token punctuation">.</span>RNN<span class="token punctuation">(</span>            input_size<span class="token operator">=</span>input_size<span class="token punctuation">,</span>              <span class="token comment"># 输入数据的维度数  1</span>            hidden_size<span class="token operator">=</span>hidden_size<span class="token punctuation">,</span>            <span class="token comment"># h的大小  10</span>            num_layers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                       <span class="token comment"># 层数  1</span>            batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                   <span class="token comment"># [battch，数据长度，数据维度] 次数据类型 要设置为 True</span>        <span class="token punctuation">)</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> self<span class="token punctuation">.</span>rnn<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>p<span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span>   <span class="token comment"># 输出层 10-》1</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> hidden_prev<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token comment"># x， h0</span>       out<span class="token punctuation">,</span> hidden_prev <span class="token operator">=</span> self<span class="token punctuation">.</span>rnn<span class="token punctuation">(</span>x<span class="token punctuation">,</span> hidden_prev<span class="token punctuation">)</span>    <span class="token comment"># [1,50,10],[b,seq,h]     [1,1,10],[b,层数，h]</span>       <span class="token comment"># [b, seq, h]</span>       out <span class="token operator">=</span> out<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>        <span class="token comment"># out打平  [b, seq, h] -》[ seq, h]</span>       out <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>out<span class="token punctuation">)</span>                 <span class="token comment"># [ seq, h] -&gt; [seq,1]</span>       out <span class="token operator">=</span> out<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>             <span class="token comment"># 出y  [1,seq,1]   y=[b,seq,1]</span>       <span class="token keyword">return</span> out<span class="token punctuation">,</span> hidden_prevmodel <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token punctuation">)</span>hidden_prev <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>   <span class="token comment"># 新建h0 [b,1,10]</span><span class="token comment"># 训练循环6000次</span><span class="token keyword">for</span> <span class="token builtin">iter</span> <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 生成数据   x,y的样本队</span>    start <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                            <span class="token comment"># 开始位置 0-3随机初始化</span>    time_steps <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>start<span class="token punctuation">,</span> start <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> num_time_steps<span class="token punctuation">)</span>        <span class="token comment"># x 到 x+10 的数据</span>    data <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>time_steps<span class="token punctuation">)</span>                                          <span class="token comment"># 生成正玄波形</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>num_time_steps<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num_time_steps <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 从0-48的数据预测 1-49的数据</span>    y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num_time_steps <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    output<span class="token punctuation">,</span> hidden_prev <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">,</span> hidden_prev<span class="token punctuation">)</span>    hidden_prev <span class="token operator">=</span> hidden_prev<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    model<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># for p in model.parameters():</span>    <span class="token comment">#     print(p.grad.norm())</span>    <span class="token comment"># torch.nn.utils.clip_grad_norm_(p, 10)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">iter</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Iteration: {} loss {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">iter</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 预测</span><span class="token comment"># 预测生成数据</span>start <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>time_steps <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>start<span class="token punctuation">,</span> start <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> num_time_steps<span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>time_steps<span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>num_time_steps<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num_time_steps <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num_time_steps <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 依据输入的一个点循环预测接下来的所有点</span>predictions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">input</span> <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>                                          <span class="token comment"># x=[1,seq,1]  [1,49,1]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                               <span class="token comment"># 输入改变维度</span>  <span class="token punctuation">(</span>pred<span class="token punctuation">,</span> hidden_prev<span class="token punctuation">)</span> <span class="token operator">=</span> model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> hidden_prev<span class="token punctuation">)</span>  <span class="token builtin">input</span> <span class="token operator">=</span> pred  predictions<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pred<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 绘制图像</span>x <span class="token operator">=</span> x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>time_steps<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>time_steps<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>time_steps<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> predictions<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-RNN-lstm-句子情感分类-案例"><a href="#9-RNN-lstm-句子情感分类-案例" class="headerlink" title="9.RNN-lstm 句子情感分类 案例"></a>9.RNN-lstm 句子情感分类 案例</h3><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/2-rnn/11.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""RNN-lstm功能：分析一个句子的情感，是pos还是neg数据集：datasets.IMDB  torchtext的数据集"""</span><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token punctuation">,</span> optim<span class="token keyword">from</span> torchtext<span class="token punctuation">.</span>legacy <span class="token keyword">import</span> data<span class="token punctuation">,</span> datasets      <span class="token comment"># 新版本 从torchtext.legacy 引入data, datasets</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> nptorch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span><span class="token punctuation">)</span><span class="token comment"># 1、取数据集</span>TEXT <span class="token operator">=</span> data<span class="token punctuation">.</span>Field<span class="token punctuation">(</span>tokenize<span class="token operator">=</span><span class="token string">'spacy'</span><span class="token punctuation">,</span> tokenizer_language<span class="token operator">=</span><span class="token string">'en_core_web_sm'</span><span class="token punctuation">)</span>      <span class="token comment"># 数据集的编码方式</span>LABEL <span class="token operator">=</span> data<span class="token punctuation">.</span>LabelField<span class="token punctuation">(</span>dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>train_data<span class="token punctuation">,</span> test_data <span class="token operator">=</span> datasets<span class="token punctuation">.</span>IMDB<span class="token punctuation">.</span>splits<span class="token punctuation">(</span>TEXT<span class="token punctuation">,</span> LABEL<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'len of train data:'</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_data<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 数据集的大小         len of train data: 25000</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'len of test data:'</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_data<span class="token punctuation">)</span><span class="token punctuation">)</span>                          <span class="token comment"># len of test data: 25000</span><span class="token keyword">print</span><span class="token punctuation">(</span>train_data<span class="token punctuation">.</span>examples<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment"># 数据15的数据                ['Like', 'one', 'of', 'the', 'pr ... ', 'fix', 'these', 'problems', '.']</span><span class="token keyword">print</span><span class="token punctuation">(</span>train_data<span class="token punctuation">.</span>examples<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span>label<span class="token punctuation">)</span>    <span class="token comment"># 数据15的属性，pos和neg       # pos</span><span class="token comment"># 2、数据变为iterator类型</span>train_iterator<span class="token punctuation">,</span> test_iterator <span class="token operator">=</span> data<span class="token punctuation">.</span>BucketIterator<span class="token punctuation">.</span>splits<span class="token punctuation">(</span><span class="token punctuation">(</span>train_data<span class="token punctuation">,</span> test_data<span class="token punctuation">)</span><span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>device<span class="token operator">=</span>device<span class="token punctuation">)</span><span class="token comment"># 3、定义RNN网络</span><span class="token keyword">class</span> <span class="token class-name">RNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> vocab_size<span class="token punctuation">,</span> embedding_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment"># 编码单词的数量，编码单词的维度100，h的维度256</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>RNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># [0-10001] =&gt; [100]</span>        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>vocab_size<span class="token punctuation">,</span> embedding_dim<span class="token punctuation">)</span>      <span class="token comment"># Embedding 表，编码单词的数量，编码单词的维度 100</span>        <span class="token comment"># [100] =&gt; [256]</span>        self<span class="token punctuation">.</span>rnn <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>embedding_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> num_layers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>   <span class="token comment"># 输入的单词的维度100 h为256 2层</span>                           bidirectional<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token comment"># [256*2] =&gt; [1]</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_dim <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                      <span class="token comment"># 2层，所以*2</span>        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># [seq, b, 1] =&gt; [seq, b, 100]                            # 多少单词 多少句话 单词维度100</span>        embedding <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># output: [seq, b, hid_dim*2]</span>        <span class="token comment"># hidden/h: [num_layers*2, b, hid_dim]                  # 双向的 *2</span>        <span class="token comment"># cell/c: [num_layers*2, b, hid_di]</span>        output<span class="token punctuation">,</span> <span class="token punctuation">(</span>hidden<span class="token punctuation">,</span> cell<span class="token punctuation">)</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>rnn<span class="token punctuation">(</span>embedding<span class="token punctuation">)</span>          <span class="token comment"># h0 c0 默认</span>        <span class="token comment"># [num_layers*2, b, hid_dim] =&gt; 2 of [b, hid_dim] =&gt; [b, hid_dim*2]</span>        hidden <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>hidden<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hidden<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># [b, hid_dim*2] =&gt; [b, 1]</span>        hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>hidden<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>hidden<span class="token punctuation">)</span>        <span class="token keyword">return</span> out<span class="token comment"># 4、数据编码方式 glove.6B.100d</span><span class="token comment"># word2vec, glove</span>TEXT<span class="token punctuation">.</span>build_vocab<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span> max_size<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span> vectors<span class="token operator">=</span><span class="token string">'glove.6B.100d'</span><span class="token punctuation">)</span>LABEL<span class="token punctuation">.</span>build_vocab<span class="token punctuation">(</span>train_data<span class="token punctuation">)</span><span class="token comment"># 5、rnn 的 embedding表 权值初始化</span>pretrained_embedding <span class="token operator">=</span> TEXT<span class="token punctuation">.</span>vocab<span class="token punctuation">.</span>vectors<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'pretrained_embedding:'</span><span class="token punctuation">,</span> pretrained_embedding<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>rnn <span class="token operator">=</span> RNN<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>TEXT<span class="token punctuation">.</span>vocab<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span>rnn<span class="token punctuation">.</span>embedding<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>copy_<span class="token punctuation">(</span>pretrained_embedding<span class="token punctuation">)</span>           <span class="token comment"># embedding 权值初始化</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'embedding layer inited.'</span><span class="token punctuation">)</span><span class="token comment"># 6、定义 优化方式，损失函数</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>rnn<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e-3</span><span class="token punctuation">)</span>criteon <span class="token operator">=</span> nn<span class="token punctuation">.</span>BCEWithLogitsLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>rnn<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment"># 7、定义准确率计算函数</span><span class="token keyword">def</span> <span class="token function">binary_acc</span><span class="token punctuation">(</span>preds<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    preds <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>preds<span class="token punctuation">)</span><span class="token punctuation">)</span>    correct <span class="token operator">=</span> torch<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    acc <span class="token operator">=</span> correct<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>correct<span class="token punctuation">)</span>    <span class="token keyword">return</span> acc<span class="token comment"># 8、定义训练函数</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>rnn<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> criteon<span class="token punctuation">)</span><span class="token punctuation">:</span>    avg_acc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    rnn<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> batch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># [seq, b] =&gt; [b, 1] =&gt; [b]</span>        pred <span class="token operator">=</span> rnn<span class="token punctuation">(</span>batch<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        loss <span class="token operator">=</span> criteon<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> batch<span class="token punctuation">.</span>label<span class="token punctuation">)</span>        acc <span class="token operator">=</span> binary_acc<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> batch<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        avg_acc<span class="token punctuation">.</span>append<span class="token punctuation">(</span>acc<span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> acc<span class="token punctuation">)</span>    avg_acc <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>avg_acc<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'avg acc:'</span><span class="token punctuation">,</span> avg_acc<span class="token punctuation">)</span><span class="token comment"># 9、定义测试函数</span><span class="token keyword">def</span> <span class="token function">eval</span><span class="token punctuation">(</span>rnn<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> criteon<span class="token punctuation">)</span><span class="token punctuation">:</span>    avg_acc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    rnn<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> batch <span class="token keyword">in</span> iterator<span class="token punctuation">:</span>            <span class="token comment"># [b, 1] =&gt; [b]</span>            pred <span class="token operator">=</span> rnn<span class="token punctuation">(</span>batch<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            loss <span class="token operator">=</span> criteon<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> batch<span class="token punctuation">.</span>label<span class="token punctuation">)</span>            acc <span class="token operator">=</span> binary_acc<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> batch<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            avg_acc<span class="token punctuation">.</span>append<span class="token punctuation">(</span>acc<span class="token punctuation">)</span>    avg_acc <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>avg_acc<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&gt;&gt;test:'</span><span class="token punctuation">,</span> avg_acc<span class="token punctuation">)</span><span class="token comment"># 10、开始训练 10次</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">eval</span><span class="token punctuation">(</span>rnn<span class="token punctuation">,</span> test_iterator<span class="token punctuation">,</span> criteon<span class="token punctuation">)</span>    train<span class="token punctuation">(</span>rnn<span class="token punctuation">,</span> train_iterator<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> criteon<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PyTorch 基本网络结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> pytorch 基本网络结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-NLP</title>
      <link href="/2023/03/09/pytorch-ji-ben-wang-luo/1-nlp/"/>
      <url>/2023/03/09/pytorch-ji-ben-wang-luo/1-nlp/</url>
      
        <content type="html"><![CDATA[<h3 id="1-NLP"><a href="#1-NLP" class="headerlink" title="1. NLP"></a>1. NLP</h3><p>word_to_vector</p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">conda install torch<span class="token operator">-</span>nlp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/1-nlp/1.png"></p><p><img src="/2023/03/09/pytorch-ji-ben-wang-luo/1-nlp/2.png"></p><h3 id="3-代码演示"><a href="#3-代码演示" class="headerlink" title="3.代码演示"></a>3.代码演示</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torchnlp <span class="token keyword">import</span> word_to_vector<span class="token comment"># 一、</span><span class="token comment"># vec1 = word_to_vector.GloVe()    # 2.18G</span><span class="token comment"># print(vec1['hello'])         # 300的特征向量</span><span class="token comment"># print(vec1['hello'].shape)</span><span class="token comment"># 二、</span>vec2 <span class="token operator">=</span> word_to_vector<span class="token punctuation">.</span>BPEmb<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 50M左右</span><span class="token keyword">print</span><span class="token punctuation">(</span>vec2<span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment"># 300的特征向量</span><span class="token keyword">print</span><span class="token punctuation">(</span>vec2<span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PyTorch 基本网络结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> pytorch 基本网络结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-0-n中缺失的数字</title>
      <link href="/2023/03/09/li-kou-shua-ti/10-0-n-zhong-que-shi-de-shu-zi/"/>
      <url>/2023/03/09/li-kou-shua-ti/10-0-n-zhong-que-shi-de-shu-zi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-0-n-1中缺失的数字"><a href="#1-0-n-1中缺失的数字" class="headerlink" title="1. 0~n-1中缺失的数字"></a>1. 0~n-1中缺失的数字</h3><p>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p><pre class="line-numbers language-none"><code class="language-none">输入: [0,1,3]输出: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        l <span class="token operator">=</span> <span class="token number">0</span>        r <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> mid<span class="token punctuation">:</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">return</span> l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-排序数组中查找数字</title>
      <link href="/2023/03/09/li-kou-shua-ti/9-pai-xu-shu-zu-zhong-cha-zhao-shu-zi/"/>
      <url>/2023/03/09/li-kou-shua-ti/9-pai-xu-shu-zu-zhong-cha-zhao-shu-zi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-在排序数组中查找数字-I"><a href="#1-在排序数组中查找数字-I" class="headerlink" title="1. 在排序数组中查找数字 I"></a>1. 在排序数组中查找数字 I</h3><p>在排序数组中查找数字 I</p><p>统计一个数字在排序数组中出现的次数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">输入<span class="token punctuation">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">8</span>输出<span class="token punctuation">:</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        l <span class="token operator">=</span> <span class="token number">0</span>        r <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                r <span class="token operator">=</span> mid        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>l <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">return</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-数组中重复数字</title>
      <link href="/2023/03/09/li-kou-shua-ti/8-shu-zu-zhong-chong-fu-shu-zi/"/>
      <url>/2023/03/09/li-kou-shua-ti/8-shu-zu-zhong-chong-fu-shu-zi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-题目"><a href="#1-题目" class="headerlink" title="1. 题目"></a>1. 题目</h3><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">输入：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>输出：<span class="token number">2</span> 或 <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> li<span class="token punctuation">:</span>                <span class="token keyword">return</span> i            <span class="token keyword">else</span><span class="token punctuation">:</span>                li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-笔试算法-python</title>
      <link href="/2023/03/08/bi-shi-suan-fa/2-bi-shi-suan-fa-python/"/>
      <url>/2023/03/08/bi-shi-suan-fa/2-bi-shi-suan-fa-python/</url>
      
        <content type="html"><![CDATA[<h3 id="1-买卖股票的最佳时机"><a href="#1-买卖股票的最佳时机" class="headerlink" title="1. 买卖股票的最佳时机"></a>1. 买卖股票的最佳时机</h3><h4 id="1-1-问题"><a href="#1-1-问题" class="headerlink" title="1.1 问题"></a>1.1 问题</h4><p>概述：给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。你只能选择某一天买入这只股票，并选择在未来的某一个不同的日子卖出该股票。设计一个算法来计算你所能获取的最大利润。返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。</p><h4 id="1-2-代码"><a href="#1-2-代码" class="headerlink" title="1.2 代码"></a>1.2 代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">输入：<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出：<span class="token number">5</span> 输入：prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出：<span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 动态规划</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        minprice <span class="token operator">=</span> <span class="token number">100000000000</span>        maxprofit <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> prices<span class="token punctuation">:</span>            minprice <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> minprice<span class="token punctuation">)</span>            maxprofit <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>i <span class="token operator">-</span> minprice<span class="token punctuation">,</span> maxprofit<span class="token punctuation">)</span>        <span class="token keyword">return</span> maxprofit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-分解质因数3"><a href="#2-分解质因数3" class="headerlink" title="2. 分解质因数3"></a>2. 分解质因数3</h3><h4 id="2-1-题目"><a href="#2-1-题目" class="headerlink" title="2.1 题目"></a>2.1 题目</h4><p>分解质因数3 给定正整数n，返回其质因数分解结果 列表返回</p><h4 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">nedgs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">2</span>        di <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        di<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>n<span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> n<span class="token punctuation">:</span>                di<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> di<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">break</span>            <span class="token keyword">elif</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                di<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> di<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                n <span class="token operator">=</span> n <span class="token operator">/</span> i            <span class="token keyword">else</span><span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>                di<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> key <span class="token keyword">in</span> di<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> di<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                    li<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span>di<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> li<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-组成三角形的个数"><a href="#3-组成三角形的个数" class="headerlink" title="3. 组成三角形的个数"></a>3. 组成三角形的个数</h3><h4 id="3-1-题目"><a href="#3-1-题目" class="headerlink" title="3.1 题目"></a>3.1 题目</h4><p>给定一个包含非负整数的数组 <code>nums</code> ，返回其中可以组成三角形三条边的三元组个数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">输入<span class="token punctuation">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">3</span>解释<span class="token punctuation">:</span>有效的组合是<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">(</span>使用第一个 <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">(</span>使用第二个 <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span>输入<span class="token punctuation">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-代码"><a href="#3-2-代码" class="headerlink" title="3.2 代码"></a>3.2 代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">triangleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        nums <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token builtin">sum</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    left <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>                    right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>                        mid <span class="token operator">=</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span> <span class="token operator">+</span> left                        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        res <span class="token operator">=</span> res <span class="token operator">+</span> right <span class="token operator">-</span> j        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔试算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-笔试算法-python</title>
      <link href="/2023/03/07/bi-shi-suan-fa/1-bi-shi-suan-fa-python/"/>
      <url>/2023/03/07/bi-shi-suan-fa/1-bi-shi-suan-fa-python/</url>
      
        <content type="html"><![CDATA[<h3 id="1-字符串解码"><a href="#1-字符串解码" class="headerlink" title="1. 字符串解码"></a>1. 字符串解码</h3><h4 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h4><p>  给定一个经过编码的字符串，返回它解码后的字符串。</p><p>  编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。</p><p>  你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p><p>  此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">示例<span class="token punctuation">:</span>s <span class="token operator">=</span> <span class="token string">"3[a]2[bc]"</span><span class="token punctuation">,</span> 返回 <span class="token string">"aaabcbc"</span><span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token string">"3[a2[c]]"</span><span class="token punctuation">,</span> 返回 <span class="token string">"accaccacc"</span><span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token string">"2[abc]3[cd]ef"</span><span class="token punctuation">,</span> 返回 <span class="token string">"abcabccdcdcdef"</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-python-代码"><a href="#1-2-python-代码" class="headerlink" title="1.2 python 代码"></a>1.2 python 代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">decodeString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: str        """</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        num <span class="token operator">=</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">"["</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span>                res<span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0</span>            <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">"]"</span><span class="token punctuation">:</span>                top <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                res <span class="token operator">=</span> top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> res <span class="token operator">*</span> top<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> i        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数组代表数字加一算法"><a href="#2-数组代表数字加一算法" class="headerlink" title="2.  数组代表数字加一算法"></a>2.  数组代表数字加一算法</h3><h4 id="2-1-题目"><a href="#2-1-题目" class="headerlink" title="2.1 题目"></a>2.1 题目</h4><p>给定一个非负整数组成的非空数组，在该数的基础上加一，返回一个新的数组。<br>最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。<br>你可以假设除了整数 0 之外，这个整数不会以零开头。<br>示例 1:<br>输入: [1,2,3] 输出: [1,2,4]<br>解释: 输入数组表示数字 123。<br>示例 2:<br>输入: [4,3,2,1] 输出: [4,3,2,2]<br>解释: 输入数组表示数字 4321。</p><h4 id="2-2-python代码"><a href="#2-2-python代码" class="headerlink" title="2.2 python代码"></a>2.2 python代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span><span class="token keyword">def</span> plusOne<span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">plusOne</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">)</span><span class="token punctuation">:</span>        idx <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            digits<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment"># 当前位+1，这里的1既可以代表进位也可以代表数值+1</span>            carry <span class="token operator">=</span> digits<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">//</span> <span class="token number">10</span>       <span class="token comment"># 获取进位</span>            digits<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span>               <span class="token comment"># 更新当前位数值</span>            idx <span class="token operator">-=</span> <span class="token number">1</span>                        <span class="token comment"># 下标前移</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> carry <span class="token keyword">or</span> idx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment"># 如果进位为零或者下标越界，跳出循环</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> carry<span class="token punctuation">:</span>                           <span class="token comment"># 如果进位不为零，需要增加一个最高位</span>            digits<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>             <span class="token comment"># 在列表0位置处插入1</span>        <span class="token keyword">return</span> digits<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-原地删除重复出现三次的元素"><a href="#3-原地删除重复出现三次的元素" class="headerlink" title="3. 原地删除重复出现三次的元素"></a>3. 原地删除重复出现三次的元素</h3><h4 id="3-1-题目"><a href="#3-1-题目" class="headerlink" title="3.1 题目"></a>3.1 题目</h4><p>给定一个长度为n的数组。原地删除重复出现三次的元素</p><h4 id="3-2-代码"><a href="#3-2-代码" class="headerlink" title="3.2 代码"></a>3.2 代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">del</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            i<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span>        i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-寻找峰值"><a href="#4-寻找峰值" class="headerlink" title="4. 寻找峰值"></a>4. 寻找峰值</h3><h4 id="4-1-题目"><a href="#4-1-题目" class="headerlink" title="4.1 题目"></a>4.1 题目</h4><p>描述<br>给定一个长度为n的数组nums，请你找到峰值并返回其索引。数组可能包含多个峰值，在这种情况下，返回任何一个所在位置即可。<br>1.峰值元素是指其值严格大于左右相邻值的元素。严格大于即不能有等于<br>2.假设 nums[-1] = nums[n] = -\infty−∞<br>3.对于所有有效的 i 都有 nums[i] != nums[i + 1]<br>4.你可以使用O(logN)的时间复杂度实现此问题吗？</p><h4 id="4-2-代码"><a href="#4-2-代码" class="headerlink" title="4.2 代码"></a>4.2 代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findPeakElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        left <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> left <span class="token operator">==</span> right<span class="token punctuation">:</span>                <span class="token keyword">return</span> left            mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span>left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>             <span class="token comment"># 如果中间小于右边，那么一定在右边</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token comment"># 左边不小于右边，那么直接把右边弄到中间</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment"># right不可以是mid-1，万一正好是mid，就跳过了，因为并没有比对mid的值</span>                right <span class="token operator">=</span> mid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔试算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18-python案例</title>
      <link href="/2023/03/06/python-ji-chu/18-python-an-li/"/>
      <url>/2023/03/06/python-ji-chu/18-python-an-li/</url>
      
        <content type="html"><![CDATA[<h3 id="1-登录注册"><a href="#1-登录注册" class="headerlink" title="1.登录注册"></a>1.登录注册</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 可以登录注册</span>grups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'123'</span><span class="token punctuation">:</span><span class="token string">'345'</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'登录请输入（1），注册请输入（2）'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入用户名'</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入密码'</span><span class="token punctuation">)</span>        username <span class="token operator">=</span> username<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> password<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> username <span class="token keyword">and</span> password<span class="token punctuation">:</span>            <span class="token keyword">if</span> username<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> password<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token keyword">if</span> username <span class="token keyword">not</span> <span class="token keyword">in</span> grups<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请注册'</span><span class="token punctuation">)</span>                 <span class="token keyword">else</span><span class="token punctuation">:</span>                     <span class="token keyword">if</span> grups<span class="token punctuation">[</span>username<span class="token punctuation">]</span> <span class="token operator">==</span> password<span class="token punctuation">:</span>                         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span>                     <span class="token keyword">else</span><span class="token punctuation">:</span>                         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用户名或密码错误'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入全为数字的用户名，密码'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'账号，密码不能为空'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span><span class="token string">'2'</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入用户名'</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入密码'</span><span class="token punctuation">)</span>        username <span class="token operator">=</span> username<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> password<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> username <span class="token keyword">and</span> password<span class="token punctuation">:</span>            <span class="token keyword">if</span> username<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> password<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> username  <span class="token keyword">in</span> grups<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'次用户名已注册，请重新注册'</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    grups<span class="token punctuation">[</span>username<span class="token punctuation">]</span> <span class="token operator">=</span> password                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'注册成功'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入数字用户名，密码'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'账号密码不能为空'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-商城"><a href="#2-商城" class="headerlink" title="2.商城"></a>2.商城</h3><p>商城案例</p><p>一、开店</p><p>1、姓名</p><p>2、商城所有商家的个人信息</p><p>3、添加商品，所有商家的个人信息还有所有东西</p><p>4、赚钱</p><p>二、买东西</p><p>1、钱，买东西花钱</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 商城案例</span><span class="token comment"># 一、开店</span><span class="token comment">#     1、姓名</span><span class="token comment">#     2、商城所有商家的个人信息</span><span class="token comment">#     3、添加商品，所有商家的个人信息还有所有东西</span><span class="token comment">#     4、赚钱</span><span class="token comment"># 二、买东西</span><span class="token comment">#     1、钱，买东西花钱</span><span class="token comment">#     2、</span><span class="token keyword">class</span> <span class="token class-name">mall</span><span class="token punctuation">:</span>    store <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    buy_1 <span class="token operator">=</span> <span class="token string">'3'</span>    buy_money <span class="token operator">=</span> <span class="token string">'0'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>money <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>thing <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>money <span class="token operator">=</span> money        self<span class="token punctuation">.</span>thing <span class="token operator">=</span> thing    <span class="token keyword">def</span> <span class="token function">open</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">fil</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> obj<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>name<span class="token punctuation">:</span>                obj<span class="token punctuation">[</span><span class="token string">'commoditys'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>commodity<span class="token punctuation">]</span><span class="token operator">=</span>com_money        <span class="token keyword">for</span> i <span class="token keyword">in</span> mall<span class="token punctuation">.</span>store<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>name<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'店铺已经存在请重新注册'</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>        mall<span class="token punctuation">.</span>store<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'money'</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>money<span class="token punctuation">,</span><span class="token string">'commoditys'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            commodity <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入你的商品名称（退出请输入1）:'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> commodity <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            com_money <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入商品价格:'</span><span class="token punctuation">)</span>            <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span>fil<span class="token punctuation">,</span>mall<span class="token punctuation">.</span>store<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">buy</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">fil2</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>            commodity <span class="token operator">=</span> obj<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'commoditys'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> commodity<span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> self<span class="token punctuation">.</span>thing<span class="token punctuation">:</span>                    obj<span class="token punctuation">[</span><span class="token string">'money'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'money'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">int</span><span class="token punctuation">(</span>commodity<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span>fil2<span class="token punctuation">,</span> mall<span class="token punctuation">.</span>store<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'进入商城输入1，退出输入0:'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>        shop <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'开店输入1，买东西输入0'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> shop <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                thing <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入要买的东西(退出请按1)：'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> thing <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>                b <span class="token operator">=</span> mall<span class="token punctuation">(</span>thing <span class="token operator">=</span> thing<span class="token punctuation">)</span>                b<span class="token punctuation">.</span>buy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> shop <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入你的名字：'</span><span class="token punctuation">)</span>            money <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入你的金额：'</span><span class="token punctuation">)</span>            b <span class="token operator">=</span> mall<span class="token punctuation">(</span>name<span class="token punctuation">,</span>money<span class="token punctuation">)</span>            b<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你不具备开店与买东西资格'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>store<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17-stringio与bytesio</title>
      <link href="/2023/03/06/python-ji-chu/17-stringio-yu-bytesio/"/>
      <url>/2023/03/06/python-ji-chu/17-stringio-yu-bytesio/</url>
      
        <content type="html"><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token comment"># 主讲：浩天老师</span><span class="token keyword">import</span> io <span class="token comment"># 导入模块</span><span class="token comment"># 做临时的存储</span>myio <span class="token operator">=</span> io<span class="token punctuation">.</span>StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建对象（open）string字符串</span><span class="token comment"># # print(myio)</span><span class="token comment"># myio.write('hello world')# 写入数据</span><span class="token comment"># myio.write('hello world')# 写入数据</span><span class="token comment"># myio.write('hello world')# 写入数据</span><span class="token comment"># print(myio.getvalue())# 读取数据,不用考虑文件指针</span><span class="token comment"># myio.close()# 相当于文件的关闭</span><span class="token comment"># print(myio.getvalue())</span><span class="token keyword">import</span> timemyioB <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建对象（open）Byte字节</span><span class="token comment"># print(myioB)</span><span class="token comment"># myioB.write(b'xxx')# Byte字节</span><span class="token comment"># print(myioB.getvalue())# 读取数据</span><span class="token comment"># myioB.close()# 相当于文件的关闭</span><span class="token comment"># print('你好'.encode('utf-8'))</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment"># print(f)</span><span class="token comment"># 上下文管理</span><span class="token comment"># with as</span><span class="token comment"># f = open('test1.txt','r',encoding='utf-8')</span><span class="token comment"># print(f.read())</span><span class="token comment"># f.close()</span><span class="token comment"># print('----'*10)</span><span class="token comment"># with open('test1.txt', 'r', encoding='utf-8') as file,\</span><span class="token comment">#     open('test', 'r', encoding='utf-8') as file2:# \ 换行。代码不断</span><span class="token comment">#     # 自动调用close，自动保存关闭</span><span class="token comment">#     print(file.read())</span><span class="token comment">#     print(file2.read())</span><span class="token comment"># class Runtime:</span><span class="token comment"># with 的运行方式</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">:</span><span class="token comment"># 模拟的文件的操作，为什么自动关闭</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在调用with'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'正在用'</span>    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我要退出了'</span><span class="token punctuation">)</span><span class="token comment"># a = Test()</span><span class="token comment"># with Test() as test:</span><span class="token comment">#     print(test)</span><span class="token comment"># print('已经退出')</span><span class="token comment"># 计算函数的运行时间</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">RunTime</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 进入with 自动调用</span>        self<span class="token punctuation">.</span>start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 当前时间</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>start_time    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 退出with作用域</span>        <span class="token comment"># 自动调用</span>        self<span class="token punctuation">.</span>end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 结束时间</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'运行时间为%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>end_time <span class="token operator">-</span> self<span class="token punctuation">.</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span>run <span class="token operator">=</span> RunTime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> run <span class="token keyword">as</span> a<span class="token punctuation">:</span><span class="token comment"># 上下文的管理器</span>    <span class="token comment"># 测试函数</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'程序完成！'</span><span class="token punctuation">)</span><span class="token keyword">import</span> this<span class="token keyword">print</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16-变量定义规则</title>
      <link href="/2023/03/06/python-ji-chu/16-bian-liang-ding-yi-gui-ze/"/>
      <url>/2023/03/06/python-ji-chu/16-bian-liang-ding-yi-gui-ze/</url>
      
        <content type="html"><![CDATA[<h3 id="1-变量定义规则"><a href="#1-变量定义规则" class="headerlink" title="1.变量定义规则"></a>1.变量定义规则</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''变量定义规则1.只能是1个词2.只能包含字母，数字，下划线3.不能是数字开头4.变量是区分大小写的错误事例asc-fdgad  sf1swf23wref￥frg’fgdgs'正确示例safsfergFsfrg_sfgerhreggr_gthgADFGwwtrg4'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15-正则匹配</title>
      <link href="/2023/03/06/python-ji-chu/15-zheng-ze-pi-pei/"/>
      <url>/2023/03/06/python-ji-chu/15-zheng-ze-pi-pei/</url>
      
        <content type="html"><![CDATA[<h3 id="1-元字符"><a href="#1-元字符" class="headerlink" title="1.元字符"></a>1.元字符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 元字符  *            # 匹配前面的字符出现0次或多次</span><span class="token comment"># 元字符  +            # 匹配前面的字符出现1次或多次</span><span class="token comment"># 元字符  ？            # 匹配前面的字符出现0次或1次</span><span class="token comment">#元字符  ｛n｝           #匹配前面的字符出现n次</span><span class="token comment">#元字符  ｛m,n｝           #匹配前面的字符出现m-n次</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'a*'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaa'</span><span class="token punctuation">)</span>  <span class="token comment">#匹配   0 - 无穷大的</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'as+'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaa'</span><span class="token punctuation">)</span>  <span class="token comment">#匹配   1  - 无穷大  as   asss   asssss</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'a?'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaa'</span><span class="token punctuation">)</span>  <span class="token comment">#匹配  0,1个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-普通字符匹配"><a href="#2-普通字符匹配" class="headerlink" title="2.普通字符匹配"></a>2.普通字符匹配</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'张正压，张张正阳张是滴卫视的王世迪张文档张正阳张是滴卫视的王世迪张文档为苏萨多久哦发挥oas放假哦忘记哦'</span><span class="token comment"># 普通字符匹配</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'张正阳'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-或"><a href="#3-或" class="headerlink" title="3.或"></a>3.或</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#或关系</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'张|王'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span>  <span class="token comment">#匹配  a-d 0-5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-匹配单个字符"><a href="#4-匹配单个字符" class="headerlink" title="4.匹配单个字符"></a>4.匹配单个字符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 匹配单个字符 元字符</span><span class="token comment"># 元字符 ...   匹配除了换行以外的任意字符</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'张..'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>                  <span class="token comment">#匹配张某某，re.S，改变规则</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-匹配字符集"><a href="#5-匹配字符集" class="headerlink" title="5.匹配字符集"></a>5.匹配字符集</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 匹配字符集</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'[张王]'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'[a-d]'</span><span class="token punctuation">,</span><span class="token string">'asbbbeasdfaadeaa'</span><span class="token punctuation">)</span>  <span class="token comment">#匹配    a-d的字符</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'[a,d]'</span><span class="token punctuation">,</span><span class="token string">'asbbbeasdfaadeaa'</span><span class="token punctuation">)</span> <span class="token comment">#匹配    a,d的字符</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'[a-d]{2}'</span><span class="token punctuation">,</span><span class="token string">'asbbbeasdfaadeaa'</span><span class="token punctuation">)</span> <span class="token comment">#匹配    a,d的字符,2个一组的</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'a{6}'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaaaaaa'</span><span class="token punctuation">)</span>  <span class="token comment">#匹配6个a</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'a{2,4}'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaa'</span><span class="token punctuation">)</span>   <span class="token comment">#匹配至少2个a，最多4个a</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'[a-d0-5]'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadea123445688a'</span><span class="token punctuation">)</span>  <span class="token comment">#匹配  a-d 0-5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-匹配反字符集"><a href="#6-匹配反字符集" class="headerlink" title="6.匹配反字符集"></a>6.匹配反字符集</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 匹配反字符集</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'[^张王]'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span>                 <span class="token comment">#匹配所有不是张王的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-匹配字符串开始结尾位置"><a href="#7-匹配字符串开始结尾位置" class="headerlink" title="7.匹配字符串开始结尾位置"></a>7.匹配字符串开始结尾位置</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 匹配字符串开始结尾位置</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'^as'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaa'</span><span class="token punctuation">)</span>   <span class="token comment">#匹配开头为as的</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'aas$'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaas'</span><span class="token punctuation">)</span>   <span class="token comment">#匹配结尾</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-匹配任意（非）数字字符"><a href="#8-匹配任意（非）数字字符" class="headerlink" title="8.匹配任意（非）数字字符"></a>8.匹配任意（非）数字字符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 匹配任意（非）数字字符</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaa'</span><span class="token punctuation">)</span>   <span class="token comment">#匹配数字</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\D'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaa'</span><span class="token punctuation">)</span>   <span class="token comment">#匹配非数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="9-匹配任意（非）普通字符-数字-字母-下划线-汉字"><a href="#9-匹配任意（非）普通字符-数字-字母-下划线-汉字" class="headerlink" title="9.匹配任意（非）普通字符      数字 字母 下划线 汉字"></a>9.匹配任意（非）普通字符      数字 字母 下划线 汉字</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 匹配任意（非）普通字符      数字 字母 下划线 汉字</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\w+'</span><span class="token punctuation">,</span><span class="token string">'server_port = 8888'</span><span class="token punctuation">)</span>   <span class="token comment">#匹配汉子数字符号</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\W'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaa'</span><span class="token punctuation">)</span>   <span class="token comment">#匹配特殊字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="10-匹配任意（非）空字符"><a href="#10-匹配任意（非）空字符" class="headerlink" title="10.匹配任意（非）空字符"></a>10.匹配任意（非）空字符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 匹配任意（非）空字符</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\s'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaa'</span><span class="token punctuation">)</span>   <span class="token comment">#匹配空字符</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\S'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaa'</span><span class="token punctuation">)</span>   <span class="token comment">#匹配非空字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="11-匹配开头-结尾"><a href="#11-匹配开头-结尾" class="headerlink" title="11.匹配开头 结尾"></a>11.匹配开头 结尾</h3><pre class="line-numbers language-pyrhon" data-language="pyrhon"><code class="language-pyrhon"># 匹配开头 结尾re.findall(r'\Aa...','asasdfaadeaa')   #匹配开头为  a.. 的re.search(r'.s\Z','asasdfaadeaas')   #匹配结尾  .s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="12-匹配字符的边界位置"><a href="#12-匹配字符的边界位置" class="headerlink" title="12.匹配字符的边界位置"></a>12.匹配字符的边界位置</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 匹配字符的边界位置</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\bdf'</span><span class="token punctuation">,</span><span class="token string">'asasd  faa  deaa'</span><span class="token punctuation">)</span>   <span class="token comment">#匹配边界</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\Bdf'</span><span class="token punctuation">,</span><span class="token string">'as  asdfaade  aa'</span><span class="token punctuation">)</span>   <span class="token comment">#匹配非边界</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="13-转义-匹配特殊字符"><a href="#13-转义-匹配特殊字符" class="headerlink" title="13.转义  匹配特殊字符 +   \"></a>13.转义  匹配特殊字符 +   \</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 转义  匹配特殊字符 +   \</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\.'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaa'</span><span class="token punctuation">)</span>   <span class="token comment">#匹配    .</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="14-贪婪模式-非贪婪模式"><a href="#14-贪婪模式-非贪婪模式" class="headerlink" title="14.贪婪模式 非贪婪模式"></a>14.贪婪模式 非贪婪模式</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 贪婪模式 非贪婪模式</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'(ad)'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaa'</span><span class="token punctuation">)</span>  <span class="token comment">#匹配  ad</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'a(jg)'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaa'</span><span class="token punctuation">)</span>  <span class="token comment">#匹配  前面有a的jg</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'a(.*)a'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#匹配  贪婪模式    尽量多的去匹配，</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'a(.*?)a'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#匹配  不贪婪模式  尽量少的去匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="15-search-findall-match-函数"><a href="#15-search-findall-match-函数" class="headerlink" title="15.search findall match 函数"></a>15.search findall match 函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 函数</span><span class="token comment"># search findall match  区别</span>a <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'aa'</span><span class="token punctuation">,</span><span class="token string">'aaasdfeaasfgaa'</span><span class="token punctuation">)</span>      <span class="token comment"># re.findall()   找所有匹配的字符   多个 列表</span>c <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'dss'</span><span class="token punctuation">,</span><span class="token string">'asfhtd'</span><span class="token punctuation">)</span>                   <span class="token comment">#匹配开头  匹配1个</span>b <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'aa'</span><span class="token punctuation">,</span><span class="token string">'asasdfaadeaada'</span><span class="token punctuation">)</span>       <span class="token comment"># re.search()   找第一个匹配的位置   r取消转义</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token comment">#开始索引   6</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                           <span class="token comment">#结束索引      8</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                           <span class="token comment">#区间         (6, 8)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                           <span class="token comment">#拿到的值     aa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-sub函数"><a href="#16-sub函数" class="headerlink" title="16.sub函数"></a>16.sub函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># sub函数</span>phone <span class="token operator">=</span> <span class="token string">'122-342-2335 # 电话号'</span>num <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'#.*'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>phone<span class="token punctuation">)</span>       <span class="token comment">#后面的以空字符代替</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>num <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'\D'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>phone<span class="token punctuation">)</span>        <span class="token comment">#非数字字符以空字符代替</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-replace函数"><a href="#17-replace函数" class="headerlink" title="17.replace函数"></a>17.replace函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#replace函数</span>num <span class="token operator">=</span> phone<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'122'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-import</title>
      <link href="/2023/03/06/python-ji-chu/14-import/"/>
      <url>/2023/03/06/python-ji-chu/14-import/</url>
      
        <content type="html"><![CDATA[<h3 id="1-import-通用形式"><a href="#1-import-通用形式" class="headerlink" title="1.import 通用形式"></a>1.import 通用形式</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># import  .py文件</span><span class="token comment"># import copy                  导入即执行</span><span class="token comment"># from copy import deepcopy</span><span class="token comment"># from copy import deepcopy as d</span><span class="token comment"># from copy import deepcopy,copy</span><span class="token comment"># from  copy import *                全部导入</span><span class="token comment"># import import1                    直接导入本目录下自己写的模块</span><span class="token comment"># from . import import1        ？？？？？？？？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-py主结构"><a href="#2-py主结构" class="headerlink" title="2.py主结构"></a>2.py主结构</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#一个模块被另一个程序第一次引入时，其主程序将运行。</span><span class="token comment"># 如果我们想在模块被引入时，模块中的某一程序块不执行，我们可以用__name__属性来使该程序块仅在该模块自身运行时执行。</span><span class="token comment">#import 在被引入时，不执行此代码块</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>     <span class="token comment">#当前文件执行，导入文件不执行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-程序引入搜索路径"><a href="#3-程序引入搜索路径" class="headerlink" title="3.程序引入搜索路径"></a>3.程序引入搜索路径</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys                  <span class="token comment">#加入路径    加入模块导入的路径</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'D:\daima\5.ip\ip-search.py'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13-迭代器生成器</title>
      <link href="/2023/03/06/python-ji-chu/13-die-dai-qi-sheng-cheng-qi/"/>
      <url>/2023/03/06/python-ji-chu/13-die-dai-qi-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-迭代器"><a href="#1-迭代器" class="headerlink" title="1.迭代器"></a>1.迭代器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 迭代器     __iter__      __next__</span><span class="token comment"># 可迭代对象 __iter__  dir()</span><span class="token comment"># print (next(it))   # 输出迭代器的下一个元素</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 输出迭代器的下一个元素</span><span class="token keyword">except</span> StopIteration <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'取完了'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-生成器"><a href="#2-生成器" class="headerlink" title="2.生成器"></a>2.生成器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 生成器 函数中有yield 迭代器    返回 暂停 结束</span><span class="token comment"># 跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。</span><span class="token comment"># 在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值,</span><span class="token comment"># 并在下一次执行 next() 方法时从当前位置继续运行。</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> ia <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 全0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># print(next(f()))</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># 0 1 2 3 4 5 6 7 8 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-作业"><a href="#3-作业" class="headerlink" title="3.作业"></a>3.作业</h3><p>1、把上课的内容敲一边</p><p>2、在一个模块种定义一个生成器</p><p>这个生成器可以生成斐波拉契序列</p><p>在另一个模块中使用这个生成器，得到斐波拉契序列</p><p>斐波拉契序列，序列种每一个值都等于前两个值的和</p><p>[1,1,2,3,5,8,13,21,34，，，，，，，]</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1、把上课的内容敲一边</span><span class="token comment"># 2、在一个模块种定义一个生成器</span><span class="token comment">#    这个生成器可以生成斐波拉契序列</span><span class="token comment">#    在另一个模块中使用这个生成器，得到斐波拉契序列</span><span class="token comment">#    斐波拉契序列，序列种每一个值都等于前两个值的和</span><span class="token comment">#    [1,1,2,3,5,8,13,21,34，，，，，，，]</span><span class="token keyword">import</span> diedaiqili <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入序列大小：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n <span class="token operator">=</span> diedaiqi<span class="token punctuation">.</span>f<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    li<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 这个生成器可以生成斐波拉契序列</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token number">0</span>        b <span class="token operator">=</span> <span class="token number">1</span>        n <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> n <span class="token operator">&lt;</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> b            a<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span>a<span class="token operator">+</span>b            n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-异常</title>
      <link href="/2023/03/06/python-ji-chu/12-yi-chang/"/>
      <url>/2023/03/06/python-ji-chu/12-yi-chang/</url>
      
        <content type="html"><![CDATA[<h3 id="1-异常类型"><a href="#1-异常类型" class="headerlink" title="1.异常类型"></a>1.异常类型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># nameerror         名称错误</span><span class="token comment"># typeerror         类型错误</span><span class="token comment"># syntaxerror       语法错误</span><span class="token comment"># Exception         异常继承父</span><span class="token comment"># BaseException     异常继承爷</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-异常捕捉"><a href="#2-异常捕捉" class="headerlink" title="2.异常捕捉"></a>2.异常捕捉</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#指定异常捕获</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">except</span> NameError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">except</span> TypeError <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> g<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>                       <span class="token comment">#无异常时执行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'无异常'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>                    <span class="token comment">#无论是否有错，都会执行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finally'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-断言"><a href="#3-断言" class="headerlink" title="3.断言"></a>3.断言</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#断言 # assert</span><span class="token comment"># assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。</span><span class="token comment"># 断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况，</span><span class="token comment"># 例如我们的代码只能在 Linux 系统下运行，可以先判断当前系统是否符合条件。</span>a <span class="token operator">=</span> <span class="token number">123</span><span class="token keyword">assert</span> a <span class="token operator">==</span><span class="token string">'123'</span><span class="token punctuation">,</span><span class="token string">'这里是字符串123'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-通用异常结构"><a href="#4-通用异常结构" class="headerlink" title="4.通用异常结构"></a>4.通用异常结构</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">str</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-yield"><a href="#5-yield" class="headerlink" title="5.yield"></a>5.yield</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">born</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span> i        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span>  <span class="token comment">#下次循环从下行命令开始执行</span>g <span class="token operator">=</span> born<span class="token punctuation">(</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> g<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-作业"><a href="#6-作业" class="headerlink" title="6.作业"></a>6.作业</h3><p>1、自己构造一个错误的场景，并模仿课堂进行一个错误的分析<br>报错类型，报错原因，报错代码，报错的行<br>2、结合异常处理，确保文件打开后，正常关闭<br>用open直接打开一个文件，然后write进行写入，假设在写入的时候可能会报错，<br>写段代码确保在报错的情况下文件依然可以正常关闭</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""1、自己构造一个错误的场景，并模仿课堂进行一个错误的分析报错类型，报错原因，报错代码，报错的行2、结合异常处理，确保文件打开后，正常关闭用open直接打开一个文件，然后write进行写入，假设在写入的时候可能会报错，写段代码确保在报错的情况下文件依然可以正常关闭"""</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">except</span> NameError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">except</span> TypeError <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> g<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'无异常'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finally'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'D:/biancheng/daima/课程/课程/17.2文件test2'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'wsd'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-文件os</title>
      <link href="/2023/03/06/python-ji-chu/11-wen-jian-os/"/>
      <url>/2023/03/06/python-ji-chu/11-wen-jian-os/</url>
      
        <content type="html"><![CDATA[<h3 id="1-文件操作"><a href="#1-文件操作" class="headerlink" title="1.文件操作"></a>1.文件操作</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>路径<span class="token punctuation">)</span>改变当前路径os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>文件名<span class="token punctuation">)</span>创建目录os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span>文件名<span class="token punctuation">)</span>删除目录os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>文件名<span class="token punctuation">)</span>删除文件os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'oldname'</span><span class="token punctuation">,</span><span class="token string">'new'</span><span class="token punctuation">)</span>重命名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-路径操作"><a href="#2-路径操作" class="headerlink" title="2.路径操作"></a>2.路径操作</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">#得到此时路径</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>a<span class="token punctuation">)</span>     <span class="token comment">#显示相对路径所有内容</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span>                ?????os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname            上一级目录  os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename              基本短目录os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath          绝度路径os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>reparh        相对路径os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize        获取字节             资源大小os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getctime        创建                资源时间os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getatime        访问               资源时间os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getmtime        修改               资源时间os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists        路径是否存在os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token punctuation">)</span>          是否是目录os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token punctuation">)</span>         是否时文件os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isabd<span class="token punctuation">(</span><span class="token punctuation">)</span>          是否是绝对路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-系统操作"><a href="#3-系统操作" class="headerlink" title="3.系统操作"></a>3.系统操作</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token punctuation">)</span>            虚拟机内部的os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'pause'</span><span class="token punctuation">)</span>   <span class="token comment">#程序暂停  点一下继续进行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-ping"><a href="#4-ping" class="headerlink" title="4.ping"></a>4.ping</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#ping，命令，ping -n 1 -w 1 102.168.1.19    #1 失败 0 成功  反着来的</span>return1 <span class="token operator">=</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ping -n 1 -w 1 %s'</span> <span class="token operator">%</span><span class="token string">'102.168.1.19'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-作业"><a href="#5-作业" class="headerlink" title="5.作业"></a>5.作业</h3><p>1、写一个简单的复制文件的代码<br>2、写一个用于遍历某目录所有内容的函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#1、写一个简单的复制文件的代码</span><span class="token comment">#2、写一个用于遍历某目录所有内容的函数</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'D:/biancheng/daima/课程/课程/17.1文件test'</span><span class="token punctuation">,</span><span class="token string">'r+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">,</span>\        <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'D:/biancheng/daima/课程/课程/17.2文件test2'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>    a <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    f2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    f2<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">path_1</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    pathin <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> pathin<span class="token punctuation">:</span>        pathinin <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>pathinin<span class="token punctuation">)</span><span class="token punctuation">:</span>            path_1<span class="token punctuation">(</span>pathinin<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>pathinin<span class="token punctuation">)</span>path_1<span class="token punctuation">(</span><span class="token string">'D:/biancheng/daima/课程'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-文件</title>
      <link href="/2023/03/06/python-ji-chu/10-wen-jian/"/>
      <url>/2023/03/06/python-ji-chu/10-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="1-文件读写"><a href="#1-文件读写" class="headerlink" title="1. 文件读写"></a>1. 文件读写</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#open('路径')</span><span class="token comment">#.read(3)     读3个</span><span class="token comment">#.close()</span><span class="token comment">#.seek()</span><span class="token comment"># print(f1.tell())      读游标位置</span><span class="token comment"># print(f1.readline())   读一行</span><span class="token comment"># print(f1.readlines())   读多行</span><span class="token comment"># r   读                r+    读写          无报错</span><span class="token comment"># w   写                w+    读写          存在覆盖  不存在创建</span><span class="token comment"># a   追加              a+    读写          存在覆盖  不存在创建</span><span class="token comment"># rb  二进制读          rb+   二进制读写</span><span class="token comment">#打开方式</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'22.1文件test'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#自动关闭文件</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'22.1文件test'</span><span class="token punctuation">,</span><span class="token string">'r+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">,</span>\        <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'23.1文件test2'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>    d <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    f2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>d<span class="token punctuation">)</span>    f1<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    f2<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    e <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> f2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-读写"><a href="#2-读写" class="headerlink" title="2.读写"></a>2.读写</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#读</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'22.1文件test'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#写</span>f1 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'22.1文件test'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span>                        <span class="token comment">#写数据，游标在最后</span>f1<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token string">'123\n456\n789'</span><span class="token punctuation">)</span>          <span class="token comment">#换行写入，写多行</span>f1<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                                  <span class="token comment">#游标切换到0</span>d <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                              <span class="token comment">#读2个</span>e <span class="token operator">=</span> f1<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token comment">#告诉游标位置</span>f <span class="token operator">=</span> f1<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment">#读1行</span>g <span class="token operator">=</span> f1<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment">#读多行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-二进制写入"><a href="#3-二进制写入" class="headerlink" title="3.二进制写入"></a>3.二进制写入</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#二进制写入</span>f2 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'22.1文件test'</span><span class="token punctuation">,</span><span class="token string">'wb+'</span><span class="token punctuation">)</span>f2<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'123'</span><span class="token punctuation">)</span>                        <span class="token comment">#二进制写入</span><span class="token keyword">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-流写入"><a href="#4-流写入" class="headerlink" title="4.流写入"></a>4.流写入</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 流写入   request</span><span class="token keyword">import</span> requestssession <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"ar_name"</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> chunk <span class="token keyword">in</span> res<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token comment"># 流写入   Django</span><span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    fl <span class="token operator">=</span> request<span class="token punctuation">.</span>FILES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>fl<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"fl_name"</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> fl<span class="token punctuation">.</span>chunks<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment"># 以流的方式写入</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-文件处理格式"><a href="#5-文件处理格式" class="headerlink" title="5.文件处理格式"></a>5.文件处理格式</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># # encoding: 文件处理的格式：gbk  utf-8</span><span class="token comment"># f = open('test.txt', 'w', encoding='utf-8')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-文件路径"><a href="#6-文件路径" class="headerlink" title="6.文件路径"></a>6.文件路径</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 相对路径 ：当前文件位置进行索引路径</span>        <span class="token comment"># 上级目录：../Play/demo1.py</span><span class="token comment"># 绝对路径 ：根目录进行文件索引路径</span><span class="token comment"># win : C/D/E/F盘符开头的路径都是绝对路径</span>        <span class="token comment"># E:\pyfile\61班\Files</span><span class="token comment"># Linux : 没有盘符 /home/ 开头的路径都是绝对路径</span>        <span class="token comment"># pwd 查看当前所在的目录： /home/pyvip/py61</span>        <span class="token comment"># ls 查看当前所在目录下所有文件</span>        <span class="token comment"># cd 进入某个文件夹</span>        <span class="token comment"># cd ..返回上级目录</span><span class="token comment"># f = open(r'../../Play/demo1.py',encoding='utf-8')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-内存假文件"><a href="#7-内存假文件" class="headerlink" title="7.内存假文件"></a>7.内存假文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#内存假文件</span><span class="token keyword">import</span> iosio <span class="token operator">=</span> io<span class="token punctuation">.</span>StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span>sio<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> sio<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment"># 123</span><span class="token comment">#内存假文件二进制</span>sio2 <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>sio2<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'abc'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> sio2<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment"># b'abc'</span>c <span class="token operator">=</span> sio2<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 解码  #abc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-类-深入</title>
      <link href="/2023/03/06/python-ji-chu/9-lei-shen-ru/"/>
      <url>/2023/03/06/python-ji-chu/9-lei-shen-ru/</url>
      
        <content type="html"><![CDATA[<h3 id="1-魔术方法"><a href="#1-魔术方法" class="headerlink" title="1. 魔术方法"></a>1. 魔术方法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#魔术方法</span><span class="token comment"># __init__(self)                    初始化触发</span><span class="token comment"># __mro__                              查找继承顺序</span><span class="token comment"># __class__                     通过实例查找</span><span class="token comment"># __add__(self, other):         #存在两个实例加</span><span class="token comment"># __sub__                       -</span><span class="token comment"># __mod__                       *</span><span class="token comment"># __iadd__                      +=</span><span class="token comment"># __isub__                      -+</span><span class="token comment"># __imul__                       *=</span><span class="token comment"># __imod____                     %=</span><span class="token comment"># __radd__                       Y+X</span><span class="token comment"># __rsub__                       Y-X</span><span class="token comment"># __str__(self):               #打印实例触发，必须有返回值，且为str类型</span><span class="token comment"># __repr__(self):                      #交互模式下，没有str的时候有效，必须有返回值，且为str类型</span><span class="token comment">#  __call__(self, *args, **kwargs):       #实例名（）下触发</span><span class="token comment"># print(rectangle.__bases__)             #查看父类</span><span class="token comment"># print(rectangle.__doc__)               #查看帮助文档</span><span class="token comment"># print(rectangle.__dict__)              #查看全部属性</span><span class="token keyword">class</span> <span class="token class-name">rectangle</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    帮助文档    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>length<span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>length <span class="token operator">=</span> length        self<span class="token punctuation">.</span>width <span class="token operator">=</span> width    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>                   <span class="token comment">#存在两个实例加</span>        add_lenth <span class="token operator">=</span> self<span class="token punctuation">.</span>length<span class="token operator">+</span>other<span class="token punctuation">.</span>length        add_width <span class="token operator">=</span> self<span class="token punctuation">.</span>width<span class="token operator">+</span>other<span class="token punctuation">.</span>width        <span class="token keyword">return</span> add_lenth<span class="token punctuation">,</span>add_width    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                         <span class="token comment">#打印实例触发，必须有返回值，且为str类型</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'str方法'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'123'</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                      <span class="token comment">#交互模式下，没有str的时候有效，必须有返回值，且为str类型</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'repr方法'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'456'</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment">#实例名（）下触发</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call方法'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> rectangle<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>b <span class="token operator">=</span> rectangle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>b<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span>__bases__<span class="token punctuation">)</span>             <span class="token comment">#查看父类</span><span class="token keyword">print</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span>               <span class="token comment">#查看帮助文档</span><span class="token keyword">print</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>              <span class="token comment">#查看全部属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-new方法"><a href="#2-new方法" class="headerlink" title="2. new方法"></a>2. new方法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># __new__,每一个类中自带的，创建新实例</span><span class="token comment"># __new__方法会在初始化函数 __init__  之前执行</span><span class="token keyword">class</span> <span class="token class-name">base</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'初始化'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment">#创建实例，此处替代new，实例没有了，不能创建新的name</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>                <span class="token comment"># 继承NEW方法，  cls代表的是类本身</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'new继承'</span><span class="token punctuation">)</span>A <span class="token operator">=</span> base<span class="token punctuation">(</span><span class="token string">'wsd'</span><span class="token punctuation">)</span>    <span class="token comment"># new继承</span>B <span class="token operator">=</span> base<span class="token punctuation">(</span><span class="token string">'dsw'</span><span class="token punctuation">)</span>    <span class="token comment"># new继承</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 1634966832</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># 1634966832  意味着这两个其实引用的是同一个实例，是一个实例的不同名字</span><span class="token comment"># 单例模式</span><span class="token comment"># 只创建一个实例，如果之前已经创建，返回已创建的实例地址，两个实例会相互影响</span><span class="token keyword">class</span> <span class="token class-name">base2</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'初始化'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span> <span class="token punctuation">(</span>cls<span class="token punctuation">,</span><span class="token string">'instance'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>instanceAA <span class="token operator">=</span> base2<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment"># 初始化</span>BB <span class="token operator">=</span> base2<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 初始化</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>AA<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment"># 1553765777248</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>BB<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment"># 1553765777248</span>AA<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'qwsd'</span>            <span class="token comment">## AA增加属性</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hasattr</span><span class="token punctuation">(</span>AA<span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">#判断实例，AA中是否存在属性name  # True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hasattr</span><span class="token punctuation">(</span>BB<span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># True    BB中也有属性</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hasattr</span><span class="token punctuation">(</span>AA<span class="token punctuation">,</span><span class="token string">'name2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-定制属性访问"><a href="#3-定制属性访问" class="headerlink" title="3. 定制属性访问"></a>3. 定制属性访问</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定制属性访问</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>length<span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>length <span class="token operator">=</span> length        self<span class="token punctuation">.</span>width <span class="token operator">=</span> width    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token comment">#存在两个实例加</span>        add_lenth <span class="token operator">=</span> self<span class="token punctuation">.</span>length<span class="token operator">+</span>other<span class="token punctuation">.</span>length        add_width <span class="token operator">=</span> self<span class="token punctuation">.</span>width<span class="token operator">+</span>other<span class="token punctuation">.</span>width        <span class="token keyword">return</span> add_lenth<span class="token punctuation">,</span>add_widthre <span class="token operator">=</span> Rectangle<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>                     <span class="token comment"># 矩形类实例</span><span class="token comment"># 增</span>re<span class="token punctuation">.</span>aaa <span class="token operator">=</span> <span class="token number">1</span><span class="token builtin">setattr</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                   <span class="token comment"># 有bbb属性就改，没有就增</span>re<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span><span class="token string">'ccc'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>                <span class="token comment"># 同上</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>aaa<span class="token punctuation">,</span>re<span class="token punctuation">.</span>bbb<span class="token punctuation">,</span>re<span class="token punctuation">.</span>ccc<span class="token punctuation">)</span>             <span class="token comment"># 1 2 3</span><span class="token comment"># 删：</span><span class="token builtin">delattr</span><span class="token punctuation">(</span>re <span class="token punctuation">,</span> <span class="token string">'ccc'</span><span class="token punctuation">)</span>re <span class="token punctuation">.</span>__delattr__<span class="token punctuation">(</span><span class="token string">'bbb'</span><span class="token punctuation">)</span><span class="token keyword">del</span> re<span class="token comment"># 改：</span>re <span class="token operator">=</span> Rectangle<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>                    <span class="token comment"># 矩形类实例</span><span class="token builtin">setattr</span><span class="token punctuation">(</span>re <span class="token punctuation">,</span> <span class="token string">'length'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>re <span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span><span class="token string">'length'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># 查</span>a <span class="token operator">=</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> <span class="token string">'length'</span><span class="token punctuation">)</span>                <span class="token comment"># 返回bool值</span>b <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span>  <span class="token string">'length'</span><span class="token punctuation">)</span>                <span class="token comment"># 返回属性值</span>c <span class="token operator">=</span> re <span class="token punctuation">.</span> __getattribute__<span class="token punctuation">(</span><span class="token string">'length'</span><span class="token punctuation">)</span>         <span class="token comment"># 返回属性值</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>                              <span class="token comment"># True 5 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-描述符"><a href="#4-描述符" class="headerlink" title="4. 描述符"></a>4. 描述符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在一个类中实例化另一个类，对这个属性进行访问</span><span class="token comment"># 把原来的类的实例化当作是另⼀个类的属性</span><span class="token comment"># 三个描述符 __get__  __set__  __delete__</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> owner<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__delete__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'delete'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment">#直接属性 不可以初始化属性</span>n <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span>n<span class="token punctuation">.</span>m           <span class="token comment">#触发get                #get</span>n<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token number">123</span>      <span class="token comment">#触发set               #set</span><span class="token builtin">delattr</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">)</span>  <span class="token comment">#触发__delete__       # delete</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-装饰器"><a href="#5-装饰器" class="headerlink" title="5.装饰器"></a>5.装饰器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 本质是函数，能够实现在不修改原来的函数的基础上添加功能</span><span class="token comment"># 通过闭包的形把函数体丢进去，再在外⾯调⽤</span><span class="token comment"># 有@符号的就为装饰器</span><span class="token comment"># 在不改变f3函数的情况下，用f1装饰f3</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment">#obj传入函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f1'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f2'</span><span class="token punctuation">)</span>        obj<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> f2<span class="token decorator annotation punctuation">@f1</span>                <span class="token comment">#相当于f3 = f1(f3)    #执行f1  f3传入obj，返回f2，f3接收，</span><span class="token keyword">def</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f3'</span><span class="token punctuation">)</span>f3<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">#执行f3，就是执行f2  # f1  f2 f3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--'</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment"># python自带的3个内置装饰器</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@property</span>                     <span class="token comment">#1、访问方法像访问属性格式一样</span>    <span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'area'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>                <span class="token comment">#2、打印的类 类方法 cls 代表类本身</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>                <span class="token comment">#3、func()括号里面不用self，不用自己调用实例</span>    <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                  <span class="token comment"># 静态方法  和class类断开联系</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'func'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>area       <span class="token comment"># 1、访问方法像访问属性格式一样                 # area</span>a<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 2、打印的类                                  # &lt;class '__main__.A'&gt;</span>a<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 3、func()括号里面不用self，不用自己调用实例   # func</span>A<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 3、func()括号里面不用self，不用自己调用实例   # func</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--'</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment">#类装饰器                      类装饰函数，C传给func，返回m给C</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span>                        <span class="token comment">#必须包含 __init__ __call__</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#实例名（）下触发</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'lei'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>func<span class="token decorator annotation punctuation">@B</span><span class="token keyword">def</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span>D <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token punctuation">)</span>D<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 装饰器实际运行参考</span><span class="token comment"># 查看函数运行时间：</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">run_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">new_fun</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        t0 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        back <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'函数运行的时间: %s'</span><span class="token operator">%</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> back    <span class="token keyword">return</span> new_fun<span class="token decorator annotation punctuation">@run_time</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'OVER'</span><span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-作业1"><a href="#6-作业1" class="headerlink" title="6.作业1"></a>6.作业1</h3><p>在之前的基础上，定义一个正方形类，继承矩形类，<br>实现类的实例可调用，调用时打印边长<br>直接打印实例时，能够打印出实例的面积</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在之前的基础上，定义一个正方形类，继承矩形类，</span><span class="token comment"># 实现类的实例可调用，调用时打印边长</span><span class="token comment"># 直接打印实例时，能够打印出实例的面积</span><span class="token keyword">class</span> <span class="token class-name">rectangle</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>length<span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>length <span class="token operator">=</span> length        self<span class="token punctuation">.</span>width <span class="token operator">=</span> width    <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        area <span class="token operator">=</span> self<span class="token punctuation">.</span>length <span class="token operator">*</span> self<span class="token punctuation">.</span>width        <span class="token keyword">return</span> area<span class="token keyword">class</span> <span class="token class-name">square</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>length <span class="token operator">=</span> length    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'边长长度为%s'</span><span class="token operator">%</span>self<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        area <span class="token operator">=</span> self<span class="token punctuation">.</span>length<span class="token operator">*</span>self<span class="token punctuation">.</span>length        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span>A <span class="token operator">=</span> square<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-作业2"><a href="#7-作业2" class="headerlink" title="7.作业2"></a>7.作业2</h3><p>测试type 和isinstance 两个函数那个速度更加的快</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试type 和isinstance 两个函数那个速度更加的快</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">speed</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">count_1</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        obj<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s运行时间为%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> count_1<span class="token decorator annotation punctuation">@speed</span><span class="token keyword">def</span> <span class="token function">type_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@speed</span><span class="token keyword">def</span> <span class="token function">isinstance_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span>type_1<span class="token punctuation">(</span><span class="token punctuation">)</span>isinstance_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-类</title>
      <link href="/2023/03/06/python-ji-chu/8-lei/"/>
      <url>/2023/03/06/python-ji-chu/8-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="1-类介绍"><a href="#1-类介绍" class="headerlink" title="1. 类介绍"></a>1. 类介绍</h3><p>类定义，方法，初始化，析构</p><p>属性，类中的变量</p><p>方法，类中的函数</p><p>self 实例定义时==外部实例</p><h3 id="2-类定义"><a href="#2-类定义" class="headerlink" title="2. 类定义"></a>2. 类定义</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">:</span>    sex <span class="token operator">=</span> <span class="token string">'男'</span>                                   <span class="token comment">#属性</span>    _age <span class="token operator">=</span> <span class="token number">13</span>                                    <span class="token comment">#私有属性，可访问，不会有提示</span>    __age2 <span class="token operator">=</span> <span class="token number">23</span>                                  <span class="token comment">#私有属性，不可以访问</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>                          <span class="token comment">#方法</span>        <span class="token keyword">return</span> <span class="token string">'%s在跑步，%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>sex<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'跑步完成'</span>wsd <span class="token operator">=</span> person<span class="token punctuation">(</span><span class="token punctuation">)</span>                                     <span class="token comment">#类实例化</span>paobu <span class="token operator">=</span> wsd<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'wsd1'</span><span class="token punctuation">)</span>                             <span class="token comment">#调用类方法</span>wsd<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'nv'</span>                                    <span class="token comment">#改变类实例属性</span>person<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'nan'</span>                                <span class="token comment">#改变类属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3. 初始化"></a>3. 初始化</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#初始化      实例化的时候被执行</span><span class="token keyword">class</span> <span class="token class-name">person_2</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#初始化</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>sex <span class="token operator">=</span> sex        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                          <span class="token comment">#方法</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s在跑步，%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'%s在跑步，%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>sex<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'跑步完成'</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                     <span class="token comment">#析构，在局部函数结束后运行</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'析构'</span><span class="token punctuation">)</span><span class="token comment"># wsd2 = person_2('wsd2','nan',23)</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    wsd2 <span class="token operator">=</span> person_2<span class="token punctuation">(</span><span class="token string">'wsd2'</span><span class="token punctuation">,</span> <span class="token string">'nan'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-类属性-增删改查"><a href="#4-类属性-增删改查" class="headerlink" title="4.类属性 增删改查"></a>4.类属性 增删改查</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">:</span>    sex <span class="token operator">=</span> <span class="token string">'男'</span>                                   <span class="token comment">#属性</span>    _age <span class="token operator">=</span> <span class="token number">13</span>                                    <span class="token comment">#私有属性，可访问，不会有提示</span>    __age2 <span class="token operator">=</span> <span class="token number">23</span>                                  <span class="token comment">#私有属性，不可以访问</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>                          <span class="token comment">#方法</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s在跑步，%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'跑步完成'</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'无'</span>person1 <span class="token operator">=</span> person<span class="token punctuation">(</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">)</span>      <span class="token comment">#hasattr 查找类中是否存在sex  返回布尔值</span>b <span class="token operator">=</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">)</span>       <span class="token comment">#查找类中是否存在sex，返回值，不存在，报错        返回值，或无</span><span class="token comment"># d = getattr(person,'sex2')      #查找类中是否存在sex2，返回值，不存在，报错</span>e <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span><span class="token string">'sex2'</span><span class="token punctuation">)</span>      <span class="token comment">#查找实例中是否存在sex2，返回值，不存在，不报错</span>f <span class="token operator">=</span> person1<span class="token punctuation">.</span>__getattribute__<span class="token punctuation">(</span><span class="token string">'sex'</span><span class="token punctuation">)</span>     <span class="token comment">#必须为实例，查看实例的返回值，无报错</span><span class="token comment">#g = person1.__getattribute__('sex2')     #必须为实例，查看实例的返回值，无报错</span><span class="token comment">#类属性增加修改</span>person1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'wsd'</span>h <span class="token operator">=</span> person1<span class="token punctuation">.</span>name                    <span class="token comment">#第一种    类属性增加修改  ，无增，有修改</span><span class="token builtin">setattr</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span><span class="token string">'name2'</span><span class="token punctuation">,</span><span class="token string">'wds'</span><span class="token punctuation">)</span>      <span class="token comment">#第二种   类属性增加修改  ，无增，有修改,</span>i <span class="token operator">=</span> person1<span class="token punctuation">.</span>name2person1<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span><span class="token string">'name3'</span><span class="token punctuation">,</span><span class="token string">'swd'</span><span class="token punctuation">)</span>   <span class="token comment">#第三种   类属性增加修改  ，无增，有修改,</span>g <span class="token operator">=</span> person1<span class="token punctuation">.</span>name3<span class="token comment">#类属性删除</span><span class="token builtin">delattr</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span><span class="token string">'name3'</span><span class="token punctuation">)</span>            <span class="token comment">#类属性删除</span>person1<span class="token punctuation">.</span>__delattr__<span class="token punctuation">(</span><span class="token string">'name2'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>                 <span class="token comment">#输出类实例的属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-继承-多继承"><a href="#5-继承-多继承" class="headerlink" title="5. 继承 多继承"></a>5. 继承 多继承</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#继承  多继承</span><span class="token comment">#方法  自己有调用自己的，自己无用上一级，选靠前的，无在选上一级，无报错</span><span class="token keyword">class</span> <span class="token class-name">base</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s在跑步'</span><span class="token operator">%</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s在打球'</span><span class="token operator">%</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">chi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s在吃饭'</span><span class="token operator">%</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">drink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s在喝水'</span><span class="token operator">%</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s在第二次跑步'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>aa <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token string">'wsd'</span><span class="token punctuation">)</span>aa<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>a <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token string">'wsd2'</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#多继承</span><span class="token keyword">class</span> <span class="token class-name">AA</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">arm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'arm'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BB</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">leg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'leg'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">CC</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">been</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'been'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">(</span>AA<span class="token punctuation">,</span>BB<span class="token punctuation">,</span>CC<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment">#Mixin  开发模式</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">arm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'arm2'</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>arm<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">#继承父类的数据，向上查找，直到找到为止</span>DD <span class="token operator">=</span> person<span class="token punctuation">(</span><span class="token string">'wsd'</span><span class="token punctuation">)</span>DD<span class="token punctuation">.</span>arm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>__mro__<span class="token punctuation">)</span>        <span class="token comment">#查找person的继承顺序</span><span class="token keyword">print</span><span class="token punctuation">(</span>DD<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>         <span class="token comment">#通过实例查找</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-作业"><a href="#6-作业" class="headerlink" title="6.作业"></a>6.作业</h3><p>定义一个矩形类，有长河宽两个实例属性，还有一个计算面积的方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义一个矩形类，有长河宽两个实例属性，还有一个计算面积的方法</span><span class="token keyword">class</span> <span class="token class-name">rectangle</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>length<span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>length <span class="token operator">=</span> length        self<span class="token punctuation">.</span>width <span class="token operator">=</span> width    <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        area <span class="token operator">=</span> self<span class="token punctuation">.</span>length <span class="token operator">*</span> self<span class="token punctuation">.</span>width        <span class="token keyword">return</span> areare <span class="token operator">=</span> rectangle<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>area <span class="token operator">=</span> re<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-函数基础</title>
      <link href="/2023/03/06/python-ji-chu/7-han-shu-ji-chu/"/>
      <url>/2023/03/06/python-ji-chu/7-han-shu-ji-chu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#函数定义</span><span class="token keyword">def</span> <span class="token function">inoformation_3</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex <span class="token operator">=</span> <span class="token string">'boy'</span><span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>inoformation_3<span class="token punctuation">(</span><span class="token string">'sdw'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'sgfsgf'</span><span class="token punctuation">,</span><span class="token string">'dgth'</span><span class="token punctuation">,</span><span class="token string">'gthgrgth'</span><span class="token punctuation">)</span>inoformation_3<span class="token punctuation">(</span><span class="token string">'sdw2'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token string">'sgfsgdshsf'</span><span class="token punctuation">,</span><span class="token string">'dgrturjth'</span><span class="token punctuation">,</span><span class="token string">'gthgrreytgth'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">**</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token string">'wfeer'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token string">'fre'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>inoformation_3<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'wew'</span><span class="token punctuation">,</span>age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">,</span>sex <span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-基础函数"><a href="#2-基础函数" class="headerlink" title="2. 基础函数"></a>2. 基础函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># dir()         # len()         # min()         # max()</span><span class="token comment"># sorted()      # reversed()    # sum()         # bin()</span><span class="token comment"># oct()         # hex()         # ord()         # chr()</span>a <span class="token operator">=</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ssg'</span><span class="token punctuation">,</span><span class="token string">'sf'</span><span class="token punctuation">,</span><span class="token string">'wrehth'</span><span class="token punctuation">,</span><span class="token number">1314</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">#枚举</span>b <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'5+5'</span><span class="token punctuation">)</span>                                 <span class="token comment">#加引号计算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-过滤函数-filter"><a href="#3-过滤函数-filter" class="headerlink" title="3. 过滤函数 filter"></a>3. 过滤函数 filter</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 过滤            filter</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>list_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-匹配函数-zip"><a href="#4-匹配函数-zip" class="headerlink" title="4. 匹配函数 zip"></a>4. 匹配函数 zip</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 匹配            zip   生成新的</span>list_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>list_3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>list_2<span class="token punctuation">,</span>list_3<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-map函数"><a href="#5-map函数" class="headerlink" title="5.  map函数"></a>5.  map函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 带返回值哦    map  把返回值接受生成新的列表</span><span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'hello'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'no hello'</span>d <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>f2<span class="token punctuation">,</span>list_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-局部变量-全剧变量"><a href="#6-局部变量-全剧变量" class="headerlink" title="6. 局部变量 全剧变量"></a>6. 局部变量 全剧变量</h3><p>局部可以访问全局表变量，但不能修改，全局不可以访问局部，如果需要改变全局变量，那么我们需要声明</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 局部变量 全剧变量</span><span class="token comment"># 局部可以访问全局表变量，但不能修改，全局不可以访问局部，如果需要改变全局变量，那么我们需要声明</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">def</span> <span class="token function">funcation_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> x    x <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> xa <span class="token operator">=</span> funcation_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-匿名函数"><a href="#7-匿名函数" class="headerlink" title="7. 匿名函数"></a>7. 匿名函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 匿名函数</span><span class="token comment"># 名字 参数：表达式，主题</span>list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">&gt;</span><span class="token number">5</span><span class="token punctuation">,</span>list_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-闭包-函数中子函数调用"><a href="#8-闭包-函数中子函数调用" class="headerlink" title="8. 闭包 函数中子函数调用"></a>8. 闭包 函数中子函数调用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 闭包 函数中子函数调用</span><span class="token keyword">def</span> <span class="token function">funcation_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">funcation_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'qwe'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  funcation_3<span class="token punctuation">(</span><span class="token punctuation">)</span>a <span class="token operator">=</span> funcation_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-递归-自己调用自己"><a href="#9-递归-自己调用自己" class="headerlink" title="9. 递归 自己调用自己"></a>9. 递归 自己调用自己</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 递归 自己调用自己</span><span class="token keyword">def</span> <span class="token function">funcation_4</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span>  funcation_4<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> ifuncation_4<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-回调函数"><a href="#10-回调函数" class="headerlink" title="10. 回调函数"></a>10. 回调函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 回调函数</span><span class="token comment"># 两个函数，第一个函数当做是一个参数，传给第二个函数，让第二个函数去使用第一个函数</span><span class="token keyword">def</span> <span class="token function">funcation_5</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i<span class="token operator">**</span>i    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">funcation_6</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>    j <span class="token operator">=</span> j<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> jfuncation_5<span class="token punctuation">(</span>funcation_6<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-作业1"><a href="#11-作业1" class="headerlink" title="11.作业1"></a>11.作业1</h3><p>定义一个函数，可以对传入的数据进行排序，通过一个参数决定是正向排序，还是反向排序</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义一个函数，可以对传入的数据进行排序，通过一个参数决定是正向排序，还是反向排序</span><span class="token keyword">def</span> <span class="token function">sort_1</span> <span class="token punctuation">(</span>direcation<span class="token punctuation">,</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> direcation <span class="token operator">==</span> <span class="token string">'foward'</span><span class="token punctuation">:</span>        li<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token keyword">elif</span> direcation <span class="token operator">==</span> <span class="token string">'reverse'</span><span class="token punctuation">:</span>        li<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误'</span><span class="token punctuation">)</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>sort_1<span class="token punctuation">(</span><span class="token string">'foward'</span><span class="token punctuation">,</span>li<span class="token punctuation">)</span>sort_1<span class="token punctuation">(</span><span class="token string">'reverse'</span><span class="token punctuation">,</span>li<span class="token punctuation">)</span>sort_1<span class="token punctuation">(</span><span class="token string">'no'</span><span class="token punctuation">,</span>li<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sort_2</span> <span class="token punctuation">(</span>mark<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> mark<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sort_2<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sort_3</span> <span class="token punctuation">(</span>mark<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> mark <span class="token keyword">else</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sort_3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sort_4</span> <span class="token punctuation">(</span>mark<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token keyword">if</span> mark <span class="token keyword">else</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sort_4<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-作业2"><a href="#12-作业2" class="headerlink" title="12.作业2"></a>12.作业2</h3><p>定义一个函数，传入一个字典，一个元组，将字典与元组中的值交换，返回交换后的字典与元组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义一个函数，传入一个字典，一个元组，将字典与元组中的值交换，返回交换后的字典与元组</span>tuple_1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>dict_1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'n1'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'n2'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'n3'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'n4'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'n5'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">funcation_1</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>   keys_1 <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>   values_1 <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>   dict_2 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>keys_1<span class="token punctuation">,</span>values_1<span class="token punctuation">)</span><span class="token punctuation">)</span>   tuple_2 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>values_1<span class="token punctuation">)</span>   <span class="token keyword">return</span> tuple_2<span class="token punctuation">,</span>dict_2tuple_2<span class="token punctuation">,</span>dict_2 <span class="token operator">=</span> funcation_1<span class="token punctuation">(</span><span class="token operator">*</span>tuple_1<span class="token punctuation">,</span><span class="token operator">**</span>dict_1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple_2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict_2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple_2<span class="token punctuation">,</span>dict_2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-控制流程</title>
      <link href="/2023/03/06/python-ji-chu/6-kong-zhi-liu-cheng/"/>
      <url>/2023/03/06/python-ji-chu/6-kong-zhi-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="1-条件判断-if"><a href="#1-条件判断-if" class="headerlink" title="1. 条件判断  if"></a>1. 条件判断  if</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 条件判断     if</span>score <span class="token operator">=</span> <span class="token number">65</span><span class="token keyword">if</span> score <span class="token operator">&gt;</span> <span class="token number">90</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'优秀'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'及格'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不及格'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-三目运算"><a href="#2-三目运算" class="headerlink" title="2. 三目运算"></a>2. 三目运算</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 三目运算    命令 if 条件 else 命令</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'及格'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> score <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token keyword">else</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不及格'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-条件循环-while"><a href="#3-条件循环-while" class="headerlink" title="3. 条件循环 while"></a>3. 条件循环 while</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 条件循环    while</span>str_1 <span class="token operator">=</span> <span class="token string">'sdgh'</span>i <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str_1<span class="token punctuation">)</span><span class="token keyword">while</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'还不够'</span><span class="token punctuation">)</span>    i <span class="token operator">-=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'够了'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-迭代循环-continue-break-pass"><a href="#4-迭代循环-continue-break-pass" class="headerlink" title="4. 迭代循环  continue  break  pass"></a>4. 迭代循环  continue  break  pass</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 迭代循环    continue  break  pass</span><span class="token keyword">for</span> j <span class="token keyword">in</span> str_1 <span class="token punctuation">:</span>                       <span class="token comment"># continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">7</span> <span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束'</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                   <span class="token comment">#break</span>    <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">7</span> <span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束'</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                   <span class="token comment">#pass</span>    <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">7</span> <span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-枚举-for"><a href="#5-枚举-for" class="headerlink" title="5. 枚举 for"></a>5. 枚举 for</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># for 枚举</span>list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ws'</span><span class="token punctuation">,</span><span class="token string">'wed'</span><span class="token punctuation">,</span><span class="token string">'rgfd'</span><span class="token punctuation">]</span><span class="token keyword">for</span> index<span class="token punctuation">,</span>i <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>list_1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>                    <span class="token comment"># 遍历的序号</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                        <span class="token comment"># 遍历的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-作业"><a href="#6-作业" class="headerlink" title="6.作业"></a>6.作业</h3><p>九九乘法表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 九九乘法表</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s*%s=%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        <span class="token comment"># print(j, end='')</span>        <span class="token comment"># print('*', end='')</span>        <span class="token comment"># print(i, end='')</span>        <span class="token comment"># print('=', end='')</span>        <span class="token comment"># print(i * j, end='\t')</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-运算符-类判断</title>
      <link href="/2023/03/06/python-ji-chu/5-yun-suan-fu-lei-pan-duan/"/>
      <url>/2023/03/06/python-ji-chu/5-yun-suan-fu-lei-pan-duan/</url>
      
        <content type="html"><![CDATA[<h3 id="1-类型判断"><a href="#1-类型判断" class="headerlink" title="1. 类型判断"></a>1. 类型判断</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 类型判断  isinstance(x,str)</span>str_1 <span class="token operator">=</span> <span class="token string">'asff'</span>a <span class="token operator">=</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>str_1<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>str_1<span class="token punctuation">,</span><span class="token builtin">list</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#   ==    !=   &gt;=   &lt;=   &gt;    &lt;</span><span class="token comment">#   and  or   not</span><span class="token comment">#   +=   /=    -=   *=   %=   **=   //=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-身份运算符"><a href="#3-身份运算符" class="headerlink" title="3. 身份运算符"></a>3. 身份运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 身份运算法   is    is not</span>a <span class="token operator">=</span> <span class="token number">4</span>b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> <span class="token keyword">not</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-成员运算符"><a href="#4-成员运算符" class="headerlink" title="4. 成员运算符"></a>4. 成员运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 成员运算符   in  not in</span>list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> list_1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">not</span> <span class="token keyword">in</span> list_1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h3>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-散列类型</title>
      <link href="/2023/03/06/python-ji-chu/4-san-lie-lei-xing/"/>
      <url>/2023/03/06/python-ji-chu/4-san-lie-lei-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="1-集合"><a href="#1-集合" class="headerlink" title="1. 集合"></a>1. 集合</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">set_1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span>set_2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token comment"># 交集 丙级 差集  &amp;  |  -</span>a <span class="token operator">=</span> set_1 <span class="token operator">&amp;</span> set_2b <span class="token operator">=</span> set_2 <span class="token operator">|</span> set_1c <span class="token operator">=</span> set_1 <span class="token operator">-</span> set_2d <span class="token operator">=</span> set_1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token comment"># 增 .add()</span>f <span class="token operator">=</span> set_1<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment"># 增多个  .update()</span>g <span class="token operator">=</span> set_1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment"># 删除 .pop()</span>h <span class="token operator">=</span> set_1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>             <span class="token comment"># 删除指定 .remove()</span>i <span class="token operator">=</span> set_1<span class="token punctuation">.</span>isdisjoint<span class="token punctuation">(</span>set_2<span class="token punctuation">)</span>     <span class="token comment"># 判断 是否有交集 .isdisjoint()  是 F  不是  T</span>j <span class="token operator">=</span> set_1<span class="token punctuation">.</span>issuperset<span class="token punctuation">(</span>set_2<span class="token punctuation">)</span>     <span class="token comment"># 判断是否包含  .issuperset()</span>k <span class="token operator">=</span> set_1<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>set_2<span class="token punctuation">)</span>       <span class="token comment"># 判断是否被包含于  .issubset()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-字典"><a href="#2-字典" class="headerlink" title="2. 字典"></a>2. 字典</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#定义</span>dict_1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'wsd'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'boy'</span><span class="token punctuation">}</span>dict_2 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'wsd'</span><span class="token punctuation">,</span>age <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">,</span>sex <span class="token operator">=</span> <span class="token string">'boy2'</span><span class="token punctuation">)</span>dict_3 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'namde2'</span><span class="token punctuation">,</span><span class="token string">'name3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#改</span>a <span class="token operator">=</span> dict_1<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>                  <span class="token comment"># 取值</span>dict_1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">88</span>                  <span class="token comment"># 改值</span>dict_1<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">188</span>              <span class="token comment"># 增加   有改，无增加</span>dict_1<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'name3'</span><span class="token punctuation">,</span><span class="token string">'dsw'</span><span class="token punctuation">)</span>    <span class="token comment"># 增加      .setdefault()</span><span class="token comment">#清除</span>dict_3<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment"># 清空   .clear()</span>dict_2<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment"># 删除  .popitem()  随机删除</span>dict_2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>                  <span class="token comment"># 删除  .pop()</span><span class="token comment">#查找</span>b <span class="token operator">=</span> dict_1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>              <span class="token comment"># 查找  .get()</span>c <span class="token operator">=</span> dict_1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment"># 返回所有值 .values()</span>d <span class="token operator">=</span> dict_1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment"># 返回所有值 返回所有键 .keys()</span>e <span class="token operator">=</span> dict_1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment"># 返回所有值 返回所有键值对  .items()</span><span class="token comment"># 字典拼接  .update()</span>dict_4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name2'</span><span class="token punctuation">:</span><span class="token string">'wsd'</span><span class="token punctuation">,</span><span class="token string">'age2'</span><span class="token punctuation">:</span><span class="token number">77</span><span class="token punctuation">}</span>  <span class="token comment"># 字典拼接  .update()</span>dict_1<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dict_4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-作业"><a href="#3-作业" class="headerlink" title="3.作业"></a>3.作业</h3><p>1、找出两个集合中相同的元素</p><p>2.定义我们学过的每种数据类型，并注明，那些可变，那些不可变</p><p>3、练习字典方法，截图上传</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1、找出两个集合中相同的元素</span><span class="token comment"># 2.定义我们学过的每种数据类型，并注明，那些可变，那些不可变</span><span class="token comment"># 3、练习字典方法，截图上传</span><span class="token comment"># 1.</span>set_1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span>set_2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>set_1 <span class="token operator">&amp;</span> set_2<span class="token punctuation">)</span><span class="token comment"># 2.</span>str_1 <span class="token operator">=</span> <span class="token string">'sdghgh'</span>                                  <span class="token comment">#不可变</span>list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>                              <span class="token comment">#可变</span>tuple_1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>                             <span class="token comment">#不可变</span>set_3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span>                               <span class="token comment">#可变</span>dict_1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'wsd'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'boy'</span><span class="token punctuation">}</span>    <span class="token comment">#可变</span><span class="token comment"># 3.</span>dict_1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'wsd'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'boy'</span><span class="token punctuation">}</span><span class="token comment"># 取值</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict_1<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 改值</span>dict_1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">88</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict_1<span class="token punctuation">)</span><span class="token comment"># 增加          .setdefault()</span>dict_1<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">188</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict_1<span class="token punctuation">)</span>dict_1<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'name3'</span><span class="token punctuation">,</span><span class="token string">'dsw'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict_1<span class="token punctuation">)</span><span class="token comment"># 第二种表示方法</span>dict_2 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'wsd'</span><span class="token punctuation">,</span>age <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">,</span>sex <span class="token operator">=</span> <span class="token string">'boy2'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict_2<span class="token punctuation">)</span><span class="token comment"># 浅复制  copy</span><span class="token comment"># 深复制  import copy   copy.deepcopy()</span><span class="token comment"># 生成  dict.fromkeys(['name','namde2','name3'],[1,2,3])</span>dict_3 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'namde2'</span><span class="token punctuation">,</span><span class="token string">'name3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict_3<span class="token punctuation">)</span><span class="token comment"># 清空   .clear()</span>dict_3<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict_3<span class="token punctuation">)</span><span class="token comment"># 删除  .pop()  .popitem()  随机删除</span>dict_2<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span>dict_2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict_2<span class="token punctuation">)</span><span class="token comment"># 查找  .get()</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict_1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 返回所有值 .values()   返回所有键 .keys()   返回所有键值对  .items()</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict_1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict_1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict_1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 字典拼接  .update()</span>dict_4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name2'</span><span class="token punctuation">:</span><span class="token string">'wsd'</span><span class="token punctuation">,</span><span class="token string">'age2'</span><span class="token punctuation">:</span><span class="token number">77</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict_1<span class="token punctuation">)</span>dict_1<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dict_4<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict_1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-深浅复制</title>
      <link href="/2023/03/06/python-ji-chu/3-shen-qian-fu-zhi/"/>
      <url>/2023/03/06/python-ji-chu/3-shen-qian-fu-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-浅复制"><a href="#1-浅复制" class="headerlink" title="1. 浅复制"></a>1. 浅复制</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 浅复制，.copy()</span><span class="token comment"># 第一层不会受到列表改变影响，改变第一层，1,2都不会改变，第二层会受到影响</span><span class="token comment">#第二层和原来列表有关联</span>list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>list_2 <span class="token operator">=</span> list_1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>list_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>list_1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># [1, 2, 3, 4, [7, 0, 9]]</span><span class="token comment"># [1, 2, 3, 4, [7, 0, 9]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-深复制"><a href="#2-深复制" class="headerlink" title="2. 深复制"></a>2. 深复制</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 深复制 import copy    copy.deepcopy()     内外都不会受到影响</span>list_3 <span class="token operator">=</span> list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">import</span> copylist_4 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>list_3<span class="token punctuation">)</span>list_3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>list_3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># [1, 5, 3, 4, [7, 0, 9]]</span><span class="token comment"># [1, 2, 3, 4, [7, 8, 9]]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-作业"><a href="#3-作业" class="headerlink" title="3.作业"></a>3.作业</h3><p>将‘邹栋老师hello我是魏士达’，用多种方法拼接成一句话，‘hello，邹栋老师，我是魏士达！’</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将‘邹栋老师hello我是魏士达’，用多种方法拼接成一句话，‘hello，邹栋老师，我是魏士达！’</span>str_1 <span class="token operator">=</span> <span class="token string">'邹栋老师hello我是魏士达'</span>str_2 <span class="token operator">=</span> str_1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>str_3 <span class="token operator">=</span> str_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>str_4 <span class="token operator">=</span> str_1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token punctuation">]</span>str_5 <span class="token operator">=</span> str_2<span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>str_3<span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>str_4<span class="token operator">+</span><span class="token string">'!'</span>str_6 <span class="token operator">=</span> <span class="token string">'hello,%s老师,我是%s！'</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token string">'邹栋'</span><span class="token punctuation">,</span><span class="token string">'魏士达'</span><span class="token punctuation">)</span>str_7 <span class="token operator">=</span> <span class="token string">'hello,{s1}老师,我是{s2}!'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>s1<span class="token operator">=</span><span class="token string">'邹栋'</span><span class="token punctuation">,</span>s2<span class="token operator">=</span><span class="token string">'魏士达'</span><span class="token punctuation">)</span>str_8 <span class="token operator">=</span> <span class="token string">'hello,{0}老师,我是{1}!'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'邹栋'</span><span class="token punctuation">,</span><span class="token string">'魏士达'</span><span class="token punctuation">)</span>str_9 <span class="token operator">=</span> <span class="token string">'hello,{}老师,我是{}!'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'邹栋'</span><span class="token punctuation">,</span><span class="token string">'魏士达'</span><span class="token punctuation">)</span>str_10 <span class="token operator">=</span> <span class="token string">'%s,%s,%s!'</span><span class="token operator">%</span><span class="token punctuation">(</span>str_2<span class="token punctuation">,</span>str_3<span class="token punctuation">,</span>str_4<span class="token punctuation">)</span>str_11 <span class="token operator">=</span> <span class="token string">'{},{},{}!'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>str_2<span class="token punctuation">,</span>str_3<span class="token punctuation">,</span>str_4<span class="token punctuation">)</span>str_12 <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>str_2<span class="token punctuation">,</span>str_3<span class="token punctuation">,</span>str_4<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'!'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str_5<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str_6<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str_7<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str_8<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str_9<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str_10<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str_11<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str_12<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-序列类型</title>
      <link href="/2023/03/06/python-ji-chu/2-xu-lie-lei-xing/"/>
      <url>/2023/03/06/python-ji-chu/2-xu-lie-lei-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="1-列表"><a href="#1-列表" class="headerlink" title="1. 列表"></a>1. 列表</h3><h4 id="1-1-新建"><a href="#1-1-新建" class="headerlink" title="1.1 新建"></a>1.1 新建</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#新建格式</span>names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'weishida'</span><span class="token punctuation">,</span><span class="token string">'wanyongjun'</span><span class="token punctuation">,</span><span class="token string">'weishaokang'</span><span class="token punctuation">,</span><span class="token string">'wuxiaoman'</span><span class="token punctuation">,</span><span class="token string">'lihuipeng'</span><span class="token punctuation">]</span>numbers<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>numbers_2<span class="token operator">=</span><span class="token punctuation">[</span>a<span class="token operator">**</span><span class="token number">3</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-增删改查"><a href="#1-2-增删改查" class="headerlink" title="1.2 增删改查"></a>1.2 增删改查</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#列表函数</span>list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token comment">#增加 append     尾部增加</span>list_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment"># 插入 .insert(x,'y')指定位置插入</span>list_1<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment"># 拆分增加，.extend()两序列连接  没有输出结果，只是运算</span>list_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>list_1<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>list_2<span class="token punctuation">)</span>       <span class="token comment">#1中加入2的</span>list_1<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token string">'adsd'</span><span class="token punctuation">)</span>       <span class="token comment">#1中加入a,d,s,d</span><span class="token comment"># 删除 .pop（） 删除最后 或指定元素  返回删除的元素</span>list_1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>a <span class="token operator">=</span> list_1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># .remove(x)  删除指定元素</span>list_1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment"># 清空 .clear() 返回空值</span>list_1<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 改</span><span class="token comment"># list_1[0] = 'a'</span><span class="token comment"># 查</span><span class="token comment"># .count(x)出现次数  .index(x)出现的索引 .index(x,y) y以后出现x的索引</span>list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>a <span class="token operator">=</span> list_1<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>       <span class="token comment">#4出现的次数</span>b <span class="token operator">=</span> list_1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token comment">#4出现的位置，索引</span>c <span class="token operator">=</span> list_1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment">#2位置后的4的位置索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-复制"><a href="#1-3-复制" class="headerlink" title="1.3 复制"></a>1.3 复制</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 复制 .copy()</span>list_2 <span class="token operator">=</span> list_1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-4-排序"><a href="#1-4-排序" class="headerlink" title="1.4 排序"></a>1.4 排序</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 排序 .</span><span class="token comment"># sort()小到大 .reverse() 反向 .sort(reverse = True) 大到小 .sort(key = str) AscII排序</span>list_1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>list_1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># .sort(key=str)AscII排序   key 可以添加函数</span>list_1<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>list_1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-5-查看列表方法"><a href="#1-5-查看列表方法" class="headerlink" title="1.5 查看列表方法"></a>1.5 查看列表方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查看列表方法</span><span class="token comment"># print(dir(list_1))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-元祖"><a href="#2-元祖" class="headerlink" title="2. 元祖"></a>2. 元祖</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 元组不可变</span>tuple_1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 查数量 .count(x)</span>a <span class="token operator">=</span> tuple_1<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 查元素索引 .index(x)</span>b <span class="token operator">=</span> tuple_1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3. 字符串"></a>3. 字符串</h3><p>字符串 不变本身 可赋值</p><h4 id="3-1-增删改查"><a href="#3-1-增删改查" class="headerlink" title="3.1 增删改查"></a>3.1 增删改查</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 字符串 不变本身 可赋值</span>str_1 <span class="token operator">=</span> <span class="token string">'123455asd'</span><span class="token comment"># 查</span>a <span class="token operator">=</span> str_1<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>                <span class="token comment"># 查数量 .count(x)</span>b <span class="token operator">=</span> str_1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>                <span class="token comment"># 查索引 .index(x)</span>c <span class="token operator">=</span> str_1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>                 <span class="token comment"># 查元素索引不报错 .find() 无返回-1</span>d <span class="token operator">=</span> str_1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span>e <span class="token operator">=</span> str_1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># 查规格</span>f <span class="token operator">=</span> str_1<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment"># 是否全为数字 .isdigit()  返回布尔值</span>g <span class="token operator">=</span> str_1<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment"># 查是否全字母 .isslpha()</span>h <span class="token operator">=</span> str_1<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">)</span>           <span class="token comment"># 判断 结尾是否相同</span>i <span class="token operator">=</span> str_1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'123455'</span><span class="token punctuation">)</span>   <span class="token comment"># 判断开始是否相同 .startswith()</span>j <span class="token operator">=</span> str_1<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment"># 判断是否全大写 .isupper()</span>k <span class="token operator">=</span> str_1<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment"># 判断是否全小写 .islower()</span><span class="token comment">#大小写转换</span>l <span class="token operator">=</span> str_1<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment"># 转小写 .lower()</span>m <span class="token operator">=</span> str_1<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment">#转大写 .upper()</span>n <span class="token operator">=</span> <span class="token string">'asdf  addf   advacx'</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#单词首字母大写 .title()</span>nn <span class="token operator">=</span> <span class="token string">'asdf  addf   advacx'</span><span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#首字母大写</span><span class="token comment"># 替换</span>o <span class="token operator">=</span> str_1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'wsd'</span><span class="token punctuation">)</span>       <span class="token comment">#1替换为wsd</span><span class="token comment"># 字符串 删除 字符、空白符 函数</span><span class="token comment">#(包括\n、\r、\t、' '，即：换行、回车、制表符、空格)</span>p <span class="token operator">=</span> <span class="token string">' wei Shi da '</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">#删除尾部</span>q <span class="token operator">=</span> <span class="token string">' wei Shi da '</span><span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">#删除开头</span>r <span class="token operator">=</span> <span class="token string">' wei Shi da '</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#删除开头和尾部</span>s <span class="token operator">=</span> <span class="token string">'wsd shi da'</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'wa'</span><span class="token punctuation">)</span>    <span class="token comment">#把 w a 分开，分别删除开头，结尾的 w a</span><span class="token comment"># 切割</span>t <span class="token operator">=</span> str_1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">#.split() 以空格来切割，返回列表</span>u <span class="token operator">=</span> str_1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>        <span class="token comment">#.split('a') 以a切割</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-字符串转义"><a href="#3-2-字符串转义" class="headerlink" title="3.2 字符串转义"></a>3.2 字符串转义</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 切割</span>t <span class="token operator">=</span> str_1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">#.split() 以空格来切割，返回列表</span>u <span class="token operator">=</span> str_1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>        <span class="token comment">#.split('a') 以a切割</span><span class="token comment"># 字符串转义</span><span class="token comment"># \n 换行                     \t 水平制表符 4个空格                   \v      纵向制表符</span><span class="token comment"># \r 回车                     \e      转义                          \b 退格</span><span class="token comment"># \a 代表提示音                 \f      换页                         r' 去转义前加r</span><span class="token comment"># \\代表\                     \' 代表单引号                         \在行尾  续行符</span><span class="token comment"># \0 代表空字符                \000    空</span><span class="token comment"># \oyy    八进制yy代表的字符  、\o12代表回车</span><span class="token comment"># \xyy    十六进制yy代表的字符，\x0a 代表换行</span><span class="token comment"># \other  其他的字符以普通的格式输出</span>v <span class="token operator">=</span> <span class="token string">'assf\nhg\tgsfdg\bhf'</span>w <span class="token operator">=</span> <span class="token string">'assfhg\rgsfdghf'</span>x <span class="token operator">=</span> <span class="token string">'adfgh\'sgh\adfd\0jj'</span>y <span class="token operator">=</span> <span class="token string">r'afdsgd\nsf'</span>z <span class="token operator">=</span> <span class="token string">'afd\tsgd\\nsf'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-字符串-编码解码"><a href="#3-3-字符串-编码解码" class="headerlink" title="3.3 字符串 编码解码"></a>3.3 字符串 编码解码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 字符串编码  解码</span>aa <span class="token operator">=</span> <span class="token string">'assf魏士达'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span>         <span class="token comment">#.encode()   .encode(endodeing='UTF-8') 8进制编码</span>bb <span class="token operator">=</span> aa<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>                    <span class="token comment">#.decode()   .decode(endodeing='UTF-8') 8进制编码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-4-字符串拼接格式化"><a href="#3-4-字符串拼接格式化" class="headerlink" title="3.4 字符串拼接格式化"></a>3.4 字符串拼接格式化</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 拼接</span>a <span class="token operator">=</span> <span class="token string">'sggg'</span> <span class="token operator">+</span> <span class="token string">'sgrg'</span>                                 <span class="token comment"># +</span>b <span class="token operator">=</span> <span class="token string">'%s,年龄:%d,你好'</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token string">'wsd'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span>                    <span class="token comment"># 占位符  %s</span>e <span class="token operator">=</span> <span class="token string">'{},年龄:{},你好'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'wsd'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span>              <span class="token comment"># .format()</span>f <span class="token operator">=</span> <span class="token string">'{0},年龄:{1},你好'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'wsd'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span>g <span class="token operator">=</span> <span class="token string">'{s1},年龄:{s2},你好'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>s1<span class="token operator">=</span><span class="token string">'wsd'</span><span class="token punctuation">,</span>s2<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">)</span>h <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'wsd'</span><span class="token punctuation">,</span><span class="token string">'dsw'</span><span class="token punctuation">,</span><span class="token string">'wds'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                   <span class="token comment"># .join    wsd-dsw-wds</span><span class="token comment">#格式化</span><span class="token comment"># 占位符 %s字符串，%d数字，%f浮点数，%o8进制，%x16进制，%e科学计数法</span>i <span class="token operator">=</span> <span class="token string">'数字:%-12.2f'</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">23.1</span><span class="token punctuation">)</span>                 <span class="token comment"># %-12.2f     12位数，2位小数，后加空格</span>j <span class="token operator">=</span> <span class="token string">'数字:{a:12.2f},'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">23.1</span><span class="token punctuation">)</span>   <span class="token comment">#{a: 12.2f}  12位数，2位小数，前加空格</span>k <span class="token operator">=</span> <span class="token string">'数字:{a:.2%},'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">0.1222</span><span class="token punctuation">)</span>   <span class="token comment">#{a: 12.2f}  百分数，2位小数</span>l <span class="token operator">=</span> <span class="token string">'数字:{a:^10},'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">23.1</span><span class="token punctuation">)</span>     <span class="token comment"># {a：^10}   10位数，中间对齐</span>m <span class="token operator">=</span> <span class="token string">'数字:{a:&gt;10},'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">23.1</span><span class="token punctuation">)</span>   <span class="token comment"># {a：&gt;10}   10位数，右对齐</span>n <span class="token operator">=</span> <span class="token string">'数字:{a:&lt;10},'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">23.1</span><span class="token punctuation">)</span>      <span class="token comment"># {a：&lt;10}   10位数，左对齐</span>o <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">1.23455</span><span class="token punctuation">,</span><span class="token string">'&lt;10.3f'</span><span class="token punctuation">)</span>            <span class="token comment">#左对齐，10位数，3位小数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-其他序列类型"><a href="#4-其他序列类型" class="headerlink" title="4. 其他序列类型"></a>4. 其他序列类型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># bytes  bytearray</span>bytes_1 <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bytes_1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>bytes_1<span class="token punctuation">)</span><span class="token punctuation">)</span>bytearray_1 <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bytearray_1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>bytearray_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-作业"><a href="#5-作业" class="headerlink" title="5.作业"></a>5.作业</h3><p>1.练习列表和字符串的常用方法与字符串的转义</p><p>2.有一个列表[1,2,3,4],请把下标为2的值改成9，在用列表的方法将列表改成[1,2,9,4,5,7]</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1.练习列表和字符串的常用方法与字符串的转义</span><span class="token comment"># 2.有一个列表[1,2,3,4],请把下标为2的值改成9，在用列表的方法将列表改成[1,2,9,4,5,7]</span>list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>list_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">)</span>list_1<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-数值类型</title>
      <link href="/2023/03/06/python-ji-chu/1-shu-zhi-lei-xing/"/>
      <url>/2023/03/06/python-ji-chu/1-shu-zhi-lei-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="1-数值类型"><a href="#1-数值类型" class="headerlink" title="1. 数值类型"></a>1. 数值类型</h3><p> int  float bool complex</p><h3 id="2-code"><a href="#2-code" class="headerlink" title="2. code"></a>2. code</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 数值类型 int float bool complex</span>a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">1.1</span>c <span class="token operator">=</span> <span class="token boolean">True</span>d <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span><span class="token comment"># 查看数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 解决小数点不准确</span><span class="token keyword">import</span> decimale <span class="token operator">=</span> decimal<span class="token punctuation">.</span>Decimal<span class="token punctuation">(</span><span class="token string">'1.2'</span><span class="token punctuation">)</span><span class="token operator">-</span>decimal<span class="token punctuation">.</span>Decimal<span class="token punctuation">(</span><span class="token string">'1.1'</span><span class="token punctuation">)</span>    <span class="token comment">#0.1</span><span class="token comment"># 向上 向下取整</span><span class="token keyword">import</span> mathf <span class="token operator">=</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">2.3</span><span class="token punctuation">)</span>g <span class="token operator">=</span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">2.3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-数据类型转换"><a href="#3-数据类型转换" class="headerlink" title="3.数据类型转换"></a>3.数据类型转换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 转换数据类型，有3个函数可以实现这个功能，即str()、int()和float()函数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4.运算符"></a>4.运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 运算符   +加  -减  *乘  /除  %取余  **幂  //取整</span><span class="token comment"># len(a)数据长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-作业"><a href="#5-作业" class="headerlink" title="5.作业"></a>5.作业</h3><p>定义一个列表，列表包含四种数值类型，用多种方法取到第三个值，</p><p>有一个时间形式是（20190518），要求从这个格式中得到年、月、日</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义一个列表，列表包含四种数值类型，用多种方法取到第三个值，</span>list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2.1</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 有一个时间形式是（20190518），要求从这个格式中得到年、月、日</span>tuple_1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20190518</span><span class="token punctuation">)</span>str_1<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>tuple_1<span class="token punctuation">)</span>year <span class="token operator">=</span> str_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>month <span class="token operator">=</span> str_1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>date <span class="token operator">=</span> str_1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'年 '</span><span class="token operator">+</span>year<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'月 '</span><span class="token operator">+</span>month<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日 '</span><span class="token operator">+</span>date<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span><span class="token string">'年'</span><span class="token punctuation">,</span>month<span class="token punctuation">,</span><span class="token string">'月'</span><span class="token punctuation">,</span>date<span class="token punctuation">,</span><span class="token string">'日'</span><span class="token punctuation">)</span><span class="token comment"># 第二种</span>number <span class="token operator">=</span> <span class="token number">20190815</span>year_1 <span class="token operator">=</span> number<span class="token operator">//</span><span class="token number">10000</span>month_1 <span class="token operator">=</span> <span class="token punctuation">(</span>number<span class="token operator">//</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span>date_1 <span class="token operator">=</span> number<span class="token operator">%</span><span class="token number">100</span><span class="token keyword">print</span><span class="token punctuation">(</span>year_1<span class="token punctuation">,</span>month_1<span class="token punctuation">,</span>date_1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-左旋字符串</title>
      <link href="/2023/03/06/li-kou-shua-ti/7-zuo-xuan-zi-fu-chuan/"/>
      <url>/2023/03/06/li-kou-shua-ti/7-zuo-xuan-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h3 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h3><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p><h3 id="2-C"><a href="#2-C" class="headerlink" title="2.C++"></a>2.C++</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token operator">:</span>    string <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        string st_new <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            st_new <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            st_new <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> st_new<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-python"><a href="#3-python" class="headerlink" title="3.python"></a>3.python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :type n: int        :rtype: str        """</span>        <span class="token keyword">return</span> s<span class="token punctuation">[</span>n<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-字符串替换空格</title>
      <link href="/2023/03/06/li-kou-shua-ti/6-zi-fu-chuan-ti-huan-kong-ge/"/>
      <url>/2023/03/06/li-kou-shua-ti/6-zi-fu-chuan-ti-huan-kong-ge/</url>
      
        <content type="html"><![CDATA[<h3 id="1-题目"><a href="#1-题目" class="headerlink" title="1. 题目"></a>1. 题目</h3><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p><h3 id="2-C"><a href="#2-C" class="headerlink" title="2.C++"></a>2.C++</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token operator">:</span>    string <span class="token function">replaceSpace</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        string str_new <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                str_new <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                str_new <span class="token operator">+=</span> <span class="token string">"%20"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str_new<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-pyhon"><a href="#3-pyhon" class="headerlink" title="3.pyhon"></a>3.pyhon</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: str        """</span>        st_new <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> st <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> st <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">:</span>                st_new <span class="token operator">=</span> st_new <span class="token operator">+</span> st            <span class="token keyword">else</span><span class="token punctuation">:</span>                st_new <span class="token operator">=</span> st_new <span class="token operator">+</span> <span class="token string">'%20'</span>        <span class="token keyword">return</span> st_new<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-复杂链表的赋值</title>
      <link href="/2023/03/05/li-kou-shua-ti/5-fu-za-lian-biao-de-fu-zhi/"/>
      <url>/2023/03/05/li-kou-shua-ti/5-fu-za-lian-biao-de-fu-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h3><p>请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。</p><p><img src="/2023/03/05/li-kou-shua-ti/5-fu-za-lian-biao-de-fu-zhi/copy.png"></p><p>输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</p><p>输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</p><h3 id="2-C"><a href="#2-C" class="headerlink" title="2.C++"></a>2.C++</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*// Definition for a Node.class Node {public:    int val;    Node* next;    Node* random;        Node(int _val) {        val = _val;        next = NULL;        random = NULL;    }};*/</span>class Solution <span class="token punctuation">{</span>public<span class="token operator">:</span>    Node<span class="token operator">*</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//将拷贝节点放到原节点后面，例如1-&gt;2-&gt;3这样的链表就变成了这样1-&gt;1'-&gt;2-&gt;2'-&gt;3-&gt;3'</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> nullptr<span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">*</span> nodeNew <span class="token operator">=</span> new <span class="token function">Node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            nodeNew<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> nodeNew<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//把拷贝节点的random指针安排上</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> nullptr<span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">*</span> nodeNew <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            nodeNew<span class="token operator">-&gt;</span>random <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>random <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span> <span class="token operator">?</span> node<span class="token operator">-&gt;</span>random<span class="token operator">-&gt;</span>next <span class="token operator">:</span> nullptr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//分离拷贝节点和原节点，变成1-&gt;2-&gt;3和1'-&gt;2'-&gt;3'两个链表，后者就是答案</span>        Node<span class="token operator">*</span> headNew <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> nullptr<span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">*</span> nodeNew <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            nodeNew<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token punctuation">(</span>nodeNew<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span> <span class="token operator">?</span> nodeNew<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">:</span> nullptr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> headNew<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-反转链表</title>
      <link href="/2023/03/05/li-kou-shua-ti/4-fan-zhuan-lian-biao/"/>
      <url>/2023/03/05/li-kou-shua-ti/4-fan-zhuan-lian-biao/</url>
      
        <content type="html"><![CDATA[<h3 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h3><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点</p><h3 id="2-C"><a href="#2-C" class="headerlink" title="2. C++"></a>2. C++</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span>class Solution <span class="token punctuation">{</span>public<span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode<span class="token operator">*</span> pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> nex <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            nex <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>             pre <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> nex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-python"><a href="#3-python" class="headerlink" title="3. python"></a>3. python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode(object):</span><span class="token comment">#     def __init__(self, x):</span><span class="token comment">#         self.val = x</span><span class="token comment">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> head        pre <span class="token operator">=</span> <span class="token boolean">None</span>        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            nex <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre            pre <span class="token operator">=</span> cur            cur <span class="token operator">=</span> nex        <span class="token keyword">return</span> pre<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-从尾到头打印链表</title>
      <link href="/2023/03/05/li-kou-shua-ti/3-cong-wei-dao-tou-da-yin-lian-biao/"/>
      <url>/2023/03/05/li-kou-shua-ti/3-cong-wei-dao-tou-da-yin-lian-biao/</url>
      
        <content type="html"><![CDATA[<h3 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h3><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><h3 id="2-C"><a href="#2-C" class="headerlink" title="2. C++"></a>2. C++</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span>class Solution <span class="token punctuation">{</span>public<span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> ve<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ve<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ve<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-python"><a href="#3-python" class="headerlink" title="3. python"></a>3. python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode(object):</span><span class="token comment">#     def __init__(self, x):</span><span class="token comment">#         self.val = x</span><span class="token comment">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: List[int]        """</span>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>        li2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            li2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># return li[::-1]</span>        <span class="token keyword">return</span> li2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-栈最小min函数</title>
      <link href="/2023/03/04/li-kou-shua-ti/2-zhan-zui-xiao-min-han-shu/"/>
      <url>/2023/03/04/li-kou-shua-ti/2-zhan-zui-xiao-min-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h3><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p><h3 id="2-解法"><a href="#2-解法" class="headerlink" title="2.解法"></a>2.解法</h3><p>要想只调用一次函数就得到最小元素，那么最小元素必须是栈顶元素。要达到这个目的，只能是在元素入栈时就比较之后再存放，将最小的较小的元素放在栈顶(注意：这里说的是较小，而不是最小)。对于一个栈来说，随着入栈元素的增加，不一定能将最小的元素放在栈顶</p><p>所以我们需要定义两个栈，栈1正常入栈出栈，栈2只存放最小的元素，其它元素不存放，为了达到这个目的，我们只需将每一次要入栈的元素与栈2的栈顶元素进行比较，将较小的入栈即可(因为每次都要入栈较小的，所以可能栈2中的元素都是相同的，但是能保证是最小的)</p><p><img src="/2023/03/04/li-kou-shua-ti/2-zhan-zui-xiao-min-han-shu/min.PNG"></p><h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">class MinStack <span class="token punctuation">{</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> minst<span class="token punctuation">;</span>public<span class="token operator">:</span>    <span class="token comment">/** initialize your data structure here. */</span>    <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>minst<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            minst<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        minst<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minval <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>minst<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        minst<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>minval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minst<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">return</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">return</span> minst<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Your MinStack object will be instantiated and called as such: * MinStack* obj = new MinStack(); * obj-&gt;push(x); * obj-&gt;pop(); * int param_3 = obj-&gt;top(); * int param_4 = obj-&gt;min(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-两栈实现队列</title>
      <link href="/2023/03/04/li-kou-shua-ti/1-liang-zhan-shi-xian-dui-lie/"/>
      <url>/2023/03/04/li-kou-shua-ti/1-liang-zhan-shi-xian-dui-lie/</url>
      
        <content type="html"><![CDATA[<h3 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h3><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p><h3 id="2-解法一"><a href="#2-解法一" class="headerlink" title="2.解法一"></a>2.解法一</h3><p>元素永远保存在<code>stack1（主栈中</code>），<code>stack2（辅助栈）</code>只是作为一个中间容器。</p><p><img src="/2023/03/04/li-kou-shua-ti/1-liang-zhan-shi-xian-dui-lie/%E8%A7%A3%E6%B3%95%E4%B8%80.png"></p><h3 id="3-解法二"><a href="#3-解法二" class="headerlink" title="3.解法二"></a>3.解法二</h3><p><code>stack1</code>仍然是主栈，插入操作直接进<code>stack1</code>即可，而出队操作时，可以先判断<code>stack2</code>是否是空的，非空则直接出栈一个元素即是队列的对头元素，若是<code>stack2</code>空，则将<code>stack1</code>的元素都移到<code>stack2</code>，刚好又逆序，符合出队的顺序了。</p><h3 id="4-代码"><a href="#4-代码" class="headerlink" title="4.代码"></a>4.代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">class CQueue <span class="token punctuation">{</span>public<span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s1<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s2<span class="token punctuation">;</span>    <span class="token function">CQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">appendTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">int</span> ret<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ret <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Your CQueue object will be instantiated and called as such: * CQueue* obj = new CQueue(); * obj-&gt;appendTail(value); * int param_2 = obj-&gt;deleteHead(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-机房预约系统</title>
      <link href="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/"/>
      <url>/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="1、机房预约系统需求"><a href="#1、机房预约系统需求" class="headerlink" title="1、机房预约系统需求"></a>1、机房预约系统需求</h2><h3 id="1-1-系统简介"><a href="#1-1-系统简介" class="headerlink" title="1.1 系统简介"></a>1.1 系统简介</h3><ul><li>学校现有几个规格不同的机房，由于使用时经常出现”撞车”现象,现开发一套机房预约系统，解决这一问题。</li></ul><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548682783885.png"></p><h3 id="1-2-身份简介"><a href="#1-2-身份简介" class="headerlink" title="1.2 身份简介"></a>1.2 身份简介</h3><p>分别有三种身份使用该程序</p><ul><li><strong>学生代表</strong>：申请使用机房</li><li><strong>教师</strong>：审核学生的预约申请</li><li><strong>管理员</strong>：给学生、教师创建账号</li></ul><h3 id="1-3-机房简介"><a href="#1-3-机房简介" class="headerlink" title="1.3 机房简介"></a>1.3 机房简介</h3><p>机房总共有3间</p><ul><li>1号机房   — 最大容量20人</li><li>2号机房   — 最多容量50人</li><li>3号机房   — 最多容量100人</li></ul><h3 id="1-4-申请简介"><a href="#1-4-申请简介" class="headerlink" title="1.4 申请简介"></a>1.4 申请简介</h3><ul><li>申请的订单每周由管理员负责清空。</li><li>学生可以预约未来一周内的机房使用，预约的日期为周一至周五，预约时需要选择预约时段（上午、下午）</li><li>教师来审核预约，依据实际情况审核预约通过或者不通过</li></ul><h3 id="1-5-系统具体需求"><a href="#1-5-系统具体需求" class="headerlink" title="1.5 系统具体需求"></a>1.5 系统具体需求</h3><ul><li>首先进入登录界面，可选登录身份有：<ul><li>学生代表</li><li>老师</li><li>管理员</li><li>退出</li></ul></li><li>每个身份都需要进行验证后，进入子菜单<ul><li>学生需要输入 ：学号、姓名、登录密码</li><li>老师需要输入：职工号、姓名、登录密码</li><li>管理员需要输入：管理员姓名、登录密码</li></ul></li><li>学生具体功能<ul><li>申请预约    —   预约机房</li><li>查看自身的预约    —  查看自己的预约状态</li><li>查看所有预约   —   查看全部预约信息以及预约状态</li><li>取消预约    —   取消自身的预约，预约成功或审核中的预约均可取消</li><li>注销登录    —   退出登录</li></ul></li><li>教师具体功能<ul><li>查看所有预约   —   查看全部预约信息以及预约状态</li><li>审核预约    —   对学生的预约进行审核</li><li>注销登录    —   退出登录</li></ul></li><li>管理员具体功能<ul><li>添加账号    —   添加学生或教师的账号，需要检测学生编号或教师职工号是否重复</li><li>查看账号    —   可以选择查看学生或教师的全部信息</li><li>查看机房    —   查看所有机房的信息</li><li>清空预约    —   清空所有预约记录</li><li>注销登录    —   退出登录</li></ul></li></ul><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548682206670.png"></p><h2 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h2><p>创建项目步骤如下：</p><ul><li>创建新项目</li><li>添加文件</li></ul><h3 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h3><ul><li>打开vs2017后，点击创建新项目，创建新的C++项目</li></ul><p>如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548682413343.png"></p><ul><li>填写项目名称以及选取项目路径，点击确定生成项目</li></ul><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548682522544.png"></p><h3 id="2-2-添加文件"><a href="#2-2-添加文件" class="headerlink" title="2.2 添加文件"></a>2.2 添加文件</h3><ul><li>右键源文件，进行添加文件操作</li></ul><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548682597721.png"></p><ul><li>填写文件名称，点击添加</li></ul><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548682679989.png"></p><ul><li>生成文件成功，效果如下图</li></ul><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548682733912.png"></p><h2 id="3、创建主菜单"><a href="#3、创建主菜单" class="headerlink" title="3、创建主菜单"></a>3、创建主菜单</h2><p><strong>功能描述：</strong></p><ul><li>设计主菜单，与用户进行交互</li></ul><h3 id="3-1-菜单实现"><a href="#3-1-菜单实现" class="headerlink" title="3.1 菜单实现"></a>3.1 菜单实现</h3><ul><li>在主函数main中添加菜单提示，代码如下：</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {cout &lt;&lt; "======================  欢迎来到传智播客机房预约系统  ====================="          &lt;&lt; endl;cout &lt;&lt; endl &lt;&lt; "请输入您的身份" &lt;&lt; endl;cout &lt;&lt; "\t\t -------------------------------\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          1.学生代表           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          2.老    师           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          3.管 理 员           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          0.退    出           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t -------------------------------\n";cout &lt;&lt; "输入您的选择: ";system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548557945611.png"></p><h3 id="3-2-搭建接口"><a href="#3-2-搭建接口" class="headerlink" title="3.2 搭建接口"></a>3.2 搭建接口</h3><ul><li>接受用户的选择，搭建接口</li><li>在main中添加代码</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int select = 0;while (true){cout &lt;&lt; "======================  欢迎来到传智播客机房预约系统  =====================" &lt;&lt; endl;cout &lt;&lt; endl &lt;&lt; "请输入您的身份" &lt;&lt; endl;cout &lt;&lt; "\t\t -------------------------------\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          1.学生代表           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          2.老    师           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          3.管 理 员           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          0.退    出           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t -------------------------------\n";cout &lt;&lt; "输入您的选择: ";cin &gt;&gt; select; //接受用户选择switch (select){case 1:  //学生身份break;case 2:  //老师身份break;case 3:  //管理员身份break;case 0:  //退出系统break;default:             cout &lt;&lt; "输入有误，请重新选择！" &lt;&lt; endl;    system("pause");system("cls");break;}}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试，输入0、1、2、3会重新回到界面，输入其他提示输入有误，清屏后重新选择</p><p>效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548558694230.png"></p><p>至此，界面搭建完毕</p><h2 id="4、-退出功能实现"><a href="#4、-退出功能实现" class="headerlink" title="4、 退出功能实现"></a>4、 退出功能实现</h2><h3 id="4-1-退出功能实现"><a href="#4-1-退出功能实现" class="headerlink" title="4.1 退出功能实现"></a>4.1 退出功能实现</h3><p>在main函数分支 0 选项中，添加退出程序的代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">cout &lt;&lt; "欢迎下一次使用"&lt;&lt;endl;system("pause");return 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548558992754.png"></p><h3 id="4-2-测试退出功能"><a href="#4-2-测试退出功能" class="headerlink" title="4.2 测试退出功能"></a>4.2 测试退出功能</h3><p>运行程序，效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548559026436.png"></p><p>至此，退出程序功能实现</p><h2 id="5、-创建身份类"><a href="#5、-创建身份类" class="headerlink" title="5、 创建身份类"></a>5、 创建身份类</h2><h3 id="5-1-身份的基类"><a href="#5-1-身份的基类" class="headerlink" title="5.1 身份的基类"></a>5.1 身份的基类</h3><ul><li>在整个系统中，有三种身份，分别为：学生代表、老师以及管理员</li><li>三种身份有其共性也有其特性，因此我们可以将三种身份抽象出一个身份基类<strong>identity</strong></li><li>在头文件下创建Identity.h文件</li></ul><p>Identity.h中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;//身份抽象类class Identity{public://操作菜单virtual void operMenu() = 0;string m_Name; //用户名string m_Pwd;  //密码};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548573329273.png"></p><h3 id="5-2-学生类"><a href="#5-2-学生类" class="headerlink" title="5.2 学生类"></a>5.2 学生类</h3><h4 id="5-2-1-功能分析"><a href="#5-2-1-功能分析" class="headerlink" title="5.2.1 功能分析"></a>5.2.1 功能分析</h4><ul><li><p>学生类主要功能是可以通过类中成员函数，实现预约实验室操作</p></li><li><p>学生类中主要功能有：</p><ul><li>显示学生操作的菜单界面</li><li>申请预约</li><li>查看自身预约</li><li>查看所有预约</li><li>取消预约</li></ul></li></ul><h4 id="5-2-2-类的创建"><a href="#5-2-2-类的创建" class="headerlink" title="5.2.2 类的创建"></a>5.2.2 类的创建</h4><ul><li>在头文件以及源文件下创建 student.h 和 student.cpp文件</li></ul><p>student.h中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;#include "identity.h"//学生类class Student :public Identity{public://默认构造Student();//有参构造(学号、姓名、密码)Student(int id, string name, string pwd);//菜单界面virtual void operMenu(); //申请预约void applyOrder(); //查看我的预约void showMyOrder(); //查看所有预约void showAllOrder(); //取消预约void cancelOrder();//学生学号int m_Id;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>student.cpp中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "student.h"//默认构造Student::Student(){}//有参构造(学号、姓名、密码)Student::Student(int id, string name, string pwd){}//菜单界面void Student::operMenu(){}//申请预约void Student::applyOrder(){}//查看我的预约void Student::showMyOrder(){}//查看所有预约void Student::showAllOrder(){}//取消预约void Student::cancelOrder(){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-老师类"><a href="#5-3-老师类" class="headerlink" title="5.3 老师类"></a>5.3 老师类</h3><h4 id="5-3-1-功能分析"><a href="#5-3-1-功能分析" class="headerlink" title="5.3.1 功能分析"></a>5.3.1 功能分析</h4><ul><li><p>教师类主要功能是查看学生的预约，并进行审核</p></li><li><p>教师类中主要功能有：</p><ul><li><p>显示教师操作的菜单界面</p></li><li><p>查看所有预约</p></li><li><p>审核预约</p></li></ul></li></ul><h4 id="5-3-2-类的创建"><a href="#5-3-2-类的创建" class="headerlink" title="5.3.2 类的创建"></a>5.3.2 类的创建</h4><ul><li>在头文件以及源文件下创建 teacher.h 和 teacher.cpp文件</li></ul><p>teacher.h中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#define _CRT_SECURE_NO_WARNINGS#include&lt;iostream&gt;using namespace std;#include "identity.h"class Teacher :public Identity{public://默认构造Teacher();//有参构造 (职工编号，姓名，密码)Teacher(int empId, string name, string pwd);//菜单界面virtual void operMenu();//查看所有预约void showAllOrder(); //审核预约void validOrder(); int m_EmpId; //教师编号};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>teacher.cpp中添加如下代码:</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include"teacher.h"//默认构造Teacher::Teacher(){}//有参构造 (职工编号，姓名，密码)Teacher::Teacher(int empId, string name, string pwd){}//菜单界面void Teacher::operMenu(){}//查看所有预约void Teacher::showAllOrder(){}//审核预约void Teacher::validOrder(){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-管理员类"><a href="#5-4-管理员类" class="headerlink" title="5.4 管理员类"></a>5.4 管理员类</h3><h4 id="5-4-1-功能分析"><a href="#5-4-1-功能分析" class="headerlink" title="5.4.1 功能分析"></a>5.4.1 功能分析</h4><ul><li><p>管理员类主要功能是对学生和老师账户进行管理，查看机房信息以及清空预约记录</p></li><li><p>管理员类中主要功能有：</p><ul><li><p>显示管理员操作的菜单界面</p></li><li><p>添加账号</p></li><li><p>查看账号</p></li><li><p>查看机房信息</p></li><li><p>清空预约记录</p></li></ul></li></ul><h4 id="5-4-2-类的创建"><a href="#5-4-2-类的创建" class="headerlink" title="5.4.2 类的创建"></a>5.4.2 类的创建</h4><ul><li>在头文件以及源文件下创建 manager.h 和 manager.cpp文件</li></ul><p>manager.h中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;#include "identity.h"class Manager :public Identity{public://默认构造Manager();//有参构造  管理员姓名，密码Manager(string name, string pwd);//选择菜单virtual void operMenu();//添加账号  void addPerson();//查看账号void showPerson();//查看机房信息void showComputer();//清空预约记录void cleanFile();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>manager.cpp中添加如下代码:</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "manager.h"//默认构造Manager::Manager(){}//有参构造Manager::Manager(string name, string pwd){}//选择菜单void Manager::operMenu(){}//添加账号  void Manager::addPerson(){}//查看账号void Manager::showPerson(){}//查看机房信息void Manager::showComputer(){}//清空预约记录void Manager::cleanFile(){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，所有身份类创建完毕，效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548574390768.png"></p><h2 id="6、-登录模块"><a href="#6、-登录模块" class="headerlink" title="6、  登录模块"></a>6、  登录模块</h2><h3 id="6-1-全局文件添加"><a href="#6-1-全局文件添加" class="headerlink" title="6.1 全局文件添加"></a>6.1 全局文件添加</h3><p>功能描述：</p><ul><li>不同的身份可能会用到不同的文件操作，我们可以将所有的文件名定义到一个全局的文件中</li><li>在头文件中添加 <strong>globalFile.h</strong> 文件</li><li>并添加如下代码：</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once //管理员文件#define ADMIN_FILE     "admin.txt"//学生文件#define STUDENT_FILE   "student.txt"//教师文件#define TEACHER_FILE   "teacher.txt"//机房信息文件#define COMPUTER_FILE  "computerRoom.txt"//订单文件#define ORDER_FILE     "order.txt"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且在同级目录下，创建这几个文件</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548575650130.png"></p><h3 id="6-2-登录函数封装"><a href="#6-2-登录函数封装" class="headerlink" title="6.2  登录函数封装"></a>6.2  登录函数封装</h3><p>功能描述：</p><ul><li>根据用户的选择，进入不同的身份登录</li></ul><p>在预约系统的.cpp文件中添加全局函数 <code>void LoginIn(string fileName, int type)</code></p><p>参数：</p><ul><li>fileName  — 操作的文件名</li><li>type      —  登录的身份  （1代表学生、2代表老师、3代表管理员）</li></ul><p>LoginIn中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "globalFile.h"#include "identity.h"#include &lt;fstream&gt;#include &lt;string&gt;//登录功能void LoginIn(string fileName, int type){Identity * person = NULL;ifstream ifs;ifs.open(fileName, ios::in);//文件不存在情况if (!ifs.is_open()){cout &lt;&lt; "文件不存在" &lt;&lt; endl;ifs.close();return;}int id = 0;string name;string pwd;if (type == 1)//学生登录{cout &lt;&lt; "请输入你的学号" &lt;&lt; endl;cin &gt;&gt; id;}else if (type == 2) //教师登录{cout &lt;&lt; "请输入你的职工号" &lt;&lt; endl;cin &gt;&gt; id;}cout &lt;&lt; "请输入用户名：" &lt;&lt; endl;cin &gt;&gt; name;cout &lt;&lt; "请输入密码： " &lt;&lt; endl;cin &gt;&gt; pwd;if (type == 1){//学生登录验证}else if (type == 2){//教师登录验证}else if(type == 3){//管理员登录验证}cout &lt;&lt; "验证登录失败!" &lt;&lt; endl;system("pause");system("cls");return;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在main函数的不同分支中，填入不同的登录接口</li></ul><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548575945985.png"></p><h3 id="6-3-学生登录实现"><a href="#6-3-学生登录实现" class="headerlink" title="6.3 学生登录实现"></a>6.3 学生登录实现</h3><p>在student.txt文件中添加两条学生信息，用于测试</p><p>添加信息:   </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">1 张三 1232 李四 123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中：</p><ul><li>第一列  代表  <strong>学号</strong></li><li>第二列  代表  <strong>学生姓名</strong></li><li>第三列  代表  <strong>密码</strong></li></ul><p>效果图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548583693555.png"></p><p>在Login函数的学生分支中加入如下代码，验证学生身份</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生登录验证int fId;string fName;string fPwd;while (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd){if (id == fId &amp;&amp; name == fName &amp;&amp; pwd == fPwd){cout &lt;&lt; "学生验证登录成功!" &lt;&lt; endl;system("pause");system("cls");person = new Student(id, name, pwd);return;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加代码效果图</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548583915819.png"></p><p>测试：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548583950828.png"></p><h3 id="6-4-教师登录实现"><a href="#6-4-教师登录实现" class="headerlink" title="6.4 教师登录实现"></a>6.4 教师登录实现</h3><p>在teacher.txt文件中添加一条老师信息，用于测试</p><p>添加信息:   </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">1 老王 123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li>第一列  代表  <strong>教师职工编号</strong></li><li>第二列  代表  <strong>教师姓名</strong></li><li>第三列  代表  <strong>密码</strong></li></ul><p>效果图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548584030522.png"></p><p>在Login函数的教师分支中加入如下代码，验证教师身份</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//教师登录验证int fId;string fName;string fPwd;while (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd){if (id == fId &amp;&amp; name == fName &amp;&amp; pwd == fPwd){cout &lt;&lt; "教师验证登录成功!" &lt;&lt; endl;system("pause");system("cls");person = new Teacher(id, name, pwd);return;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加代码效果图</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548584158339.png"></p><p>测试：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548584177003.png"></p><h3 id="6-5-管理员登录实现"><a href="#6-5-管理员登录实现" class="headerlink" title="6.5 管理员登录实现"></a>6.5 管理员登录实现</h3><p>在admin.txt文件中添加一条管理员信息，由于我们只有一条管理员，因此本案例中没有添加管理员的功能</p><p>添加信息:   </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">admin 123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：<code>admin</code>代表管理员用户名，<code>123</code>代表管理员密码</p><p>效果图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548577855190.png"></p><p>在Login函数的管理员分支中加入如下代码，验证管理员身份</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//管理员登录验证string fName;string fPwd;while (ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd){if (name == fName &amp;&amp; pwd == fPwd){cout &lt;&lt; "验证登录成功!" &lt;&lt; endl;//登录成功后，按任意键进入管理员界面system("pause");system("cls");//创建管理员对象person = new Manager(name,pwd);return;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548588322712.png"></p><p>测试效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548583245072.png"></p><p>至此，所有身份的登录功能全部实现！</p><h2 id="7、-管理员模块"><a href="#7、-管理员模块" class="headerlink" title="7、 管理员模块"></a>7、 管理员模块</h2><h3 id="7-1-管理员登录和注销"><a href="#7-1-管理员登录和注销" class="headerlink" title="7.1  管理员登录和注销"></a>7.1  管理员登录和注销</h3><h4 id="7-1-1-构造函数"><a href="#7-1-1-构造函数" class="headerlink" title="7.1.1 构造函数"></a>7.1.1 构造函数</h4><ul><li>在Manager类的构造函数中，初始化管理员信息，代码如下：</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//有参构造Manager::Manager(string name, string pwd){this-&gt;m_Name = name;this-&gt;m_Pwd = pwd;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-1-2-管理员子菜单"><a href="#7-1-2-管理员子菜单" class="headerlink" title="7.1.2  管理员子菜单"></a>7.1.2  管理员子菜单</h4><ul><li>在机房预约系统.cpp中，当用户登录的是管理员，添加管理员菜单接口</li><li>将不同的分支提供出来<ul><li>添加账号</li><li>查看账号</li><li>查看机房</li><li>清空预约</li><li>注销登录</li></ul></li><li>实现注销功能</li></ul><p>添加全局函数 <code>void managerMenu(Identity * &amp;manager)</code>，代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//管理员菜单void managerMenu(Identity * &amp;manager){while (true){//管理员菜单manager-&gt;operMenu();Manager* man = (Manager*)manager;int select = 0;cin &gt;&gt; select;        if (select == 1)  //添加账号{cout &lt;&lt; "添加账号" &lt;&lt; endl;man-&gt;addPerson();}else if (select == 2) //查看账号{cout &lt;&lt; "查看账号" &lt;&lt; endl;man-&gt;showPerson(); }else if (select == 3) //查看机房{cout &lt;&lt; "查看机房" &lt;&lt; endl;man-&gt;showComputer();}else if (select == 4) //清空预约{cout &lt;&lt; "清空预约" &lt;&lt; endl;man-&gt;cleanFile();}else{delete manager;cout &lt;&lt; "注销成功" &lt;&lt; endl;system("pause");system("cls");return;}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-1-3-菜单功能实现"><a href="#7-1-3-菜单功能实现" class="headerlink" title="7.1.3 菜单功能实现"></a>7.1.3 菜单功能实现</h4><ul><li>在实现成员函数<code>void Manager::operMenu()</code> 代码如下：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//选择菜单void Manager::operMenu(){cout &lt;&lt; "欢迎管理员："&lt;&lt;this-&gt;m_Name &lt;&lt; "登录！" &lt;&lt; endl;cout &lt;&lt; "\t\t ---------------------------------\n";cout &lt;&lt; "\t\t|                                |\n";cout &lt;&lt; "\t\t|          1.添加账号            |\n";cout &lt;&lt; "\t\t|                                |\n";cout &lt;&lt; "\t\t|          2.查看账号            |\n";cout &lt;&lt; "\t\t|                                |\n";cout &lt;&lt; "\t\t|          3.查看机房            |\n";cout &lt;&lt; "\t\t|                                |\n";cout &lt;&lt; "\t\t|          4.清空预约            |\n";cout &lt;&lt; "\t\t|                                |\n";cout &lt;&lt; "\t\t|          0.注销登录            |\n";cout &lt;&lt; "\t\t|                                |\n";cout &lt;&lt; "\t\t ---------------------------------\n";cout &lt;&lt; "请选择您的操作： " &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-1-4-接口对接"><a href="#7-1-4-接口对接" class="headerlink" title="7.1.4 接口对接"></a>7.1.4 接口对接</h4><ul><li>管理员成功登录后，调用管理员子菜单界面</li><li>在管理员登录验证分支中，添加代码：</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//进入管理员子菜单managerMenu(person);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加效果如：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548589297779.png"></p><p>测试对接，效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548589344206.png"></p><p>登录成功</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548589328710.png"></p><p>注销登录：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548589416576.png"></p><p>至此，管理员身份可以成功登录以及注销</p><h3 id="7-2-添加账号"><a href="#7-2-添加账号" class="headerlink" title="7.2 添加账号"></a>7.2 添加账号</h3><p>功能描述：</p><ul><li>给学生或教师添加新的账号</li></ul><p>功能要求：</p><ul><li>添加时学生学号不能重复、教师职工号不能重复</li></ul><h4 id="7-2-1-添加功能实现"><a href="#7-2-1-添加功能实现" class="headerlink" title="7.2.1 添加功能实现"></a>7.2.1 添加功能实现</h4><p>在Manager的<strong>addPerson</strong>成员函数中，实现添加新账号功能，代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//添加账号  void Manager::addPerson(){cout &lt;&lt; "请输入添加账号的类型" &lt;&lt; endl;cout &lt;&lt; "1、添加学生" &lt;&lt; endl;cout &lt;&lt; "2、添加老师" &lt;&lt; endl;string fileName;string tip;ofstream ofs;int select = 0;cin &gt;&gt; select;if (select == 1){fileName = STUDENT_FILE;tip = "请输入学号： ";}else{fileName = TEACHER_FILE;tip = "请输入职工编号：";}ofs.open(fileName, ios::out | ios::app);int id;string name;string pwd;cout &lt;&lt;tip &lt;&lt; endl;cin &gt;&gt; id;cout &lt;&lt; "请输入姓名： " &lt;&lt; endl;cin &gt;&gt; name;cout &lt;&lt; "请输入密码： " &lt;&lt; endl;cin &gt;&gt; pwd;ofs &lt;&lt; id &lt;&lt; " " &lt;&lt; name &lt;&lt; " " &lt;&lt; pwd &lt;&lt; " " &lt;&lt; endl;cout &lt;&lt; "添加成功" &lt;&lt; endl;system("pause");system("cls");ofs.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试添加学生：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548641024216.png"></p><p>成功在学生文件中添加了一条信息</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548641141027.png"></p><p>测试添加教师：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548641195834.png"></p><p>成功在教师文件中添加了一条信息</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548641237513.png"></p><h4 id="7-2-2-去重操作"><a href="#7-2-2-去重操作" class="headerlink" title="7.2.2 去重操作"></a>7.2.2 去重操作</h4><p>功能描述：添加新账号时，如果是重复的学生编号，或是重复的教师职工编号，提示有误</p><h5 id="7-2-2-1-读取信息"><a href="#7-2-2-1-读取信息" class="headerlink" title="7.2.2.1 读取信息"></a>7.2.2.1 读取信息</h5><ul><li>要去除重复的账号，首先要先将学生和教师的账号信息获取到程序中，方可检测</li><li>在manager.h中，添加两个容器，用于存放学生和教师的信息</li><li>添加一个新的成员函数  <code>void initVector()</code> 初始化容器</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//初始化容器void initVector();//学生容器vector&lt;Student&gt; vStu;//教师容器vector&lt;Teacher&gt; vTea;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加位置如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548644354561.png"></p><p>在Manager的有参构造函数中，获取目前的学生和教师信息</p><p>代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void Manager::initVector(){//读取学生文件中信息ifstream ifs;ifs.open(STUDENT_FILE, ios::in);if (!ifs.is_open()){cout &lt;&lt; "文件读取失败" &lt;&lt; endl;return;}    vStu.clear();     vTea.clear();    Student s;while (ifs &gt;&gt; s.m_Id &amp;&amp; ifs &gt;&gt; s.m_Name &amp;&amp;  ifs &gt;&gt; s.m_Pwd){vStu.push_back(s);}cout &lt;&lt; "当前学生数量为： " &lt;&lt; vStu.size() &lt;&lt; endl;ifs.close(); //学生初始化//读取老师文件信息ifs.open(TEACHER_FILE, ios::in);Teacher t;while (ifs &gt;&gt; t.m_EmpId &amp;&amp; ifs &gt;&gt; t.m_Name &amp;&amp;  ifs &gt;&gt; t.m_Pwd){vTea.push_back(t);}cout &lt;&lt; "当前教师数量为： " &lt;&lt; vTea.size() &lt;&lt; endl;ifs.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在有参构造函数中，调用初始化容器函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//有参构造Manager::Manager(string name, string pwd){this-&gt;m_Name = name;this-&gt;m_Pwd = pwd;    //初始化容器this-&gt;initVector();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试，运行代码可以看到测试代码获取当前学生和教师数量</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548642488049.png"></p><h5 id="7-2-2-2-去重函数封装"><a href="#7-2-2-2-去重函数封装" class="headerlink" title="7.2.2.2 去重函数封装"></a>7.2.2.2 去重函数封装</h5><p>在manager.h文件中添加成员函数<code> bool checkRepeat(int id, int type);</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//检测重复 参数:(传入id，传入类型) 返回值：(true 代表有重复，false代表没有重复)bool checkRepeat(int id, int type);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在manager.cpp文件中实现成员函数  <code> bool checkRepeat(int id, int type);</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool Manager::checkRepeat(int id, int type){if (type == 1){for (vector&lt;Student&gt;::iterator it = vStu.begin(); it != vStu.end(); it++){if (id == it-&gt;m_Id){return true;}}}else{for (vector&lt;Teacher&gt;::iterator it = vTea.begin(); it != vTea.end(); it++){if (id == it-&gt;m_EmpId){return true;}}}return false;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-2-2-3-添加去重操作"><a href="#7-2-2-3-添加去重操作" class="headerlink" title="7.2.2.3 添加去重操作"></a>7.2.2.3 添加去重操作</h5><p>在添加学生编号或者教师职工号时，检测是否有重复，代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">string errorTip; //重复错误提示if (select == 1){fileName = STUDENT_FILE;tip = "请输入学号： ";errorTip = "学号重复，请重新输入";}else{fileName = TEACHER_FILE;tip = "请输入职工编号：";errorTip = "职工号重复，请重新输入";}ofs.open(fileName, ios::out | ios::app);int id;string name;string pwd;cout &lt;&lt;tip &lt;&lt; endl;while (true){cin &gt;&gt; id;bool ret = this-&gt;checkRepeat(id, 1);if (ret) //有重复{cout &lt;&lt; errorTip &lt;&lt; endl;}else{break;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码位置如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548643909979.png"></p><p>检测效果：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548644151974.png"></p><h5 id="7-2-2-4-bug解决"><a href="#7-2-2-4-bug解决" class="headerlink" title="7.2.2.4 bug解决"></a>7.2.2.4 bug解决</h5><p>bug描述：</p><ul><li>虽然可以检测重复的账号，但是刚添加的账号由于没有更新到容器中，因此不会做检测</li><li>导致刚加入的账号的学生号或者职工编号，再次添加时依然可以重复</li></ul><p>解决方案：</p><ul><li>在每次添加新账号时，重新初始化容器</li></ul><p>在添加完毕后，加入代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//初始化容器this-&gt;initVector();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>位置如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548644779578.png"></p><p>再次测试，刚加入的账号不会重复添加了！</p><h3 id="7-3-显示账号"><a href="#7-3-显示账号" class="headerlink" title="7.3  显示账号"></a>7.3  显示账号</h3><p>功能描述：显示学生信息或教师信息</p><h4 id="7-3-1-显示功能实现"><a href="#7-3-1-显示功能实现" class="headerlink" title="7.3.1 显示功能实现"></a>7.3.1 显示功能实现</h4><p>在Manager的<strong>showPerson</strong>成员函数中，实现显示账号功能，代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void printStudent(Student &amp; s){cout &lt;&lt; "学号： " &lt;&lt; s.m_Id &lt;&lt; " 姓名： " &lt;&lt; s.m_Name &lt;&lt; " 密码：" &lt;&lt; s.m_Pwd &lt;&lt; endl;}void printTeacher(Teacher &amp; t){cout &lt;&lt; "职工号： " &lt;&lt; t.m_EmpId &lt;&lt; " 姓名： " &lt;&lt; t.m_Name &lt;&lt; " 密码：" &lt;&lt; t.m_Pwd &lt;&lt; endl;}void Manager::showPerson(){cout &lt;&lt; "请选择查看内容：" &lt;&lt; endl;cout &lt;&lt; "1、查看所有学生" &lt;&lt; endl;cout &lt;&lt; "2、查看所有老师" &lt;&lt; endl;int select = 0;cin &gt;&gt; select;    if (select == 1){cout &lt;&lt; "所有学生信息如下： " &lt;&lt; endl;for_each(vStu.begin(), vStu.end(), printStudent);}else{cout &lt;&lt; "所有老师信息如下： " &lt;&lt; endl;for_each(vTea.begin(), vTea.end(), printTeacher);}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-3-2-测试"><a href="#7-3-2-测试" class="headerlink" title="7.3.2 测试"></a>7.3.2 测试</h4><p>测试查看学生效果</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548646791248.png"></p><p>测试查看教师效果</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548646833665.png"></p><p>至此，显示账号功能实现完毕</p><h3 id="7-4-查看机房"><a href="#7-4-查看机房" class="headerlink" title="7.4 查看机房"></a>7.4 查看机房</h3><h4 id="7-4-1-添加机房信息"><a href="#7-4-1-添加机房信息" class="headerlink" title="7.4.1 添加机房信息"></a>7.4.1 添加机房信息</h4><p>案例需求中，机房一共有三个，其中1号机房容量20台机器，2号50台，3号100台</p><p>我们可以将信息录入到computerRoom.txt中</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548647538570.png"></p><h4 id="7-4-2-机房类创建"><a href="#7-4-2-机房类创建" class="headerlink" title="7.4.2 机房类创建"></a>7.4.2 机房类创建</h4><p>在头文件下，创建新的文件 computerRoom.h</p><p>并添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;//机房类class ComputerRoom{public:int m_ComId; //机房id号int m_MaxNum; //机房最大容量};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-4-3-初始化机房信息"><a href="#7-4-3-初始化机房信息" class="headerlink" title="7.4.3 初始化机房信息"></a>7.4.3 初始化机房信息</h4><p>在Manager管理员类下，添加机房的容器,用于保存机房信息</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//机房容器vector&lt;ComputerRoom&gt; vCom;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在Manager有参构造函数中，追加如下代码，初始化机房信息</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//获取机房信息ifstream ifs;ifs.open(COMPUTER_FILE, ios::in);ComputerRoom c;while (ifs &gt;&gt; c.m_ComId &amp;&amp; ifs &gt;&gt; c.m_MaxNum){vCom.push_back(c);}cout &lt;&lt; "当前机房数量为： " &lt;&lt; vCom.size() &lt;&lt; endl;ifs.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>位置如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548647976462.png"></p><p>因为机房信息目前版本不会有所改动，如果后期有修改功能，最好封装到一个函数中，方便维护</p><h4 id="7-4-4-显示机房信息"><a href="#7-4-4-显示机房信息" class="headerlink" title="7.4.4 显示机房信息"></a>7.4.4 显示机房信息</h4><p>在Manager类的showComputer成员函数中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//查看机房信息void Manager::showComputer(){cout &lt;&lt; "机房信息如下： " &lt;&lt; endl;for (vector&lt;ComputerRoom&gt;::iterator it = vCom.begin(); it != vCom.end(); it++){cout &lt;&lt; "机房编号： " &lt;&lt; it-&gt;m_ComId &lt;&lt; " 机房最大容量： " &lt;&lt; it-&gt;m_MaxNum &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试显示机房信息功能：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548648276929.png"></p><h3 id="7-5-清空预约"><a href="#7-5-清空预约" class="headerlink" title="7.5 清空预约"></a>7.5 清空预约</h3><p>功能描述：</p><p>清空生成的<code>order.txt</code>预约文件</p><h4 id="7-5-1-清空功能实现"><a href="#7-5-1-清空功能实现" class="headerlink" title="7.5.1 清空功能实现"></a>7.5.1 清空功能实现</h4><p>在Manager的cleanFile成员函数中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//清空预约记录void Manager::cleanFile(){ofstream ofs(ORDER_FILE, ios::trunc);ofs.close();cout &lt;&lt; "清空成功！" &lt;&lt; endl;system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试清空，可以随意写入一些信息在order.txt中，然后调用cleanFile清空文件接口，查看是否清空干净</p><h2 id="8、-学生模块"><a href="#8、-学生模块" class="headerlink" title="8、 学生模块"></a>8、 学生模块</h2><h3 id="8-1-学生登录和注销"><a href="#8-1-学生登录和注销" class="headerlink" title="8.1 学生登录和注销"></a>8.1 学生登录和注销</h3><h4 id="8-1-1-构造函数"><a href="#8-1-1-构造函数" class="headerlink" title="8.1.1 构造函数"></a>8.1.1 构造函数</h4><ul><li>在Student类的构造函数中，初始化学生信息，代码如下：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//有参构造(学号、姓名、密码)Student::Student(int id, string name, string pwd){//初始化属性this-&gt;m_Id = id;this-&gt;m_Name = name;this-&gt;m_Pwd = pwd;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-1-2-管理员子菜单"><a href="#8-1-2-管理员子菜单" class="headerlink" title="8.1.2  管理员子菜单"></a>8.1.2  管理员子菜单</h4><ul><li>在机房预约系统.cpp中，当用户登录的是学生，添加学生菜单接口</li><li>将不同的分支提供出来<ul><li>申请预约</li><li>查看我的预约</li><li>查看所有预约</li><li>取消预约</li><li>注销登录</li></ul></li><li>实现注销功能</li></ul><p>添加全局函数 <code>void studentMenu(Identity * &amp;manager)</code> 代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生菜单void studentMenu(Identity * &amp;student){while (true){//学生菜单student-&gt;operMenu();Student* stu = (Student*)student;int select = 0;cin &gt;&gt; select;if (select == 1) //申请预约{stu-&gt;applyOrder();}else if (select == 2) //查看自身预约{stu-&gt;showMyOrder();}else if (select == 3) //查看所有预约{stu-&gt;showAllOrder();}else if (select == 4) //取消预约{stu-&gt;cancelOrder();}else{delete student;cout &lt;&lt; "注销成功" &lt;&lt; endl;system("pause");system("cls");return;}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-1-3-菜单功能实现"><a href="#8-1-3-菜单功能实现" class="headerlink" title="8.1.3 菜单功能实现"></a>8.1.3 菜单功能实现</h4><ul><li>在实现成员函数<code>void Student::operMenu()</code> 代码如下：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//菜单界面void Student::operMenu(){cout &lt;&lt; "欢迎学生代表：" &lt;&lt; this-&gt;m_Name &lt;&lt; "登录！" &lt;&lt; endl;cout &lt;&lt; "\t\t ----------------------------------\n";cout &lt;&lt; "\t\t|                                 |\n";cout &lt;&lt; "\t\t|          1.申请预约              |\n";cout &lt;&lt; "\t\t|                                 |\n";cout &lt;&lt; "\t\t|          2.查看我的预约          |\n";cout &lt;&lt; "\t\t|                                 |\n";cout &lt;&lt; "\t\t|          3.查看所有预约          |\n";cout &lt;&lt; "\t\t|                                 |\n";cout &lt;&lt; "\t\t|          4.取消预约              |\n";cout &lt;&lt; "\t\t|                                 |\n";cout &lt;&lt; "\t\t|          0.注销登录              |\n";cout &lt;&lt; "\t\t|                                 |\n";cout &lt;&lt; "\t\t ----------------------------------\n";cout &lt;&lt; "请选择您的操作： " &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-1-4-接口对接"><a href="#8-1-4-接口对接" class="headerlink" title="8.1.4 接口对接"></a>8.1.4 接口对接</h4><ul><li>学生成功登录后，调用学生的子菜单界面</li><li>在学生登录分支中，添加代码：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//进入学生子菜单studentMenu(person);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548659552298.png"></p><p>测试对接，效果如图：</p><p>登录验证通过：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548659590221.png"></p><p>学生子菜单：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548659670651.png"></p><p>注销登录：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548659682402.png"></p><h3 id="8-2-申请预约"><a href="#8-2-申请预约" class="headerlink" title="8.2 申请预约"></a>8.2 申请预约</h3><h4 id="8-2-1-获取机房信息"><a href="#8-2-1-获取机房信息" class="headerlink" title="8.2.1 获取机房信息"></a>8.2.1 获取机房信息</h4><ul><li>在申请预约时，学生可以看到机房的信息，因此我们需要让学生获取到机房的信息</li></ul><p>在student.h中添加新的成员函数如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//机房容器vector&lt;ComputerRoom&gt; vCom;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在学生的有参构造函数中追加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//获取机房信息ifstream ifs;ifs.open(COMPUTER_FILE, ios::in);ComputerRoom c;while (ifs &gt;&gt; c.m_ComId &amp;&amp; ifs &gt;&gt; c.m_MaxNum){vCom.push_back(c);}ifs.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>追加位置如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548661562158.png"></p><p>至此，vCom容器中保存了所有机房的信息</p><h4 id="8-2-2-预约功能实现"><a href="#8-2-2-预约功能实现" class="headerlink" title="8.2.2 预约功能实现"></a>8.2.2 预约功能实现</h4><p>在student.cpp中实现成员函数 <code>void Student::applyOrder()</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//申请预约void Student::applyOrder(){cout &lt;&lt; "机房开放时间为周一至周五！" &lt;&lt; endl;cout &lt;&lt; "请输入申请预约的时间：" &lt;&lt; endl;cout &lt;&lt; "1、周一" &lt;&lt; endl;cout &lt;&lt; "2、周二" &lt;&lt; endl;cout &lt;&lt; "3、周三" &lt;&lt; endl;cout &lt;&lt; "4、周四" &lt;&lt; endl;cout &lt;&lt; "5、周五" &lt;&lt; endl;int date = 0;int interval = 0;int room = 0;while (true){cin &gt;&gt; date;if (date &gt;= 1 &amp;&amp; date &lt;= 5){break;}cout &lt;&lt; "输入有误，请重新输入" &lt;&lt; endl;}cout &lt;&lt; "请输入申请预约的时间段：" &lt;&lt; endl;cout &lt;&lt; "1、上午" &lt;&lt; endl;cout &lt;&lt; "2、下午" &lt;&lt; endl;while (true){cin &gt;&gt; interval;if (interval &gt;= 1 &amp;&amp; interval &lt;= 2){break;}cout &lt;&lt; "输入有误，请重新输入" &lt;&lt; endl;}cout &lt;&lt; "请选择机房：" &lt;&lt; endl;cout &lt;&lt; "1号机房容量：" &lt;&lt; vCom[0].m_MaxNum &lt;&lt; endl;cout &lt;&lt; "2号机房容量：" &lt;&lt; vCom[1].m_MaxNum &lt;&lt; endl;cout &lt;&lt; "3号机房容量：" &lt;&lt; vCom[2].m_MaxNum &lt;&lt; endl;while (true){cin &gt;&gt; room;if (room &gt;= 1 &amp;&amp; room &lt;= 3){break;}cout &lt;&lt; "输入有误，请重新输入" &lt;&lt; endl;}cout &lt;&lt; "预约成功！审核中" &lt;&lt; endl;ofstream ofs(ORDER_FILE, ios::app);ofs &lt;&lt; "date:" &lt;&lt; date &lt;&lt; " ";ofs &lt;&lt; "interval:" &lt;&lt; interval &lt;&lt; " ";ofs &lt;&lt; "stuId:" &lt;&lt; this-&gt;m_Id &lt;&lt; " ";ofs &lt;&lt; "stuName:" &lt;&lt; this-&gt;m_Name &lt;&lt; " ";ofs &lt;&lt; "roomId:" &lt;&lt; room &lt;&lt; " ";ofs &lt;&lt; "status:" &lt;&lt; 1 &lt;&lt; endl;ofs.close();system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，测试代码:</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548728936052.png"></p><p>在order.txt文件中生成如下内容：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548662281801.png"></p><h3 id="8-3-显示预约"><a href="#8-3-显示预约" class="headerlink" title="8.3 显示预约"></a>8.3 显示预约</h3><h4 id="8-3-1-创建预约类"><a href="#8-3-1-创建预约类" class="headerlink" title="8.3.1 创建预约类"></a>8.3.1 创建预约类</h4><p>功能描述：显示预约记录时，需要从文件中获取到所有记录，用来显示，创建预约的类来管理记录以及更新</p><p>在头文件以及源文件下分别创建<strong>orderFile.h</strong> 和 <strong>orderFile.cpp</strong>文件</p><p>orderFile.h中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;#include &lt;map&gt;#include "globalFile.h"class OrderFile{public://构造函数OrderFile();//更新预约记录void updateOrder();//记录的容器  key --- 记录的条数  value --- 具体记录的键值对信息map&lt;int, map&lt;string, string&gt;&gt; m_orderData;//预约记录条数int m_Size;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>构造函数</strong>中获取所有信息，并存放在容器中，添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">OrderFile::OrderFile(){ifstream ifs;ifs.open(ORDER_FILE, ios::in);string date;      //日期string interval;  //时间段string stuId;     //学生编号string stuName;   //学生姓名string roomId;    //机房编号string status;    //预约状态this-&gt;m_Size = 0; //预约记录个数while (ifs &gt;&gt; date &amp;&amp; ifs &gt;&gt; interval &amp;&amp; ifs &gt;&gt; stuId &amp;&amp; ifs &gt;&gt; stuName &amp;&amp; ifs &gt;&gt; roomId &amp;&amp;  ifs &gt;&gt; status){//测试代码/*cout &lt;&lt; date &lt;&lt; endl;cout &lt;&lt; interval &lt;&lt; endl;cout &lt;&lt; stuId &lt;&lt; endl;cout &lt;&lt; stuName &lt;&lt; endl;cout &lt;&lt; roomId &lt;&lt; endl;cout &lt;&lt; status &lt;&lt; endl;*/string key;string value;map&lt;string, string&gt; m;int pos = date.find(":");if (pos != -1){key = date.substr(0, pos);value = date.substr(pos + 1, date.size() - pos -1);m.insert(make_pair(key, value));}pos = interval.find(":");if (pos != -1){key = interval.substr(0, pos);value = interval.substr(pos + 1, interval.size() - pos -1 );m.insert(make_pair(key, value));}pos = stuId.find(":");if (pos != -1){key = stuId.substr(0, pos);value = stuId.substr(pos + 1, stuId.size() - pos -1 );m.insert(make_pair(key, value));}pos = stuName.find(":");if (pos != -1){key = stuName.substr(0, pos);value = stuName.substr(pos + 1, stuName.size() - pos -1);m.insert(make_pair(key, value));}pos = roomId.find(":");if (pos != -1){key = roomId.substr(0, pos);value = roomId.substr(pos + 1, roomId.size() - pos -1 );m.insert(make_pair(key, value));}pos = status.find(":");if (pos != -1){key = status.substr(0, pos);value = status.substr(pos + 1, status.size() - pos -1);m.insert(make_pair(key, value));}this-&gt;m_orderData.insert(make_pair(this-&gt;m_Size, m));this-&gt;m_Size++;}//测试代码//for (map&lt;int, map&lt;string, string&gt;&gt;::iterator it = m_orderData.begin(); it != m_orderData.end();it++)//{//cout &lt;&lt; "key = " &lt;&lt; it-&gt;first &lt;&lt; " value = " &lt;&lt; endl;//for (map&lt;string, string&gt;::iterator mit = it-&gt;second.begin(); mit != it-&gt;second.end(); mit++)//{//cout &lt;&lt; mit-&gt;first &lt;&lt; " " &lt;&lt; mit-&gt;second &lt;&lt; " ";//}//cout &lt;&lt; endl;//}        ifs.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新预约记录的成员函数updateOrder代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void OrderFile::updateOrder(){if (this-&gt;m_Size == 0){return;}ofstream ofs(ORDER_FILE, ios::out | ios::trunc);for (int i = 0; i &lt; m_Size;i++){ofs &lt;&lt; "date:" &lt;&lt; this-&gt;m_orderData[i]["date"] &lt;&lt; " ";ofs &lt;&lt; "interval:" &lt;&lt; this-&gt;m_orderData[i]["interval"] &lt;&lt; " ";ofs &lt;&lt; "stuId:" &lt;&lt; this-&gt;m_orderData[i]["stuId"] &lt;&lt; " ";ofs &lt;&lt; "stuName:" &lt;&lt; this-&gt;m_orderData[i]["stuName"] &lt;&lt; " ";ofs &lt;&lt; "roomId:" &lt;&lt; this-&gt;m_orderData[i]["roomId"] &lt;&lt; " ";ofs &lt;&lt; "status:" &lt;&lt; this-&gt;m_orderData[i]["status"] &lt;&lt; endl;}    ofs.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-2-显示自身预约"><a href="#8-3-2-显示自身预约" class="headerlink" title="8.3.2 显示自身预约"></a>8.3.2 显示自身预约</h4><p>首先我们先添加几条预约记录，可以用程序添加或者直接修改order.txt文件</p><p>order.txt文件内容如下： 比如我们有三名同学分别产生了3条预约记录</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548667534747.png"></p><p>在Student类的<code>void Student::showMyOrder()</code>成员函数中，添加如下代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//查看我的预约void Student::showMyOrder(){OrderFile of;if (of.m_Size == 0){cout &lt;&lt; "无预约记录" &lt;&lt; endl;system("pause");system("cls");return;}for (int i = 0; i &lt; of.m_Size; i++){if (atoi(of.m_orderData[i]["stuId"].c_str()) == this-&gt;m_Id){cout &lt;&lt; "预约日期： 周" &lt;&lt; of.m_orderData[i]["date"];cout &lt;&lt; " 时段：" &lt;&lt; (of.m_orderData[i]["interval"] == "1" ? "上午" : "下午");cout &lt;&lt; " 机房：" &lt;&lt; of.m_orderData[i]["roomId"];string status = " 状态： ";  // 0 取消的预约   1 审核中   2 已预约 -1 预约失败if (of.m_orderData[i]["status"] == "1"){status += "审核中";}else if (of.m_orderData[i]["status"] == "2"){status += "预约成功";}else if (of.m_orderData[i]["status"] == "-1"){status += "审核未通过，预约失败";}else{status += "预约已取消";}cout &lt;&lt; status &lt;&lt; endl;}}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548667252474.png"></p><h4 id="8-3-3-显示所有预约"><a href="#8-3-3-显示所有预约" class="headerlink" title="8.3.3 显示所有预约"></a>8.3.3 显示所有预约</h4><p>在Student类的<code>void Student::showAllOrder()</code>成员函数中，添加如下代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//查看所有预约void Student::showAllOrder(){OrderFile of;if (of.m_Size == 0){cout &lt;&lt; "无预约记录" &lt;&lt; endl;system("pause");system("cls");return;}for (int i = 0; i &lt; of.m_Size; i++){cout &lt;&lt; i + 1 &lt;&lt; "、 ";cout &lt;&lt; "预约日期： 周" &lt;&lt; of.m_orderData[i]["date"];cout &lt;&lt; " 时段：" &lt;&lt; (of.m_orderData[i]["interval"] == "1" ? "上午" : "下午");cout &lt;&lt; " 学号：" &lt;&lt; of.m_orderData[i]["stuId"];cout &lt;&lt; " 姓名：" &lt;&lt; of.m_orderData[i]["stuName"];cout &lt;&lt; " 机房：" &lt;&lt; of.m_orderData[i]["roomId"];string status = " 状态： ";  // 0 取消的预约   1 审核中   2 已预约 -1 预约失败if (of.m_orderData[i]["status"] == "1"){status += "审核中";}else if (of.m_orderData[i]["status"] == "2"){status += "预约成功";}else if (of.m_orderData[i]["status"] == "-1"){status += "审核未通过，预约失败";}else{status += "预约已取消";}cout &lt;&lt; status &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548667591734.png"></p><h3 id="8-4-取消预约"><a href="#8-4-取消预约" class="headerlink" title="8.4 取消预约"></a>8.4 取消预约</h3><p>在Student类的<code>void Student::cancelOrder()</code>成员函数中，添加如下代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//取消预约void Student::cancelOrder(){OrderFile of;if (of.m_Size == 0){cout &lt;&lt; "无预约记录" &lt;&lt; endl;system("pause");system("cls");return;}cout &lt;&lt; "审核中或预约成功的记录可以取消，请输入取消的记录" &lt;&lt; endl;vector&lt;int&gt;v;int index = 1;for (int i = 0; i &lt; of.m_Size; i++){if (atoi(of.m_orderData[i]["stuId"].c_str()) == this-&gt;m_Id){if (of.m_orderData[i]["status"] == "1" || of.m_orderData[i]["status"] == "2"){v.push_back(i);cout &lt;&lt;  index ++  &lt;&lt; "、 ";cout &lt;&lt; "预约日期： 周" &lt;&lt; of.m_orderData[i]["date"];cout &lt;&lt; " 时段：" &lt;&lt; (of.m_orderData[i]["interval"] == "1" ? "上午" : "下午");cout &lt;&lt; " 机房：" &lt;&lt; of.m_orderData[i]["roomId"];string status = " 状态： ";  // 0 取消的预约   1 审核中   2 已预约  -1 预约失败if (of.m_orderData[i]["status"] == "1"){status += "审核中";}else if (of.m_orderData[i]["status"] == "2"){status += "预约成功";}cout &lt;&lt; status &lt;&lt; endl;}}}cout &lt;&lt; "请输入取消的记录,0代表返回" &lt;&lt; endl;int select = 0;while (true){cin &gt;&gt; select;if (select &gt;= 0 &amp;&amp; select &lt;= v.size()){if (select == 0){break;}else{//cout &lt;&lt; "记录所在位置： " &lt;&lt; v[select - 1] &lt;&lt; endl;of.m_orderData[v[select - 1]]["status"] = "0";of.updateOrder();cout &lt;&lt; "已取消预约" &lt;&lt; endl;break;}}cout &lt;&lt; "输入有误，请重新输入" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试取消预约：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548669551036.png"></p><p>再次查看个人预约记录：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548669728023.png"></p><p>查看所有预约</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548669753496.png"></p><p>查看order.txt预约文件</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548669798037.png"></p><p>至此，学生模块功能全部实现</p><h2 id="9、-教师模块"><a href="#9、-教师模块" class="headerlink" title="9、 教师模块"></a>9、 教师模块</h2><h3 id="9-1-教师登录和注销"><a href="#9-1-教师登录和注销" class="headerlink" title="9.1 教师登录和注销"></a>9.1 教师登录和注销</h3><h4 id="9-1-1-构造函数"><a href="#9-1-1-构造函数" class="headerlink" title="9.1.1 构造函数"></a>9.1.1 构造函数</h4><ul><li>在Teacher类的构造函数中，初始化教师信息，代码如下：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//有参构造 (职工编号，姓名，密码)Teacher::Teacher(int empId, string name, string pwd){//初始化属性this-&gt;m_EmpId = empId;this-&gt;m_Name = name;this-&gt;m_Pwd = pwd;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-1-2-教师子菜单"><a href="#9-1-2-教师子菜单" class="headerlink" title="9.1.2  教师子菜单"></a>9.1.2  教师子菜单</h4><ul><li>在机房预约系统.cpp中，当用户登录的是教师，添加教师菜单接口</li><li>将不同的分支提供出来<ul><li>查看所有预约</li><li>审核预约</li><li>注销登录</li></ul></li><li>实现注销功能</li></ul><p>添加全局函数 <code>void TeacherMenu(Person * &amp;manager)</code> 代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//教师菜单void TeacherMenu(Identity * &amp;teacher){while (true){//教师菜单teacher-&gt;operMenu();Teacher* tea = (Teacher*)teacher;int select = 0;cin &gt;&gt; select;if (select == 1){//查看所有预约tea-&gt;showAllOrder();}else if (select == 2){//审核预约tea-&gt;validOrder();}else{delete teacher;cout &lt;&lt; "注销成功" &lt;&lt; endl;system("pause");system("cls");return;}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-1-3-菜单功能实现"><a href="#9-1-3-菜单功能实现" class="headerlink" title="9.1.3 菜单功能实现"></a>9.1.3 菜单功能实现</h4><ul><li>在实现成员函数<code>void Teacher::operMenu()</code> 代码如下：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//教师菜单界面void Teacher::operMenu(){cout &lt;&lt; "欢迎教师：" &lt;&lt; this-&gt;m_Name &lt;&lt; "登录！" &lt;&lt; endl;cout &lt;&lt; "\t\t ----------------------------------\n";cout &lt;&lt; "\t\t|                                  |\n";cout &lt;&lt; "\t\t|          1.查看所有预约          |\n";cout &lt;&lt; "\t\t|                                  |\n";cout &lt;&lt; "\t\t|          2.审核预约              |\n";cout &lt;&lt; "\t\t|                                  |\n";cout &lt;&lt; "\t\t|          0.注销登录              |\n";cout &lt;&lt; "\t\t|                                  |\n";cout &lt;&lt; "\t\t ----------------------------------\n";cout &lt;&lt; "请选择您的操作： " &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-1-4-接口对接"><a href="#9-1-4-接口对接" class="headerlink" title="9.1.4 接口对接"></a>9.1.4 接口对接</h4><ul><li>教师成功登录后，调用教师的子菜单界面</li><li>在教师登录分支中，添加代码：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//进入教师子菜单TeacherMenu(person);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548670866708.png"></p><p>测试对接，效果如图：</p><p>登录验证通过：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548670949885.png"></p><p>教师子菜单：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548670958602.png"></p><p>注销登录：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548670966988.png"></p><h3 id="9-2-查看所有预约"><a href="#9-2-查看所有预约" class="headerlink" title="9.2 查看所有预约"></a>9.2 查看所有预约</h3><h4 id="9-2-1-所有预约功能实现"><a href="#9-2-1-所有预约功能实现" class="headerlink" title="9.2.1 所有预约功能实现"></a>9.2.1 所有预约功能实现</h4><p>该功能与学生身份的查看所有预约功能相似，用于显示所有预约记录</p><p>在Teacher.cpp中实现成员函数 <code>void Teacher::showAllOrder()</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void Teacher::showAllOrder(){OrderFile of;if (of.m_Size == 0){cout &lt;&lt; "无预约记录" &lt;&lt; endl;system("pause");system("cls");return;}for (int i = 0; i &lt; of.m_Size; i++){cout &lt;&lt; i + 1 &lt;&lt; "、 ";cout &lt;&lt; "预约日期： 周" &lt;&lt; of.m_orderData[i]["date"];cout &lt;&lt; " 时段：" &lt;&lt; (of.m_orderData[i]["interval"] == "1" ? "上午" : "下午");cout &lt;&lt; " 学号：" &lt;&lt; of.m_orderData[i]["stuId"];cout &lt;&lt; " 姓名：" &lt;&lt; of.m_orderData[i]["stuName"];cout &lt;&lt; " 机房：" &lt;&lt; of.m_orderData[i]["roomId"];string status = " 状态： ";  // 0 取消的预约   1 审核中   2 已预约 -1 预约失败if (of.m_orderData[i]["status"] == "1"){status += "审核中";}else if (of.m_orderData[i]["status"] == "2"){status += "预约成功";}else if (of.m_orderData[i]["status"] == "-1"){status += "审核未通过，预约失败";}else{status += "预约已取消";}cout &lt;&lt; status &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-2-测试功能"><a href="#9-2-2-测试功能" class="headerlink" title="9.2.2 测试功能"></a>9.2.2 测试功能</h4><p>运行测试教师身份的查看所有预约功能</p><p>测试效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548676922678.png"></p><h3 id="9-3-审核预约"><a href="#9-3-审核预约" class="headerlink" title="9.3 审核预约"></a>9.3 审核预约</h3><h4 id="9-3-1-审核功能实现"><a href="#9-3-1-审核功能实现" class="headerlink" title="9.3.1 审核功能实现"></a>9.3.1 审核功能实现</h4><p>功能描述：教师审核学生的预约，依据实际情况审核预约</p><p>在Teacher.cpp中实现成员函数 <code>void Teacher::validOrder()</code></p><p>代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//审核预约void Teacher::validOrder(){OrderFile of;if (of.m_Size == 0){cout &lt;&lt; "无预约记录" &lt;&lt; endl;system("pause");system("cls");return;}cout &lt;&lt; "待审核的预约记录如下：" &lt;&lt; endl;vector&lt;int&gt;v;int index = 0;for (int i = 0; i &lt; of.m_Size; i++){if (of.m_orderData[i]["status"] == "1"){v.push_back(i);cout &lt;&lt; ++index &lt;&lt; "、 ";cout &lt;&lt; "预约日期： 周" &lt;&lt; of.m_orderData[i]["date"];cout &lt;&lt; " 时段：" &lt;&lt; (of.m_orderData[i]["interval"] == "1" ? "上午" : "下午");cout &lt;&lt; " 机房：" &lt;&lt; of.m_orderData[i]["roomId"];string status = " 状态： ";  // 0取消的预约   1 审核中   2 已预约  -1 预约失败if (of.m_orderData[i]["status"] == "1"){status += "审核中";}cout &lt;&lt; status &lt;&lt; endl;}}cout &lt;&lt; "请输入审核的预约记录,0代表返回" &lt;&lt; endl;int select = 0;int ret = 0;while (true){cin &gt;&gt; select;if (select &gt;= 0 &amp;&amp; select &lt;= v.size()){if (select == 0){break;}else{cout &lt;&lt; "请输入审核结果" &lt;&lt; endl;cout &lt;&lt; "1、通过" &lt;&lt; endl;cout &lt;&lt; "2、不通过" &lt;&lt; endl;cin &gt;&gt; ret;if (ret == 1){of.m_orderData[v[select - 1]]["status"] = "2";}else{of.m_orderData[v[select - 1]]["status"] = "-1";}of.updateOrder();cout &lt;&lt; "审核完毕！" &lt;&lt; endl;break;}}cout &lt;&lt; "输入有误，请重新输入" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-3-2-测试审核预约"><a href="#9-3-2-测试审核预约" class="headerlink" title="9.3.2 测试审核预约"></a>9.3.2 测试审核预约</h4><p>测试 - 审核通过</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548677286679.png"></p><p>审核通过情况</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548677383681.png"></p><p>测试-审核未通过</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548677402705.png"></p><p>审核未通过情况：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548677632792.png"></p><p>学生身份下查看记录：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548677798815.png"></p><p>审核预约成功！</p><p>至此本案例制作完毕！  <code>^_^</code></p>]]></content>
      
      
      <categories>
          
          <category> C++案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 机房预约系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-基于STL的演讲比赛流程管理系统</title>
      <link href="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/"/>
      <url>/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="1、-演讲比赛程序需求"><a href="#1、-演讲比赛程序需求" class="headerlink" title="1、 演讲比赛程序需求"></a>1、 演讲比赛程序需求</h2><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548154762048.png"></p><h3 id="1-1-比赛规则"><a href="#1-1-比赛规则" class="headerlink" title="1.1 比赛规则"></a>1.1 比赛规则</h3><ul><li>学校举行一场演讲比赛，共有<strong>12个人</strong>参加。<strong>比赛共两轮</strong>，第一轮为淘汰赛，第二轮为决赛。</li><li>比赛方式：<strong>分组比赛，每组6个人</strong>；选手每次要随机分组，进行比赛</li><li>每名选手都有对应的<strong>编号</strong>，如 10001 ~ 10012 </li><li>第一轮分为两个小组，每组6个人。 整体按照选手编号进行<strong>抽签</strong>后顺序演讲。</li><li>当小组演讲完后，淘汰组内排名最后的三个选手，<strong>前三名晋级</strong>，进入下一轮的比赛。</li><li>第二轮为决赛，<strong>前三名胜出</strong></li><li>每轮比赛过后需要<strong>显示晋级选手的信息</strong></li></ul><h3 id="1-2-程序功能"><a href="#1-2-程序功能" class="headerlink" title="1.2 程序功能"></a>1.2 程序功能</h3><ul><li>开始演讲比赛：完成整届比赛的流程，每个比赛阶段需要给用户一个提示，用户按任意键后继续下一个阶段</li><li>查看往届记录：查看之前比赛前三名结果，每次比赛都会记录到文件中，文件用.csv后缀名保存</li><li>清空比赛记录：将文件中数据清空</li><li>退出比赛程序：可以退出当前程序</li></ul><h3 id="1-3-程序效果图："><a href="#1-3-程序效果图：" class="headerlink" title="1.3 程序效果图："></a>1.3 程序效果图：</h3><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548155966702.png"></p><h2 id="2、-项目创建"><a href="#2、-项目创建" class="headerlink" title="2、 项目创建"></a>2、 项目创建</h2><p>创建项目步骤如下：</p><ul><li>创建新项目</li><li>添加文件</li></ul><h3 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h3><ul><li>打开vs2017后，点击创建新项目，创建新的C++项目</li></ul><p>如图：</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548121881969.png"></p><ul><li>填写项目名称以及选取项目路径，点击确定生成项目</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548122271773.png"></p><h3 id="2-2-添加文件"><a href="#2-2-添加文件" class="headerlink" title="2.2 添加文件"></a>2.2 添加文件</h3><ul><li>右键源文件，进行添加文件操作</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548122420253.png"></p><ul><li>填写文件名称，点击添加</li></ul><p><img src="/1548122510869.png"></p><ul><li>生成文件成功，效果如下图</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548122619712.png"></p><ul><li>至此，项目已创建完毕</li></ul><h2 id="3、-创建管理类"><a href="#3、-创建管理类" class="headerlink" title="3、 创建管理类"></a>3、 创建管理类</h2><p><strong>功能描述：</strong></p><ul><li>提供菜单界面与用户交互</li><li>对演讲比赛流程进行控制</li><li>与文件的读写交互</li></ul><h3 id="3-1创建文件"><a href="#3-1创建文件" class="headerlink" title="3.1创建文件"></a>3.1创建文件</h3><ul><li>在头文件和源文件的文件夹下分别创建speechManager.h 和 speechManager.cpp文件</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548123402593.png"></p><h3 id="3-2-头文件实现"><a href="#3-2-头文件实现" class="headerlink" title="3.2 头文件实现"></a>3.2 头文件实现</h3><p>在speechManager.h中设计管理类</p><p>代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#pragma once#include&lt;iostream&gt;using namespace std;//演讲管理类class SpeechManager{public://构造函数SpeechManager();//析构函数~SpeechManager();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-源文件实现"><a href="#3-3-源文件实现" class="headerlink" title="3.3 源文件实现"></a>3.3 源文件实现</h3><p>在speechManager.cpp中将构造和析构函数空实现补全</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include "speechManager.h"SpeechManager::SpeechManager(){}SpeechManager::~SpeechManager(){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>至此演讲管理类以创建完毕</li></ul><h2 id="4、-菜单功能"><a href="#4、-菜单功能" class="headerlink" title="4、 菜单功能"></a>4、 菜单功能</h2><p>功能描述：与用户的沟通界面</p><h3 id="4-1-添加成员函数"><a href="#4-1-添加成员函数" class="headerlink" title="4.1 添加成员函数"></a>4.1 添加成员函数</h3><p>在管理类speechManager.h中添加成员函数  <code>void show_Menu();</code></p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548123942072.png"></p><h3 id="4-2-菜单功能实现"><a href="#4-2-菜单功能实现" class="headerlink" title="4.2 菜单功能实现"></a>4.2 菜单功能实现</h3><ul><li>在管理类speechManager.cpp中实现 show_Menu()函数</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void SpeechManager::show_Menu(){cout &lt;&lt; "********************************************" &lt;&lt; endl;cout &lt;&lt; "*************  欢迎参加演讲比赛 ************" &lt;&lt; endl;cout &lt;&lt; "*************  1.开始演讲比赛  *************" &lt;&lt; endl;cout &lt;&lt; "*************  2.查看往届记录  *************" &lt;&lt; endl;cout &lt;&lt; "*************  3.清空比赛记录  *************" &lt;&lt; endl;cout &lt;&lt; "*************  0.退出比赛程序  *************" &lt;&lt; endl;cout &lt;&lt; "********************************************" &lt;&lt; endl;cout &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-测试菜单功能"><a href="#4-3-测试菜单功能" class="headerlink" title="4.3 测试菜单功能"></a>4.3 测试菜单功能</h3><ul><li>在演讲比赛流程管理系统.cpp中测试菜单功能</li></ul><p>代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;#include "speechManager.h"int main() {SpeechManager sm;sm.show_Menu();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行效果如图：</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548124599641.png"></p><ul><li>菜单界面搭建完毕</li></ul><h2 id="5、-退出功能"><a href="#5、-退出功能" class="headerlink" title="5、 退出功能"></a>5、 退出功能</h2><h3 id="5-1-提供功能接口"><a href="#5-1-提供功能接口" class="headerlink" title="5.1  提供功能接口"></a>5.1  提供功能接口</h3><ul><li>在main函数中提供分支选择，提供每个功能接口</li></ul><p>代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() {SpeechManager sm;int choice = 0; //用来存储用户的选项while (true){sm.show_Menu();cout &lt;&lt; "请输入您的选择： " &lt;&lt; endl;cin &gt;&gt; choice; // 接受用户的选项switch (choice){case 1:  //开始比赛break;case 2:  //查看记录break;case 3:  //清空记录break;case 0:  //退出系统break;default:system("cls"); //清屏break;}}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-实现退出功能"><a href="#5-2-实现退出功能" class="headerlink" title="5.2 实现退出功能"></a>5.2 实现退出功能</h3><p>在speechManager.h中提供退出系统的成员函数 <code>void exitSystem();</code></p><p>在speechManager.cpp中提供具体的功能实现</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void SpeechManager::exitSystem(){cout &lt;&lt; "欢迎下次使用" &lt;&lt; endl;system("pause");exit(0);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3测试功能"><a href="#5-3测试功能" class="headerlink" title="5.3测试功能"></a>5.3测试功能</h3><p>在main函数分支 0  选项中，调用退出程序的接口</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548124853576.png"></p><p>运行测试效果如图：</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548124888578.png"></p><h2 id="6、演讲比赛功能"><a href="#6、演讲比赛功能" class="headerlink" title="6、演讲比赛功能"></a>6、演讲比赛功能</h2><h3 id="6-1-功能分析"><a href="#6-1-功能分析" class="headerlink" title="6.1 功能分析"></a>6.1 功能分析</h3><p>比赛流程分析：</p><p>抽签 → 开始演讲比赛 → 显示第一轮比赛结果 → </p><p>抽签 → 开始演讲比赛 → 显示前三名结果 → 保存分数</p><h3 id="6-2-创建选手类"><a href="#6-2-创建选手类" class="headerlink" title="6.2 创建选手类"></a>6.2 创建选手类</h3><ul><li>选手类中的属性包含：选手姓名、分数</li><li>头文件中创建 speaker.h文件，并添加代码：</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;class Speaker{public:string m_Name;  //姓名double m_Score[2]; //分数  最多有两轮得分};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-比赛"><a href="#6-3-比赛" class="headerlink" title="6.3 比赛"></a>6.3 比赛</h3><h4 id="6-3-1-成员属性添加"><a href="#6-3-1-成员属性添加" class="headerlink" title="6.3.1 成员属性添加"></a>6.3.1 成员属性添加</h4><ul><li>在speechManager.h中添加属性</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//比赛选手 容器  12人vector&lt;int&gt;v1;//第一轮晋级容器  6人vector&lt;int&gt;v2;//胜利前三名容器  3人vector&lt;int&gt;vVictory;//存放编号 以及对应的 具体选手 容器map&lt;int, Speaker&gt; m_Speaker;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-2-初始化属性"><a href="#6-3-2-初始化属性" class="headerlink" title="6.3.2 初始化属性"></a>6.3.2 初始化属性</h4><ul><li>在speechManager.h中提供开始比赛的的成员函数 <code>void initSpeech();</code></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//初始化属性void initSpeech();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现<code>void initSpeech();</code></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void SpeechManager::initSpeech(){//容器保证为空this-&gt;v1.clear();  this-&gt;v2.clear();this-&gt;vVictory.clear();this-&gt;m_Speaker.clear();//初始化比赛轮数this-&gt;m_Index = 1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SpeechManager构造函数中调用<code>void initSpeech();</code></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">SpeechManager::SpeechManager(){//初始化属性this-&gt;initSpeech();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-3-创建选手"><a href="#6-3-3-创建选手" class="headerlink" title="6.3.3 创建选手"></a>6.3.3 创建选手</h4><ul><li>在speechManager.h中提供开始比赛的的成员函数 <code>void createSpeaker();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//初始化创建12名选手void createSpeaker();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现<code>void createSpeaker();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::createSpeaker(){string nameSeed = "ABCDEFGHIJKL";for (int i = 0; i &lt; nameSeed.size(); i++){string name = "选手";name += nameSeed[i];Speaker sp;sp.m_Name = name;for (int i = 0; i &lt; 2; i++){sp.m_Score[i] = 0;}//12名选手编号this-&gt;v1.push_back(i + 10001);//选手编号 以及对应的选手 存放到map容器中this-&gt;m_Speaker.insert(make_pair(i + 10001, sp));}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SpeechManager类的 构造函数中调用<code>void createSpeaker();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">SpeechManager::SpeechManager(){    //初始化属性this-&gt;initSpeech();    //创建选手this-&gt;createSpeaker();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试 在main函数中，可以在创建完管理对象后，使用下列代码测试12名选手初始状态</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">for (map&lt;int, Speaker&gt;::iterator it = sm.m_Speaker.begin(); it != sm.m_Speaker.end(); it++){cout  &lt;&lt; "选手编号：" &lt;&lt; it-&gt;first           &lt;&lt; " 姓名： " &lt;&lt; it-&gt;second.m_Name           &lt;&lt; " 成绩： " &lt;&lt; it-&gt;second.m_Score[0] &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548141605742.png"></p><ul><li>测试效果如图：</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548141560164.png"></p><ul><li>测试完毕后，可以将测试代码删除或注释。</li></ul><h4 id="6-3-4-开始比赛成员函数添加"><a href="#6-3-4-开始比赛成员函数添加" class="headerlink" title="6.3.4 开始比赛成员函数添加"></a>6.3.4 开始比赛成员函数添加</h4><ul><li>在speechManager.h中提供开始比赛的的成员函数 <code>void startSpeech();</code></li><li>该函数功能是主要控制比赛的流程</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//开始比赛 - 比赛流程控制void startSpeech();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中将startSpeech的空实现先写入</li><li>我们可以先将整个比赛的流程 写到函数中</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//开始比赛void SpeechManager::startSpeech(){//第一轮比赛//1、抽签//2、比赛//3、显示晋级结果//第二轮比赛//1、抽签//2、比赛//3、显示最终结果//4、保存分数}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-5-抽签"><a href="#6-3-5-抽签" class="headerlink" title="6.3.5 抽签"></a>6.3.5 抽签</h4><p><strong>功能描述：</strong></p><ul><li><p>正式比赛前，所有选手的比赛顺序需要打乱，我们只需要将存放选手编号的容器  打乱次序即可</p></li><li><p>在speechManager.h中提供抽签的的成员函数 <code>void speechDraw();</code></p></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//抽签void speechDraw();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现成员函数 <code>void speechDraw();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::speechDraw(){cout &lt;&lt; "第 &lt;&lt; " &lt;&lt; this-&gt;m_Index &lt;&lt; " &gt;&gt; 轮比赛选手正在抽签"&lt;&lt;endl;cout &lt;&lt; "---------------------" &lt;&lt; endl;cout &lt;&lt; "抽签后演讲顺序如下：" &lt;&lt; endl;if (this-&gt;m_Index == 1){random_shuffle(v1.begin(), v1.end());for (vector&lt;int&gt;::iterator it = v1.begin(); it != v1.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}else{random_shuffle(v2.begin(), v2.end());for (vector&lt;int&gt;::iterator it = v2.begin(); it != v2.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}cout &lt;&lt; "---------------------" &lt;&lt; endl;system("pause");cout &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在startSpeech比赛流程控制的函数中，调用抽签函数</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548143871202.png"></p><ul><li>在main函数中，分支1选项中，调用开始比赛的接口</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548143543475.png"></p><ul><li>测试</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548143610682.png"></p><h4 id="6-3-6-开始比赛"><a href="#6-3-6-开始比赛" class="headerlink" title="6.3.6 开始比赛"></a>6.3.6 开始比赛</h4><ul><li>在speechManager.h中提供比赛的的成员函数 <code>void speechContest();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//比赛void speechContest();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现成员函数 <code>void speechContest();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::speechContest(){cout &lt;&lt; "------------- 第"&lt;&lt; this-&gt;m_Index &lt;&lt; "轮正式比赛开始：------------- " &lt;&lt; endl;multimap&lt;double, int, greater&lt;int&gt;&gt; groupScore; //临时容器，保存key分数 value 选手编号int num = 0; //记录人员数，6个为1组vector &lt;int&gt;v_Src;   //比赛的人员容器if (this-&gt;m_Index == 1){v_Src = v1;}else{v_Src = v2;}//遍历所有参赛选手for (vector&lt;int&gt;::iterator it = v_Src.begin(); it != v_Src.end(); it++){num++;//评委打分deque&lt;double&gt;d;for (int i = 0; i &lt; 10; i++){double score = (rand() % 401 + 600) / 10.f;  // 600 ~ 1000//cout &lt;&lt; score &lt;&lt; " ";d.push_back(score);}sort(d.begin(), d.end(), greater&lt;double&gt;());//排序d.pop_front();//去掉最高分d.pop_back();//去掉最低分double sum = accumulate(d.begin(), d.end(), 0.0f);//获取总分double avg = sum / (double)d.size();//获取平均分//每个人平均分//cout &lt;&lt; "编号： " &lt;&lt; *it  &lt;&lt; " 选手： " &lt;&lt; this-&gt;m_Speaker[*it].m_Name &lt;&lt; " 获取平均分为： " &lt;&lt; avg &lt;&lt; endl;  //打印分数this-&gt;m_Speaker[*it].m_Score[this-&gt;m_Index - 1] = avg;//6个人一组，用临时容器保存groupScore.insert(make_pair(avg, *it));if (num % 6 == 0){cout &lt;&lt; "第" &lt;&lt; num / 6 &lt;&lt; "小组比赛名次：" &lt;&lt; endl;for (multimap&lt;double, int, greater&lt;int&gt;&gt;::iterator it = groupScore.begin(); it != groupScore.end(); it++){cout &lt;&lt; "编号: " &lt;&lt; it-&gt;second &lt;&lt; " 姓名： " &lt;&lt; this-&gt;m_Speaker[it-&gt;second].m_Name &lt;&lt; " 成绩： " &lt;&lt; this-&gt;m_Speaker[it-&gt;second].m_Score[this-&gt;m_Index - 1] &lt;&lt; endl;}int count = 0;//取前三名for (multimap&lt;double, int, greater&lt;int&gt;&gt;::iterator it = groupScore.begin(); it != groupScore.end() &amp;&amp; count &lt; 3; it++, count++){if (this-&gt;m_Index == 1){v2.push_back((*it).second);}else{vVictory.push_back((*it).second);}}groupScore.clear();cout &lt;&lt; endl;}}cout &lt;&lt; "------------- 第" &lt;&lt; this-&gt;m_Index &lt;&lt; "轮比赛完毕  ------------- " &lt;&lt; endl;system("pause");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在startSpeech比赛流程控制的函数中，调用比赛函数</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548144491984.png"></p><ul><li>再次运行代码，测试比赛</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548144765146.png"></p><h4 id="6-3-7-显示比赛分数"><a href="#6-3-7-显示比赛分数" class="headerlink" title="6.3.7 显示比赛分数"></a>6.3.7 显示比赛分数</h4><ul><li>在speechManager.h中提供比赛的的成员函数 <code>void showScore();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//显示比赛结果void showScore();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现成员函数 <code>void  showScore();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::showScore(){cout &lt;&lt; "---------第" &lt;&lt; this-&gt;m_Index &lt;&lt; "轮晋级选手信息如下：-----------" &lt;&lt; endl;vector&lt;int&gt;v;if (this-&gt;m_Index == 1){v = v2;}else{v = vVictory;}for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++){cout &lt;&lt; "选手编号：" &lt;&lt; *it &lt;&lt; " 姓名： " &lt;&lt; m_Speaker[*it].m_Name &lt;&lt; " 得分： " &lt;&lt; m_Speaker[*it].m_Score[this-&gt;m_Index - 1] &lt;&lt; endl;}cout &lt;&lt; endl;system("pause");system("cls");this-&gt;show_Menu(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在startSpeech比赛流程控制的函数中，调用显示比赛分数函数</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548146903960.png"></p><ul><li>运行代码，测试效果</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548146961550.png"></p><h4 id="6-3-8-第二轮比赛"><a href="#6-3-8-第二轮比赛" class="headerlink" title="6.3.8 第二轮比赛"></a>6.3.8 第二轮比赛</h4><p>第二轮比赛流程同第一轮，只是比赛的轮是+1，其余流程不变</p><ul><li>在startSpeech比赛流程控制的函数中，加入第二轮的流程</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548148593215.png"></p><p>测试，将整个比赛流程都跑通</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548148536395.png"></p><h3 id="6-4-保存分数"><a href="#6-4-保存分数" class="headerlink" title="6.4 保存分数"></a>6.4 保存分数</h3><p><strong>功能描述：</strong></p><ul><li>将每次演讲比赛的得分记录到文件中</li></ul><p><strong>功能实现：</strong></p><ul><li>在speechManager.h中添加保存记录的成员函数 <code>void saveRecord();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//保存记录void saveRecord();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现成员函数 <code>void saveRecord();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::saveRecord(){ofstream ofs;ofs.open("speech.csv", ios::out | ios::app); // 用输出的方式打开文件  -- 写文件//将每个人数据写入到文件中for (vector&lt;int&gt;::iterator it = vVictory.begin(); it != vVictory.end(); it++){ofs &lt;&lt; *it &lt;&lt; ","&lt;&lt; m_Speaker[*it].m_Score[1] &lt;&lt; ",";}ofs &lt;&lt; endl;    //关闭文件ofs.close();    cout &lt;&lt; "记录已经保存" &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在startSpeech比赛流程控制的函数中，最后调用保存记录分数函数</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548149937860.png"></p><ul><li>测试，整个比赛完毕后记录保存情况</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548149912863.png"></p><p>利用记事本打开文件 speech.csv，里面保存了前三名选手的编号以及得分</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548150047975.png"></p><p>至此，整个演讲比赛功能制作完毕！</p><h2 id="7、-查看记录"><a href="#7、-查看记录" class="headerlink" title="7、 查看记录"></a>7、 查看记录</h2><h3 id="7-1-读取记录分数"><a href="#7-1-读取记录分数" class="headerlink" title="7.1 读取记录分数"></a>7.1 读取记录分数</h3><ul><li>在speechManager.h中添加保存记录的成员函数 <code>void loadRecord();</code></li><li>添加判断文件是否为空的标志  <code>bool fileIsEmpty;</code></li><li>添加往届记录的容器<code>map&lt;int, vector&lt;string&gt;&gt; m_Record;</code></li></ul><p>其中m_Record 中的key代表第几届，value记录具体的信息</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//读取记录void loadRecord();//文件为空的标志bool fileIsEmpty;//往届记录map&lt;int, vector&lt;string&gt;&gt; m_Record;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现成员函数 <code>void loadRecord();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::loadRecord(){ifstream ifs("speech.csv", ios::in); //输入流对象 读取文件if (!ifs.is_open()){this-&gt;fileIsEmpty = true;cout &lt;&lt; "文件不存在！" &lt;&lt; endl;ifs.close();return;}char ch;ifs &gt;&gt; ch;if (ifs.eof()){cout &lt;&lt; "文件为空!" &lt;&lt; endl;this-&gt;fileIsEmpty = true;ifs.close();return;}//文件不为空this-&gt;fileIsEmpty = false;ifs.putback(ch); //读取的单个字符放回去string data;int index = 0;while (ifs &gt;&gt; data){//cout &lt;&lt; data &lt;&lt; endl;vector&lt;string&gt;v;int pos = -1;int start = 0;while (true){pos = data.find(",", start); //从0开始查找 ','if (pos == -1){break; //找不到break返回}string tmp = data.substr(start, pos - start); //找到了,进行分割 参数1 起始位置，参数2 截取长度v.push_back(tmp);start = pos + 1;}this-&gt;m_Record.insert(make_pair(index, v));index++;}ifs.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在SpeechManager构造函数中调用获取往届记录函数</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548151977242.png"></p><h3 id="7-2-查看记录功能"><a href="#7-2-查看记录功能" class="headerlink" title="7.2 查看记录功能"></a>7.2 查看记录功能</h3><ul><li>在speechManager.h中添加保存记录的成员函数 <code>void showRecord();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//显示往届得分void showRecord();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现成员函数 <code>void showRecord();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::showRecord(){for (int i = 0; i &lt; this-&gt;m_Record.size(); i++){cout &lt;&lt; "第" &lt;&lt; i + 1 &lt;&lt; "届 " &lt;&lt;"冠军编号：" &lt;&lt; this-&gt;m_Record[i][0] &lt;&lt; " 得分：" &lt;&lt; this-&gt;m_Record[i][1] &lt;&lt; " ""亚军编号：" &lt;&lt; this-&gt;m_Record[i][2] &lt;&lt; " 得分：" &lt;&lt; this-&gt;m_Record[i][3] &lt;&lt; " ""季军编号：" &lt;&lt; this-&gt;m_Record[i][4] &lt;&lt; " 得分：" &lt;&lt; this-&gt;m_Record[i][5] &lt;&lt; endl;}    system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-测试功能"><a href="#7-3-测试功能" class="headerlink" title="7.3 测试功能"></a>7.3 测试功能</h3><p>在main函数分支 2  选项中，调用查看记录的接口</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548152359604.png"></p><p>显示效果如图：（本次测试添加了4条记录）</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548152394715.png"></p><h3 id="7-4-bug解决"><a href="#7-4-bug解决" class="headerlink" title="7.4 bug解决"></a>7.4 bug解决</h3><p>目前程序中有几处bug未解决：</p><ol><li>查看往届记录，若文件不存在或为空，并未提示</li></ol><p>解决方式：在showRecord函数中，开始判断文件状态并加以判断</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548152803116.png"></p><ol start="2"><li>若记录为空或不存在，比完赛后依然提示记录为空</li></ol><p>解决方式：saveRecord中更新文件为空的标志</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548153005042.png"></p><ol start="3"><li>比完赛后查不到本届比赛的记录，没有实时更新</li></ol><p>解决方式：比赛完毕后，所有数据重置</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548153319587.png"></p><ol start="4"><li>在初始化时，没有初始化记录容器</li></ol><p>解决方式：initSpeech中添加 初始化记录容器</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548154340974.png"></p><ol start="5"><li>每次记录都是一样的</li></ol><p>解决方式：在main函数一开始 添加随机数种子</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">srand((unsigned int)time(NULL));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所有bug解决后 测试：</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548153571603.png"></p><h2 id="8、-清空记录"><a href="#8、-清空记录" class="headerlink" title="8、 清空记录"></a>8、 清空记录</h2><h3 id="8-1-清空记录功能实现"><a href="#8-1-清空记录功能实现" class="headerlink" title="8.1 清空记录功能实现"></a>8.1 清空记录功能实现</h3><ul><li>在speechManager.h中添加保存记录的成员函数 <code>void clearRecord();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//清空记录void clearRecord();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现成员函数 <code>void clearRecord();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::clearRecord(){cout &lt;&lt; "确认清空？" &lt;&lt; endl;cout &lt;&lt; "1、确认" &lt;&lt; endl;cout &lt;&lt; "2、返回" &lt;&lt; endl;int select = 0;cin &gt;&gt; select;if (select == 1){//打开模式 ios::trunc 如果存在删除文件并重新创建ofstream ofs("speech.csv", ios::trunc);ofs.close();//初始化属性this-&gt;initSpeech();//创建选手this-&gt;createSpeaker();//获取往届记录this-&gt;loadRecord();cout &lt;&lt; "清空成功！" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-测试清空"><a href="#8-2-测试清空" class="headerlink" title="8.2 测试清空"></a>8.2 测试清空</h3><p>在main函数分支 3  选项中，调用清空比赛记录的接口</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548154674242.png"></p><p>运行程序，测试清空记录：</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548154004738.png"></p><p>speech.csv中记录也为空</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548154508831.png"></p><ul><li>至此本案例结束！ <code>^_^</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 基于STL的演讲比赛流程管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-基于多态的职工管理系统</title>
      <link href="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/"/>
      <url>/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/</url>
      
        <content type="html"><![CDATA[<h2 id="1、管理系统需求"><a href="#1、管理系统需求" class="headerlink" title="1、管理系统需求"></a>1、管理系统需求</h2><p>职工管理系统可以用来管理公司内所有员工的信息</p><p>本教程主要利用C++来实现一个基于多态的职工管理系统</p><p>公司中职工分为三类：普通员工、经理、老板，显示信息时，需要显示职工编号、职工姓名、职工岗位、以及职责</p><p>普通员工职责：完成经理交给的任务</p><p>经理职责：完成老板交给的任务，并下发任务给员工</p><p>老板职责：管理公司所有事务</p><p>管理系统中需要实现的功能如下：</p><ul><li>退出管理程序：退出当前管理系统</li></ul><ul><li>增加职工信息：实现批量添加职工功能，将信息录入到文件中，职工信息为：职工编号、姓名、部门编号</li><li>显示职工信息：显示公司内部所有职工的信息</li><li>删除离职职工：按照编号删除指定的职工</li><li>修改职工信息：按照编号修改职工个人信息</li><li>查找职工信息：按照职工的编号或者职工的姓名进行查找相关的人员信息</li><li>按照编号排序：按照职工编号，进行排序，排序规则由用户指定</li><li>清空所有文档：清空文件中记录的所有职工信息 （清空前需要再次确认，防止误删）</li></ul><p>系统界面效果图如下：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546511409198.png"></p><p>需根据用户不同的选择，完成不同的功能！</p><h2 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h2><p>创建项目步骤如下：</p><ul><li>创建新项目</li><li>添加文件</li></ul><h3 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h3><p>打开vs2017后，点击创建新项目，创建新的C++项目</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1544151201465.png"></p><p>填写项目名称以及项目路径，点击确定</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546349209805.png"></p><h3 id="2-2-添加文件"><a href="#2-2-添加文件" class="headerlink" title="2.2 添加文件"></a>2.2 添加文件</h3><p>右键源文件，进行添加文件操作</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546349360960.png"></p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546349421496.png"></p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546349488752.png"></p><p>至此，项目已创建完毕</p><h2 id="3、创建管理类"><a href="#3、创建管理类" class="headerlink" title="3、创建管理类"></a>3、创建管理类</h2><p>​管理类负责的内容如下：</p><ul><li>与用户的沟通菜单界面</li><li>对职工增删改查的操作</li><li>与文件的读写交互</li></ul><h3 id="3-1创建文件"><a href="#3-1创建文件" class="headerlink" title="3.1创建文件"></a>3.1创建文件</h3><p>在头文件和源文件的文件夹下分别创建workerManager.h 和 workerManager.cpp文件</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546349904944.png"></p><h3 id="3-2-头文件实现"><a href="#3-2-头文件实现" class="headerlink" title="3.2 头文件实现"></a>3.2 头文件实现</h3><p>在workerManager.h中设计管理类</p><p>代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;class WorkerManager{public://构造函数WorkerManager();//析构函数~WorkerManager();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-源文件实现"><a href="#3-3-源文件实现" class="headerlink" title="3.3 源文件实现"></a>3.3 源文件实现</h3><p>在workerManager.cpp中将构造和析构函数空实现补全</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "workerManager.h"WorkerManager::WorkerManager(){}WorkerManager::~WorkerManager(){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此职工管理类以创建完毕</p><h2 id="4、菜单功能"><a href="#4、菜单功能" class="headerlink" title="4、菜单功能"></a>4、菜单功能</h2><p>功能描述：与用户的沟通界面</p><h3 id="4-1-添加成员函数"><a href="#4-1-添加成员函数" class="headerlink" title="4.1 添加成员函数"></a>4.1 添加成员函数</h3><p>在管理类workerManager.h中添加成员函数  <code>void Show_Menu();</code></p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546351543942.png"></p><h3 id="4-2-菜单功能实现"><a href="#4-2-菜单功能实现" class="headerlink" title="4.2 菜单功能实现"></a>4.2 菜单功能实现</h3><p>在管理类workerManager.cpp中实现  Show_Menu()函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void WorkerManager::Show_Menu(){cout &lt;&lt; "********************************************" &lt;&lt; endl;cout &lt;&lt; "*********  欢迎使用职工管理系统！ **********" &lt;&lt; endl;cout &lt;&lt; "*************  0.退出管理程序  *************" &lt;&lt; endl;cout &lt;&lt; "*************  1.增加职工信息  *************" &lt;&lt; endl;cout &lt;&lt; "*************  2.显示职工信息  *************" &lt;&lt; endl;cout &lt;&lt; "*************  3.删除离职职工  *************" &lt;&lt; endl;cout &lt;&lt; "*************  4.修改职工信息  *************" &lt;&lt; endl;cout &lt;&lt; "*************  5.查找职工信息  *************" &lt;&lt; endl;cout &lt;&lt; "*************  6.按照编号排序  *************" &lt;&lt; endl;cout &lt;&lt; "*************  7.清空所有文档  *************" &lt;&lt; endl;cout &lt;&lt; "********************************************" &lt;&lt; endl;cout &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-测试菜单功能"><a href="#4-3-测试菜单功能" class="headerlink" title="4.3 测试菜单功能"></a>4.3 测试菜单功能</h3><p>在职工管理系统.cpp中测试菜单功能</p><p>代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include "workerManager.h"int main() {WorkerManager wm;wm.Show_Menu();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如图：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546352771191.png"></p><h2 id="5、退出功能"><a href="#5、退出功能" class="headerlink" title="5、退出功能"></a>5、退出功能</h2><h3 id="5-1-提供功能接口"><a href="#5-1-提供功能接口" class="headerlink" title="5.1  提供功能接口"></a>5.1  提供功能接口</h3><p>在main函数中提供分支选择，提供每个功能接口</p><p>代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {WorkerManager wm;int choice = 0;while (true){//展示菜单wm.Show_Menu();cout &lt;&lt; "请输入您的选择:" &lt;&lt; endl;cin &gt;&gt; choice;switch (choice){case 0: //退出系统break;case 1: //添加职工break;case 2: //显示职工break;case 3: //删除职工break;case 4: //修改职工break;case 5: //查找职工break;case 6: //排序职工break;case 7: //清空文件break;default:system("cls");break;}}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-实现退出功能"><a href="#5-2-实现退出功能" class="headerlink" title="5.2 实现退出功能"></a>5.2 实现退出功能</h3><p>在workerManager.h中提供退出系统的成员函数 <code>void exitSystem();</code></p><p>在workerManager.cpp中提供具体的功能实现</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void WorkerManager::exitSystem(){cout &lt;&lt; "欢迎下次使用" &lt;&lt; endl;system("pause");exit(0);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3测试功能"><a href="#5-3测试功能" class="headerlink" title="5.3测试功能"></a>5.3测试功能</h3><p>在main函数分支 0  选项中，调用退出程序的接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546353199424.png"></p><p>运行测试效果如图：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546353155490.png"></p><h2 id="6、创建职工类"><a href="#6、创建职工类" class="headerlink" title="6、创建职工类"></a>6、创建职工类</h2><h3 id="6-1-创建职工抽象类"><a href="#6-1-创建职工抽象类" class="headerlink" title="6.1 创建职工抽象类"></a>6.1 创建职工抽象类</h3><p>职工的分类为：普通员工、经理、老板</p><p>将三种职工抽象到一个类（worker）中,利用多态管理不同职工种类</p><p>职工的属性为：职工编号、职工姓名、职工所在部门编号</p><p>职工的行为为：岗位职责信息描述，获取岗位名称</p><p>头文件文件夹下  创建文件worker.h  文件并且添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;//职工抽象基类class Worker{public://显示个人信息virtual void showInfo() = 0;//获取岗位名称virtual string getDeptName() = 0;int m_Id; //职工编号string m_Name; //职工姓名int m_DeptId; //职工所在部门名称编号};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-创建普通员工类"><a href="#6-2-创建普通员工类" class="headerlink" title="6.2 创建普通员工类"></a>6.2 创建普通员工类</h3><p>普通员工类<strong>继承</strong>职工抽象类，并重写父类中纯虚函数</p><p>在头文件和源文件的文件夹下分别创建employee.h 和 employee.cpp文件</p><p>employee.h中代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once #include&lt;iostream&gt;using namespace std;#include "worker.h"//员工类class Employee :public Worker{public://构造函数Employee(int id, string name, int dId);//显示个人信息virtual void showInfo();//获取职工岗位名称virtual string getDeptName();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>employee.cpp中代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "employee.h"Employee::Employee(int id, string name, int dId){this-&gt;m_Id = id;this-&gt;m_Name = name;this-&gt;m_DeptId = dId;}void Employee::showInfo(){cout &lt;&lt; "职工编号： " &lt;&lt; this-&gt;m_Id&lt;&lt; " \t职工姓名： " &lt;&lt; this-&gt;m_Name&lt;&lt; " \t岗位：" &lt;&lt; this-&gt;getDeptName()&lt;&lt; " \t岗位职责：完成经理交给的任务" &lt;&lt; endl;}string Employee::getDeptName(){return string("员工");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-创建经理类"><a href="#6-3-创建经理类" class="headerlink" title="6.3 创建经理类"></a>6.3 创建经理类</h3><p>经理类<strong>继承</strong>职工抽象类，并重写父类中纯虚函数，和普通员工类似</p><p>在头文件和源文件的文件夹下分别创建manager.h 和 manager.cpp文件</p><p>manager.h中代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#pragma once#include&lt;iostream&gt;using namespace std;#include "worker.h"//经理类class Manager :public Worker{public:Manager(int id, string name, int dId);//显示个人信息virtual void showInfo();//获取职工岗位名称virtual string getDeptName();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>manager.cpp中代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include "manager.h"Manager::Manager(int id, string name, int dId){this-&gt;m_Id = id;this-&gt;m_Name = name;this-&gt;m_DeptId = dId;}void Manager::showInfo(){cout &lt;&lt; "职工编号： " &lt;&lt; this-&gt;m_Id&lt;&lt; " \t职工姓名： " &lt;&lt; this-&gt;m_Name&lt;&lt; " \t岗位：" &lt;&lt; this-&gt;getDeptName()&lt;&lt; " \t岗位职责：完成老板交给的任务,并下发任务给员工" &lt;&lt; endl;}string Manager::getDeptName(){return string("经理");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-创建老板类"><a href="#6-4-创建老板类" class="headerlink" title="6.4 创建老板类"></a>6.4 创建老板类</h3><p>老板类<strong>继承</strong>职工抽象类，并重写父类中纯虚函数，和普通员工类似</p><p>在头文件和源文件的文件夹下分别创建boss.h 和 boss.cpp文件</p><p>boss.h中代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#pragma once#include&lt;iostream&gt;using namespace std;#include "worker.h"//老板类class Boss :public Worker{public:Boss(int id, string name, int dId);//显示个人信息virtual void showInfo();//获取职工岗位名称virtual string getDeptName();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>boss.cpp中代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include "boss.h"Boss::Boss(int id, string name, int dId){this-&gt;m_Id = id;this-&gt;m_Name = name;this-&gt;m_DeptId = dId;}void Boss::showInfo(){cout &lt;&lt; "职工编号： " &lt;&lt; this-&gt;m_Id&lt;&lt; " \t职工姓名： " &lt;&lt; this-&gt;m_Name&lt;&lt; " \t岗位：" &lt;&lt; this-&gt;getDeptName()&lt;&lt; " \t岗位职责：管理公司所有事务" &lt;&lt; endl;}string Boss::getDeptName(){return string("总裁");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5-测试多态"><a href="#6-5-测试多态" class="headerlink" title="6.5 测试多态"></a>6.5 测试多态</h3><p>在职工管理系统.cpp中添加测试函数，并且运行能够产生多态</p><p>测试代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "worker.h"#include "employee.h"#include "manager.h"#include "boss.h"void test(){Worker * worker = NULL;worker = new Employee(1, "张三", 1);worker-&gt;showInfo();delete worker;worker = new Manager(2, "李四", 2);worker-&gt;showInfo();delete worker;worker = new Boss(3, "王五", 3);worker-&gt;showInfo();delete worker;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如图：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546398236081.png"></p><p>测试成功后，测试代码可以注释保留，或者选择删除</p><h2 id="7、添加职工"><a href="#7、添加职工" class="headerlink" title="7、添加职工"></a>7、添加职工</h2><p>功能描述：批量添加职工，并且保存到文件中</p><h3 id="7-1-功能分析"><a href="#7-1-功能分析" class="headerlink" title="7.1 功能分析"></a>7.1 功能分析</h3><p>分析：</p><p>用户在批量创建时，可能会创建不同种类的职工</p><p>如果想将所有不同种类的员工都放入到一个数组中，可以将所有员工的指针维护到一个数组里</p><p>如果想在程序中维护这个不定长度的数组，可以将数组创建到堆区，并利用Worker **的指针维护</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546399491099.png"></p><h3 id="7-2-功能实现"><a href="#7-2-功能实现" class="headerlink" title="7.2 功能实现"></a>7.2 功能实现</h3><p>在WokerManager.h头文件中添加成员属性 代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//记录文件中的人数个数int m_EmpNum;//员工数组的指针Worker ** m_EmpArray;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在WorkerManager构造函数中初始化属性</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">WorkerManager::WorkerManager(){//初始化人数this-&gt;m_EmpNum = 0;//初始化数组指针this-&gt;m_EmpArray = NULL;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在workerManager.h中添加成员函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//增加职工void Add_Emp();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>workerManager.cpp中实现该函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//增加职工void WorkerManager::Add_Emp(){cout &lt;&lt; "请输入增加职工数量： " &lt;&lt; endl;int addNum = 0;cin &gt;&gt; addNum;if (addNum &gt; 0){//计算新空间大小int newSize = this-&gt;m_EmpNum + addNum;//开辟新空间Worker ** newSpace = new Worker*[newSize];//将原空间下内容存放到新空间下if (this-&gt;m_EmpArray != NULL){for (int i = 0; i &lt; this-&gt;m_EmpNum; i++){newSpace[i] = this-&gt;m_EmpArray[i];}}//输入新数据for (int i = 0; i &lt; addNum; i++){int id;string name;int dSelect;cout &lt;&lt; "请输入第 " &lt;&lt; i + 1 &lt;&lt; " 个新职工编号：" &lt;&lt; endl;cin &gt;&gt; id;cout &lt;&lt; "请输入第 " &lt;&lt; i + 1 &lt;&lt; " 个新职工姓名：" &lt;&lt; endl;cin &gt;&gt; name;cout &lt;&lt; "请选择该职工的岗位：" &lt;&lt; endl;cout &lt;&lt; "1、普通职工" &lt;&lt; endl;cout &lt;&lt; "2、经理" &lt;&lt; endl;cout &lt;&lt; "3、老板" &lt;&lt; endl;cin &gt;&gt; dSelect;Worker * worker = NULL;switch (dSelect){case 1: //普通员工worker = new Employee(id, name, 1);break;case 2: //经理worker = new Manager(id, name, 2);break;case 3:  //老板worker = new Boss(id, name, 3);break;default:break;}newSpace[this-&gt;m_EmpNum + i] = worker;}//释放原有空间delete[] this-&gt;m_EmpArray;//更改新空间的指向this-&gt;m_EmpArray = newSpace;//更新新的个数this-&gt;m_EmpNum = newSize;//提示信息cout &lt;&lt; "成功添加" &lt;&lt; addNum &lt;&lt; "名新职工！" &lt;&lt; endl;}else{cout &lt;&lt; "输入有误" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在WorkerManager.cpp的析构函数中，释放堆区数据</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">WorkerManager::~WorkerManager(){if (this-&gt;m_EmpArray != NULL){delete[] this-&gt;m_EmpArray;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-测试添加"><a href="#7-3-测试添加" class="headerlink" title="7.3 测试添加"></a>7.3 测试添加</h3><p>在main函数分支 1  选项中，调用添加职工接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546401705277.png"></p><p>效果如图：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546401763461.png"></p><p>至此，添加职工到程序中功能实现完毕</p><h2 id="8、文件交互-写文件"><a href="#8、文件交互-写文件" class="headerlink" title="8、文件交互 - 写文件"></a>8、文件交互 - 写文件</h2><p>功能描述：对文件进行读写</p><p>​在上一个添加功能中，我们只是将所有的数据添加到了内存中，一旦程序结束就无法保存了</p><p>​因此文件管理类中需要一个与文件进行交互的功能，对于文件进行读写操作</p><h3 id="8-1-设定文件路径"><a href="#8-1-设定文件路径" class="headerlink" title="8.1 设定文件路径"></a>8.1 设定文件路径</h3><p>首先我们将文件路径，在workerManager.h中添加宏常量,并且包含头文件 fstream</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#define  FILENAME "empFile.txt"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-2-成员函数声明"><a href="#8-2-成员函数声明" class="headerlink" title="8.2 成员函数声明"></a>8.2 成员函数声明</h3><p>在workerManager.h中类里添加成员函数 <code>void save()</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//保存文件void save();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-3-保存文件功能实现"><a href="#8-3-保存文件功能实现" class="headerlink" title="8.3 保存文件功能实现"></a>8.3 保存文件功能实现</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void WorkerManager::save(){ofstream ofs;ofs.open(FILENAME, ios::out);for (int i = 0; i &lt; this-&gt;m_EmpNum; i++){ofs &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Id &lt;&lt; " " &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Name &lt;&lt; " " &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; endl;}ofs.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-保存文件功能测试"><a href="#8-4-保存文件功能测试" class="headerlink" title="8.4 保存文件功能测试"></a>8.4 保存文件功能测试</h3><p>在添加职工功能中添加成功后添加保存文件函数</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546432469465.png"></p><p>再次运行代码，添加职工</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546401763461.png"></p><p>同级目录下多出文件，并且保存了添加的信息</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546432343078.png"></p><h2 id="9、文件交互-读文件"><a href="#9、文件交互-读文件" class="headerlink" title="9、文件交互 - 读文件"></a>9、文件交互 - 读文件</h2><p>功能描述：将文件中的内容读取到程序中</p><p>虽然我们实现了添加职工后保存到文件的操作，但是每次开始运行程序，并没有将文件中数据读取到程序中</p><p>而我们的程序功能中还有清空文件的需求</p><p>因此构造函数初始化数据的情况分为三种</p><ol><li>第一次使用，文件未创建</li><li>文件存在，但是数据被用户清空</li><li>文件存在，并且保存职工的所有数据</li></ol><h3 id="9-1-文件未创建"><a href="#9-1-文件未创建" class="headerlink" title="9.1 文件未创建"></a>9.1 文件未创建</h3><p>在workerManager.h中添加新的成员属性 m_FileIsEmpty标志文件是否为空</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//标志文件是否为空bool m_FileIsEmpty;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改WorkerManager.cpp中构造函数代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">WorkerManager::WorkerManager(){ifstream ifs;ifs.open(FILENAME, ios::in);//文件不存在情况if (!ifs.is_open()){cout &lt;&lt; "文件不存在" &lt;&lt; endl; //测试输出this-&gt;m_EmpNum = 0;  //初始化人数this-&gt;m_FileIsEmpty = true; //初始化文件为空标志this-&gt;m_EmpArray = NULL; //初始化数组ifs.close(); //关闭文件return;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除文件后，测试文件不存在时初始化数据功能</p><h3 id="9-2-文件存在且数据为空"><a href="#9-2-文件存在且数据为空" class="headerlink" title="9.2 文件存在且数据为空"></a>9.2 文件存在且数据为空</h3><p>在workerManager.cpp中的构造函数追加代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//文件存在，并且没有记录char ch;ifs &gt;&gt; ch;if (ifs.eof()){cout &lt;&lt; "文件为空!" &lt;&lt; endl;this-&gt;m_EmpNum = 0;this-&gt;m_FileIsEmpty = true;this-&gt;m_EmpArray = NULL;ifs.close();return;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>追加代码位置如图：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546435197575.png"></p><p>将文件创建后清空文件内容，并测试该情况下初始化功能</p><p>我们发现文件不存在或者为空清空 m_FileIsEmpty 判断文件是否为空的标志都为真，那何时为假？</p><p>成功添加职工后，应该更改文件不为空的标志</p><p>在<code>void WorkerManager::Add_Emp() </code>成员函数中添加：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//更新职工不为空标志this-&gt;m_FileIsEmpty = false;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546656256176.png"></p><h3 id="9-3-文件存在且保存职工数据"><a href="#9-3-文件存在且保存职工数据" class="headerlink" title="9.3 文件存在且保存职工数据"></a>9.3 文件存在且保存职工数据</h3><h4 id="9-3-1-获取记录的职工人数"><a href="#9-3-1-获取记录的职工人数" class="headerlink" title="9.3.1 获取记录的职工人数"></a>9.3.1 获取记录的职工人数</h4><p>在workerManager.h中添加成员函数 <code> int get_EmpNum();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//统计人数int get_EmpNum();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>workerManager.cpp中实现</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int WorkerManager::get_EmpNum(){ifstream ifs;ifs.open(FILENAME, ios::in);int id;string name;int dId;int num = 0;while (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId){        //记录人数num++;}ifs.close();return num;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在workerManager.cpp构造函数中继续追加代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int num =  this-&gt;get_EmpNum();cout &lt;&lt; "职工个数为：" &lt;&lt; num &lt;&lt; endl;  //测试代码this-&gt;m_EmpNum = num;  //更新成员属性 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>手动添加一些职工数据，测试获取职工数量函数</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546436429055.png"></p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546436385793.png"></p><h4 id="9-3-2-初始化数组"><a href="#9-3-2-初始化数组" class="headerlink" title="9.3.2 初始化数组"></a>9.3.2 初始化数组</h4><p>根据职工的数据以及职工数据，初始化workerManager中的Worker ** m_EmpArray 指针</p><p>在WorkerManager.h中添加成员函数  <code>void init_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//初始化员工void init_Emp();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在WorkerManager.cpp中实现</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void WorkerManager::init_Emp(){ifstream ifs;ifs.open(FILENAME, ios::in);int id;string name;int dId;int index = 0;while (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId){Worker * worker = NULL;//根据不同的部门Id创建不同对象if (dId == 1)  // 1普通员工{worker = new Employee(id, name, dId);}else if (dId == 2) //2经理{worker = new Manager(id, name, dId);}else //总裁{worker = new Boss(id, name, dId);}//存放在数组中this-&gt;m_EmpArray[index] = worker;index++;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在workerManager.cpp构造函数中追加代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//根据职工数创建数组this-&gt;m_EmpArray = new Worker *[this-&gt;m_EmpNum];//初始化职工init_Emp();//测试代码for (int i = 0; i &lt; m_EmpNum; i++){cout &lt;&lt; "职工号： " &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Id&lt;&lt; " 职工姓名： " &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Name&lt;&lt; " 部门编号： " &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，测试从文件中获取的数据</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546436938152.png"></p><p>至此初始化数据功能完毕，测试代码可以注释或删除掉！</p><h2 id="10、显示职工"><a href="#10、显示职工" class="headerlink" title="10、显示职工"></a>10、显示职工</h2><p>功能描述：显示当前所有职工信息</p><h4 id="10-1-显示职工函数声明"><a href="#10-1-显示职工函数声明" class="headerlink" title="10.1 显示职工函数声明"></a>10.1 显示职工函数声明</h4><p>在workerManager.h中添加成员函数  <code>void Show_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//显示职工void Show_Emp();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="10-2-显示职工函数实现"><a href="#10-2-显示职工函数实现" class="headerlink" title="10.2 显示职工函数实现"></a>10.2 显示职工函数实现</h4><p>在workerManager.cpp中实现成员函数 <code>void Show_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//显示职工void WorkerManager::Show_Emp(){if (this-&gt;m_FileIsEmpty){cout &lt;&lt; "文件不存在或记录为空！" &lt;&lt; endl;}else{for (int i = 0; i &lt; m_EmpNum; i++){//利用多态调用接口this-&gt;m_EmpArray[i]-&gt;showInfo();}}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-3-测试显示职工"><a href="#10-3-测试显示职工" class="headerlink" title="10.3 测试显示职工"></a>10.3 测试显示职工</h4><p>在main函数分支 2  选项中，调用显示职工接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546497336465.png"></p><p>测试时分别测试 文件为空和文件不为空两种情况</p><p>测试效果：</p><p>测试1-文件不存在或者为空情况</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546497082135.png"></p><p>测试2 - 文件存在且有记录情况</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546496947671.png"></p><p>测试完毕，至此，显示所有职工信息功能实现</p><h2 id="11、删除职工"><a href="#11、删除职工" class="headerlink" title="11、删除职工"></a>11、删除职工</h2><p>功能描述：按照职工的编号进行删除职工操作</p><h4 id="11-1-删除职工函数声明"><a href="#11-1-删除职工函数声明" class="headerlink" title="11.1 删除职工函数声明"></a>11.1 删除职工函数声明</h4><p>在workerManager.h中添加成员函数  <code>void Del_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//删除职工void Del_Emp();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="11-2-职工是否存在函数声明"><a href="#11-2-职工是否存在函数声明" class="headerlink" title="11.2 职工是否存在函数声明"></a>11.2 职工是否存在函数声明</h4><p>很多功能都需要用到根据职工是否存在来进行操作如：删除职工、修改职工、查找职工</p><p>因此添加该公告函数，以便后续调用</p><p>在workerManager.h中添加成员函数  <code>int IsExist(int id);</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//按照职工编号判断职工是否存在,若存在返回职工在数组中位置，不存在返回-1int IsExist(int id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="11-3-职工是否存在函数实现"><a href="#11-3-职工是否存在函数实现" class="headerlink" title="11.3 职工是否存在函数实现"></a>11.3 职工是否存在函数实现</h4><p>在workerManager.cpp中实现成员函数 <code>int IsExist(int id);</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int WorkerManager::IsExist(int id){int index = -1;for (int i = 0; i &lt; this-&gt;m_EmpNum; i++){if (this-&gt;m_EmpArray[i]-&gt;m_Id == id){index = i;break;}}return index;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-4-删除职工函数实现"><a href="#11-4-删除职工函数实现" class="headerlink" title="11.4 删除职工函数实现"></a>11.4 删除职工函数实现</h4><p>在workerManager.cpp中实现成员函数 <code> void Del_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//删除职工void WorkerManager::Del_Emp(){if (this-&gt;m_FileIsEmpty){cout &lt;&lt; "文件不存在或记录为空！" &lt;&lt; endl;}else{//按职工编号删除cout &lt;&lt; "请输入想要删除的职工号：" &lt;&lt; endl;int id = 0;cin &gt;&gt; id;int index = this-&gt;IsExist(id);if (index != -1)  //说明index上位置数据需要删除{for (int i = index; i &lt; this-&gt;m_EmpNum - 1; i++){this-&gt;m_EmpArray[i] = this-&gt;m_EmpArray[i + 1];}this-&gt;m_EmpNum--;this-&gt;save(); //删除后数据同步到文件中cout &lt;&lt; "删除成功！" &lt;&lt; endl;}else{cout &lt;&lt; "删除失败，未找到该职工" &lt;&lt; endl;}}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-5-测试删除职工"><a href="#11-5-测试删除职工" class="headerlink" title="11.5 测试删除职工"></a>11.5 测试删除职工</h4><p>在main函数分支 3  选项中，调用删除职工接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546502698622.png"></p><p>测试1 - 删除不存在职工情况</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546500324196.png"></p><p>测试2 - 删除存在的职工情况</p><p>删除成功提示图：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546500350526.png"></p><p>再次显示所有职工信息，确保已经删除</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546500361889.png"></p><p>查看文件中信息，再次核实员工已被完全删除</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546500383570.png"></p><p>至此，删除职工功能实现完毕！</p><h2 id="12、修改职工"><a href="#12、修改职工" class="headerlink" title="12、修改职工"></a>12、修改职工</h2><p>功能描述：能够按照职工的编号对职工信息进行修改并保存</p><h4 id="12-1-修改职工函数声明"><a href="#12-1-修改职工函数声明" class="headerlink" title="12.1 修改职工函数声明"></a>12.1 修改职工函数声明</h4><p>在workerManager.h中添加成员函数  <code>void Mod_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//修改职工void Mod_Emp();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="12-2-修改职工函数实现"><a href="#12-2-修改职工函数实现" class="headerlink" title="12.2 修改职工函数实现"></a>12.2 修改职工函数实现</h4><p>在workerManager.cpp中实现成员函数 <code> void Mod_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//修改职工void WorkerManager::Mod_Emp(){if (this-&gt;m_FileIsEmpty){cout &lt;&lt; "文件不存在或记录为空！" &lt;&lt; endl;}else{cout &lt;&lt; "请输入修改职工的编号：" &lt;&lt; endl;int id;cin &gt;&gt; id;int ret = this-&gt;IsExist(id);if (ret != -1){ //查找到编号的职工delete this-&gt;m_EmpArray[ret];int newId = 0;string newName = "";int dSelect = 0;cout &lt;&lt; "查到： " &lt;&lt; id &lt;&lt; "号职工，请输入新职工号： " &lt;&lt; endl;cin &gt;&gt; newId;cout &lt;&lt; "请输入新姓名： " &lt;&lt; endl;cin &gt;&gt; newName;cout &lt;&lt; "请输入岗位： " &lt;&lt; endl;cout &lt;&lt; "1、普通职工" &lt;&lt; endl;cout &lt;&lt; "2、经理" &lt;&lt; endl;cout &lt;&lt; "3、老板" &lt;&lt; endl;cin &gt;&gt; dSelect;Worker * worker = NULL;switch (dSelect){case1:worker = new Employee(newId, newName, dSelect);break;case2:worker = new Manager(newId, newName, dSelect);break;case 3:worker = new Boss(newId, newName, dSelect);break;default:break;}//更改数据 到数组中this-&gt;m_EmpArray[ret]= worker;cout &lt;&lt; "修改成功！" &lt;&lt; endl;//保存到文件中this-&gt;save();}else{cout &lt;&lt; "修改失败，查无此人" &lt;&lt; endl;}}//按任意键 清屏system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-3-测试修改职工"><a href="#12-3-测试修改职工" class="headerlink" title="12.3 测试修改职工"></a>12.3 测试修改职工</h4><p>在main函数分支 4  选项中，调用修改职工接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546502651922.png"></p><p>测试1 - 修改不存在职工情况</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546502759643.png"></p><p>测试2 - 修改存在职工情况，例如将职工 “李四” 改为 “赵四”</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546502830350.png"></p><p>修改后再次查看所有职工信息，并确认修改成功</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546502865443.png"></p><p>再次确认文件中信息也同步更新</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546502898653.png"></p><p>至此，修改职工功能已实现！</p><h2 id="13、查找职工"><a href="#13、查找职工" class="headerlink" title="13、查找职工"></a>13、查找职工</h2><p>功能描述：提供两种查找职工方式，一种按照职工编号，一种按照职工姓名</p><h4 id="13-1-查找职工函数声明"><a href="#13-1-查找职工函数声明" class="headerlink" title="13.1 查找职工函数声明"></a>13.1 查找职工函数声明</h4><p>在workerManager.h中添加成员函数  <code>void Find_Emp();</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//查找职工void Find_Emp();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="13-2-查找职工函数实现"><a href="#13-2-查找职工函数实现" class="headerlink" title="13.2 查找职工函数实现"></a>13.2 查找职工函数实现</h4><p>在workerManager.cpp中实现成员函数 <code> void Find_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//查找职工void WorkerManager::Find_Emp(){if (this-&gt;m_FileIsEmpty){cout &lt;&lt; "文件不存在或记录为空！" &lt;&lt; endl;}else{cout &lt;&lt; "请输入查找的方式：" &lt;&lt; endl;cout &lt;&lt; "1、按职工编号查找" &lt;&lt; endl;cout &lt;&lt; "2、按姓名查找" &lt;&lt; endl;int select = 0;cin &gt;&gt; select;if (select == 1) //按职工号查找{int id;cout &lt;&lt; "请输入查找的职工编号：" &lt;&lt; endl;cin &gt;&gt; id;int ret = IsExist(id);if (ret != -1){cout &lt;&lt; "查找成功！该职工信息如下：" &lt;&lt; endl;this-&gt;m_EmpArray[ret]-&gt;showInfo();}else{cout &lt;&lt; "查找失败，查无此人" &lt;&lt; endl;}}else if(select == 2) //按姓名查找{string name;cout &lt;&lt; "请输入查找的姓名：" &lt;&lt; endl;cin &gt;&gt; name;bool flag = false;  //查找到的标志for (int i = 0; i &lt; m_EmpNum; i++){if (m_EmpArray[i]-&gt;m_Name == name){cout &lt;&lt; "查找成功,职工编号为："                           &lt;&lt; m_EmpArray[i]-&gt;m_Id                           &lt;&lt; " 号的信息如下：" &lt;&lt; endl;flag = true;this-&gt;m_EmpArray[i]-&gt;showInfo();}}if (flag == false){//查无此人cout &lt;&lt; "查找失败，查无此人" &lt;&lt; endl;}}else{cout &lt;&lt; "输入选项有误" &lt;&lt; endl;}}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-3-测试查找职工"><a href="#13-3-测试查找职工" class="headerlink" title="13.3 测试查找职工"></a>13.3 测试查找职工</h4><p>在main函数分支 5  选项中，调用查找职工接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546504714318.png"></p><p>测试1 - 按照职工编号查找 - 查找不存在职工</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546504767229.png"></p><p>测试2 - 按照职工编号查找 -  查找存在职工</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546505046521.png"></p><p>测试3 - 按照职工姓名查找 - 查找不存在职工</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546505115610.png"></p><p>测试4 - 按照职工姓名查找 - 查找存在职工（如果出现重名，也一并显示，在文件中可以添加重名职工）</p><p>例如 添加两个王五的职工，然后按照姓名查找王五</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546507850441.png"></p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546507760284.png"></p><p>至此，查找职工功能实现完毕！</p><h2 id="14、排序"><a href="#14、排序" class="headerlink" title="14、排序"></a>14、排序</h2><p>功能描述：按照职工编号进行排序，排序的顺序由用户指定</p><h4 id="14-1-排序函数声明"><a href="#14-1-排序函数声明" class="headerlink" title="14.1 排序函数声明"></a>14.1 排序函数声明</h4><p>在workerManager.h中添加成员函数  <code>void Sort_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//排序职工void Sort_Emp();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="14-2-排序函数实现"><a href="#14-2-排序函数实现" class="headerlink" title="14.2 排序函数实现"></a>14.2 排序函数实现</h4><p>在workerManager.cpp中实现成员函数 <code> void Sort_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//排序职工void WorkerManager::Sort_Emp(){if (this-&gt;m_FileIsEmpty){cout &lt;&lt; "文件不存在或记录为空！" &lt;&lt; endl;system("pause");system("cls");}else{cout &lt;&lt; "请选择排序方式： " &lt;&lt; endl;cout &lt;&lt; "1、按职工号进行升序" &lt;&lt; endl;cout &lt;&lt; "2、按职工号进行降序" &lt;&lt; endl;int select = 0;cin &gt;&gt; select;for (int i = 0; i &lt; m_EmpNum; i++){int minOrMax = i;for (int j = i + 1; j &lt; m_EmpNum; j++){if (select == 1) //升序{if (m_EmpArray[minOrMax]-&gt;m_Id &gt; m_EmpArray[j]-&gt;m_Id){minOrMax = j;}}else  //降序{if (m_EmpArray[minOrMax]-&gt;m_Id &lt; m_EmpArray[j]-&gt;m_Id){minOrMax = j;}}}if (i != minOrMax){Worker * temp = m_EmpArray[i];m_EmpArray[i] = m_EmpArray[minOrMax];m_EmpArray[minOrMax] = temp;}}cout &lt;&lt; "排序成功,排序后结果为：" &lt;&lt; endl;this-&gt;save();this-&gt;Show_Emp();}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="14-3-测试排序功能"><a href="#14-3-测试排序功能" class="headerlink" title="14.3 测试排序功能"></a>14.3 测试排序功能</h4><p>在main函数分支 6  选项中，调用排序职工接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546510145181.png"></p><p>测试：</p><p>首先我们添加一些职工，序号是无序的，例如：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546658169987.png"></p><p>测试 - 升序排序</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546658190479.png"></p><p>文件同步更新</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546658273581.png"></p><p>测试 - 降序排序</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546658288936.png"></p><p>文件同步更新</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546658313704.png"></p><p>至此，职工按照编号排序的功能实现完毕！</p><h2 id="15、清空文件"><a href="#15、清空文件" class="headerlink" title="15、清空文件"></a>15、清空文件</h2><p>功能描述：将文件中记录数据清空</p><h4 id="15-1-清空函数声明"><a href="#15-1-清空函数声明" class="headerlink" title="15.1 清空函数声明"></a>15.1 清空函数声明</h4><p>在workerManager.h中添加成员函数  <code>void Clean_File();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//清空文件void Clean_File();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="15-2-清空函数实现"><a href="#15-2-清空函数实现" class="headerlink" title="15.2 清空函数实现"></a>15.2 清空函数实现</h4><p>在workerManager.cpp中实现员函数 <code> void Clean_File();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//清空文件void WorkerManager::Clean_File(){cout &lt;&lt; "确认清空？" &lt;&lt; endl;cout &lt;&lt; "1、确认" &lt;&lt; endl;cout &lt;&lt; "2、返回" &lt;&lt; endl;int select = 0;cin &gt;&gt; select;if (select == 1){//打开模式 ios::trunc 如果存在删除文件并重新创建ofstream ofs(FILENAME, ios::trunc);ofs.close();if (this-&gt;m_EmpArray != NULL){            for (int i = 0; i &lt; this-&gt;m_EmpNum; i++){if (this-&gt;m_EmpArray[i] != NULL){delete this-&gt;m_EmpArray[i];}}this-&gt;m_EmpNum = 0;delete[] this-&gt;m_EmpArray;this-&gt;m_EmpArray = NULL;this-&gt;m_FileIsEmpty = true;}cout &lt;&lt; "清空成功！" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="15-3-测试清空文件"><a href="#15-3-测试清空文件" class="headerlink" title="15.3 测试清空文件"></a>15.3 测试清空文件</h4><p>在main函数分支 7  选项中，调用清空文件接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546511085541.png"></p><p>测试：确认清空文件</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546510976745.png"></p><p>再次查看文件中数据，记录已为空</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546510994196.png"></p><p>打开文件，里面数据已确保清空，该功能需要慎用！</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546511018517.png"></p><p>随着清空文件功能实现，本案例制作完毕  ^ _ ^  </p>]]></content>
      
      
      <categories>
          
          <category> C++案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 基于多态的职工管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-通讯录管理系统</title>
      <link href="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/"/>
      <url>/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="1、系统需求"><a href="#1、系统需求" class="headerlink" title="1、系统需求"></a>1、系统需求</h2><p>通讯录是一个可以记录亲人、好友信息的工具。</p><p>本教程主要利用C++来实现一个通讯录管理系统</p><p>系统中需要实现的功能如下：</p><ul><li>添加联系人：向通讯录中添加新人，信息包括（姓名、性别、年龄、联系电话、家庭住址）最多记录1000人</li><li>显示联系人：显示通讯录中所有联系人信息</li><li>删除联系人：按照姓名进行删除指定联系人</li><li>查找联系人：按照姓名查看指定联系人信息</li><li>修改联系人：按照姓名重新修改指定联系人</li><li>清空联系人：清空通讯录中所有信息</li><li>退出通讯录：退出当前使用的通讯录</li></ul><h2 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h2><p>创建项目步骤如下：</p><ul><li>创建新项目</li><li>添加文件</li></ul><h3 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h3><p>打开vs2017后，点击创建新项目，创建新的C++项目</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544151401138.png" alt="1544151401138"></p><p>填写项目名称，选择项目路径</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544151579620.png" alt="1544151579620"></p><h3 id="2-2添加文件"><a href="#2-2添加文件" class="headerlink" title="2.2添加文件"></a>2.2添加文件</h3><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544161551746.png" alt="1544161551746"></p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544161648175.png" alt="1544161648175"></p><p>添加成功后，效果如图：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544162344057.png" alt="1544162344057"></p><p>至此，项目已创建完毕</p><h2 id="3、菜单功能"><a href="#3、菜单功能" class="headerlink" title="3、菜单功能"></a>3、菜单功能</h2><p><strong>功能描述：</strong> 用户选择功能的界面</p><p>菜单界面效果如下图：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544149559893.png" alt="1544149559893"></p><p><strong>步骤：</strong></p><ul><li>封装函数显示该界面  如 <code>void showMenu()</code></li><li>在main函数中调用封装好的函数</li></ul><p><strong>代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//菜单界面void showMenu(){cout &lt;&lt; "***************************" &lt;&lt; endl;cout &lt;&lt; "*****  1、添加联系人  *****" &lt;&lt; endl;cout &lt;&lt; "*****  2、显示联系人  *****" &lt;&lt; endl;cout &lt;&lt; "*****  3、删除联系人  *****" &lt;&lt; endl;cout &lt;&lt; "*****  4、查找联系人  *****" &lt;&lt; endl;cout &lt;&lt; "*****  5、修改联系人  *****" &lt;&lt; endl;cout &lt;&lt; "*****  6、清空联系人  *****" &lt;&lt; endl;cout &lt;&lt; "*****  0、退出通讯录  *****" &lt;&lt; endl;cout &lt;&lt; "***************************" &lt;&lt; endl;}int main() {showMenu();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、退出功能"><a href="#4、退出功能" class="headerlink" title="4、退出功能"></a>4、退出功能</h2><p>功能描述：退出通讯录系统</p><p>思路：根据用户不同的选择，进入不同的功能，可以选择switch分支结构，将整个架构进行搭建</p><p>当用户选择0时候，执行退出，选择其他先不做操作，也不会退出程序</p><p><strong>代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int select = 0;while (true){showMenu();cin &gt;&gt; select;switch (select){case 1:  //添加联系人break;case 2:  //显示联系人break;case 3:  //删除联系人break;case 4:  //查找联系人break;case 5:  //修改联系人break;case 6:  //清空联系人break;case 0:  //退出通讯录cout &lt;&lt; "欢迎下次使用" &lt;&lt; endl;system("pause");return 0;break;default:break;}}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544163868043.png" alt="1544163868043"></p><h2 id="5、添加联系人"><a href="#5、添加联系人" class="headerlink" title="5、添加联系人"></a>5、添加联系人</h2><p>功能描述：</p><p>实现添加联系人功能，联系人上限为1000人，联系人信息包括（姓名、性别、年龄、联系电话、家庭住址）</p><p>添加联系人实现步骤：</p><ul><li>设计联系人结构体</li><li>设计通讯录结构体</li><li>main函数中创建通讯录</li><li>封装添加联系人函数</li><li>测试添加联系人功能</li></ul><h3 id="5-1-设计联系人结构体"><a href="#5-1-设计联系人结构体" class="headerlink" title="5.1 设计联系人结构体"></a>5.1 设计联系人结构体</h3><p>联系人信息包括：姓名、性别、年龄、联系电话、家庭住址</p><p>设计如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;  //string头文件//联系人结构体struct Person{string m_Name; //姓名int m_Sex; //性别：1男 2女int m_Age; //年龄string m_Phone; //电话string m_Addr; //住址};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-设计通讯录结构体"><a href="#5-2-设计通讯录结构体" class="headerlink" title="5.2 设计通讯录结构体"></a>5.2 设计通讯录结构体</h3><p>设计时候可以在通讯录结构体中，维护一个容量为1000的存放联系人的数组，并记录当前通讯录中联系人数量</p><p>设计如下</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#define MAX 1000 //最大人数//通讯录结构体struct Addressbooks{struct Person personArray[MAX]; //通讯录中保存的联系人数组int m_Size; //通讯录中人员个数};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-main函数中创建通讯录"><a href="#5-3-main函数中创建通讯录" class="headerlink" title="5.3 main函数中创建通讯录"></a>5.3 main函数中创建通讯录</h3><p>添加联系人函数封装好后，在main函数中创建一个通讯录变量，这个就是我们需要一直维护的通讯录</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mian函数起始位置添加：//创建通讯录Addressbooks abs;//初始化通讯录中人数abs.m_Size = 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-封装添加联系人函数"><a href="#5-4-封装添加联系人函数" class="headerlink" title="5.4 封装添加联系人函数"></a>5.4 封装添加联系人函数</h3><p>思路：添加联系人前先判断通讯录是否已满，如果满了就不再添加，未满情况将新联系人信息逐个加入到通讯录</p><p>添加联系人代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//1、添加联系人信息void addPerson(Addressbooks *abs){//判断电话本是否满了if (abs-&gt;m_Size == MAX){cout &lt;&lt; "通讯录已满，无法添加" &lt;&lt; endl;return;}else{//姓名string name;cout &lt;&lt; "请输入姓名：" &lt;&lt; endl;cin &gt;&gt; name;abs-&gt;personArray[abs-&gt;m_Size].m_Name = name;cout &lt;&lt; "请输入性别：" &lt;&lt; endl;cout &lt;&lt; "1 -- 男" &lt;&lt; endl;cout &lt;&lt; "2 -- 女" &lt;&lt; endl;//性别int sex = 0;while (true){cin &gt;&gt; sex;if (sex == 1 || sex == 2){abs-&gt;personArray[abs-&gt;m_Size].m_Sex = sex;break;}cout &lt;&lt; "输入有误，请重新输入";}//年龄cout &lt;&lt; "请输入年龄：" &lt;&lt; endl;int age = 0;cin &gt;&gt; age;abs-&gt;personArray[abs-&gt;m_Size].m_Age = age;//联系电话cout &lt;&lt; "请输入联系电话：" &lt;&lt; endl;string phone = "";cin &gt;&gt; phone;abs-&gt;personArray[abs-&gt;m_Size].m_Phone = phone;//家庭住址cout &lt;&lt; "请输入家庭住址：" &lt;&lt; endl;string address;cin &gt;&gt; address;abs-&gt;personArray[abs-&gt;m_Size].m_Addr = address;//更新通讯录人数abs-&gt;m_Size++;cout &lt;&lt; "添加成功" &lt;&lt; endl;system("pause");system("cls");}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-测试添加联系人功能"><a href="#5-5-测试添加联系人功能" class="headerlink" title="5.5 测试添加联系人功能"></a>5.5 测试添加联系人功能</h3><p>选择界面中，如果玩家选择了1，代表添加联系人，我们可以测试下该功能</p><p>在switch case 语句中，case1里添加：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 1:  //添加联系人addPerson(&amp;abs);break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试效果如图：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544165554002.png" alt="1544165554002"></p><h2 id="6、显示联系人"><a href="#6、显示联系人" class="headerlink" title="6、显示联系人"></a>6、显示联系人</h2><p>功能描述：显示通讯录中已有的联系人信息</p><p>显示联系人实现步骤：</p><ul><li>封装显示联系人函数</li><li>测试显示联系人功能</li></ul><h3 id="6-1-封装显示联系人函数"><a href="#6-1-封装显示联系人函数" class="headerlink" title="6.1 封装显示联系人函数"></a>6.1 封装显示联系人函数</h3><p>思路：判断如果当前通讯录中没有人员，就提示记录为空，人数大于0，显示通讯录中信息</p><p>显示联系人代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//2、显示所有联系人信息void showPerson(Addressbooks * abs){if (abs-&gt;m_Size == 0){cout &lt;&lt; "当前记录为空" &lt;&lt; endl;}else{for (int i = 0; i &lt; abs-&gt;m_Size; i++){cout &lt;&lt; "姓名：" &lt;&lt; abs-&gt;personArray[i].m_Name &lt;&lt; "\t";cout &lt;&lt; "性别：" &lt;&lt; (abs-&gt;personArray[i].m_Sex == 1 ? "男" : "女") &lt;&lt; "\t";cout &lt;&lt; "年龄：" &lt;&lt; abs-&gt;personArray[i].m_Age &lt;&lt; "\t";cout &lt;&lt; "电话：" &lt;&lt; abs-&gt;personArray[i].m_Phone &lt;&lt; "\t";cout &lt;&lt; "住址：" &lt;&lt; abs-&gt;personArray[i].m_Addr &lt;&lt; endl;}}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-测试显示联系人功能"><a href="#6-2-测试显示联系人功能" class="headerlink" title="6.2 测试显示联系人功能"></a>6.2 测试显示联系人功能</h3><p>在switch case语句中，case 2 里添加</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 2:  //显示联系人showPerson(&amp;abs);break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试效果如图：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544166401582.png" alt="1544166401582"></p><h2 id="7、删除联系人"><a href="#7、删除联系人" class="headerlink" title="7、删除联系人"></a>7、删除联系人</h2><p>功能描述：按照姓名进行删除指定联系人</p><p>删除联系人实现步骤：</p><ul><li>封装检测联系人是否存在</li><li>封装删除联系人函数</li><li>测试删除联系人功能</li></ul><h3 id="7-1-封装检测联系人是否存在"><a href="#7-1-封装检测联系人是否存在" class="headerlink" title="7.1  封装检测联系人是否存在"></a>7.1  封装检测联系人是否存在</h3><p>设计思路：</p><p>删除联系人前，我们需要先判断用户输入的联系人是否存在，如果存在删除，不存在提示用户没有要删除的联系人</p><p>因此我们可以把检测联系人是否存在封装成一个函数中，如果存在，返回联系人在通讯录中的位置，不存在返回-1</p><p>检测联系人是否存在代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//判断是否存在查询的人员，存在返回在数组中索引位置，不存在返回-1int isExist(Addressbooks * abs, string name){for (int i = 0; i &lt; abs-&gt;m_Size; i++){if (abs-&gt;personArray[i].m_Name == name){return i;}}return -1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-封装删除联系人函数"><a href="#7-2-封装删除联系人函数" class="headerlink" title="7.2 封装删除联系人函数"></a>7.2 封装删除联系人函数</h3><p>根据用户输入的联系人判断该通讯录中是否有此人</p><p>查找到进行删除，并提示删除成功</p><p>查不到提示查无此人。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//3、删除指定联系人信息void deletePerson(Addressbooks * abs){cout &lt;&lt; "请输入您要删除的联系人" &lt;&lt; endl;string name;cin &gt;&gt; name;int ret = isExist(abs, name);if (ret != -1){for (int i = ret; i &lt; abs-&gt;m_Size; i++){abs-&gt;personArray[i] = abs-&gt;personArray[i + 1];}         abs-&gt;m_Size--;cout &lt;&lt; "删除成功" &lt;&lt; endl;}else{cout &lt;&lt; "查无此人" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-测试删除联系人功能"><a href="#7-3-测试删除联系人功能" class="headerlink" title="7.3 测试删除联系人功能"></a>7.3 测试删除联系人功能</h3><p>在switch case 语句中，case3里添加：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 3:  //删除联系人deletePerson(&amp;abs);break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试效果如图：</p><p>存在情况：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544167951559.png" alt="1544167951559"></p><p>不存在情况：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544168010831.png" alt="1544168010831"></p><h2 id="8、查找联系人"><a href="#8、查找联系人" class="headerlink" title="8、查找联系人"></a>8、查找联系人</h2><p>功能描述：按照姓名查看指定联系人信息</p><p>查找联系人实现步骤</p><ul><li>封装查找联系人函数</li><li>测试查找指定联系人</li></ul><h3 id="8-1-封装查找联系人函数"><a href="#8-1-封装查找联系人函数" class="headerlink" title="8.1 封装查找联系人函数"></a>8.1 封装查找联系人函数</h3><p>实现思路：判断用户指定的联系人是否存在，如果存在显示信息，不存在则提示查无此人。</p><p>查找联系人代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//4、查找指定联系人信息void findPerson(Addressbooks * abs){cout &lt;&lt; "请输入您要查找的联系人" &lt;&lt; endl;string name;cin &gt;&gt; name;int ret = isExist(abs, name);if (ret != -1){cout &lt;&lt; "姓名：" &lt;&lt; abs-&gt;personArray[ret].m_Name &lt;&lt; "\t";cout &lt;&lt; "性别：" &lt;&lt; abs-&gt;personArray[ret].m_Sex &lt;&lt; "\t";cout &lt;&lt; "年龄：" &lt;&lt; abs-&gt;personArray[ret].m_Age &lt;&lt; "\t";cout &lt;&lt; "电话：" &lt;&lt; abs-&gt;personArray[ret].m_Phone &lt;&lt; "\t";cout &lt;&lt; "住址：" &lt;&lt; abs-&gt;personArray[ret].m_Addr &lt;&lt; endl;}else{cout &lt;&lt; "查无此人" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-测试查找指定联系人"><a href="#8-2-测试查找指定联系人" class="headerlink" title="8.2 测试查找指定联系人"></a>8.2 测试查找指定联系人</h3><p>在switch case 语句中，case4里添加：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 4:  //查找联系人findPerson(&amp;abs);break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试效果如图</p><p>存在情况：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544170057646.png" alt="1544170057646"></p><p>不存在情况：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544170254021.png" alt="1544170254021"></p><h2 id="9、修改联系人"><a href="#9、修改联系人" class="headerlink" title="9、修改联系人"></a>9、修改联系人</h2><p>功能描述：按照姓名重新修改指定联系人</p><p>修改联系人实现步骤</p><ul><li>封装修改联系人函数</li><li>测试修改联系人功能</li></ul><h3 id="9-1-封装修改联系人函数"><a href="#9-1-封装修改联系人函数" class="headerlink" title="9.1 封装修改联系人函数"></a>9.1 封装修改联系人函数</h3><p>实现思路：查找用户输入的联系人，如果查找成功进行修改操作，查找失败提示查无此人</p><p>修改联系人代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//5、修改指定联系人信息void modifyPerson(Addressbooks * abs){cout &lt;&lt; "请输入您要修改的联系人" &lt;&lt; endl;string name;cin &gt;&gt; name;int ret = isExist(abs, name);if (ret != -1){//姓名string name;cout &lt;&lt; "请输入姓名：" &lt;&lt; endl;cin &gt;&gt; name;abs-&gt;personArray[ret].m_Name = name;cout &lt;&lt; "请输入性别：" &lt;&lt; endl;cout &lt;&lt; "1 -- 男" &lt;&lt; endl;cout &lt;&lt; "2 -- 女" &lt;&lt; endl;//性别int sex = 0;while (true){cin &gt;&gt; sex;if (sex == 1 || sex == 2){abs-&gt;personArray[ret].m_Sex = sex;break;}cout &lt;&lt; "输入有误，请重新输入";}//年龄cout &lt;&lt; "请输入年龄：" &lt;&lt; endl;int age = 0;cin &gt;&gt; age;abs-&gt;personArray[ret].m_Age = age;//联系电话cout &lt;&lt; "请输入联系电话：" &lt;&lt; endl;string phone = "";cin &gt;&gt; phone;abs-&gt;personArray[ret].m_Phone = phone;//家庭住址cout &lt;&lt; "请输入家庭住址：" &lt;&lt; endl;string address;cin &gt;&gt; address;abs-&gt;personArray[ret].m_Addr = address;cout &lt;&lt; "修改成功" &lt;&lt; endl;}else{cout &lt;&lt; "查无此人" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-测试修改联系人功能"><a href="#9-2-测试修改联系人功能" class="headerlink" title="9.2 测试修改联系人功能"></a>9.2 测试修改联系人功能</h3><p>在switch case 语句中，case 5里添加：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 5:  //修改联系人modifyPerson(&amp;abs);break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试效果如图：</p><p>查不到指定联系人情况：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544172265676.png" alt="1544172265676"></p><p>查找到联系人，并修改成功：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544172164141.png" alt="1544172164141"></p><p>再次查看通讯录，确认修改完毕</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544172228627.png" alt="1544172228627"></p><h2 id="10、清空联系人"><a href="#10、清空联系人" class="headerlink" title="10、清空联系人"></a>10、清空联系人</h2><p>功能描述：清空通讯录中所有信息</p><p>清空联系人实现步骤</p><ul><li>封装清空联系人函数</li><li>测试清空联系人</li></ul><h3 id="10-1-封装清空联系人函数"><a href="#10-1-封装清空联系人函数" class="headerlink" title="10.1 封装清空联系人函数"></a>10.1 封装清空联系人函数</h3><p>实现思路： 将通讯录所有联系人信息清除掉，只要将通讯录记录的联系人数量置为0，做逻辑清空即可。</p><p>清空联系人代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//6、清空所有联系人void cleanPerson(Addressbooks * abs){abs-&gt;m_Size = 0;cout &lt;&lt; "通讯录已清空" &lt;&lt; endl;system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-测试清空联系人"><a href="#10-2-测试清空联系人" class="headerlink" title="10.2  测试清空联系人"></a>10.2  测试清空联系人</h3><p>在switch case 语句中，case 6 里添加：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 6:  //清空联系人cleanPerson(&amp;abs);break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试效果如图：</p><p>清空通讯录</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544172909693.png" alt="1544172909693"></p><p>再次查看信息，显示记录为空</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544172943653.png" alt="1544172943653"></p><p><strong>至此，通讯录管理系统完成！</strong></p>]]></content>
      
      
      <categories>
          
          <category> C++案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-STL-常用算法</title>
      <link href="/2023/03/03/c-ti-gao-bian-cheng/5-stl-chang-yong-suan-fa/"/>
      <url>/2023/03/03/c-ti-gao-bian-cheng/5-stl-chang-yong-suan-fa/</url>
      
        <content type="html"><![CDATA[<p><strong>概述</strong>:</p><ul><li><p>算法主要是由头文件<code>&lt;algorithm&gt;</code> <code>&lt;functional&gt;</code> <code>&lt;numeric&gt;</code>组成。</p></li><li><p><code>&lt;algorithm&gt;</code>是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等</p></li><li><p><code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数</p></li><li><p><code>&lt;functional&gt;</code>定义了一些模板类,用以声明函数对象。</p></li></ul><h3 id="5-1-常用遍历算法"><a href="#5-1-常用遍历算法" class="headerlink" title="5.1 常用遍历算法"></a>5.1 常用遍历算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的遍历算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>for_each</code>     //遍历容器</li><li><code>transform</code>   //搬运容器到另一个容器中</li></ul><h4 id="5-1-1-for-each"><a href="#5-1-1-for-each" class="headerlink" title="5.1.1 for_each"></a>5.1.1 for_each</h4><p><strong>功能描述：</strong></p><ul><li>实现遍历容器</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>for_each(iterator beg, iterator end, _func);  </code></p><p>// 遍历算法 遍历容器元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _func 函数或者函数对象</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;//普通函数void print01(int val) {cout &lt;&lt; val &lt;&lt; " ";}//函数对象class print02 { public:void operator()(int val) {cout &lt;&lt; val &lt;&lt; " ";}};//for_each算法基本用法void test01() {vector&lt;int&gt; v;for (int i = 0; i &lt; 10; i++) {v.push_back(i);}//遍历算法for_each(v.begin(), v.end(), print01);cout &lt;&lt; endl;for_each(v.begin(), v.end(), print02());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>for_each在实际开发中是最常用遍历算法，需要熟练掌握</p><h4 id="5-1-2-transform"><a href="#5-1-2-transform" class="headerlink" title="5.1.2 transform"></a>5.1.2 transform</h4><p><strong>功能描述：</strong></p><ul><li>搬运容器到另一个容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><code>transform(iterator beg1, iterator end1, iterator beg2, _func);</code></li></ul><p>//beg1 源容器开始迭代器</p><p>//end1 源容器结束迭代器</p><p>//beg2 目标容器开始迭代器</p><p>//_func 函数或者函数对象</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;vector&gt;#include&lt;algorithm&gt;//常用遍历算法  搬运 transformclass TransForm{public:int operator()(int val){return val;}};class MyPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt;v;for (int i = 0; i &lt; 10; i++){v.push_back(i);}vector&lt;int&gt;vTarget; //目标容器vTarget.resize(v.size()); // 目标容器需要提前开辟空间transform(v.begin(), v.end(), vTarget.begin(), TransForm());for_each(vTarget.begin(), vTarget.end(), MyPrint());}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 搬运的目标容器必须要提前开辟空间，否则无法正常搬运</p><h3 id="5-2-常用查找算法"><a href="#5-2-常用查找算法" class="headerlink" title="5.2 常用查找算法"></a>5.2 常用查找算法</h3><p>学习目标：</p><ul><li>掌握常用的查找算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>find</code>                     //查找元素</li><li><code>find_if</code>               //按条件查找元素</li><li><code>adjacent_find</code>    //查找相邻重复元素</li><li><code>binary_search</code>    //二分查找法</li><li><code>count</code>                   //统计元素个数</li><li><code>count_if</code>             //按条件统计元素个数</li></ul><h4 id="5-2-1-find"><a href="#5-2-1-find" class="headerlink" title="5.2.1 find"></a>5.2.1 find</h4><p><strong>功能描述：</strong></p><ul><li>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>find(iterator beg, iterator end, value);  </code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 查找的元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;string&gt;void test01() {vector&lt;int&gt; v;for (int i = 0; i &lt; 10; i++) {v.push_back(i + 1);}//查找容器中是否有 5 这个元素vector&lt;int&gt;::iterator it = find(v.begin(), v.end(), 5);if (it == v.end()) {cout &lt;&lt; "没有找到!" &lt;&lt; endl;}else {cout &lt;&lt; "找到:" &lt;&lt; *it &lt;&lt; endl;}}class Person {public:Person(string name, int age) {this-&gt;m_Name = name;this-&gt;m_Age = age;}//重载==bool operator==(const Person&amp; p) {if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age) {return true;}return false;}public:string m_Name;int m_Age;};void test02() {vector&lt;Person&gt; v;//创建数据Person p1("aaa", 10);Person p2("bbb", 20);Person p3("ccc", 30);Person p4("ddd", 40);v.push_back(p1);v.push_back(p2);v.push_back(p3);v.push_back(p4);vector&lt;Person&gt;::iterator it = find(v.begin(), v.end(), p2);if (it == v.end()) {cout &lt;&lt; "没有找到!" &lt;&lt; endl;}else {cout &lt;&lt; "找到姓名:" &lt;&lt; it-&gt;m_Name &lt;&lt; " 年龄: " &lt;&lt; it-&gt;m_Age &lt;&lt; endl;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结： 利用find可以在容器中找指定的元素，返回值是<strong>迭代器</strong></p><h4 id="5-2-2-find-if"><a href="#5-2-2-find-if" class="headerlink" title="5.2.2 find_if"></a>5.2.2 find_if</h4><p><strong>功能描述：</strong></p><ul><li>按条件查找元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>find_if(iterator beg, iterator end, _Pred);  </code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _Pred 函数或者谓词（返回bool类型的仿函数）</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;string&gt;//内置数据类型class GreaterFive{public:bool operator()(int val){return val &gt; 5;}};void test01() {vector&lt;int&gt; v;for (int i = 0; i &lt; 10; i++) {v.push_back(i + 1);}vector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());if (it == v.end()) {cout &lt;&lt; "没有找到!" &lt;&lt; endl;}else {cout &lt;&lt; "找到大于5的数字:" &lt;&lt; *it &lt;&lt; endl;}}//自定义数据类型class Person {public:Person(string name, int age){this-&gt;m_Name = name;this-&gt;m_Age = age;}public:string m_Name;int m_Age;};class Greater20{public:bool operator()(Person &amp;p){return p.m_Age &gt; 20;}};void test02() {vector&lt;Person&gt; v;//创建数据Person p1("aaa", 10);Person p2("bbb", 20);Person p3("ccc", 30);Person p4("ddd", 40);v.push_back(p1);v.push_back(p2);v.push_back(p3);v.push_back(p4);vector&lt;Person&gt;::iterator it = find_if(v.begin(), v.end(), Greater20());if (it == v.end()){cout &lt;&lt; "没有找到!" &lt;&lt; endl;}else{cout &lt;&lt; "找到姓名:" &lt;&lt; it-&gt;m_Name &lt;&lt; " 年龄: " &lt;&lt; it-&gt;m_Age &lt;&lt; endl;}}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：find_if按条件查找使查找更加灵活，提供的仿函数可以改变不同的策略</p><h4 id="5-2-3-adjacent-find"><a href="#5-2-3-adjacent-find" class="headerlink" title="5.2.3 adjacent_find"></a>5.2.3 adjacent_find</h4><p><strong>功能描述：</strong></p><ul><li>查找相邻重复元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>adjacent_find(iterator beg, iterator end);  </code></p><p>// 查找相邻重复元素,返回相邻元素的第一个位置的迭代器</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;void test01(){vector&lt;int&gt; v;v.push_back(1);v.push_back(2);v.push_back(5);v.push_back(2);v.push_back(4);v.push_back(4);v.push_back(3);//查找相邻重复元素vector&lt;int&gt;::iterator it = adjacent_find(v.begin(), v.end());if (it == v.end()) {cout &lt;&lt; "找不到!" &lt;&lt; endl;}else {cout &lt;&lt; "找到相邻重复元素为:" &lt;&lt; *it &lt;&lt; endl;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent_find算法</p><h4 id="5-2-4-binary-search"><a href="#5-2-4-binary-search" class="headerlink" title="5.2.4 binary_search"></a>5.2.4 binary_search</h4><p><strong>功能描述：</strong></p><ul><li>查找指定元素是否存在</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>bool binary_search(iterator beg, iterator end, value);  </code></p><p>// 查找指定的元素，查到 返回true  否则false</p><p>// 注意: 在<strong>无序序列中不可用</strong></p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 查找的元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;void test01(){vector&lt;int&gt;v;for (int i = 0; i &lt; 10; i++){v.push_back(i);}//二分查找bool ret = binary_search(v.begin(), v.end(),2);if (ret){cout &lt;&lt; "找到了" &lt;&lt; endl;}else{cout &lt;&lt; "未找到" &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>二分查找法查找效率很高，值得注意的是查找的容器中元素必须的有序序列</p><h4 id="5-2-5-count"><a href="#5-2-5-count" class="headerlink" title="5.2.5 count"></a>5.2.5 count</h4><p><strong>功能描述：</strong></p><ul><li>统计元素个数</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>count(iterator beg, iterator end, value);  </code></p><p>// 统计元素出现次数</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 统计的元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;//内置数据类型void test01(){vector&lt;int&gt; v;v.push_back(1);v.push_back(2);v.push_back(4);v.push_back(5);v.push_back(3);v.push_back(4);v.push_back(4);int num = count(v.begin(), v.end(), 4);cout &lt;&lt; "4的个数为： " &lt;&lt; num &lt;&lt; endl;}//自定义数据类型class Person{public:Person(string name, int age){this-&gt;m_Name = name;this-&gt;m_Age = age;}bool operator==(const Person &amp; p){if (this-&gt;m_Age == p.m_Age){return true;}else{return false;}}string m_Name;int m_Age;};void test02(){vector&lt;Person&gt; v;Person p1("刘备", 35);Person p2("关羽", 35);Person p3("张飞", 35);Person p4("赵云", 30);Person p5("曹操", 25);v.push_back(p1);v.push_back(p2);v.push_back(p3);v.push_back(p4);v.push_back(p5);        Person p("诸葛亮",35);int num = count(v.begin(), v.end(), p);cout &lt;&lt; "num = " &lt;&lt; num &lt;&lt; endl;}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 统计自定义数据类型时候，需要配合重载 <code>operator==</code></p><h4 id="5-2-6-count-if"><a href="#5-2-6-count-if" class="headerlink" title="5.2.6 count_if"></a>5.2.6 count_if</h4><p><strong>功能描述：</strong></p><ul><li>按条件统计元素个数</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>count_if(iterator beg, iterator end, _Pred);  </code></p><p>// 按条件统计元素出现次数</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _Pred 谓词</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;class Greater4{public:bool operator()(int val){return val &gt;= 4;}};//内置数据类型void test01(){vector&lt;int&gt; v;v.push_back(1);v.push_back(2);v.push_back(4);v.push_back(5);v.push_back(3);v.push_back(4);v.push_back(4);int num = count_if(v.begin(), v.end(), Greater4());cout &lt;&lt; "大于4的个数为： " &lt;&lt; num &lt;&lt; endl;}//自定义数据类型class Person{public:Person(string name, int age){this-&gt;m_Name = name;this-&gt;m_Age = age;}string m_Name;int m_Age;};class AgeLess35{public:bool operator()(const Person &amp;p){return p.m_Age &lt; 35;}};void test02(){vector&lt;Person&gt; v;Person p1("刘备", 35);Person p2("关羽", 35);Person p3("张飞", 35);Person p4("赵云", 30);Person p5("曹操", 25);v.push_back(p1);v.push_back(p2);v.push_back(p3);v.push_back(p4);v.push_back(p5);int num = count_if(v.begin(), v.end(), AgeLess35());cout &lt;&lt; "小于35岁的个数：" &lt;&lt; num &lt;&lt; endl;}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>按值统计用count，按条件统计用count_if</p><h3 id="5-3-常用排序算法"><a href="#5-3-常用排序算法" class="headerlink" title="5.3 常用排序算法"></a>5.3 常用排序算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的排序算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>sort</code>             //对容器内元素进行排序</li><li><code>random_shuffle</code>   //洗牌   指定范围内的元素随机调整次序</li><li><code>merge </code>           // 容器元素合并，并存储到另一容器中</li><li><code>reverse</code>       // 反转指定范围的元素</li></ul><h4 id="5-3-1-sort"><a href="#5-3-1-sort" class="headerlink" title="5.3.1 sort"></a>5.3.1 sort</h4><p><strong>功能描述：</strong></p><ul><li>对容器内元素进行排序</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>sort(iterator beg, iterator end, _Pred);  </code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>//  beg    开始迭代器</p><p>//  end    结束迭代器</p><p>// _Pred  谓词</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;void myPrint(int val){cout &lt;&lt; val &lt;&lt; " ";}void test01() {vector&lt;int&gt; v;v.push_back(10);v.push_back(30);v.push_back(50);v.push_back(20);v.push_back(40);//sort默认从小到大排序sort(v.begin(), v.end());for_each(v.begin(), v.end(), myPrint);cout &lt;&lt; endl;//从大到小排序sort(v.begin(), v.end(), greater&lt;int&gt;());for_each(v.begin(), v.end(), myPrint);cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>sort属于开发中最常用的算法之一，需熟练掌握</p><h4 id="5-3-2-random-shuffle"><a href="#5-3-2-random-shuffle" class="headerlink" title="5.3.2 random_shuffle"></a>5.3.2 random_shuffle</h4><p><strong>功能描述：</strong></p><ul><li>洗牌   指定范围内的元素随机调整次序</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>random_shuffle(iterator beg, iterator end);  </code></p><p>// 指定范围内的元素随机调整次序</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;ctime&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){srand((unsigned int)time(NULL));vector&lt;int&gt; v;for(int i = 0 ; i &lt; 10;i++){v.push_back(i);}for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;//打乱顺序random_shuffle(v.begin(), v.end());for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>random_shuffle洗牌算法比较实用，使用时记得加随机数种子</p><h4 id="5-3-3-merge"><a href="#5-3-3-merge" class="headerlink" title="5.3.3 merge"></a>5.3.3 merge</h4><p><strong>功能描述：</strong></p><ul><li>两个容器元素合并，并存储到另一容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>// 容器元素合并，并存储到另一容器中</p><p>// 注意: 两个容器必须是<strong>有序的</strong></p><p>// beg1   容器1开始迭代器<br>// end1   容器1结束迭代器<br>// beg2   容器2开始迭代器<br>// end2   容器2结束迭代器<br>// dest    目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v1;vector&lt;int&gt; v2;for (int i = 0; i &lt; 10 ; i++)     {v1.push_back(i);v2.push_back(i + 1);}vector&lt;int&gt; vtarget;//目标容器需要提前开辟空间vtarget.resize(v1.size() + v2.size());//合并  需要两个有序序列merge(v1.begin(), v1.end(), v2.begin(), v2.end(), vtarget.begin());for_each(vtarget.begin(), vtarget.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>merge合并的两个容器必须的有序序列</p><h4 id="5-3-4-reverse"><a href="#5-3-4-reverse" class="headerlink" title="5.3.4 reverse"></a>5.3.4 reverse</h4><p><strong>功能描述：</strong></p><ul><li>将容器内元素进行反转</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>reverse(iterator beg, iterator end);  </code></p><p>// 反转指定范围的元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v;v.push_back(10);v.push_back(30);v.push_back(50);v.push_back(20);v.push_back(40);cout &lt;&lt; "反转前： " &lt;&lt; endl;for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;cout &lt;&lt; "反转后： " &lt;&lt; endl;reverse(v.begin(), v.end());for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>reverse反转区间内元素，面试题可能涉及到</p><h3 id="5-4-常用拷贝和替换算法"><a href="#5-4-常用拷贝和替换算法" class="headerlink" title="5.4 常用拷贝和替换算法"></a>5.4 常用拷贝和替换算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的拷贝和替换算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>copy</code>                      // 容器内指定范围的元素拷贝到另一容器中</li><li><code>replace</code>                // 将容器内指定范围的旧元素修改为新元素</li><li><code>replace_if </code>          // 容器内指定范围满足条件的元素替换为新元素</li><li><code>swap</code>                     // 互换两个容器的元素</li></ul><h4 id="5-4-1-copy"><a href="#5-4-1-copy" class="headerlink" title="5.4.1 copy"></a>5.4.1 copy</h4><p><strong>功能描述：</strong></p><ul><li>容器内指定范围的元素拷贝到另一容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>copy(iterator beg, iterator end, iterator dest);  </code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>// beg  开始迭代器</p><p>// end  结束迭代器</p><p>// dest 目标起始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v1;for (int i = 0; i &lt; 10; i++) {v1.push_back(i + 1);}vector&lt;int&gt; v2;v2.resize(v1.size());copy(v1.begin(), v1.end(), v2.begin());for_each(v2.begin(), v2.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>利用copy算法在拷贝时，目标容器记得提前开辟空间</p><h4 id="5-4-2-replace"><a href="#5-4-2-replace" class="headerlink" title="5.4.2 replace"></a>5.4.2 replace</h4><p><strong>功能描述：</strong></p><ul><li>将容器内指定范围的旧元素修改为新元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>replace(iterator beg, iterator end, oldvalue, newvalue);  </code></p><p>// 将区间内旧元素 替换成 新元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// oldvalue 旧元素</p><p>// newvalue 新元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v;v.push_back(20);v.push_back(30);v.push_back(20);v.push_back(40);v.push_back(50);v.push_back(10);v.push_back(20);cout &lt;&lt; "替换前：" &lt;&lt; endl;for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;//将容器中的20 替换成 2000cout &lt;&lt; "替换后：" &lt;&lt; endl;replace(v.begin(), v.end(), 20,2000);for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>replace会替换区间内满足条件的元素</p><h4 id="5-4-3-replace-if"><a href="#5-4-3-replace-if" class="headerlink" title="5.4.3 replace_if"></a>5.4.3 replace_if</h4><p><strong>功能描述:</strong>  </p><ul><li>将区间内满足条件的元素，替换成指定元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>replace_if(iterator beg, iterator end, _pred, newvalue);  </code></p><p>// 按条件替换元素，满足条件的替换成指定元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _pred 谓词</p><p>// newvalue 替换的新元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};class ReplaceGreater30{public:bool operator()(int val){return val &gt;= 30;}};void test01(){vector&lt;int&gt; v;v.push_back(20);v.push_back(30);v.push_back(20);v.push_back(40);v.push_back(50);v.push_back(10);v.push_back(20);cout &lt;&lt; "替换前：" &lt;&lt; endl;for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;//将容器中大于等于的30 替换成 3000cout &lt;&lt; "替换后：" &lt;&lt; endl;replace_if(v.begin(), v.end(), ReplaceGreater30(), 3000);for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>replace_if按条件查找，可以利用仿函数灵活筛选满足的条件</p><h4 id="5-4-4-swap"><a href="#5-4-4-swap" class="headerlink" title="5.4.4 swap"></a>5.4.4 swap</h4><p><strong>功能描述：</strong></p><ul><li>互换两个容器的元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>swap(container c1, container c2);  </code></p><p>// 互换两个容器的元素</p><p>// c1容器1</p><p>// c2容器2</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v1;vector&lt;int&gt; v2;for (int i = 0; i &lt; 10; i++) {v1.push_back(i);v2.push_back(i+100);}cout &lt;&lt; "交换前： " &lt;&lt; endl;for_each(v1.begin(), v1.end(), myPrint());cout &lt;&lt; endl;for_each(v2.begin(), v2.end(), myPrint());cout &lt;&lt; endl;cout &lt;&lt; "交换后： " &lt;&lt; endl;swap(v1, v2);for_each(v1.begin(), v1.end(), myPrint());cout &lt;&lt; endl;for_each(v2.begin(), v2.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>swap交换容器时，注意交换的容器要同种类型</p><h3 id="5-5-常用算术生成算法"><a href="#5-5-常用算术生成算法" class="headerlink" title="5.5 常用算术生成算法"></a>5.5 常用算术生成算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的算术生成算法</li></ul><p><strong>注意：</strong></p><ul><li>算术生成算法属于小型算法，使用时包含的头文件为 <code>#include &lt;numeric&gt;</code></li></ul><p><strong>算法简介：</strong></p><ul><li><p><code>accumulate</code>      // 计算容器元素累计总和</p></li><li><p><code>fill</code>                 // 向容器中添加元素</p></li></ul><h4 id="5-5-1-accumulate"><a href="#5-5-1-accumulate" class="headerlink" title="5.5.1 accumulate"></a>5.5.1 accumulate</h4><p><strong>功能描述：</strong></p><ul><li>计算区间内 容器元素累计总和</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>accumulate(iterator beg, iterator end, value);  </code></p><p>// 计算容器元素累计总和</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 起始值</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;numeric&gt;#include &lt;vector&gt;void test01(){vector&lt;int&gt; v;for (int i = 0; i &lt;= 100; i++) {v.push_back(i);}int total = accumulate(v.begin(), v.end(), 0);cout &lt;&lt; "total = " &lt;&lt; total &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>accumulate使用时头文件注意是 numeric，这个算法很实用</p><h4 id="5-5-2-fill"><a href="#5-5-2-fill" class="headerlink" title="5.5.2 fill"></a>5.5.2 fill</h4><p><strong>功能描述：</strong></p><ul><li>向容器中填充指定的元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>fill(iterator beg, iterator end, value);  </code></p><p>// 向容器中填充元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 填充的值</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;numeric&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v;v.resize(10);//填充fill(v.begin(), v.end(), 100);for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>利用fill可以将容器区间内元素填充为 指定的值</p><h3 id="5-6-常用集合算法"><a href="#5-6-常用集合算法" class="headerlink" title="5.6 常用集合算法"></a>5.6 常用集合算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的集合算法</li></ul><p><strong>算法简介：</strong></p><ul><li><p><code>set_intersection</code>          // 求两个容器的交集</p></li><li><p><code>set_union</code>                       // 求两个容器的并集</p></li><li><p><code>set_difference </code>              // 求两个容器的差集</p></li></ul><h4 id="5-6-1-set-intersection"><a href="#5-6-1-set-intersection" class="headerlink" title="5.6.1 set_intersection"></a>5.6.1 set_intersection</h4><p><strong>功能描述：</strong></p><ul><li>求两个容器的交集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>// 求两个集合的交集</p><p>// <strong>注意:两个集合必须是有序序列</strong></p><p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v1;vector&lt;int&gt; v2;for (int i = 0; i &lt; 10; i++)    {v1.push_back(i);v2.push_back(i+5);}vector&lt;int&gt; vTarget;//取两个里面较小的值给目标容器开辟空间vTarget.resize(min(v1.size(), v2.size()));//返回目标容器的最后一个元素的迭代器地址vector&lt;int&gt;::iterator itEnd =         set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());for_each(vTarget.begin(), itEnd, myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> </p><ul><li>求交集的两个集合必须的有序序列</li><li>目标容器开辟空间需要从<strong>两个容器中取小值</strong></li><li>set_intersection返回值既是交集中最后一个元素的位置</li></ul><h4 id="5-6-2-set-union"><a href="#5-6-2-set-union" class="headerlink" title="5.6.2 set_union"></a>5.6.2 set_union</h4><p><strong>功能描述：</strong></p><ul><li>求两个集合的并集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>// 求两个集合的并集</p><p>// <strong>注意:两个集合必须是有序序列</strong></p><p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v1;vector&lt;int&gt; v2;for (int i = 0; i &lt; 10; i++) {v1.push_back(i);v2.push_back(i+5);}vector&lt;int&gt; vTarget;//取两个容器的和给目标容器开辟空间vTarget.resize(v1.size() + v2.size());//返回目标容器的最后一个元素的迭代器地址vector&lt;int&gt;::iterator itEnd =         set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());for_each(vTarget.begin(), itEnd, myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> </p><ul><li>求并集的两个集合必须的有序序列</li><li>目标容器开辟空间需要<strong>两个容器相加</strong></li><li>set_union返回值既是并集中最后一个元素的位置</li></ul><h4 id="5-6-3-set-difference"><a href="#5-6-3-set-difference" class="headerlink" title="5.6.3  set_difference"></a>5.6.3  set_difference</h4><p><strong>功能描述：</strong></p><ul><li>求两个集合的差集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>// 求两个集合的差集</p><p>// <strong>注意:两个集合必须是有序序列</strong></p><p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v1;vector&lt;int&gt; v2;for (int i = 0; i &lt; 10; i++) {v1.push_back(i);v2.push_back(i+5);}vector&lt;int&gt; vTarget;//取两个里面较大的值给目标容器开辟空间vTarget.resize( max(v1.size() , v2.size()));//返回目标容器的最后一个元素的迭代器地址cout &lt;&lt; "v1与v2的差集为： " &lt;&lt; endl;vector&lt;int&gt;::iterator itEnd =         set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());for_each(vTarget.begin(), itEnd, myPrint());cout &lt;&lt; endl;cout &lt;&lt; "v2与v1的差集为： " &lt;&lt; endl;itEnd = set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin());for_each(vTarget.begin(), itEnd, myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> </p><ul><li>求差集的两个集合必须的有序序列</li><li>目标容器开辟空间需要从<strong>两个容器取较大值</strong></li><li>set_difference返回值既是差集中最后一个元素的位置</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-STL-函数对象</title>
      <link href="/2023/03/03/c-ti-gao-bian-cheng/4-stl-han-shu-dui-xiang/"/>
      <url>/2023/03/03/c-ti-gao-bian-cheng/4-stl-han-shu-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="4-1-函数对象"><a href="#4-1-函数对象" class="headerlink" title="4.1 函数对象"></a>4.1 函数对象</h3><h4 id="4-1-1-函数对象概念"><a href="#4-1-1-函数对象概念" class="headerlink" title="4.1.1 函数对象概念"></a>4.1.1 函数对象概念</h4><p><strong>概念：</strong></p><ul><li>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong></li><li><strong>函数对象</strong>使用重载的()时，行为类似函数调用，也叫<strong>仿函数</strong></li></ul><p><strong>本质：</strong></p><p>函数对象(仿函数)是一个<strong>类</strong>，不是一个函数</p><h4 id="4-1-2-函数对象使用"><a href="#4-1-2-函数对象使用" class="headerlink" title="4.1.2  函数对象使用"></a>4.1.2  函数对象使用</h4><p><strong>特点：</strong></p><ul><li>函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</li><li>函数对象超出普通函数的概念，函数对象可以有自己的状态</li><li>函数对象可以作为参数传递</li></ul><p><strong>示例:</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//1、函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值class MyAdd{public :int operator()(int v1,int v2){return v1 + v2;}};void test01(){MyAdd myAdd;cout &lt;&lt; myAdd(10, 10) &lt;&lt; endl;}//2、函数对象可以有自己的状态class MyPrint{public:MyPrint(){count = 0;}void operator()(string test){cout &lt;&lt; test &lt;&lt; endl;count++; //统计使用次数}int count; //内部自己的状态};void test02(){MyPrint myPrint;myPrint("hello world");myPrint("hello world");myPrint("hello world");cout &lt;&lt; "myPrint调用次数为： " &lt;&lt; myPrint.count &lt;&lt; endl;}//3、函数对象可以作为参数传递void doPrint(MyPrint &amp;mp , string test){mp(test);}void test03(){MyPrint myPrint;doPrint(myPrint, "Hello C++");}int main() {//test01();//test02();test03();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>仿函数写法非常灵活，可以作为参数进行传递。</li></ul><h3 id="4-2-谓词"><a href="#4-2-谓词" class="headerlink" title="4.2  谓词"></a>4.2  谓词</h3><h4 id="4-2-1-谓词概念"><a href="#4-2-1-谓词概念" class="headerlink" title="4.2.1 谓词概念"></a>4.2.1 谓词概念</h4><p><strong>概念：</strong></p><ul><li>返回bool类型的仿函数称为<strong>谓词</strong></li><li>如果operator()接受一个参数，那么叫做一元谓词</li><li>如果operator()接受两个参数，那么叫做二元谓词</li></ul><h4 id="4-2-2-一元谓词"><a href="#4-2-2-一元谓词" class="headerlink" title="4.2.2 一元谓词"></a>4.2.2 一元谓词</h4><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;//1.一元谓词struct GreaterFive{bool operator()(int val) {return val &gt; 5;}};void test01() {vector&lt;int&gt; v;for (int i = 0; i &lt; 10; i++){v.push_back(i);}vector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());if (it == v.end()) {cout &lt;&lt; "没找到!" &lt;&lt; endl;}else {cout &lt;&lt; "找到:" &lt;&lt; *it &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：参数只有一个的谓词，称为一元谓词</p><h4 id="4-2-3-二元谓词"><a href="#4-2-3-二元谓词" class="headerlink" title="4.2.3 二元谓词"></a>4.2.3 二元谓词</h4><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;//二元谓词class MyCompare{public:bool operator()(int num1, int num2){return num1 &gt; num2;}};void test01(){vector&lt;int&gt; v;v.push_back(10);v.push_back(40);v.push_back(20);v.push_back(30);v.push_back(50);//默认从小到大sort(v.begin(), v.end());for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;cout &lt;&lt; "----------------------------" &lt;&lt; endl;//使用函数对象改变算法策略，排序从大到小sort(v.begin(), v.end(), MyCompare());for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：参数只有两个的谓词，称为二元谓词</p><h3 id="4-3-内建函数对象"><a href="#4-3-内建函数对象" class="headerlink" title="4.3 内建函数对象"></a>4.3 内建函数对象</h3><h4 id="4-3-1-内建函数对象意义"><a href="#4-3-1-内建函数对象意义" class="headerlink" title="4.3.1 内建函数对象意义"></a>4.3.1 内建函数对象意义</h4><p><strong>概念：</strong></p><ul><li>STL内建了一些函数对象</li></ul><p><strong>分类:</strong></p><ul><li><p>算术仿函数</p></li><li><p>关系仿函数</p></li><li><p>逻辑仿函数</p></li></ul><p><strong>用法：</strong></p><ul><li>这些仿函数所产生的对象，用法和一般函数完全相同</li><li>使用内建函数对象，需要引入头文件 <code>#include&lt;functional&gt;</code></li></ul><h4 id="4-3-2-算术仿函数"><a href="#4-3-2-算术仿函数" class="headerlink" title="4.3.2 算术仿函数"></a>4.3.2 算术仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现四则运算</li><li>其中negate是一元运算，其他都是二元运算</li></ul><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; T plus&lt;T&gt;</code>                //加法仿函数</li><li><code>template&lt;class T&gt; T minus&lt;T&gt;</code>              //减法仿函数</li><li><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code>    //乘法仿函数</li><li><code>template&lt;class T&gt; T divides&lt;T&gt;</code>         //除法仿函数</li><li><code>template&lt;class T&gt; T modulus&lt;T&gt;</code>         //取模仿函数</li><li><code>template&lt;class T&gt; T negate&lt;T&gt;</code>           //取反仿函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;functional&gt;//negatevoid test01(){negate&lt;int&gt; n;cout &lt;&lt; n(50) &lt;&lt; endl;}//plusvoid test02(){plus&lt;int&gt; p;cout &lt;&lt; p(10, 20) &lt;&lt; endl;}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：使用内建函数对象时，需要引入头文件 <code>#include &lt;functional&gt;</code></p><h4 id="4-3-3-关系仿函数"><a href="#4-3-3-关系仿函数" class="headerlink" title="4.3.3 关系仿函数"></a>4.3.3 关系仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现关系对比</li></ul><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code>                    //等于</li><li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code>            //不等于</li><li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code>                      //大于</li><li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code>          //大于等于</li><li><code>template&lt;class T&gt; bool less&lt;T&gt;</code>                           //小于</li><li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code>               //小于等于</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;functional&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;class MyCompare{public:bool operator()(int v1,int v2){return v1 &gt; v2;}};void test01(){vector&lt;int&gt; v;v.push_back(10);v.push_back(30);v.push_back(50);v.push_back(40);v.push_back(20);for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;//自己实现仿函数//sort(v.begin(), v.end(), MyCompare());//STL内建仿函数  大于仿函数sort(v.begin(), v.end(), greater&lt;int&gt;());for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：关系仿函数中最常用的就是greater&lt;&gt;大于</p><h4 id="4-3-4-逻辑仿函数"><a href="#4-3-4-逻辑仿函数" class="headerlink" title="4.3.4 逻辑仿函数"></a>4.3.4 逻辑仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现逻辑运算</li></ul><p><strong>函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code>              //逻辑与</li><li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code>                //逻辑或</li><li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code>              //逻辑非</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;functional&gt;#include &lt;algorithm&gt;void test01(){vector&lt;bool&gt; v;v.push_back(true);v.push_back(false);v.push_back(true);v.push_back(false);for (vector&lt;bool&gt;::iterator it = v.begin();it!= v.end();it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;//逻辑非  将v容器搬运到v2中，并执行逻辑非运算vector&lt;bool&gt; v2;v2.resize(v.size());transform(v.begin(), v.end(),  v2.begin(), logical_not&lt;bool&gt;());for (vector&lt;bool&gt;::iterator it = v2.begin(); it != v2.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：逻辑仿函数实际应用较少，了解即可</p>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-STL- 常用容器</title>
      <link href="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/"/>
      <url>/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="3-1-string容器"><a href="#3-1-string容器" class="headerlink" title="3.1 string容器"></a>3.1 string容器</h3><h4 id="3-1-1-string基本概念"><a href="#3-1-1-string基本概念" class="headerlink" title="3.1.1 string基本概念"></a>3.1.1 string基本概念</h4><p><strong>本质：</strong></p><ul><li>string是C++风格的字符串，而string本质上是一个类</li></ul><p><strong>string和char * 区别：</strong></p><ul><li>char * 是一个指针</li><li>string是一个类，类内部封装了char*，管理这个字符串，是一个char*型的容器。</li></ul><p><strong>特点：</strong></p><p>string 类内部封装了很多成员方法</p><p>例如：查找find，拷贝copy，删除delete 替换replace，插入insert</p><p>string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</p><h4 id="3-1-2-string构造函数"><a href="#3-1-2-string构造函数" class="headerlink" title="3.1.2 string构造函数"></a>3.1.2 string构造函数</h4><p>构造函数原型：</p><ul><li><code>string();</code>          //创建一个空的字符串 例如: string str;<br><code>string(const char* s);</code>        //使用字符串s初始化</li><li><code>string(const string&amp; str);</code>    //使用一个string对象初始化另一个string对象</li><li><code>string(int n, char c);</code>           //使用n个字符c初始化</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//string构造void test01(){string s1; //创建空字符串，调用无参构造函数cout &lt;&lt; "str1 = " &lt;&lt; s1 &lt;&lt; endl;const char* str = "hello world";string s2(str); //把c_string转换成了stringcout &lt;&lt; "str2 = " &lt;&lt; s2 &lt;&lt; endl;string s3(s2); //调用拷贝构造函数cout &lt;&lt; "str3 = " &lt;&lt; s3 &lt;&lt; endl;string s4(10, 'a');cout &lt;&lt; "str3 = " &lt;&lt; s3 &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：string的多种构造方式没有可比性，灵活使用即可</p><h4 id="3-1-3-string赋值操作"><a href="#3-1-3-string赋值操作" class="headerlink" title="3.1.3 string赋值操作"></a>3.1.3 string赋值操作</h4><p>功能描述：</p><ul><li>给string字符串进行赋值</li></ul><p>赋值的函数原型：</p><ul><li><code>string&amp; operator=(const char* s);</code>             //char*类型字符串 赋值给当前的字符串</li><li><code>string&amp; operator=(const string &amp;s);</code>         //把字符串s赋给当前的字符串</li><li><code>string&amp; operator=(char c);</code>                          //字符赋值给当前的字符串</li><li><code>string&amp; assign(const char *s);</code>                  //把字符串s赋给当前的字符串</li><li><code>string&amp; assign(const char *s, int n);</code>     //把字符串s的前n个字符赋给当前的字符串</li><li><code>string&amp; assign(const string &amp;s);</code>              //把字符串s赋给当前字符串</li><li><code>string&amp; assign(int n, char c);</code>                  //用n个字符c赋给当前字符串</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//赋值void test01(){string str1;str1 = "hello world";cout &lt;&lt; "str1 = " &lt;&lt; str1 &lt;&lt; endl;string str2;str2 = str1;cout &lt;&lt; "str2 = " &lt;&lt; str2 &lt;&lt; endl;string str3;str3 = 'a';cout &lt;&lt; "str3 = " &lt;&lt; str3 &lt;&lt; endl;string str4;str4.assign("hello c++");cout &lt;&lt; "str4 = " &lt;&lt; str4 &lt;&lt; endl;string str5;str5.assign("hello c++",5);cout &lt;&lt; "str5 = " &lt;&lt; str5 &lt;&lt; endl;string str6;str6.assign(str5);cout &lt;&lt; "str6 = " &lt;&lt; str6 &lt;&lt; endl;string str7;str7.assign(5, 'x');cout &lt;&lt; "str7 = " &lt;&lt; str7 &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>​string的赋值方式很多，<code>operator=</code>  这种方式是比较实用的</p><h4 id="3-1-4-string字符串拼接"><a href="#3-1-4-string字符串拼接" class="headerlink" title="3.1.4 string字符串拼接"></a>3.1.4 string字符串拼接</h4><p><strong>功能描述：</strong></p><ul><li>实现在字符串末尾拼接字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; operator+=(const char* str);</code>                   //重载+=操作符</li><li><code>string&amp; operator+=(const char c);</code>                         //重载+=操作符</li><li><code>string&amp; operator+=(const string&amp; str);</code>                //重载+=操作符</li><li><code>string&amp; append(const char *s); </code>                               //把字符串s连接到当前字符串结尾</li><li><code>string&amp; append(const char *s, int n);</code>                 //把字符串s的前n个字符连接到当前字符串结尾</li><li><code>string&amp; append(const string &amp;s);</code>                           //同operator+=(const string&amp; str)</li><li><code>string&amp; append(const string &amp;s, int pos, int n);</code>//字符串s中从pos开始的n个字符连接到字符串结尾</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//字符串拼接void test01(){string str1 = "我";str1 += "爱玩游戏";cout &lt;&lt; "str1 = " &lt;&lt; str1 &lt;&lt; endl;str1 += ':';cout &lt;&lt; "str1 = " &lt;&lt; str1 &lt;&lt; endl;string str2 = "LOL DNF";str1 += str2;cout &lt;&lt; "str1 = " &lt;&lt; str1 &lt;&lt; endl;string str3 = "I";str3.append(" love ");str3.append("game abcde", 4);//str3.append(str2);str3.append(str2, 4, 3); // 从下标4位置开始 ，截取3个字符，拼接到字符串末尾cout &lt;&lt; "str3 = " &lt;&lt; str3 &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：字符串拼接的重载版本很多，初学阶段记住几种即可</p><h4 id="3-1-5-string查找和替换"><a href="#3-1-5-string查找和替换" class="headerlink" title="3.1.5 string查找和替换"></a>3.1.5 string查找和替换</h4><p><strong>功能描述：</strong></p><ul><li>查找：查找指定字符串是否存在</li><li>替换：在指定的位置替换字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>int find(const string&amp; str, int pos = 0) const;</code>              //查找str第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos = 0) const; </code>                     //查找s第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos, int n) const; </code>               //从pos位置查找s的前n个字符第一次位置</li><li><code>int find(const char c, int pos = 0) const; </code>                       //查找字符c第一次出现位置</li><li><code>int rfind(const string&amp; str, int pos = npos) const;</code>      //查找str最后一次位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos = npos) const;</code>              //查找s最后一次出现位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos, int n) const;</code>              //从pos查找s的前n个字符最后一次位置</li><li><code>int rfind(const char c, int pos = 0) const;  </code>                      //查找字符c最后一次出现位置</li><li><code>string&amp; replace(int pos, int n, const string&amp; str); </code>       //替换从pos开始n个字符为字符串str</li><li><code>string&amp; replace(int pos, int n,const char* s); </code>                 //替换从pos开始的n个字符为字符串s</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//查找和替换void test01(){//查找string str1 = "abcdefgde";int pos = str1.find("de");if (pos == -1){cout &lt;&lt; "未找到" &lt;&lt; endl;}else{cout &lt;&lt; "pos = " &lt;&lt; pos &lt;&lt; endl;}pos = str1.rfind("de");cout &lt;&lt; "pos = " &lt;&lt; pos &lt;&lt; endl;}void test02(){//替换string str1 = "abcdefgde";str1.replace(1, 3, "1111");cout &lt;&lt; "str1 = " &lt;&lt; str1 &lt;&lt; endl;}int main() {//test01();//test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>find查找是从左往后，rfind从右往左</li><li>find找到字符串后返回查找的第一个字符位置，找不到返回-1</li><li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li></ul><h4 id="3-1-6-string字符串比较"><a href="#3-1-6-string字符串比较" class="headerlink" title="3.1.6 string字符串比较"></a>3.1.6 string字符串比较</h4><p><strong>功能描述：</strong></p><ul><li>字符串之间的比较</li></ul><p><strong>比较方式：</strong></p><ul><li>字符串比较是按字符的ASCII码进行对比</li></ul><p>= 返回   0</p><p>&gt; 返回   1 </p><p>&lt; 返回  -1</p><p><strong>函数原型：</strong></p><ul><li><code>int compare(const string &amp;s) const; </code>  //与字符串s比较</li><li><code>int compare(const char *s) const;</code>      //与字符串s比较</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//字符串比较void test01(){string s1 = "hello";string s2 = "aello";int ret = s1.compare(s2);if (ret == 0) {cout &lt;&lt; "s1 等于 s2" &lt;&lt; endl;}else if (ret &gt; 0){cout &lt;&lt; "s1 大于 s2" &lt;&lt; endl;}else{cout &lt;&lt; "s1 小于 s2" &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大</p><h4 id="3-1-7-string字符存取"><a href="#3-1-7-string字符存取" class="headerlink" title="3.1.7 string字符存取"></a>3.1.7 string字符存取</h4><p>string中单个字符存取方式有两种</p><ul><li><code>char&amp; operator[](int n); </code>     //通过[]方式取字符</li><li><code>char&amp; at(int n);   </code>                    //通过at方法获取字符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void test01(){string str = "hello world";for (int i = 0; i &lt; str.size(); i++){cout &lt;&lt; str[i] &lt;&lt; " ";}cout &lt;&lt; endl;for (int i = 0; i &lt; str.size(); i++){cout &lt;&lt; str.at(i) &lt;&lt; " ";}cout &lt;&lt; endl;//字符修改str[0] = 'x';str.at(1) = 'x';cout &lt;&lt; str &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：string字符串中单个字符存取有两种方式，利用 [ ] 或 at</p><h4 id="3-1-8-string插入和删除"><a href="#3-1-8-string插入和删除" class="headerlink" title="3.1.8 string插入和删除"></a>3.1.8 string插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对string字符串进行插入和删除字符操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; insert(int pos, const char* s);  </code>                //插入字符串</li><li><code>string&amp; insert(int pos, const string&amp; str); </code>        //插入字符串</li><li><code>string&amp; insert(int pos, int n, char c);</code>                //在指定位置插入n个字符c</li><li><code>string&amp; erase(int pos, int n = npos);</code>                    //删除从Pos开始的n个字符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//字符串插入和删除void test01(){string str = "hello";str.insert(1, "111");cout &lt;&lt; str &lt;&lt; endl;str.erase(1, 3);  //从1号位置开始3个字符cout &lt;&lt; str &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>插入和删除的起始下标都是从0开始</p><h4 id="3-1-9-string子串"><a href="#3-1-9-string子串" class="headerlink" title="3.1.9 string子串"></a>3.1.9 string子串</h4><p><strong>功能描述：</strong></p><ul><li>从字符串中获取想要的子串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string substr(int pos = 0, int n = npos) const;</code>   //返回由pos开始的n个字符组成的字符串</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//子串void test01(){string str = "abcdefg";string subStr = str.substr(1, 3);cout &lt;&lt; "subStr = " &lt;&lt; subStr &lt;&lt; endl;string email = "hello@sina.com";int pos = email.find("@");string username = email.substr(0, pos);cout &lt;&lt; "username: " &lt;&lt; username &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>灵活的运用求子串功能，可以在实际开发中获取有效的信息</p><h3 id="3-2-vector容器"><a href="#3-2-vector容器" class="headerlink" title="3.2 vector容器"></a>3.2 vector容器</h3><h4 id="3-2-1-vector基本概念"><a href="#3-2-1-vector基本概念" class="headerlink" title="3.2.1 vector基本概念"></a>3.2.1 vector基本概念</h4><p><strong>功能：</strong></p><ul><li>vector数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong></li></ul><p><strong>vector与普通数组区别：</strong></p><ul><li>不同之处在于数组是静态空间，而vector可以<strong>动态扩展</strong></li></ul><p><strong>动态扩展：</strong></p><ul><li>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间</li></ul><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002.jpg" alt="说明: 2015-11-10_151152"></p><ul><li>vector容器的迭代器是支持随机访问的迭代器</li></ul><h4 id="3-2-2-vector构造函数"><a href="#3-2-2-vector构造函数" class="headerlink" title="3.2.2 vector构造函数"></a>3.2.2 vector构造函数</h4><p><strong>功能描述：</strong></p><ul><li>创建vector容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>vector&lt;T&gt; v; </code>                    //采用模板实现类实现，默认构造函数</li><li><code>vector(v.begin(), v.end());   </code>       //将v[begin(), end())区间中的元素拷贝给本身。</li><li><code>vector(n, elem);</code>                            //构造函数将n个elem拷贝给本身。</li><li><code>vector(const vector &amp;vec);</code>         //拷贝构造函数。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) {for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}void test01(){vector&lt;int&gt; v1; //无参构造for (int i = 0; i &lt; 10; i++){v1.push_back(i);}printVector(v1);vector&lt;int&gt; v2(v1.begin(), v1.end());printVector(v2);vector&lt;int&gt; v3(10, 100);printVector(v3);vector&lt;int&gt; v4(v3);printVector(v4);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>vector的多种构造方式没有可比性，灵活使用即可</p><h4 id="3-2-3-vector赋值操作"><a href="#3-2-3-vector赋值操作" class="headerlink" title="3.2.3 vector赋值操作"></a>3.2.3 vector赋值操作</h4><p><strong>功能描述：</strong></p><ul><li>给vector容器进行赋值</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>vector&amp; operator=(const vector &amp;vec);</code>//重载等号操作符</p></li><li><p><code>assign(beg, end);</code>       //将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code>        //将n个elem拷贝赋值给本身。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) {for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//赋值操作void test01(){vector&lt;int&gt; v1; //无参构造for (int i = 0; i &lt; 10; i++){v1.push_back(i);}printVector(v1);vector&lt;int&gt;v2;v2 = v1;printVector(v2);vector&lt;int&gt;v3;v3.assign(v1.begin(), v1.end());printVector(v3);vector&lt;int&gt;v4;v4.assign(10, 100);printVector(v4);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结： vector赋值方式比较简单，使用operator=，或者assign都可以</p><h4 id="3-2-4-vector容量和大小"><a href="#3-2-4-vector容量和大小" class="headerlink" title="3.2.4  vector容量和大小"></a>3.2.4  vector容量和大小</h4><p><strong>功能描述：</strong></p><ul><li>对vector容器的容量和大小操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>empty(); </code>                            //判断容器是否为空</p></li><li><p><code>capacity();</code>                      //容器的容量</p></li><li><p><code>size();</code>                              //返回容器中元素的个数</p></li><li><p><code>resize(int num);</code>             //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p><p>​      //如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(int num, elem);</code>  //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p><p>​              //如果容器变短，则末尾超出容器长度的元素被删除</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) {for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}void test01(){vector&lt;int&gt; v1;for (int i = 0; i &lt; 10; i++){v1.push_back(i);}printVector(v1);if (v1.empty()){cout &lt;&lt; "v1为空" &lt;&lt; endl;}else{cout &lt;&lt; "v1不为空" &lt;&lt; endl;cout &lt;&lt; "v1的容量 = " &lt;&lt; v1.capacity() &lt;&lt; endl;cout &lt;&lt; "v1的大小 = " &lt;&lt; v1.size() &lt;&lt; endl;}//resize 重新指定大小 ，若指定的更大，默认用0填充新位置，可以利用重载版本替换默认填充v1.resize(15,10);printVector(v1);//resize 重新指定大小 ，若指定的更小，超出部分元素被删除v1.resize(5);printVector(v1);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>判断是否为空  — empty</li><li>返回元素个数  — size</li><li>返回容器容量  — capacity</li><li>重新指定大小  —  resize</li></ul><h4 id="3-2-5-vector插入和删除"><a href="#3-2-5-vector插入和删除" class="headerlink" title="3.2.5 vector插入和删除"></a>3.2.5 vector插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对vector容器进行插入、删除操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>push_back(ele);</code>                                         //尾部插入元素ele</li><li><code>pop_back();</code>                                                //删除最后一个元素</li><li><code>insert(const_iterator pos, ele);</code>        //迭代器指向位置pos插入元素ele</li><li><code>insert(const_iterator pos, int count,ele);</code>//迭代器指向位置pos插入count个元素ele</li><li><code>erase(const_iterator pos);</code>                     //删除迭代器指向的元素</li><li><code>erase(const_iterator start, const_iterator end);</code>//删除迭代器从start到end之间的元素</li><li><code>clear();</code>                                                        //删除容器中所有元素</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) {for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//插入和删除void test01(){vector&lt;int&gt; v1;//尾插v1.push_back(10);v1.push_back(20);v1.push_back(30);v1.push_back(40);v1.push_back(50);printVector(v1);//尾删v1.pop_back();printVector(v1);//插入v1.insert(v1.begin(), 100);printVector(v1);v1.insert(v1.begin(), 2, 1000);printVector(v1);//删除v1.erase(v1.begin());printVector(v1);//清空v1.erase(v1.begin(), v1.end());v1.clear();printVector(v1);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>尾插  — push_back</li><li>尾删  — pop_back</li><li>插入  — insert    (位置迭代器)</li><li>删除  — erase  （位置迭代器）</li><li>清空  —  clear</li></ul><h4 id="3-2-6-vector数据存取"><a href="#3-2-6-vector数据存取" class="headerlink" title="3.2.6 vector数据存取"></a>3.2.6 vector数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对vector中的数据的存取操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>at(int idx); </code>     //返回索引idx所指的数据</li><li><code>operator[]; </code>       //返回索引idx所指的数据</li><li><code>front(); </code>            //返回容器中第一个数据元素</li><li><code>back();</code>              //返回容器中最后一个数据元素</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void test01(){vector&lt;int&gt;v1;for (int i = 0; i &lt; 10; i++){v1.push_back(i);}for (int i = 0; i &lt; v1.size(); i++){cout &lt;&lt; v1[i] &lt;&lt; " ";}cout &lt;&lt; endl;for (int i = 0; i &lt; v1.size(); i++){cout &lt;&lt; v1.at(i) &lt;&lt; " ";}cout &lt;&lt; endl;cout &lt;&lt; "v1的第一个元素为： " &lt;&lt; v1.front() &lt;&lt; endl;cout &lt;&lt; "v1的最后一个元素为： " &lt;&lt; v1.back() &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>除了用迭代器获取vector容器中元素，[ ]和at也可以</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="3-2-7-vector互换容器"><a href="#3-2-7-vector互换容器" class="headerlink" title="3.2.7 vector互换容器"></a>3.2.7 vector互换容器</h4><p><strong>功能描述：</strong></p><ul><li>实现两个容器内元素进行互换</li></ul><p><strong>函数原型：</strong></p><ul><li><code>swap(vec);</code>  // 将vec与本身的元素互换</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) {for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}void test01(){vector&lt;int&gt;v1;for (int i = 0; i &lt; 10; i++){v1.push_back(i);}printVector(v1);vector&lt;int&gt;v2;for (int i = 10; i &gt; 0; i--){v2.push_back(i);}printVector(v2);//互换容器cout &lt;&lt; "互换后" &lt;&lt; endl;v1.swap(v2);printVector(v1);printVector(v2);}void test02(){vector&lt;int&gt; v;for (int i = 0; i &lt; 100000; i++) {v.push_back(i);}cout &lt;&lt; "v的容量为：" &lt;&lt; v.capacity() &lt;&lt; endl;cout &lt;&lt; "v的大小为：" &lt;&lt; v.size() &lt;&lt; endl;v.resize(3);cout &lt;&lt; "v的容量为：" &lt;&lt; v.capacity() &lt;&lt; endl;cout &lt;&lt; "v的大小为：" &lt;&lt; v.size() &lt;&lt; endl;//收缩内存vector&lt;int&gt;(v).swap(v); //匿名对象cout &lt;&lt; "v的容量为：" &lt;&lt; v.capacity() &lt;&lt; endl;cout &lt;&lt; "v的大小为：" &lt;&lt; v.size() &lt;&lt; endl;}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：swap可以使两个容器互换，可以达到实用的收缩内存效果</p><h4 id="3-2-8-vector预留空间"><a href="#3-2-8-vector预留空间" class="headerlink" title="3.2.8 vector预留空间"></a>3.2.8 vector预留空间</h4><p><strong>功能描述：</strong></p><ul><li>减少vector在动态扩展容量时的扩展次数</li></ul><p><strong>函数原型：</strong></p><ul><li><code>reserve(int len);</code>//容器预留len个元素长度，预留位置不初始化，元素不可访问。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void test01(){vector&lt;int&gt; v;//预留空间v.reserve(100000);int num = 0;int* p = NULL;for (int i = 0; i &lt; 100000; i++) {v.push_back(i);if (p != &amp;v[0]) {p = &amp;v[0];num++;}}cout &lt;&lt; "num:" &lt;&lt; num &lt;&lt; endl;}int main() {test01();    system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：如果数据量较大，可以一开始利用reserve预留空间</p><h3 id="3-3-deque容器"><a href="#3-3-deque容器" class="headerlink" title="3.3 deque容器"></a>3.3 deque容器</h3><h4 id="3-3-1-deque容器基本概念"><a href="#3-3-1-deque容器基本概念" class="headerlink" title="3.3.1 deque容器基本概念"></a>3.3.1 deque容器基本概念</h4><p><strong>功能：</strong></p><ul><li>双端数组，可以对头端进行插入删除操作</li></ul><p><strong>deque与vector区别：</strong></p><ul><li>vector对于头部的插入删除效率低，数据量越大，效率越低</li><li>deque相对而言，对头部的插入删除速度回比vector快</li><li>vector访问元素时的速度会比deque快,这和两者内部实现有关</li></ul><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002-1547547642923.jpg" alt="说明: 2015-11-19_204101"></p><p>deque内部工作原理:</p><p>deque内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放真实数据</p><p>中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002-1547547896341.jpg" alt="clip_image002-1547547896341"></p><ul><li>deque容器的迭代器也是支持随机访问的</li></ul><h4 id="3-3-2-deque构造函数"><a href="#3-3-2-deque构造函数" class="headerlink" title="3.3.2 deque构造函数"></a>3.3.2 deque构造函数</h4><p><strong>功能描述：</strong></p><ul><li>deque容器构造</li></ul><p><strong>函数原型：</strong></p><ul><li><code>deque&lt;T&gt;</code> deqT;                      //默认构造形式</li><li><code>deque(beg, end);</code>                  //构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>deque(n, elem);</code>                    //构造函数将n个elem拷贝给本身。</li><li><code>deque(const deque &amp;deq);</code>   //拷贝构造函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) {for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//deque构造void test01() {deque&lt;int&gt; d1; //无参构造函数for (int i = 0; i &lt; 10; i++){d1.push_back(i);}printDeque(d1);deque&lt;int&gt; d2(d1.begin(),d1.end());printDeque(d2);deque&lt;int&gt;d3(10,100);printDeque(d3);deque&lt;int&gt;d4 = d3;printDeque(d4);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>deque容器和vector容器的构造方式几乎一致，灵活使用即可</p><h4 id="3-3-3-deque赋值操作"><a href="#3-3-3-deque赋值操作" class="headerlink" title="3.3.3 deque赋值操作"></a>3.3.3 deque赋值操作</h4><p><strong>功能描述：</strong></p><ul><li>给deque容器进行赋值</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>deque&amp; operator=(const deque &amp;deq); </code>         //重载等号操作符</p></li><li><p><code>assign(beg, end);</code>                                           //将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code>                                             //将n个elem拷贝赋值给本身。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) {for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//赋值操作void test01(){deque&lt;int&gt; d1;for (int i = 0; i &lt; 10; i++){d1.push_back(i);}printDeque(d1);deque&lt;int&gt;d2;d2 = d1;printDeque(d2);deque&lt;int&gt;d3;d3.assign(d1.begin(), d1.end());printDeque(d3);deque&lt;int&gt;d4;d4.assign(10, 100);printDeque(d4);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：deque赋值操作也与vector相同，需熟练掌握</p><h4 id="3-3-4-deque大小操作"><a href="#3-3-4-deque大小操作" class="headerlink" title="3.3.4 deque大小操作"></a>3.3.4 deque大小操作</h4><p><strong>功能描述：</strong></p><ul><li>对deque容器的大小进行操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>deque.empty();</code>                       //判断容器是否为空</p></li><li><p><code>deque.size();</code>                         //返回容器中元素的个数</p></li><li><p><code>deque.resize(num);</code>                //重新指定容器的长度为num,若容器变长，则以默认值填充新位置。</p><p>​                             //如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>deque.resize(num, elem);</code>     //重新指定容器的长度为num,若容器变长，则以elem值填充新位置。</p><p>​                                                     //如果容器变短，则末尾超出容器长度的元素被删除。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) {for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//大小操作void test01(){deque&lt;int&gt; d1;for (int i = 0; i &lt; 10; i++){d1.push_back(i);}printDeque(d1);//判断容器是否为空if (d1.empty()) {cout &lt;&lt; "d1为空!" &lt;&lt; endl;}else {cout &lt;&lt; "d1不为空!" &lt;&lt; endl;//统计大小cout &lt;&lt; "d1的大小为：" &lt;&lt; d1.size() &lt;&lt; endl;}//重新指定大小d1.resize(15, 1);printDeque(d1);d1.resize(5);printDeque(d1);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>deque没有容量的概念</li><li>判断是否为空   — empty</li><li>返回元素个数   — size</li><li>重新指定个数   — resize</li></ul><h4 id="3-3-5-deque-插入和删除"><a href="#3-3-5-deque-插入和删除" class="headerlink" title="3.3.5 deque 插入和删除"></a>3.3.5 deque 插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>向deque容器中插入和删除数据</li></ul><p><strong>函数原型：</strong></p><p>两端插入操作：</p><ul><li><code>push_back(elem);</code>          //在容器尾部添加一个数据</li><li><code>push_front(elem);</code>        //在容器头部插入一个数据</li><li><code>pop_back();</code>                   //删除容器最后一个数据</li><li><code>pop_front();</code>                 //删除容器第一个数据</li></ul><p>指定位置操作：</p><ul><li><p><code>insert(pos,elem);</code>         //在pos位置插入一个elem元素的拷贝，返回新数据的位置。</p></li><li><p><code>insert(pos,n,elem);</code>     //在pos位置插入n个elem数据，无返回值。</p></li><li><p><code>insert(pos,beg,end);</code>    //在pos位置插入[beg,end)区间的数据，无返回值。</p></li><li><p><code>clear();</code>                           //清空容器的所有数据</p></li><li><p><code>erase(beg,end);</code>             //删除[beg,end)区间的数据，返回下一个数据的位置。</p></li><li><p><code>erase(pos);</code>                    //删除pos位置的数据，返回下一个数据的位置。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) {for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//两端操作void test01(){deque&lt;int&gt; d;//尾插d.push_back(10);d.push_back(20);//头插d.push_front(100);d.push_front(200);printDeque(d);//尾删d.pop_back();//头删d.pop_front();printDeque(d);}//插入void test02(){deque&lt;int&gt; d;d.push_back(10);d.push_back(20);d.push_front(100);d.push_front(200);printDeque(d);d.insert(d.begin(), 1000);printDeque(d);d.insert(d.begin(), 2,10000);printDeque(d);deque&lt;int&gt;d2;d2.push_back(1);d2.push_back(2);d2.push_back(3);d.insert(d.begin(), d2.begin(), d2.end());printDeque(d);}//删除void test03(){deque&lt;int&gt; d;d.push_back(10);d.push_back(20);d.push_front(100);d.push_front(200);printDeque(d);d.erase(d.begin());printDeque(d);d.erase(d.begin(), d.end());d.clear();printDeque(d);}int main() {//test01();//test02();    test03();    system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>插入和删除提供的位置是迭代器！</li><li>尾插   —  push_back</li><li>尾删   —  pop_back</li><li>头插   —  push_front</li><li>头删   —  pop_front</li></ul><h4 id="3-3-6-deque-数据存取"><a href="#3-3-6-deque-数据存取" class="headerlink" title="3.3.6 deque 数据存取"></a>3.3.6 deque 数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对deque 中的数据的存取操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>at(int idx); </code>     //返回索引idx所指的数据</li><li><code>operator[]; </code>      //返回索引idx所指的数据</li><li><code>front(); </code>            //返回容器中第一个数据元素</li><li><code>back();</code>              //返回容器中最后一个数据元素</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) {for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//数据存取void test01(){deque&lt;int&gt; d;d.push_back(10);d.push_back(20);d.push_front(100);d.push_front(200);for (int i = 0; i &lt; d.size(); i++) {cout &lt;&lt; d[i] &lt;&lt; " ";}cout &lt;&lt; endl;for (int i = 0; i &lt; d.size(); i++) {cout &lt;&lt; d.at(i) &lt;&lt; " ";}cout &lt;&lt; endl;cout &lt;&lt; "front:" &lt;&lt; d.front() &lt;&lt; endl;cout &lt;&lt; "back:" &lt;&lt; d.back() &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>除了用迭代器获取deque容器中元素，[ ]和at也可以</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="3-3-7-deque-排序"><a href="#3-3-7-deque-排序" class="headerlink" title="3.3.7  deque 排序"></a>3.3.7  deque 排序</h4><p><strong>功能描述：</strong></p><ul><li>利用算法实现对deque容器进行排序</li></ul><p><strong>算法：</strong></p><ul><li><code>sort(iterator beg, iterator end)</code>  //对beg和end区间内元素进行排序</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;#include &lt;algorithm&gt;void printDeque(const deque&lt;int&gt;&amp; d) {for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}void test01(){deque&lt;int&gt; d;d.push_back(10);d.push_back(20);d.push_front(100);d.push_front(200);printDeque(d);sort(d.begin(), d.end());printDeque(d);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：sort算法非常实用，使用时包含头文件 algorithm即可</p><h3 id="3-4-案例-评委打分"><a href="#3-4-案例-评委打分" class="headerlink" title="3.4 案例-评委打分"></a>3.4 案例-评委打分</h3><h4 id="3-4-1-案例描述"><a href="#3-4-1-案例描述" class="headerlink" title="3.4.1 案例描述"></a>3.4.1 案例描述</h4><p>有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。</p><h4 id="3-4-2-实现步骤"><a href="#3-4-2-实现步骤" class="headerlink" title="3.4.2 实现步骤"></a>3.4.2 实现步骤</h4><ol><li>创建五名选手，放到vector中</li><li>遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中</li><li>sort算法对deque容器中分数排序，去除最高和最低分</li><li>deque容器遍历一遍，累加总分</li><li>获取平均分</li></ol><p><strong>示例代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//选手类class Person{public:Person(string name, int score){this-&gt;m_Name = name;this-&gt;m_Score = score;}string m_Name; //姓名int m_Score;  //平均分};void createPerson(vector&lt;Person&gt;&amp;v){string nameSeed = "ABCDE";for (int i = 0; i &lt; 5; i++){string name = "选手";name += nameSeed[i];int score = 0;Person p(name, score);//将创建的person对象 放入到容器中v.push_back(p);}}//打分void setScore(vector&lt;Person&gt;&amp;v){for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++){//将评委的分数 放入到deque容器中deque&lt;int&gt;d;for (int i = 0; i &lt; 10; i++){int score = rand() % 41 + 60;  // 60 ~ 100d.push_back(score);}//cout &lt;&lt; "选手： " &lt;&lt; it-&gt;m_Name &lt;&lt; " 打分： " &lt;&lt; endl;//for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++)//{//cout &lt;&lt; *dit &lt;&lt; " ";//}//cout &lt;&lt; endl;//排序sort(d.begin(), d.end());//去除最高和最低分d.pop_back();d.pop_front();//取平均分int sum = 0;for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++){sum += *dit; //累加每个评委的分数}int avg = sum / d.size();//将平均分 赋值给选手身上it-&gt;m_Score = avg;}}void showScore(vector&lt;Person&gt;&amp;v){for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++){cout &lt;&lt; "姓名： " &lt;&lt; it-&gt;m_Name &lt;&lt; " 平均分： " &lt;&lt; it-&gt;m_Score &lt;&lt; endl;}}int main() {//随机数种子srand((unsigned int)time(NULL));//1、创建5名选手vector&lt;Person&gt;v;  //存放选手容器createPerson(v);//测试//for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)//{//cout &lt;&lt; "姓名： " &lt;&lt; (*it).m_Name &lt;&lt; " 分数： " &lt;&lt; (*it).m_Score &lt;&lt; endl;//}//2、给5名选手打分setScore(v);//3、显示最后得分showScore(v);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 选取不同的容器操作数据，可以提升代码的效率</p><h3 id="3-5-stack容器"><a href="#3-5-stack容器" class="headerlink" title="3.5 stack容器"></a>3.5 stack容器</h3><h4 id="3-5-1-stack-基本概念"><a href="#3-5-1-stack-基本概念" class="headerlink" title="3.5.1 stack 基本概念"></a>3.5.1 stack 基本概念</h4><p><strong>概念：</strong>stack是一种<strong>先进后出</strong>(First In Last Out,FILO)的数据结构，它只有一个出口</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002-1547604555425.jpg" alt="说明: 2015-11-15_195707"></p><p>栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为</p><p>栈中进入数据称为  — <strong>入栈</strong>  <code>push</code></p><p>栈中弹出数据称为  — <strong>出栈</strong>  <code>pop</code></p><p>生活中的栈：</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002.png" alt="img"></p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002-1547605111510.jpg" alt="img"></p><h4 id="3-5-2-stack-常用接口"><a href="#3-5-2-stack-常用接口" class="headerlink" title="3.5.2 stack 常用接口"></a>3.5.2 stack 常用接口</h4><p>功能描述：栈容器常用的对外接口</p><p>构造函数：</p><ul><li><code>stack&lt;T&gt; stk;</code>                                 //stack采用模板类实现， stack对象的默认构造形式</li><li><code>stack(const stack &amp;stk);</code>            //拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>stack&amp; operator=(const stack &amp;stk);</code>           //重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code>      //向栈顶添加元素</li><li><code>pop();</code>                //从栈顶移除第一个元素</li><li><code>top(); </code>                //返回栈顶元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code>            //判断堆栈是否为空</li><li><code>size(); </code>              //返回栈的大小</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;stack&gt;//栈容器常用接口void test01(){//创建栈容器 栈容器必须符合先进后出stack&lt;int&gt; s;//向栈中添加元素，叫做 压栈 入栈s.push(10);s.push(20);s.push(30);while (!s.empty()) {//输出栈顶元素cout &lt;&lt; "栈顶元素为： " &lt;&lt; s.top() &lt;&lt; endl;//弹出栈顶元素s.pop();}cout &lt;&lt; "栈的大小为：" &lt;&lt; s.size() &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>入栈   — push</li><li>出栈   — pop</li><li>返回栈顶   — top</li><li>判断栈是否为空   — empty</li><li>返回栈大小   — size</li></ul><h3 id="3-6-queue-容器"><a href="#3-6-queue-容器" class="headerlink" title="3.6 queue 容器"></a>3.6 queue 容器</h3><h4 id="3-6-1-queue-基本概念"><a href="#3-6-1-queue-基本概念" class="headerlink" title="3.6.1 queue 基本概念"></a>3.6.1 queue 基本概念</h4><p><strong>概念：</strong>Queue是一种<strong>先进先出</strong>(First In First Out,FIFO)的数据结构，它有两个出口</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002-1547606475892.jpg" alt="说明: 2015-11-15_214429"></p><p>队列容器允许从一端新增元素，从另一端移除元素</p><p>队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为</p><p>队列中进数据称为 — <strong>入队</strong>    <code>push</code></p><p>队列中出数据称为 — <strong>出队</strong>    <code>pop</code></p><p>生活中的队列：</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/1547606785041.png" alt="1547606785041"></p><h4 id="3-6-2-queue-常用接口"><a href="#3-6-2-queue-常用接口" class="headerlink" title="3.6.2 queue 常用接口"></a>3.6.2 queue 常用接口</h4><p>功能描述：栈容器常用的对外接口</p><p>构造函数：</p><ul><li><code>queue&lt;T&gt; que;</code>                                 //queue采用模板类实现，queue对象的默认构造形式</li><li><code>queue(const queue &amp;que);</code>            //拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>queue&amp; operator=(const queue &amp;que);</code>           //重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code>                             //往队尾添加元素</li><li><code>pop();</code>                                      //从队头移除第一个元素</li><li><code>back();</code>                                    //返回最后一个元素</li><li><code>front(); </code>                                  //返回第一个元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code>            //判断堆栈是否为空</li><li><code>size(); </code>              //返回栈的大小</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;queue&gt;#include &lt;string&gt;class Person{public:Person(string name, int age){this-&gt;m_Name = name;this-&gt;m_Age = age;}string m_Name;int m_Age;};void test01() {//创建队列queue&lt;Person&gt; q;//准备数据Person p1("唐僧", 30);Person p2("孙悟空", 1000);Person p3("猪八戒", 900);Person p4("沙僧", 800);//向队列中添加元素  入队操作q.push(p1);q.push(p2);q.push(p3);q.push(p4);//队列不提供迭代器，更不支持随机访问while (!q.empty()) {//输出队头元素cout &lt;&lt; "队头元素-- 姓名： " &lt;&lt; q.front().m_Name               &lt;&lt; " 年龄： "&lt;&lt; q.front().m_Age &lt;&lt; endl;        cout &lt;&lt; "队尾元素-- 姓名： " &lt;&lt; q.back().m_Name                &lt;&lt; " 年龄： " &lt;&lt; q.back().m_Age &lt;&lt; endl;        cout &lt;&lt; endl;//弹出队头元素q.pop();}cout &lt;&lt; "队列大小为：" &lt;&lt; q.size() &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>入队   — push</li><li>出队   — pop</li><li>返回队头元素   — front</li><li>返回队尾元素   — back</li><li>判断队是否为空   — empty</li><li>返回队列大小   — size</li></ul><h3 id="3-7-list容器"><a href="#3-7-list容器" class="headerlink" title="3.7 list容器"></a>3.7 list容器</h3><h4 id="3-7-1-list基本概念"><a href="#3-7-1-list基本概念" class="headerlink" title="3.7.1 list基本概念"></a>3.7.1 list基本概念</h4><p><strong>功能：</strong>将数据进行链式存储</p><p><strong>链表</strong>（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p><p>链表的组成：链表由一系列<strong>结点</strong>组成</p><p>结点的组成：一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong></p><p>STL中的链表是一个双向循环链表</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002-1547608564071.jpg" alt="说明: 2015-11-15_225145"></p><p>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于<strong>双向迭代器</strong></p><p>list的优点：</p><ul><li>采用动态存储分配，不会造成内存浪费和溢出</li><li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</li></ul><p>list的缺点：</p><ul><li>链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大</li></ul><p>List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。</p><p>总结：STL中<strong>List和vector是两个最常被使用的容器</strong>，各有优缺点</p><h4 id="3-7-2-list构造函数"><a href="#3-7-2-list构造函数" class="headerlink" title="3.7.2  list构造函数"></a>3.7.2  list构造函数</h4><p><strong>功能描述：</strong></p><ul><li>创建list容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>list&lt;T&gt; lst;</code>                               //list采用采用模板类实现,对象的默认构造形式：</li><li><code>list(beg,end);</code>                           //构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>list(n,elem);</code>                             //构造函数将n个elem拷贝给本身。</li><li><code>list(const list &amp;lst);</code>            //拷贝构造函数。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) {for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}void test01(){list&lt;int&gt;L1;L1.push_back(10);L1.push_back(20);L1.push_back(30);L1.push_back(40);printList(L1);list&lt;int&gt;L2(L1.begin(),L1.end());printList(L2);list&lt;int&gt;L3(L2);printList(L3);list&lt;int&gt;L4(10, 1000);printList(L4);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：list构造方式同其他几个STL常用容器，熟练掌握即可</p><h4 id="3-7-3-list-赋值和交换"><a href="#3-7-3-list-赋值和交换" class="headerlink" title="3.7.3 list 赋值和交换"></a>3.7.3 list 赋值和交换</h4><p><strong>功能描述：</strong></p><ul><li>给list容器进行赋值，以及交换list容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>assign(beg, end);</code>            //将[beg, end)区间中的数据拷贝赋值给本身。</li><li><code>assign(n, elem);</code>              //将n个elem拷贝赋值给本身。</li><li><code>list&amp; operator=(const list &amp;lst);</code>         //重载等号操作符</li><li><code>swap(lst);</code>                         //将lst与本身的元素互换。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) {for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//赋值和交换void test01(){list&lt;int&gt;L1;L1.push_back(10);L1.push_back(20);L1.push_back(30);L1.push_back(40);printList(L1);//赋值list&lt;int&gt;L2;L2 = L1;printList(L2);list&lt;int&gt;L3;L3.assign(L2.begin(), L2.end());printList(L3);list&lt;int&gt;L4;L4.assign(10, 100);printList(L4);}//交换void test02(){list&lt;int&gt;L1;L1.push_back(10);L1.push_back(20);L1.push_back(30);L1.push_back(40);list&lt;int&gt;L2;L2.assign(10, 100);cout &lt;&lt; "交换前： " &lt;&lt; endl;printList(L1);printList(L2);cout &lt;&lt; endl;L1.swap(L2);cout &lt;&lt; "交换后： " &lt;&lt; endl;printList(L1);printList(L2);}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：list赋值和交换操作能够灵活运用即可</p><h4 id="3-7-4-list-大小操作"><a href="#3-7-4-list-大小操作" class="headerlink" title="3.7.4 list 大小操作"></a>3.7.4 list 大小操作</h4><p><strong>功能描述：</strong></p><ul><li>对list容器的大小进行操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>size(); </code>                             //返回容器中元素的个数</p></li><li><p><code>empty(); </code>                           //判断容器是否为空</p></li><li><p><code>resize(num);</code>                   //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p><p>​    //如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(num, elem); </code>       //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p><pre><code>      ​    //如果容器变短，则末尾超出容器长度的元素被删除。</code></pre></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) {for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//大小操作void test01(){list&lt;int&gt;L1;L1.push_back(10);L1.push_back(20);L1.push_back(30);L1.push_back(40);if (L1.empty()){cout &lt;&lt; "L1为空" &lt;&lt; endl;}else{cout &lt;&lt; "L1不为空" &lt;&lt; endl;cout &lt;&lt; "L1的大小为： " &lt;&lt; L1.size() &lt;&lt; endl;}//重新指定大小L1.resize(10);printList(L1);L1.resize(2);printList(L1);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>判断是否为空   — empty</li><li>返回元素个数   — size</li><li>重新指定个数   — resize</li></ul><h4 id="3-7-5-list-插入和删除"><a href="#3-7-5-list-插入和删除" class="headerlink" title="3.7.5 list 插入和删除"></a>3.7.5 list 插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对list容器进行数据的插入和删除</li></ul><p><strong>函数原型：</strong></p><ul><li>push_back(elem);//在容器尾部加入一个元素</li><li>pop_back();//删除容器中最后一个元素</li><li>push_front(elem);//在容器开头插入一个元素</li><li>pop_front();//从容器开头移除第一个元素</li><li>insert(pos,elem);//在pos位置插elem元素的拷贝，返回新数据的位置。</li><li>insert(pos,n,elem);//在pos位置插入n个elem数据，无返回值。</li><li>insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据，无返回值。</li><li>clear();//移除容器的所有数据</li><li>erase(beg,end);//删除[beg,end)区间的数据，返回下一个数据的位置。</li><li>erase(pos);//删除pos位置的数据，返回下一个数据的位置。</li><li>remove(elem);//删除容器中所有与elem值匹配的元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) {for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//插入和删除void test01(){list&lt;int&gt; L;//尾插L.push_back(10);L.push_back(20);L.push_back(30);//头插L.push_front(100);L.push_front(200);L.push_front(300);printList(L);//尾删L.pop_back();printList(L);//头删L.pop_front();printList(L);//插入list&lt;int&gt;::iterator it = L.begin();L.insert(++it, 1000);printList(L);//删除it = L.begin();L.erase(++it);printList(L);//移除L.push_back(10000);L.push_back(10000);L.push_back(10000);printList(L);L.remove(10000);printList(L);        //清空L.clear();printList(L);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>尾插   — push_back</li><li>尾删   — pop_back</li><li>头插   — push_front</li><li>头删   — pop_front</li><li>插入   — insert</li><li>删除   — erase</li><li>移除   — remove</li><li>清空   — clear</li></ul><h4 id="3-7-6-list-数据存取"><a href="#3-7-6-list-数据存取" class="headerlink" title="3.7.6 list 数据存取"></a>3.7.6 list 数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对list容器中数据进行存取</li></ul><p><strong>函数原型：</strong></p><ul><li><code>front();</code>        //返回第一个元素。</li><li><code>back();</code>         //返回最后一个元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;//数据存取void test01(){list&lt;int&gt;L1;L1.push_back(10);L1.push_back(20);L1.push_back(30);L1.push_back(40);//cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据//cout &lt;&lt; L1[0] &lt;&lt; endl; //错误  不支持[]方式访问数据cout &lt;&lt; "第一个元素为： " &lt;&lt; L1.front() &lt;&lt; endl;cout &lt;&lt; "最后一个元素为： " &lt;&lt; L1.back() &lt;&lt; endl;//list容器的迭代器是双向迭代器，不支持随机访问list&lt;int&gt;::iterator it = L1.begin();//it = it + 1;//错误，不可以跳跃访问，即使是+1}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>list容器中不可以通过[]或者at方式访问数据</li><li>返回第一个元素   — front</li><li>返回最后一个元素   — back</li></ul><h4 id="3-7-7-list-反转和排序"><a href="#3-7-7-list-反转和排序" class="headerlink" title="3.7.7 list 反转和排序"></a>3.7.7 list 反转和排序</h4><p><strong>功能描述：</strong></p><ul><li>将容器中的元素反转，以及将容器中的数据进行排序</li></ul><p><strong>函数原型：</strong></p><ul><li><code>reverse();</code>   //反转链表</li><li><code>sort();</code>        //链表排序</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void printList(const list&lt;int&gt;&amp; L) {for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}bool myCompare(int val1 , int val2){return val1 &gt; val2;}//反转和排序void test01(){list&lt;int&gt; L;L.push_back(90);L.push_back(30);L.push_back(20);L.push_back(70);printList(L);//反转容器的元素L.reverse();printList(L);//排序L.sort(); //默认的排序规则 从小到大printList(L);L.sort(myCompare); //指定规则，从大到小printList(L);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>反转   — reverse</li><li>排序   — sort （成员函数）</li></ul><h4 id="3-7-8-排序案例"><a href="#3-7-8-排序案例" class="headerlink" title="3.7.8 排序案例"></a>3.7.8 排序案例</h4><p>案例描述：将Person自定义数据类型进行排序，Person中属性有姓名、年龄、身高</p><p>排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;#include &lt;string&gt;class Person {public:Person(string name, int age , int height) {m_Name = name;m_Age = age;m_Height = height;}public:string m_Name;  //姓名int m_Age;      //年龄int m_Height;   //身高};bool ComparePerson(Person&amp; p1, Person&amp; p2) {if (p1.m_Age == p2.m_Age) {return p1.m_Height  &gt; p2.m_Height;}else{return  p1.m_Age &lt; p2.m_Age;}}void test01() {list&lt;Person&gt; L;Person p1("刘备", 35 , 175);Person p2("曹操", 45 , 180);Person p3("孙权", 40 , 170);Person p4("赵云", 25 , 190);Person p5("张飞", 35 , 160);Person p6("关羽", 35 , 200);L.push_back(p1);L.push_back(p2);L.push_back(p3);L.push_back(p4);L.push_back(p5);L.push_back(p6);for (list&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) {cout &lt;&lt; "姓名： " &lt;&lt; it-&gt;m_Name &lt;&lt; " 年龄： " &lt;&lt; it-&gt;m_Age               &lt;&lt; " 身高： " &lt;&lt; it-&gt;m_Height &lt;&lt; endl;}cout &lt;&lt; "---------------------------------" &lt;&lt; endl;L.sort(ComparePerson); //排序for (list&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) {cout &lt;&lt; "姓名： " &lt;&lt; it-&gt;m_Name &lt;&lt; " 年龄： " &lt;&lt; it-&gt;m_Age               &lt;&lt; " 身高： " &lt;&lt; it-&gt;m_Height &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li><p>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序</p></li><li><p>高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂</p></li></ul><h3 id="3-8-set-x2F-multiset-容器"><a href="#3-8-set-x2F-multiset-容器" class="headerlink" title="3.8 set/ multiset 容器"></a>3.8 set/ multiset 容器</h3><h4 id="3-8-1-set基本概念"><a href="#3-8-1-set基本概念" class="headerlink" title="3.8.1 set基本概念"></a>3.8.1 set基本概念</h4><p><strong>简介：</strong></p><ul><li>所有元素都会在插入时自动被排序</li></ul><p><strong>本质：</strong></p><ul><li>set/multiset属于<strong>关联式容器</strong>，底层结构是用<strong>二叉树</strong>实现。</li></ul><p><strong>set和multiset区别</strong>：</p><ul><li>set不允许容器中有重复的元素</li><li>multiset允许容器中有重复的元素</li></ul><h4 id="3-8-2-set构造和赋值"><a href="#3-8-2-set构造和赋值" class="headerlink" title="3.8.2 set构造和赋值"></a>3.8.2 set构造和赋值</h4><p>功能描述：创建set容器以及赋值</p><p>构造：</p><ul><li><code>set&lt;T&gt; st;</code>                        //默认构造函数：</li><li><code>set(const set &amp;st);</code>       //拷贝构造函数</li></ul><p>赋值：</p><ul><li><code>set&amp; operator=(const set &amp;st);</code>    //重载等号操作符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;void printSet(set&lt;int&gt; &amp; s){for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//构造和赋值void test01(){set&lt;int&gt; s1;s1.insert(10);s1.insert(30);s1.insert(20);s1.insert(40);printSet(s1);//拷贝构造set&lt;int&gt;s2(s1);printSet(s2);//赋值set&lt;int&gt;s3;s3 = s2;printSet(s3);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>set容器插入数据时用insert</li><li>set容器插入数据的数据会自动排序</li></ul><h4 id="3-8-3-set大小和交换"><a href="#3-8-3-set大小和交换" class="headerlink" title="3.8.3 set大小和交换"></a>3.8.3 set大小和交换</h4><p><strong>功能描述：</strong></p><ul><li>统计set容器大小以及交换set容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>size();</code>          //返回容器中元素的数目</li><li><code>empty();</code>        //判断容器是否为空</li><li><code>swap(st);</code>      //交换两个集合容器</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;void printSet(set&lt;int&gt; &amp; s){for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//大小void test01(){set&lt;int&gt; s1;s1.insert(10);s1.insert(30);s1.insert(20);s1.insert(40);if (s1.empty()){cout &lt;&lt; "s1为空" &lt;&lt; endl;}else{cout &lt;&lt; "s1不为空" &lt;&lt; endl;cout &lt;&lt; "s1的大小为： " &lt;&lt; s1.size() &lt;&lt; endl;}}//交换void test02(){set&lt;int&gt; s1;s1.insert(10);s1.insert(30);s1.insert(20);s1.insert(40);set&lt;int&gt; s2;s2.insert(100);s2.insert(300);s2.insert(200);s2.insert(400);cout &lt;&lt; "交换前" &lt;&lt; endl;printSet(s1);printSet(s2);cout &lt;&lt; endl;cout &lt;&lt; "交换后" &lt;&lt; endl;s1.swap(s2);printSet(s1);printSet(s2);}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>统计大小   — size</li><li>判断是否为空   — empty</li><li>交换容器   — swap</li></ul><h4 id="3-8-4-set插入和删除"><a href="#3-8-4-set插入和删除" class="headerlink" title="3.8.4 set插入和删除"></a>3.8.4 set插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>set容器进行插入数据和删除数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code>           //在容器中插入元素。</li><li><code>clear();</code>                    //清除所有元素</li><li><code>erase(pos);</code>              //删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code>    //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(elem);</code>            //删除容器中值为elem的元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;void printSet(set&lt;int&gt; &amp; s){for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//插入和删除void test01(){set&lt;int&gt; s1;//插入s1.insert(10);s1.insert(30);s1.insert(20);s1.insert(40);printSet(s1);//删除s1.erase(s1.begin());printSet(s1);s1.erase(30);printSet(s1);//清空//s1.erase(s1.begin(), s1.end());s1.clear();printSet(s1);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>插入   — insert</li><li>删除   — erase</li><li>清空   — clear</li></ul><h4 id="3-8-5-set查找和统计"><a href="#3-8-5-set查找和统计" class="headerlink" title="3.8.5 set查找和统计"></a>3.8.5 set查找和统计</h4><p><strong>功能描述：</strong></p><ul><li>对set容器进行查找数据以及统计数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code>                  //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li><li><code>count(key);</code>                //统计key的元素个数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;//查找和统计void test01(){set&lt;int&gt; s1;//插入s1.insert(10);s1.insert(30);s1.insert(20);s1.insert(40);//查找set&lt;int&gt;::iterator pos = s1.find(30);if (pos != s1.end()){cout &lt;&lt; "找到了元素 ： " &lt;&lt; *pos &lt;&lt; endl;}else{cout &lt;&lt; "未找到元素" &lt;&lt; endl;}//统计int num = s1.count(30);cout &lt;&lt; "num = " &lt;&lt; num &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>查找   —  find    （返回的是迭代器）</li><li>统计   —  count  （对于set，结果为0或者1）</li></ul><h4 id="3-8-6-set和multiset区别"><a href="#3-8-6-set和multiset区别" class="headerlink" title="3.8.6 set和multiset区别"></a>3.8.6 set和multiset区别</h4><p><strong>学习目标：</strong></p><ul><li>掌握set和multiset的区别</li></ul><p><strong>区别：</strong></p><ul><li>set不可以插入重复数据，而multiset可以</li><li>set插入数据的同时会返回插入结果，表示插入是否成功</li><li>multiset不会检测数据，因此可以插入重复数据</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;//set和multiset区别void test01(){set&lt;int&gt; s;pair&lt;set&lt;int&gt;::iterator, bool&gt;  ret = s.insert(10);if (ret.second) {cout &lt;&lt; "第一次插入成功!" &lt;&lt; endl;}else {cout &lt;&lt; "第一次插入失败!" &lt;&lt; endl;}ret = s.insert(10);if (ret.second) {cout &lt;&lt; "第二次插入成功!" &lt;&lt; endl;}else {cout &lt;&lt; "第二次插入失败!" &lt;&lt; endl;}    //multisetmultiset&lt;int&gt; ms;ms.insert(10);ms.insert(10);for (multiset&lt;int&gt;::iterator it = ms.begin(); it != ms.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>如果不允许插入重复数据可以利用set</li><li>如果需要插入重复数据利用multiset</li></ul><h4 id="3-8-7-pair对组创建"><a href="#3-8-7-pair对组创建" class="headerlink" title="3.8.7 pair对组创建"></a>3.8.7 pair对组创建</h4><p><strong>功能描述：</strong></p><ul><li>成对出现的数据，利用对组可以返回两个数据</li></ul><p><strong>两种创建方式：</strong></p><ul><li><code>pair&lt;type, type&gt; p ( value1, value2 );</code></li><li><code>pair&lt;type, type&gt; p = make_pair( value1, value2 );</code></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//对组创建void test01(){pair&lt;string, int&gt; p(string("Tom"), 20);cout &lt;&lt; "姓名： " &lt;&lt;  p.first &lt;&lt; " 年龄： " &lt;&lt; p.second &lt;&lt; endl;pair&lt;string, int&gt; p2 = make_pair("Jerry", 10);cout &lt;&lt; "姓名： " &lt;&lt; p2.first &lt;&lt; " 年龄： " &lt;&lt; p2.second &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>两种方式都可以创建对组，记住一种即可</p><h4 id="3-8-8-set容器排序"><a href="#3-8-8-set容器排序" class="headerlink" title="3.8.8 set容器排序"></a>3.8.8 set容器排序</h4><p>学习目标：</p><ul><li>set容器默认排序规则为从小到大，掌握如何改变排序规则</li></ul><p>主要技术点：</p><ul><li>利用仿函数，可以改变排序规则</li></ul><p><strong>示例一</strong>   set存放内置数据类型</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;class MyCompare {public:bool operator()(int v1, int v2) {return v1 &gt; v2;}};void test01() {    set&lt;int&gt; s1;s1.insert(10);s1.insert(40);s1.insert(20);s1.insert(30);s1.insert(50);//默认从小到大for (set&lt;int&gt;::iterator it = s1.begin(); it != s1.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;//指定排序规则set&lt;int,MyCompare&gt; s2;s2.insert(10);s2.insert(40);s2.insert(20);s2.insert(30);s2.insert(50);for (set&lt;int, MyCompare&gt;::iterator it = s2.begin(); it != s2.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：利用仿函数可以指定set容器的排序规则</p><p><strong>示例二</strong> set存放自定义数据类型</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;#include &lt;string&gt;class Person{public:Person(string name, int age){this-&gt;m_Name = name;this-&gt;m_Age = age;}string m_Name;int m_Age;};class comparePerson{public:bool operator()(const Person&amp; p1, const Person &amp;p2){//按照年龄进行排序  降序return p1.m_Age &gt; p2.m_Age;}};void test01(){set&lt;Person, comparePerson&gt; s;Person p1("刘备", 23);Person p2("关羽", 27);Person p3("张飞", 25);Person p4("赵云", 21);s.insert(p1);s.insert(p2);s.insert(p3);s.insert(p4);for (set&lt;Person, comparePerson&gt;::iterator it = s.begin(); it != s.end(); it++){cout &lt;&lt; "姓名： " &lt;&lt; it-&gt;m_Name &lt;&lt; " 年龄： " &lt;&lt; it-&gt;m_Age &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>对于自定义数据类型，set必须指定排序规则才可以插入数据</p><h3 id="3-9-map-x2F-multimap容器"><a href="#3-9-map-x2F-multimap容器" class="headerlink" title="3.9 map/ multimap容器"></a>3.9 map/ multimap容器</h3><h4 id="3-9-1-map基本概念"><a href="#3-9-1-map基本概念" class="headerlink" title="3.9.1 map基本概念"></a>3.9.1 map基本概念</h4><p><strong>简介：</strong></p><ul><li>map中所有元素都是pair</li><li>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）</li><li>所有元素都会根据元素的键值自动排序</li></ul><p><strong>本质：</strong></p><ul><li>map/multimap属于<strong>关联式容器</strong>，底层结构是用二叉树实现。</li></ul><p><strong>优点：</strong></p><ul><li>可以根据key值快速找到value值</li></ul><p>map和multimap<strong>区别</strong>：</p><ul><li>map不允许容器中有重复key值元素</li><li>multimap允许容器中有重复key值元素</li></ul><h4 id="3-9-2-map构造和赋值"><a href="#3-9-2-map构造和赋值" class="headerlink" title="3.9.2  map构造和赋值"></a>3.9.2  map构造和赋值</h4><p><strong>功能描述：</strong></p><ul><li>对map容器进行构造和赋值操作</li></ul><p><strong>函数原型：</strong></p><p><strong>构造：</strong></p><ul><li><code>map&lt;T1, T2&gt; mp;</code>                     //map默认构造函数: </li><li><code>map(const map &amp;mp);</code>             //拷贝构造函数</li></ul><p><strong>赋值：</strong></p><ul><li><code>map&amp; operator=(const map &amp;mp);</code>    //重载等号操作符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;void printMap(map&lt;int,int&gt;&amp;m){for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++){cout &lt;&lt; "key = " &lt;&lt; it-&gt;first &lt;&lt; " value = " &lt;&lt; it-&gt;second &lt;&lt; endl;}cout &lt;&lt; endl;}void test01(){map&lt;int,int&gt;m; //默认构造m.insert(pair&lt;int, int&gt;(1, 10));m.insert(pair&lt;int, int&gt;(2, 20));m.insert(pair&lt;int, int&gt;(3, 30));printMap(m);map&lt;int, int&gt;m2(m); //拷贝构造printMap(m2);map&lt;int, int&gt;m3;m3 = m2; //赋值printMap(m3);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：map中所有元素都是成对出现，插入数据时候要使用对组</p><h4 id="3-9-3-map大小和交换"><a href="#3-9-3-map大小和交换" class="headerlink" title="3.9.3 map大小和交换"></a>3.9.3 map大小和交换</h4><p><strong>功能描述：</strong></p><ul><li>统计map容器大小以及交换map容器</li></ul><p>函数原型：</p><ul><li><code>size();</code>          //返回容器中元素的数目</li><li><code>empty();</code>        //判断容器是否为空</li><li><code>swap(st);</code>      //交换两个集合容器</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;void printMap(map&lt;int,int&gt;&amp;m){for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++){cout &lt;&lt; "key = " &lt;&lt; it-&gt;first &lt;&lt; " value = " &lt;&lt; it-&gt;second &lt;&lt; endl;}cout &lt;&lt; endl;}void test01(){map&lt;int, int&gt;m;m.insert(pair&lt;int, int&gt;(1, 10));m.insert(pair&lt;int, int&gt;(2, 20));m.insert(pair&lt;int, int&gt;(3, 30));if (m.empty()){cout &lt;&lt; "m为空" &lt;&lt; endl;}else{cout &lt;&lt; "m不为空" &lt;&lt; endl;cout &lt;&lt; "m的大小为： " &lt;&lt; m.size() &lt;&lt; endl;}}//交换void test02(){map&lt;int, int&gt;m;m.insert(pair&lt;int, int&gt;(1, 10));m.insert(pair&lt;int, int&gt;(2, 20));m.insert(pair&lt;int, int&gt;(3, 30));map&lt;int, int&gt;m2;m2.insert(pair&lt;int, int&gt;(4, 100));m2.insert(pair&lt;int, int&gt;(5, 200));m2.insert(pair&lt;int, int&gt;(6, 300));cout &lt;&lt; "交换前" &lt;&lt; endl;printMap(m);printMap(m2);cout &lt;&lt; "交换后" &lt;&lt; endl;m.swap(m2);printMap(m);printMap(m2);}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>统计大小   — size</li><li>判断是否为空   — empty</li><li>交换容器   — swap</li></ul><h4 id="3-9-4-map插入和删除"><a href="#3-9-4-map插入和删除" class="headerlink" title="3.9.4 map插入和删除"></a>3.9.4 map插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>map容器进行插入数据和删除数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code>           //在容器中插入元素。</li><li><code>clear();</code>                    //清除所有元素</li><li><code>erase(pos);</code>              //删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code>    //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(key);</code>            //删除容器中值为key的元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;void printMap(map&lt;int,int&gt;&amp;m){for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++){cout &lt;&lt; "key = " &lt;&lt; it-&gt;first &lt;&lt; " value = " &lt;&lt; it-&gt;second &lt;&lt; endl;}cout &lt;&lt; endl;}void test01(){//插入map&lt;int, int&gt; m;//第一种插入方式m.insert(pair&lt;int, int&gt;(1, 10));//第二种插入方式m.insert(make_pair(2, 20));//第三种插入方式m.insert(map&lt;int, int&gt;::value_type(3, 30));//第四种插入方式m[4] = 40; printMap(m);//删除m.erase(m.begin());printMap(m);m.erase(3);printMap(m);//清空m.erase(m.begin(),m.end());m.clear();printMap(m);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>map插入方式很多，记住其一即可</li></ul><ul><li>插入   — insert </li><li>删除   — erase</li><li>清空   — clear</li></ul><h4 id="3-9-5-map查找和统计"><a href="#3-9-5-map查找和统计" class="headerlink" title="3.9.5 map查找和统计"></a>3.9.5 map查找和统计</h4><p><strong>功能描述：</strong></p><ul><li>对map容器进行查找数据以及统计数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code>                  //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li><li><code>count(key);</code>                //统计key的元素个数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;//查找和统计void test01(){map&lt;int, int&gt;m; m.insert(pair&lt;int, int&gt;(1, 10));m.insert(pair&lt;int, int&gt;(2, 20));m.insert(pair&lt;int, int&gt;(3, 30));//查找map&lt;int, int&gt;::iterator pos = m.find(3);if (pos != m.end()){cout &lt;&lt; "找到了元素 key = " &lt;&lt; (*pos).first &lt;&lt; " value = " &lt;&lt; (*pos).second &lt;&lt; endl;}else{cout &lt;&lt; "未找到元素" &lt;&lt; endl;}//统计int num = m.count(3);cout &lt;&lt; "num = " &lt;&lt; num &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>查找   —  find    （返回的是迭代器）</li><li>统计   —  count  （对于map，结果为0或者1）</li></ul><h4 id="3-9-6-map容器排序"><a href="#3-9-6-map容器排序" class="headerlink" title="3.9.6 map容器排序"></a>3.9.6 map容器排序</h4><p><strong>学习目标：</strong></p><ul><li>map容器默认排序规则为 按照key值进行 从小到大排序，掌握如何改变排序规则</li></ul><p><strong>主要技术点:</strong></p><ul><li>利用仿函数，可以改变排序规则</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;class MyCompare {public:bool operator()(int v1, int v2) {return v1 &gt; v2;}};void test01() {//默认从小到大排序//利用仿函数实现从大到小排序map&lt;int, int, MyCompare&gt; m;m.insert(make_pair(1, 10));m.insert(make_pair(2, 20));m.insert(make_pair(3, 30));m.insert(make_pair(4, 40));m.insert(make_pair(5, 50));for (map&lt;int, int, MyCompare&gt;::iterator it = m.begin(); it != m.end(); it++) {cout &lt;&lt; "key:" &lt;&lt; it-&gt;first &lt;&lt; " value:" &lt;&lt; it-&gt;second &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>利用仿函数可以指定map容器的排序规则</li><li>对于自定义数据类型，map必须要指定排序规则,同set容器</li></ul><h3 id="3-10-案例-员工分组"><a href="#3-10-案例-员工分组" class="headerlink" title="3.10 案例-员工分组"></a>3.10 案例-员工分组</h3><h4 id="3-10-1-案例描述"><a href="#3-10-1-案例描述" class="headerlink" title="3.10.1 案例描述"></a>3.10.1 案例描述</h4><ul><li>公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作</li><li>员工信息有: 姓名  工资组成；部门分为：策划、美术、研发</li><li>随机给10名员工分配部门和工资</li><li>通过multimap进行信息的插入  key(部门编号) value(员工)</li><li>分部门显示员工信息</li></ul><h4 id="3-10-2-实现步骤"><a href="#3-10-2-实现步骤" class="headerlink" title="3.10.2 实现步骤"></a>3.10.2 实现步骤</h4><ol><li>创建10名员工，放到vector中</li><li>遍历vector容器，取出每个员工，进行随机分组</li><li>分组后，将员工部门编号作为key，具体员工作为value，放入到multimap容器中</li><li>分部门显示员工信息</li></ol><p><strong>案例代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include &lt;vector&gt;#include &lt;string&gt;#include &lt;map&gt;#include &lt;ctime&gt;/*- 公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作- 员工信息有: 姓名  工资组成；部门分为：策划、美术、研发- 随机给10名员工分配部门和工资- 通过multimap进行信息的插入  key(部门编号) value(员工)- 分部门显示员工信息*/#define CEHUA  0#define MEISHU 1#define YANFA  2class Worker{public:string m_Name;int m_Salary;};void createWorker(vector&lt;Worker&gt;&amp;v){string nameSeed = "ABCDEFGHIJ";for (int i = 0; i &lt; 10; i++){Worker worker;worker.m_Name = "员工";worker.m_Name += nameSeed[i];worker.m_Salary = rand() % 10000 + 10000; // 10000 ~ 19999//将员工放入到容器中v.push_back(worker);}}//员工分组void setGroup(vector&lt;Worker&gt;&amp;v,multimap&lt;int,Worker&gt;&amp;m){for (vector&lt;Worker&gt;::iterator it = v.begin(); it != v.end(); it++){//产生随机部门编号int deptId = rand() % 3; // 0 1 2 //将员工插入到分组中//key部门编号，value具体员工m.insert(make_pair(deptId, *it));}}void showWorkerByGourp(multimap&lt;int,Worker&gt;&amp;m){// 0  A  B  C   1  D  E   2  F G ...cout &lt;&lt; "策划部门：" &lt;&lt; endl;multimap&lt;int,Worker&gt;::iterator pos = m.find(CEHUA);int count = m.count(CEHUA); // 统计具体人数int index = 0;for (; pos != m.end() &amp;&amp; index &lt; count; pos++ , index++){cout &lt;&lt; "姓名： " &lt;&lt; pos-&gt;second.m_Name &lt;&lt; " 工资： " &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;}cout &lt;&lt; "----------------------" &lt;&lt; endl;cout &lt;&lt; "美术部门： " &lt;&lt; endl;pos = m.find(MEISHU);count = m.count(MEISHU); // 统计具体人数index = 0;for (; pos != m.end() &amp;&amp; index &lt; count; pos++, index++){cout &lt;&lt; "姓名： " &lt;&lt; pos-&gt;second.m_Name &lt;&lt; " 工资： " &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;}cout &lt;&lt; "----------------------" &lt;&lt; endl;cout &lt;&lt; "研发部门： " &lt;&lt; endl;pos = m.find(YANFA);count = m.count(YANFA); // 统计具体人数index = 0;for (; pos != m.end() &amp;&amp; index &lt; count; pos++, index++){cout &lt;&lt; "姓名： " &lt;&lt; pos-&gt;second.m_Name &lt;&lt; " 工资： " &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;}}int main() {srand((unsigned int)time(NULL));//1、创建员工vector&lt;Worker&gt;vWorker;createWorker(vWorker);//2、员工分组multimap&lt;int, Worker&gt;mWorker;setGroup(vWorker, mWorker);//3、分组显示员工showWorkerByGourp(mWorker);////测试//for (vector&lt;Worker&gt;::iterator it = vWorker.begin(); it != vWorker.end(); it++)//{//cout &lt;&lt; "姓名： " &lt;&lt; it-&gt;m_Name &lt;&lt; " 工资： " &lt;&lt; it-&gt;m_Salary &lt;&lt; endl;//}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>当数据以键值对形式存在，可以考虑用map 或 multimap</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-STL初识</title>
      <link href="/2023/03/03/c-ti-gao-bian-cheng/2-stl-chu-shi/"/>
      <url>/2023/03/03/c-ti-gao-bian-cheng/2-stl-chu-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="2-1-STL的诞生"><a href="#2-1-STL的诞生" class="headerlink" title="2.1 STL的诞生"></a>2.1 STL的诞生</h3><ul><li><p>长久以来，软件界一直希望建立一种可重复利用的东西</p></li><li><p>C++的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是<strong>复用性的提升</strong></p></li><li><p>大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作</p></li><li><p>为了建立数据结构和算法的一套标准,诞生了<strong>STL</strong></p></li></ul><h3 id="2-2-STL基本概念"><a href="#2-2-STL基本概念" class="headerlink" title="2.2 STL基本概念"></a>2.2 STL基本概念</h3><ul><li>STL(Standard Template Library,<strong>标准模板库</strong>)</li><li>STL 从广义上分为: <strong>容器(container) 算法(algorithm) 迭代器(iterator)</strong></li><li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接。</li><li>STL 几乎所有的代码都采用了模板类或者模板函数</li></ul><h3 id="2-3-STL六大组件"><a href="#2-3-STL六大组件" class="headerlink" title="2.3 STL六大组件"></a>2.3 STL六大组件</h3><p>STL大体分为六大组件，分别是:<strong>容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</strong></p><ol><li>容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。</li><li>算法：各种常用的算法，如sort、find、copy、for_each等</li><li>迭代器：扮演了容器与算法之间的胶合剂。</li><li>仿函数：行为类似函数，可作为算法的某种策略。</li><li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li><li>空间配置器：负责空间的配置与管理。</li></ol><h3 id="2-4-STL中容器、算法、迭代器"><a href="#2-4-STL中容器、算法、迭代器" class="headerlink" title="2.4  STL中容器、算法、迭代器"></a>2.4  STL中容器、算法、迭代器</h3><p><strong>容器：</strong>置物之所也</p><p>STL<strong>容器</strong>就是将运用<strong>最广泛的一些数据结构</strong>实现出来</p><p>常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等</p><p>这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种:</p><p>​<strong>序列式容器</strong>:强调值的排序，序列式容器中的每个元素均有固定的位置。<br>​<strong>关联式容器</strong>:二叉树结构，各元素之间没有严格的物理上的顺序关系</p><p><strong>算法：</strong>问题之解法也</p><p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)</p><p>算法分为:<strong>质变算法</strong>和<strong>非质变算法</strong>。</p><p>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等</p><p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p><p><strong>迭代器：</strong>容器和算法之间粘合剂</p><p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p><p>每个容器都有自己专属的迭代器</p><p>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针</p><p>迭代器种类：</p><table><thead><tr><th>种类</th><th>功能</th><th>支持运算</th></tr></thead><tbody><tr><td>输入迭代器</td><td>对数据的只读访问</td><td>只读，支持++、==、！=</td></tr><tr><td>输出迭代器</td><td>对数据的只写访问</td><td>只写，支持++</td></tr><tr><td>前向迭代器</td><td>读写操作，并能向前推进迭代器</td><td>读写，支持++、==、！=</td></tr><tr><td>双向迭代器</td><td>读写操作，并能向前和向后操作</td><td>读写，支持++、–，</td></tr><tr><td>随机访问迭代器</td><td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td><td>读写，支持++、–、[n]、-n、&lt;、&lt;=、&gt;、&gt;=</td></tr></tbody></table><p>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p><h3 id="2-5-容器算法迭代器初识"><a href="#2-5-容器算法迭代器初识" class="headerlink" title="2.5 容器算法迭代器初识"></a>2.5 容器算法迭代器初识</h3><p>了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力</p><p>STL中最常用的容器为Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器</p><h4 id="2-5-1-vector存放内置数据类型"><a href="#2-5-1-vector存放内置数据类型" class="headerlink" title="2.5.1 vector存放内置数据类型"></a>2.5.1 vector存放内置数据类型</h4><p>容器：     <code>vector</code></p><p>算法：     <code>for_each</code></p><p>迭代器： <code>vector&lt;int&gt;::iterator</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;void MyPrint(int val){cout &lt;&lt; val &lt;&lt; endl;}void test01() {//创建vector容器对象，并且通过模板参数指定容器中存放的数据的类型vector&lt;int&gt; v;//向容器中放数据v.push_back(10);v.push_back(20);v.push_back(30);v.push_back(40);//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素//v.begin()返回迭代器，这个迭代器指向容器中第一个数据//v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置//vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型vector&lt;int&gt;::iterator pBegin = v.begin();vector&lt;int&gt;::iterator pEnd = v.end();//第一种遍历方式：while (pBegin != pEnd) {cout &lt;&lt; *pBegin &lt;&lt; endl;pBegin++;}//第二种遍历方式：for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; endl;}cout &lt;&lt; endl;//第三种遍历方式：//使用STL提供标准遍历算法  头文件 algorithmfor_each(v.begin(), v.end(), MyPrint);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-2-Vector存放自定义数据类型"><a href="#2-5-2-Vector存放自定义数据类型" class="headerlink" title="2.5.2 Vector存放自定义数据类型"></a>2.5.2 Vector存放自定义数据类型</h4><p>学习目标：vector中存放自定义数据类型，并打印输出</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;string&gt;//自定义数据类型class Person {public:Person(string name, int age) {mName = name;mAge = age;}public:string mName;int mAge;};//存放对象void test01() {vector&lt;Person&gt; v;//创建数据Person p1("aaa", 10);Person p2("bbb", 20);Person p3("ccc", 30);Person p4("ddd", 40);Person p5("eee", 50);v.push_back(p1);v.push_back(p2);v.push_back(p3);v.push_back(p4);v.push_back(p5);for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; "Name:" &lt;&lt; (*it).mName &lt;&lt; " Age:" &lt;&lt; (*it).mAge &lt;&lt; endl;}}//放对象指针void test02() {vector&lt;Person*&gt; v;//创建数据Person p1("aaa", 10);Person p2("bbb", 20);Person p3("ccc", 30);Person p4("ddd", 40);Person p5("eee", 50);v.push_back(&amp;p1);v.push_back(&amp;p2);v.push_back(&amp;p3);v.push_back(&amp;p4);v.push_back(&amp;p5);for (vector&lt;Person*&gt;::iterator it = v.begin(); it != v.end(); it++) {Person * p = (*it);cout &lt;&lt; "Name:" &lt;&lt; p-&gt;mName &lt;&lt; " Age:" &lt;&lt; (*it)-&gt;mAge &lt;&lt; endl;}}int main() {test01();    test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-3-Vector容器嵌套容器"><a href="#2-5-3-Vector容器嵌套容器" class="headerlink" title="2.5.3 Vector容器嵌套容器"></a>2.5.3 Vector容器嵌套容器</h4><p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;//容器嵌套容器void test01() {vector&lt; vector&lt;int&gt; &gt;  v;vector&lt;int&gt; v1;vector&lt;int&gt; v2;vector&lt;int&gt; v3;vector&lt;int&gt; v4;for (int i = 0; i &lt; 4; i++) {v1.push_back(i + 1);v2.push_back(i + 2);v3.push_back(i + 3);v4.push_back(i + 4);}//将容器元素插入到vector v中v.push_back(v1);v.push_back(v2);v.push_back(v3);v.push_back(v4);for (vector&lt;vector&lt;int&gt;&gt;::iterator it = v.begin(); it != v.end(); it++) {for (vector&lt;int&gt;::iterator vit = (*it).begin(); vit != (*it).end(); vit++) {cout &lt;&lt; *vit &lt;&lt; " ";}cout &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-模版</title>
      <link href="/2023/03/03/c-ti-gao-bian-cheng/1-mo-ban/"/>
      <url>/2023/03/03/c-ti-gao-bian-cheng/1-mo-ban/</url>
      
        <content type="html"><![CDATA[<ul><li>本阶段主要针对C++==泛型编程==和==STL==技术做详细讲解，探讨C++更深层的使用</li></ul><h2 id="1-模板"><a href="#1-模板" class="headerlink" title="1 模板"></a>1 模板</h2><h3 id="1-1-模板的概念"><a href="#1-1-模板的概念" class="headerlink" title="1.1 模板的概念"></a>1.1 模板的概念</h3><p>模板就是建立<strong>通用的模具</strong>，大大<strong>提高复用性</strong></p><p>例如生活中的模板</p><p>一寸照片模板：</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/1-mo-ban/1547105026929.png" alt="1547105026929"></p><p>PPT模板：</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/1-mo-ban/1547103297864.png" alt="1547103297864"></p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/1-mo-ban/1547103359158.png" alt="1547103359158"></p><p>模板的特点：</p><ul><li>模板不可以直接使用，它只是一个框架</li><li>模板的通用并不是万能的</li></ul><h3 id="1-2-函数模板"><a href="#1-2-函数模板" class="headerlink" title="1.2 函数模板"></a>1.2 函数模板</h3><ul><li><p>C++另一种编程思想称为 ==泛型编程== ，主要利用的技术就是模板</p></li><li><p>C++提供两种模板机制:<strong>函数模板</strong>和<strong>类模板</strong></p></li></ul><h4 id="1-2-1-函数模板语法"><a href="#1-2-1-函数模板语法" class="headerlink" title="1.2.1 函数模板语法"></a>1.2.1 函数模板语法</h4><p>函数模板作用：</p><p>建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p><p><strong>语法：</strong> </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;typename T&gt;函数声明或定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解释：</strong></p><p>template  —  声明创建模板</p><p>typename  — 表面其后面的符号是一种数据类型，可以用class代替</p><p>T    —   通用的数据类型，名称可以替换，通常为大写字母</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//交换整型函数void swapInt(int&amp; a, int&amp; b) {int temp = a;a = b;b = temp;}//交换浮点型函数void swapDouble(double&amp; a, double&amp; b) {double temp = a;a = b;b = temp;}//利用模板提供通用的交换函数template&lt;typename T&gt;void mySwap(T&amp; a, T&amp; b){T temp = a;a = b;b = temp;}void test01(){int a = 10;int b = 20;//swapInt(a, b);//利用模板实现交换//1、自动类型推导mySwap(a, b);//2、显示指定类型mySwap&lt;int&gt;(a, b);cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>函数模板利用关键字 template</li><li>使用函数模板有两种方式：自动类型推导、显示指定类型</li><li>模板的目的是为了提高复用性，将类型参数化</li></ul><h4 id="1-2-2-函数模板注意事项"><a href="#1-2-2-函数模板注意事项" class="headerlink" title="1.2.2 函数模板注意事项"></a>1.2.2 函数模板注意事项</h4><p>注意事项：</p><ul><li><p>自动类型推导，必须推导出一致的数据类型T,才可以使用</p></li><li><p>模板必须要确定出T的数据类型，才可以使用</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//利用模板提供通用的交换函数template&lt;class T&gt;void mySwap(T&amp; a, T&amp; b){T temp = a;a = b;b = temp;}// 1、自动类型推导，必须推导出一致的数据类型T,才可以使用void test01(){int a = 10;int b = 20;char c = 'c';mySwap(a, b); // 正确，可以推导出一致的T//mySwap(a, c); // 错误，推导不出一致的T类型}// 2、模板必须要确定出T的数据类型，才可以使用template&lt;class T&gt;void func(){cout &lt;&lt; "func 调用" &lt;&lt; endl;}void test02(){//func(); //错误，模板不能独立使用，必须确定出T的类型func&lt;int&gt;(); //利用显示指定类型的方式，给T一个类型，才可以使用该模板}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型</li></ul><h4 id="1-2-3-函数模板案例"><a href="#1-2-3-函数模板案例" class="headerlink" title="1.2.3 函数模板案例"></a>1.2.3 函数模板案例</h4><p>案例描述：</p><ul><li>利用函数模板封装一个排序的函数，可以对<strong>不同数据类型数组</strong>进行排序</li><li>排序规则从大到小，排序算法为<strong>选择排序</strong></li><li>分别利用<strong>char数组</strong>和<strong>int数组</strong>进行测试</li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//交换的函数模板template&lt;typename T&gt;void mySwap(T &amp;a, T&amp;b){T temp = a;a = b;b = temp;}template&lt;class T&gt; // 也可以替换成typename//利用选择排序，进行对数组从大到小的排序void mySort(T arr[], int len){for (int i = 0; i &lt; len; i++){int max = i; //最大数的下标for (int j = i + 1; j &lt; len; j++){if (arr[max] &lt; arr[j]){max = j;}}if (max != i) //如果最大数的下标不是i，交换两者{mySwap(arr[max], arr[i]);}}}template&lt;typename T&gt;void printArray(T arr[], int len) {for (int i = 0; i &lt; len; i++) {cout &lt;&lt; arr[i] &lt;&lt; " ";}cout &lt;&lt; endl;}void test01(){//测试char数组char charArr[] = "bdcfeagh";int num = sizeof(charArr) / sizeof(char);mySort(charArr, num);printArray(charArr, num);}void test02(){//测试int数组int intArr[] = { 7, 5, 8, 1, 3, 9, 2, 4, 6 };int num = sizeof(intArr) / sizeof(int);mySort(intArr, num);printArray(intArr, num);}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：模板可以提高代码复用，需要熟练掌握</p><h4 id="1-2-4-普通函数与函数模板的区别"><a href="#1-2-4-普通函数与函数模板的区别" class="headerlink" title="1.2.4 普通函数与函数模板的区别"></a>1.2.4 普通函数与函数模板的区别</h4><p><strong>普通函数与函数模板区别：</strong></p><ul><li>普通函数调用时可以发生自动类型转换（隐式类型转换）</li><li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li><li>如果利用显示指定类型的方式，可以发生隐式类型转换</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//普通函数int myAdd01(int a, int b){return a + b;}//函数模板template&lt;class T&gt;T myAdd02(T a, T b)  {return a + b;}//使用函数模板时，如果用自动类型推导，不会发生自动类型转换,即隐式类型转换void test01(){int a = 10;int b = 20;char c = 'c';cout &lt;&lt; myAdd01(a, c) &lt;&lt; endl; //正确，将char类型的'c'隐式转换为int类型  'c' 对应 ASCII码 99//myAdd02(a, c); // 报错，使用自动类型推导时，不会发生隐式类型转换myAdd02&lt;int&gt;(a, c); //正确，如果用显示指定类型，可以发生隐式类型转换}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T</p><h4 id="1-2-5-普通函数与函数模板的调用规则"><a href="#1-2-5-普通函数与函数模板的调用规则" class="headerlink" title="1.2.5 普通函数与函数模板的调用规则"></a>1.2.5 普通函数与函数模板的调用规则</h4><p>调用规则如下：</p><ol><li>如果函数模板和普通函数都可以实现，优先调用普通函数</li><li>可以通过空模板参数列表来强制调用函数模板</li><li>函数模板也可以发生重载</li><li>如果函数模板可以产生更好的匹配,优先调用函数模板</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//普通函数与函数模板调用规则void myPrint(int a, int b){cout &lt;&lt; "调用的普通函数" &lt;&lt; endl;}template&lt;typename T&gt;void myPrint(T a, T b) { cout &lt;&lt; "调用的模板" &lt;&lt; endl;}template&lt;typename T&gt;void myPrint(T a, T b, T c) { cout &lt;&lt; "调用重载的模板" &lt;&lt; endl; }void test01(){//1、如果函数模板和普通函数都可以实现，优先调用普通函数// 注意 如果告诉编译器  普通函数是有的，但只是声明没有实现，或者不在当前文件内实现，就会报错找不到int a = 10;int b = 20;myPrint(a, b); //调用普通函数//2、可以通过空模板参数列表来强制调用函数模板myPrint&lt;&gt;(a, b); //调用函数模板//3、函数模板也可以发生重载int c = 30;myPrint(a, b, c); //调用重载的函数模板//4、 如果函数模板可以产生更好的匹配,优先调用函数模板char c1 = 'a';char c2 = 'b';myPrint(c1, c2); //调用函数模板}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性</p><h4 id="1-2-6-模板的局限性"><a href="#1-2-6-模板的局限性" class="headerlink" title="1.2.6 模板的局限性"></a>1.2.6 模板的局限性</h4><p><strong>局限性：</strong></p><ul><li>模板的通用性并不是万能的</li></ul><p><strong>例如：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;class T&gt;void f(T a, T b){    a = b;   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中提供的赋值操作，如果传入的a和b是一个数组，就无法实现了</p><p>再例如：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;class T&gt;void f(T a, T b){    if(a &gt; b) { ... }   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行</p><p>因此C++为了解决这种问题，提供模板的重载，可以为这些<strong>特定的类型</strong>提供<strong>具体化的模板</strong></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include &lt;string&gt;class Person{public:Person(string name, int age){this-&gt;m_Name = name;this-&gt;m_Age = age;}string m_Name;int m_Age;};//普通函数模板template&lt;class T&gt;bool myCompare(T&amp; a, T&amp; b){if (a == b){return true;}else{return false;}}//具体化，显示具体化的原型和定意思以template&lt;&gt;开头，并通过名称来指出类型//具体化优先于常规模板template&lt;&gt; bool myCompare(Person &amp;p1, Person &amp;p2){if ( p1.m_Name  == p2.m_Name &amp;&amp; p1.m_Age == p2.m_Age){return true;}else{return false;}}void test01(){int a = 10;int b = 20;//内置数据类型可以直接使用通用的函数模板bool ret = myCompare(a, b);if (ret){cout &lt;&lt; "a == b " &lt;&lt; endl;}else{cout &lt;&lt; "a != b " &lt;&lt; endl;}}void test02(){Person p1("Tom", 10);Person p2("Tom", 10);//自定义数据类型，不会调用普通的函数模板//可以创建具体化的Person数据类型的模板，用于特殊处理这个类型bool ret = myCompare(p1, p2);if (ret){cout &lt;&lt; "p1 == p2 " &lt;&lt; endl;}else{cout &lt;&lt; "p1 != p2 " &lt;&lt; endl;}}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>利用具体化的模板，可以解决自定义类型的通用化</li><li>学习模板并不是为了写模板，而是在STL能够运用系统提供的模板</li></ul><h3 id="1-3-类模板"><a href="#1-3-类模板" class="headerlink" title="1.3 类模板"></a>1.3 类模板</h3><h4 id="1-3-1-类模板语法"><a href="#1-3-1-类模板语法" class="headerlink" title="1.3.1 类模板语法"></a>1.3.1 类模板语法</h4><p>类模板作用：</p><ul><li>建立一个通用类，类中的成员 数据类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</li></ul><p><strong>语法：</strong> </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template&lt;typename T&gt;类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解释：</strong></p><p>template  —  声明创建模板</p><p>typename  — 表面其后面的符号是一种数据类型，可以用class代替</p><p>T    —   通用的数据类型，名称可以替换，通常为大写字母</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//类模板template&lt;class NameType, class AgeType&gt; class Person{public:Person(NameType name, AgeType age){this-&gt;mName = name;this-&gt;mAge = age;}void showPerson(){cout &lt;&lt; "name: " &lt;&lt; this-&gt;mName &lt;&lt; " age: " &lt;&lt; this-&gt;mAge &lt;&lt; endl;}public:NameType mName;AgeType mAge;};void test01(){// 指定NameType 为string类型，AgeType 为 int类型Person&lt;string, int&gt;P1("孙悟空", 999);P1.showPerson();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：类模板和函数模板语法相似，在声明模板template后面加类，此类称为类模板</p><h4 id="1-3-2-类模板与函数模板区别"><a href="#1-3-2-类模板与函数模板区别" class="headerlink" title="1.3.2 类模板与函数模板区别"></a>1.3.2 类模板与函数模板区别</h4><p>类模板与函数模板区别主要有两点：</p><ol><li>类模板没有自动类型推导的使用方式</li><li>类模板在模板参数列表中可以有默认参数</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//类模板template&lt;class NameType, class AgeType = int&gt; class Person{public:Person(NameType name, AgeType age){this-&gt;mName = name;this-&gt;mAge = age;}void showPerson(){cout &lt;&lt; "name: " &lt;&lt; this-&gt;mName &lt;&lt; " age: " &lt;&lt; this-&gt;mAge &lt;&lt; endl;}public:NameType mName;AgeType mAge;};//1、类模板没有自动类型推导的使用方式void test01(){// Person p("孙悟空", 1000); // 错误 类模板使用时候，不可以用自动类型推导Person &lt;string ,int&gt;p("孙悟空", 1000); //必须使用显示指定类型的方式，使用类模板p.showPerson();}//2、类模板在模板参数列表中可以有默认参数void test02(){Person &lt;string&gt; p("猪八戒", 999); //类模板中的模板参数列表 可以指定默认参数p.showPerson();}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>类模板使用只能用显示指定类型方式</li><li>类模板中的模板参数列表可以有默认参数</li></ul><h4 id="1-3-3-类模板中成员函数创建时机"><a href="#1-3-3-类模板中成员函数创建时机" class="headerlink" title="1.3.3 类模板中成员函数创建时机"></a>1.3.3 类模板中成员函数创建时机</h4><p>类模板中成员函数和普通类中成员函数创建时机是有区别的：</p><ul><li>普通类中的成员函数一开始就可以创建</li><li>类模板中的成员函数在调用时才创建</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person1{public:void showPerson1(){cout &lt;&lt; "Person1 show" &lt;&lt; endl;}};class Person2{public:void showPerson2(){cout &lt;&lt; "Person2 show" &lt;&lt; endl;}};template&lt;class T&gt;class MyClass{public:T obj;//类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成void fun1() { obj.showPerson1(); }void fun2() { obj.showPerson2(); }};void test01(){MyClass&lt;Person1&gt; m;m.fun1();//m.fun2();//编译会出错，说明函数调用才会去创建成员函数}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建</p><h4 id="1-3-4-类模板对象做函数参数"><a href="#1-3-4-类模板对象做函数参数" class="headerlink" title="1.3.4 类模板对象做函数参数"></a>1.3.4 类模板对象做函数参数</h4><p>学习目标：</p><ul><li>类模板实例化出的对象，向函数传参的方式</li></ul><p>一共有三种传入方式：</p><ol><li>指定传入的类型   — 直接显示对象的数据类型</li><li>参数模板化           — 将对象中的参数变为模板进行传递</li><li>整个类模板化       — 将这个对象类型 模板化进行传递</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//类模板template&lt;class NameType, class AgeType = int&gt; class Person{public:Person(NameType name, AgeType age){this-&gt;mName = name;this-&gt;mAge = age;}void showPerson(){cout &lt;&lt; "name: " &lt;&lt; this-&gt;mName &lt;&lt; " age: " &lt;&lt; this-&gt;mAge &lt;&lt; endl;}public:NameType mName;AgeType mAge;};//1、指定传入的类型void printPerson1(Person&lt;string, int&gt; &amp;p) {p.showPerson();}void test01(){Person &lt;string, int &gt;p("孙悟空", 100);printPerson1(p);}//2、参数模板化template &lt;class T1, class T2&gt;void printPerson2(Person&lt;T1, T2&gt;&amp;p){p.showPerson();cout &lt;&lt; "T1的类型为： " &lt;&lt; typeid(T1).name() &lt;&lt; endl;cout &lt;&lt; "T2的类型为： " &lt;&lt; typeid(T2).name() &lt;&lt; endl;}void test02(){Person &lt;string, int &gt;p("猪八戒", 90);printPerson2(p);}//3、整个类模板化template&lt;class T&gt;void printPerson3(T &amp; p){cout &lt;&lt; "T的类型为： " &lt;&lt; typeid(T).name() &lt;&lt; endl;p.showPerson();}void test03(){Person &lt;string, int &gt;p("唐僧", 30);printPerson3(p);}int main() {test01();test02();test03();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>通过类模板创建的对象，可以有三种方式向函数中进行传参</li><li>使用比较广泛是第一种：指定传入的类型</li></ul><h4 id="1-3-5-类模板与继承"><a href="#1-3-5-类模板与继承" class="headerlink" title="1.3.5 类模板与继承"></a>1.3.5 类模板与继承</h4><p>当类模板碰到继承时，需要注意一下几点：</p><ul><li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型</li><li>如果不指定，编译器无法给子类分配内存</li><li>如果想灵活指定出父类中T的类型，子类也需变为类模板</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;class T&gt;class Base{T m;};//class Son:public Base  //错误，c++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承class Son :public Base&lt;int&gt; //必须指定一个类型{};void test01(){Son c;}//类模板继承类模板 ,可以用T2指定父类中的T类型template&lt;class T1, class T2&gt;class Son2 :public Base&lt;T2&gt;{public:Son2(){cout &lt;&lt; typeid(T1).name() &lt;&lt; endl;cout &lt;&lt; typeid(T2).name() &lt;&lt; endl;}};void test02(){Son2&lt;int, char&gt; child1;}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：如果父类是类模板，子类需要指定出父类中T的数据类型</p><h4 id="1-3-6-类模板成员函数类外实现"><a href="#1-3-6-类模板成员函数类外实现" class="headerlink" title="1.3.6 类模板成员函数类外实现"></a>1.3.6 类模板成员函数类外实现</h4><p>学习目标：能够掌握类模板中的成员函数类外实现</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//类模板中成员函数类外实现template&lt;class T1, class T2&gt;class Person {public://成员函数类内声明Person(T1 name, T2 age);void showPerson();public:T1 m_Name;T2 m_Age;};//构造函数 类外实现template&lt;class T1, class T2&gt;Person&lt;T1, T2&gt;::Person(T1 name, T2 age) {this-&gt;m_Name = name;this-&gt;m_Age = age;}//成员函数 类外实现template&lt;class T1, class T2&gt;void Person&lt;T1, T2&gt;::showPerson() {cout &lt;&lt; "姓名: " &lt;&lt; this-&gt;m_Name &lt;&lt; " 年龄:" &lt;&lt; this-&gt;m_Age &lt;&lt; endl;}void test01(){Person&lt;string, int&gt; p("Tom", 20);p.showPerson();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：类模板中成员函数类外实现时，需要加上模板参数列表</p><h4 id="1-3-7-类模板分文件编写"><a href="#1-3-7-类模板分文件编写" class="headerlink" title="1.3.7 类模板分文件编写"></a>1.3.7 类模板分文件编写</h4><p>学习目标：</p><ul><li>掌握类模板成员函数分文件编写产生的问题以及解决方式</li></ul><p>问题：</p><ul><li>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</li></ul><p>解决：</p><ul><li>解决方式1：直接包含.cpp源文件</li><li>解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称，并不是强制</li></ul><p><strong>示例：</strong></p><p>person.hpp中代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include &lt;iostream&gt;using namespace std;#include &lt;string&gt;template&lt;class T1, class T2&gt;class Person {public:Person(T1 name, T2 age);void showPerson();public:T1 m_Name;T2 m_Age;};//构造函数 类外实现template&lt;class T1, class T2&gt;Person&lt;T1, T2&gt;::Person(T1 name, T2 age) {this-&gt;m_Name = name;this-&gt;m_Age = age;}//成员函数 类外实现template&lt;class T1, class T2&gt;void Person&lt;T1, T2&gt;::showPerson() {cout &lt;&lt; "姓名: " &lt;&lt; this-&gt;m_Name &lt;&lt; " 年龄:" &lt;&lt; this-&gt;m_Age &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类模板分文件编写.cpp中代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//#include "person.h"#include "person.cpp" //解决方式1，包含cpp源文件//解决方式2，将声明和实现写到一起，文件后缀名改为.hpp#include "person.hpp"void test01(){Person&lt;string, int&gt; p("Tom", 10);p.showPerson();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p><h4 id="1-3-8-类模板与友元"><a href="#1-3-8-类模板与友元" class="headerlink" title="1.3.8 类模板与友元"></a>1.3.8 类模板与友元</h4><p>学习目标：</p><ul><li>掌握类模板配合友元函数的类内和类外实现</li></ul><p>全局函数类内实现 - 直接在类内声明友元即可</p><p>全局函数类外实现 - 需要提前让编译器知道全局函数的存在</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//2、全局函数配合友元  类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元template&lt;class T1, class T2&gt; class Person;//如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到//template&lt;class T1, class T2&gt; void printPerson2(Person&lt;T1, T2&gt; &amp; p); template&lt;class T1, class T2&gt;void printPerson2(Person&lt;T1, T2&gt; &amp; p){cout &lt;&lt; "类外实现 ---- 姓名： " &lt;&lt; p.m_Name &lt;&lt; " 年龄：" &lt;&lt; p.m_Age &lt;&lt; endl;}template&lt;class T1, class T2&gt;class Person{//1、全局函数配合友元   类内实现friend void printPerson(Person&lt;T1, T2&gt; &amp; p){cout &lt;&lt; "姓名： " &lt;&lt; p.m_Name &lt;&lt; " 年龄：" &lt;&lt; p.m_Age &lt;&lt; endl;}//全局函数配合友元  类外实现friend void printPerson2&lt;&gt;(Person&lt;T1, T2&gt; &amp; p);public:Person(T1 name, T2 age){this-&gt;m_Name = name;this-&gt;m_Age = age;}private:T1 m_Name;T2 m_Age;};//1、全局函数在类内实现void test01(){Person &lt;string, int &gt;p("Tom", 20);printPerson(p);}//2、全局函数在类外实现void test02(){Person &lt;string, int &gt;p("Jerry", 30);printPerson2(p);}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别</p><h4 id="1-3-9-类模板案例"><a href="#1-3-9-类模板案例" class="headerlink" title="1.3.9 类模板案例"></a>1.3.9 类模板案例</h4><p>案例描述:  实现一个通用的数组类，要求如下：</p><ul><li>可以对内置数据类型以及自定义数据类型的数据进行存储</li><li>将数组中的数据存储到堆区</li><li>构造函数中可以传入数组的容量</li><li>提供对应的拷贝构造函数以及operator=防止浅拷贝问题</li><li>提供尾插法和尾删法对数组中的数据进行增加和删除</li><li>可以通过下标的方式访问数组中的元素</li><li>可以获取数组中当前元素个数和数组的容量</li></ul><p><strong>示例：</strong></p><p>myArray.hpp中代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include &lt;iostream&gt;using namespace std;template&lt;class T&gt;class MyArray{public:    //构造函数MyArray(int capacity){this-&gt;m_Capacity = capacity;this-&gt;m_Size = 0;pAddress = new T[this-&gt;m_Capacity];}//拷贝构造MyArray(const MyArray &amp; arr){this-&gt;m_Capacity = arr.m_Capacity;this-&gt;m_Size = arr.m_Size;this-&gt;pAddress = new T[this-&gt;m_Capacity];for (int i = 0; i &lt; this-&gt;m_Size; i++){//如果T为对象，而且还包含指针，必须需要重载 = 操作符，因为这个等号不是 构造 而是赋值，// 普通类型可以直接= 但是指针类型需要深拷贝this-&gt;pAddress[i] = arr.pAddress[i];}}//重载= 操作符  防止浅拷贝问题MyArray&amp; operator=(const MyArray&amp; myarray) {if (this-&gt;pAddress != NULL) {delete[] this-&gt;pAddress;this-&gt;m_Capacity = 0;this-&gt;m_Size = 0;}this-&gt;m_Capacity = myarray.m_Capacity;this-&gt;m_Size = myarray.m_Size;this-&gt;pAddress = new T[this-&gt;m_Capacity];for (int i = 0; i &lt; this-&gt;m_Size; i++) {this-&gt;pAddress[i] = myarray[i];}return *this;}//重载[] 操作符  arr[0]T&amp; operator [](int index){return this-&gt;pAddress[index]; //不考虑越界，用户自己去处理}//尾插法void Push_back(const T &amp; val){if (this-&gt;m_Capacity == this-&gt;m_Size){return;}this-&gt;pAddress[this-&gt;m_Size] = val;this-&gt;m_Size++;}//尾删法void Pop_back(){if (this-&gt;m_Size == 0){return;}this-&gt;m_Size--;}//获取数组容量int getCapacity(){return this-&gt;m_Capacity;}//获取数组大小intgetSize(){return this-&gt;m_Size;}//析构~MyArray(){if (this-&gt;pAddress != NULL){delete[] this-&gt;pAddress;this-&gt;pAddress = NULL;this-&gt;m_Capacity = 0;this-&gt;m_Size = 0;}}private:T * pAddress;  //指向一个堆空间，这个空间存储真正的数据int m_Capacity; //容量int m_Size;   // 大小};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类模板案例—数组类封装.cpp中</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "myArray.hpp"#include &lt;string&gt;void printIntArray(MyArray&lt;int&gt;&amp; arr) {for (int i = 0; i &lt; arr.getSize(); i++) {cout &lt;&lt; arr[i] &lt;&lt; " ";}cout &lt;&lt; endl;}//测试内置数据类型void test01(){MyArray&lt;int&gt; array1(10);for (int i = 0; i &lt; 10; i++){array1.Push_back(i);}cout &lt;&lt; "array1打印输出：" &lt;&lt; endl;printIntArray(array1);cout &lt;&lt; "array1的大小：" &lt;&lt; array1.getSize() &lt;&lt; endl;cout &lt;&lt; "array1的容量：" &lt;&lt; array1.getCapacity() &lt;&lt; endl;cout &lt;&lt; "--------------------------" &lt;&lt; endl;MyArray&lt;int&gt; array2(array1);array2.Pop_back();cout &lt;&lt; "array2打印输出：" &lt;&lt; endl;printIntArray(array2);cout &lt;&lt; "array2的大小：" &lt;&lt; array2.getSize() &lt;&lt; endl;cout &lt;&lt; "array2的容量：" &lt;&lt; array2.getCapacity() &lt;&lt; endl;}//测试自定义数据类型class Person {public:Person() {} Person(string name, int age) {this-&gt;m_Name = name;this-&gt;m_Age = age;}public:string m_Name;int m_Age;};void printPersonArray(MyArray&lt;Person&gt;&amp; personArr){for (int i = 0; i &lt; personArr.getSize(); i++) {cout &lt;&lt; "姓名：" &lt;&lt; personArr[i].m_Name &lt;&lt; " 年龄： " &lt;&lt; personArr[i].m_Age &lt;&lt; endl;}}void test02(){//创建数组MyArray&lt;Person&gt; pArray(10);Person p1("孙悟空", 30);Person p2("韩信", 20);Person p3("妲己", 18);Person p4("王昭君", 15);Person p5("赵云", 24);//插入数据pArray.Push_back(p1);pArray.Push_back(p2);pArray.Push_back(p3);pArray.Push_back(p4);pArray.Push_back(p5);printPersonArray(pArray);cout &lt;&lt; "pArray的大小：" &lt;&lt; pArray.getSize() &lt;&lt; endl;cout &lt;&lt; "pArray的容量：" &lt;&lt; pArray.getCapacity() &lt;&lt; endl;}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>能够利用所学知识点实现通用的数组</p>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-文件操作</title>
      <link href="/2023/03/03/c-he-xin-bian-cheng/5-wen-jian-cao-zuo/"/>
      <url>/2023/03/03/c-he-xin-bian-cheng/5-wen-jian-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p><p>通过<strong>文件可以将数据持久化</strong></p><p>C++中对文件操作需要包含头文件 ==&lt; fstream &gt;==</p><p>文件类型分为两种：</p><ol><li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类:</p><ol><li>ofstream：写操作</li><li>ifstream： 读操作</li><li>fstream ： 读写操作</li></ol><h3 id="5-1文本文件"><a href="#5-1文本文件" class="headerlink" title="5.1文本文件"></a>5.1文本文件</h3><h4 id="5-1-1写文件"><a href="#5-1-1写文件" class="headerlink" title="5.1.1写文件"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p><ol><li><p>包含头文件   </p><p>#include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ofstream ofs;</p></li><li><p>打开文件</p><p>ofs.open(“文件路径”,打开方式);</p></li><li><p>写数据</p><p>ofs &lt;&lt; “写入的数据”;</p></li><li><p>关闭文件</p><p>ofs.close();</p></li></ol><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p><p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;void test01(){ofstream ofs;ofs.open("test.txt", ios::out);ofs &lt;&lt; "姓名：张三" &lt;&lt; endl;ofs &lt;&lt; "性别：男" &lt;&lt; endl;ofs &lt;&lt; "年龄：18" &lt;&lt; endl;ofs.close();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件操作必须包含头文件 fstream</li><li>读文件可以利用 ofstream  ，或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h4 id="5-1-2读文件"><a href="#5-1-2读文件" class="headerlink" title="5.1.2读文件"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p><p>读文件步骤如下：</p><ol><li><p>包含头文件   </p><p>#include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ifstream ifs;</p></li><li><p>打开文件并判断文件是否打开成功</p><p>ifs.open(“文件路径”,打开方式);</p></li><li><p>读数据</p><p>四种方式读取</p></li><li><p>关闭文件</p><p>ifs.close();</p></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;void test01(){ifstream ifs;ifs.open("test.txt", ios::in);if (!ifs.is_open()){cout &lt;&lt; "文件打开失败" &lt;&lt; endl;return;}//第一种方式//char buf[1024] = { 0 };//while (ifs &gt;&gt; buf)//{//cout &lt;&lt; buf &lt;&lt; endl;//}//第二种//char buf[1024] = { 0 };//while (ifs.getline(buf,sizeof(buf)))//{//cout &lt;&lt; buf &lt;&lt; endl;//}//第三种//string buf;//while (getline(ifs, buf))//{//cout &lt;&lt; buf &lt;&lt; endl;//}char c;while ((c = ifs.get()) != EOF){cout &lt;&lt; c;}ifs.close();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>读文件可以利用 ifstream  ，或者fstream类</li><li>利用is_open函数可以判断文件是否打开成功</li><li>close 关闭文件</li></ul><h3 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为 ==ios::binary==</p><h4 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;class Person{public:char m_Name[64];int m_Age;};//二进制文件  写文件void test01(){//1、包含头文件//2、创建输出流对象ofstream ofs("person.txt", ios::out | ios::binary);//3、打开文件//ofs.open("person.txt", ios::out | ios::binary);Person p = {"张三"  , 18};//4、写文件ofs.write((const char *)&amp;p, sizeof(p));//5、关闭文件ofs.close();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件输出流对象 可以通过write函数，以二进制方式写数据</li></ul><h4 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;class Person{public:char m_Name[64];int m_Age;};void test01(){ifstream ifs("person.txt", ios::in | ios::binary);if (!ifs.is_open()){cout &lt;&lt; "文件打开失败" &lt;&lt; endl;}Person p;ifs.read((char *)&amp;p, sizeof(p));cout &lt;&lt; "姓名： " &lt;&lt; p.m_Name &lt;&lt; " 年龄： " &lt;&lt; p.m_Age &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文件输入流对象 可以通过read函数，以二进制方式读数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++核心编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-类和对象</title>
      <link href="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/"/>
      <url>/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/</url>
      
        <content type="html"><![CDATA[<p>C++面向对象的三大特性为：==封装、继承、多态==</p><p>C++认为==万事万物都皆为对象==，对象上有其属性和行为</p><p><strong>例如：</strong></p><p>​人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p><p>​车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p><p>​具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</p><h3 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h3><h4 id="4-1-1-封装的意义"><a href="#4-1-1-封装的意义" class="headerlink" title="4.1.1  封装的意义"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><p><strong>封装意义一：</strong></p><p>​在设计类的时候，属性和行为写在一起，表现事物</p><p><strong>语法：</strong> <code>class 类名{   访问权限： 属性  / 行为  };</code></p><p><strong>示例1：</strong>设计一个圆类，求圆的周长</p><p><strong>示例代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//圆周率const double PI = 3.14;//1、封装的意义//将属性和行为作为一个整体，用来表现生活中的事物//封装一个圆类，求圆的周长//class代表设计一个类，后面跟着的是类名class Circle{public:  //访问权限  公共的权限//属性int m_r;//半径//行为//获取到圆的周长double calculateZC(){//2 * pi  * r//获取圆的周长return  2 * PI * m_r;}};int main() {//通过圆类，创建圆的对象// c1就是一个具体的圆Circle c1;c1.m_r = 10; //给圆对象的半径 进行赋值操作//2 * pi * 10 = = 62.8cout &lt;&lt; "圆的周长为： " &lt;&lt; c1.calculateZC() &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p><p><strong>示例2代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生类class Student {public:void setName(string name) {m_name = name;}void setID(int id) {m_id = id;}void showStudent() {cout &lt;&lt; "name:" &lt;&lt; m_name &lt;&lt; " ID:" &lt;&lt; m_id &lt;&lt; endl;}public:string m_name;int m_id;};int main() {Student stu;stu.setName("德玛西亚");stu.setID(250);stu.showStudent();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>封装意义二：</strong></p><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种：</p><ol><li>public        公共权限  </li><li>protected 保护权限</li><li>private      私有权限</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//三种权限//公共权限  public     类内可以访问  类外可以访问//保护权限  protected  类内可以访问  类外不可以访问//私有权限  private    类内可以访问  类外不可以访问class Person{//姓名  公共权限public:string m_Name;//汽车  保护权限protected:string m_Car;//银行卡密码  私有权限private:int m_Password;public:void func(){m_Name = "张三";m_Car = "拖拉机";m_Password = 123456;}};int main() {Person p;p.m_Name = "李四";//p.m_Car = "奔驰";  //保护权限类外访问不到//p.m_Password = 123; //私有权限类外访问不到system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-struct和class区别"><a href="#4-1-2-struct和class区别" class="headerlink" title="4.1.2 struct和class区别"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p><p>区别：</p><ul><li>struct 默认权限为公共</li><li>class   默认权限为私有</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class C1{int  m_A; //默认是私有权限};struct C2{int m_A;  //默认是公共权限};int main() {C1 c1;c1.m_A = 10; //错误，访问权限是私有C2 c2;c2.m_A = 10; //正确，访问权限是公共system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3-成员属性设置为私有"><a href="#4-1-3-成员属性设置为私有" class="headerlink" title="4.1.3 成员属性设置为私有"></a>4.1.3 成员属性设置为私有</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p><p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public://姓名设置可读可写void setName(string name) {m_Name = name;}string getName(){return m_Name;}//获取年龄 int getAge() {return m_Age;}//设置年龄void setAge(int age) {if (age &lt; 0 || age &gt; 150) {cout &lt;&lt; "你个老妖精!" &lt;&lt; endl;return;}m_Age = age;}//情人设置为只写void setLover(string lover) {m_Lover = lover;}private:string m_Name; //可读可写  姓名int m_Age; //只读  年龄string m_Lover; //只写  情人};int main() {Person p;//姓名设置p.setName("张三");cout &lt;&lt; "姓名： " &lt;&lt; p.getName() &lt;&lt; endl;//年龄设置p.setAge(50);cout &lt;&lt; "年龄： " &lt;&lt; p.getAge() &lt;&lt; endl;//情人设置p.setLover("苍井");//cout &lt;&lt; "情人： " &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例1：设计立方体类</strong></p><p>设计立方体类(Cube)</p><p>求出立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等。</p><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/1545533548532.png" alt="1545533548532"></p><p><strong>练习案例2：点和圆的关系</strong></p><p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/1545533829184.png" alt="1545533829184"></p><h3 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h3><ul><li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li><li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li></ul><h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p><p>​一个对象或者变量没有初始状态，对其使用后果是未知</p><p>​同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p><p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p><p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p><p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p><ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li></ul><p><strong>构造函数语法：</strong><code>类名(){}</code></p><ol><li>构造函数，没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li></ol><p><strong>析构函数语法：</strong> <code>~类名(){}</code></p><ol><li>析构函数，没有返回值也不写void</li><li>函数名称与类名相同,在名称前加上符号  ~</li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li></ol><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public://构造函数Person(){cout &lt;&lt; "Person的构造函数调用" &lt;&lt; endl;}//析构函数~Person(){cout &lt;&lt; "Person的析构函数调用" &lt;&lt; endl;}};void test01(){Person p;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p><p>​按参数分为： 有参构造和无参构造</p><p>​按类型分为： 普通构造和拷贝构造</p><p>三种调用方式：</p><p>​括号法</p><p>​显示法</p><p>​隐式转换法</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//1、构造函数分类// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数// 按照类型分类分为 普通构造和拷贝构造class Person {public://无参（默认）构造函数Person() {cout &lt;&lt; "无参构造函数!" &lt;&lt; endl;}//有参构造函数Person(int a) {age = a;cout &lt;&lt; "有参构造函数!" &lt;&lt; endl;}//拷贝构造函数Person(const Person&amp; p) {age = p.age;cout &lt;&lt; "拷贝构造函数!" &lt;&lt; endl;}//析构函数~Person() {cout &lt;&lt; "析构函数!" &lt;&lt; endl;}public:int age;};//2、构造函数的调用//调用无参构造函数void test01() {Person p; //调用无参构造函数}//调用有参的构造函数void test02() {//2.1  括号法，常用Person p1(10);//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明//Person p2();//2.2 显式法Person p2 = Person(10); Person p3 = Person(p2);//Person(10)单独写就是匿名对象  当前行结束之后，马上析构//2.3 隐式转换法Person p4 = 10; // Person p4 = Person(10); Person p5 = p4; // Person p5 = Person(p4); //注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明//Person p5(p4);}int main() {test01();//test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public:Person() {cout &lt;&lt; "无参构造函数!" &lt;&lt; endl;mAge = 0;}Person(int age) {cout &lt;&lt; "有参构造函数!" &lt;&lt; endl;mAge = age;}Person(const Person&amp; p) {cout &lt;&lt; "拷贝构造函数!" &lt;&lt; endl;mAge = p.mAge;}//析构函数在释放内存之前调用~Person() {cout &lt;&lt; "析构函数!" &lt;&lt; endl;}public:int mAge;};//1. 使用一个已经创建完毕的对象来初始化一个新对象void test01() {Person man(100); //p对象已经创建完毕Person newman(man); //调用拷贝构造函数Person newman2 = man; //拷贝构造//Person newman3;//newman3 = man; //不是调用拷贝构造函数，赋值操作}//2. 值传递的方式给函数参数传值//相当于Person p1 = p;void doWork(Person p1) {}void test02() {Person p; //无参构造函数doWork(p);}//3. 以值方式返回局部对象Person doWork2(){Person p1;cout &lt;&lt; (int *)&amp;p1 &lt;&lt; endl;return p1;}void test03(){Person p = doWork2();cout &lt;&lt; (int *)&amp;p &lt;&lt; endl;}int main() {//test01();//test02();test03();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p><p>1．默认构造函数(无参，函数体为空)</p><p>2．默认析构函数(无参，函数体为空)</p><p>3．默认拷贝构造函数，对属性进行值拷贝</p><p>构造函数调用规则如下：</p><ul><li><p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p></li><li><p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p></li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public://无参（默认）构造函数Person() {cout &lt;&lt; "无参构造函数!" &lt;&lt; endl;}//有参构造函数Person(int a) {age = a;cout &lt;&lt; "有参构造函数!" &lt;&lt; endl;}//拷贝构造函数Person(const Person&amp; p) {age = p.age;cout &lt;&lt; "拷贝构造函数!" &lt;&lt; endl;}//析构函数~Person() {cout &lt;&lt; "析构函数!" &lt;&lt; endl;}public:int age;};void test01(){Person p1(18);//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作Person p2(p1);cout &lt;&lt; "p2的年龄为： " &lt;&lt; p2.age &lt;&lt; endl;}void test02(){//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造Person p1; //此时如果用户自己没有提供默认构造，会出错Person p2(10); //用户提供的有参Person p3(p2); //此时如果用户没有提供拷贝构造，编译器会提供//如果用户提供拷贝构造，编译器不会提供其他构造函数Person p4; //此时如果用户自己没有提供默认构造，会出错Person p5(10); //此时如果用户自己没有提供有参，会出错Person p6(p5); //用户自己提供拷贝构造}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p><p>浅拷贝：简单的赋值拷贝操作</p><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public://无参（默认）构造函数Person() {cout &lt;&lt; "无参构造函数!" &lt;&lt; endl;}//有参构造函数Person(int age ,int height) {cout &lt;&lt; "有参构造函数!" &lt;&lt; endl;m_age = age;m_height = new int(height);}//拷贝构造函数  Person(const Person&amp; p) {cout &lt;&lt; "拷贝构造函数!" &lt;&lt; endl;//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题m_age = p.m_age;m_height = new int(*p.m_height);}//析构函数~Person() {cout &lt;&lt; "析构函数!" &lt;&lt; endl;if (m_height != NULL){delete m_height;}}public:int m_age;int* m_height;};void test01(){Person p1(18, 180);Person p2(p1);cout &lt;&lt; "p1的年龄： " &lt;&lt; p1.m_age &lt;&lt; " 身高： " &lt;&lt; *p1.m_height &lt;&lt; endl;cout &lt;&lt; "p2的年龄： " &lt;&lt; p2.m_age &lt;&lt; " 身高： " &lt;&lt; *p2.m_height &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p></blockquote><h4 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p><p>C++提供了初始化列表语法，用来初始化属性</p><p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... {}</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public:////传统方式初始化//Person(int a, int b, int c) {//m_A = a;//m_B = b;//m_C = c;//}//初始化列表方式初始化Person(int a, int b, int c) :m_A(a), m_B(b), m_C(c) {}void PrintPerson() {cout &lt;&lt; "mA:" &lt;&lt; m_A &lt;&lt; endl;cout &lt;&lt; "mB:" &lt;&lt; m_B &lt;&lt; endl;cout &lt;&lt; "mC:" &lt;&lt; m_C &lt;&lt; endl;}private:int m_A;int m_B;int m_C;};int main() {Person p(1, 2, 3);p.PrintPerson();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-7-类对象作为类成员"><a href="#4-2-7-类对象作为类成员" class="headerlink" title="4.2.7 类对象作为类成员"></a>4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p><p>例如：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class A {}class B{    A a；}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>B类中有对象A作为成员，A为对象成员</p><p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Phone{public:Phone(string name){m_PhoneName = name;cout &lt;&lt; "Phone构造" &lt;&lt; endl;}~Phone(){cout &lt;&lt; "Phone析构" &lt;&lt; endl;}string m_PhoneName;};class Person{public://初始化列表可以告诉编译器调用哪一个构造函数Person(string name, string pName) :m_Name(name), m_Phone(pName){cout &lt;&lt; "Person构造" &lt;&lt; endl;}~Person(){cout &lt;&lt; "Person析构" &lt;&lt; endl;}void playGame(){cout &lt;&lt; m_Name &lt;&lt; " 使用" &lt;&lt; m_Phone.m_PhoneName &lt;&lt; " 牌手机! " &lt;&lt; endl;}string m_Name;Phone m_Phone;};void test01(){//当类中成员是其他类对象时，我们称该成员为 对象成员//构造的顺序是 ：先调用对象成员的构造，再调用本类构造//析构顺序与构造相反Person p("张三" , "苹果X");p.playGame();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p><p>静态成员分为：</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><p><strong>示例1 ：</strong>静态成员变量</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public:static int m_A; //静态成员变量//静态成员变量特点：//1 在编译阶段分配内存//2 类内声明，类外初始化//3 所有对象共享同一份数据private:static int m_B; //静态成员变量也是有访问权限的};int Person::m_A = 10;int Person::m_B = 10;void test01(){//静态成员变量两种访问方式//1、通过对象Person p1;p1.m_A = 100;cout &lt;&lt; "p1.m_A = " &lt;&lt; p1.m_A &lt;&lt; endl;Person p2;p2.m_A = 200;cout &lt;&lt; "p1.m_A = " &lt;&lt; p1.m_A &lt;&lt; endl; //共享同一份数据cout &lt;&lt; "p2.m_A = " &lt;&lt; p2.m_A &lt;&lt; endl;//2、通过类名cout &lt;&lt; "m_A = " &lt;&lt; Person::m_A &lt;&lt; endl;//cout &lt;&lt; "m_B = " &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong>静态成员函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public://静态成员函数特点：//1 程序共享一个函数//2 静态成员函数只能访问静态成员变量static void func(){cout &lt;&lt; "func调用" &lt;&lt; endl;m_A = 100;//m_B = 100; //错误，不可以访问非静态成员变量}static int m_A; //静态成员变量int m_B; // private://静态成员函数也是有访问权限的static void func2(){cout &lt;&lt; "func2调用" &lt;&lt; endl;}};int Person::m_A = 10;void test01(){//静态成员变量两种访问方式//1、通过对象Person p1;p1.func();//2、通过类名Person::func();//Person::func2(); //私有权限访问不到}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p><p>只有非静态成员变量才属于类的对象上</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public:Person() {mA = 0;}//非静态成员变量占对象空间int mA;//静态成员变量不占对象空间static int mB; //函数也不占对象空间，所有函数共享一个函数实例void func() {cout &lt;&lt; "mA:" &lt;&lt; this-&gt;mA &lt;&lt; endl;}//静态成员函数也不占对象空间static void sfunc() {}};int main() {cout &lt;&lt; sizeof(Person) &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-this指针概念"><a href="#4-3-2-this指针概念" class="headerlink" title="4.3.2 this指针概念"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p><p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p><p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p><p>this指针是隐含每一个非静态成员函数内的一种指针</p><p>this指针不需要定义，直接使用即可</p><p>this指针的用途：</p><ul><li>当形参和成员变量同名时，可用this指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public:Person(int age){//1、当形参和成员变量同名时，可用this指针来区分this-&gt;age = age;}Person&amp; PersonAddPerson(Person p){this-&gt;age += p.age;//返回对象本身return *this;}int age;};void test01(){Person p1(10);cout &lt;&lt; "p1.age = " &lt;&lt; p1.age &lt;&lt; endl;Person p2(10);p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);cout &lt;&lt; "p2.age = " &lt;&lt; p2.age &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p><p>如果用到this指针，需要加以判断保证代码的健壮性</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//空指针访问成员函数class Person {public:void ShowClassName() {cout &lt;&lt; "我是Person类!" &lt;&lt; endl;}void ShowPerson() {if (this == NULL) {return;}cout &lt;&lt; mAge &lt;&lt; endl;}public:int mAge;};void test01(){Person * p = NULL;p-&gt;ShowClassName(); //空指针，可以调用成员函数p-&gt;ShowPerson();  //但是如果成员函数中用到了this指针，就不可以了}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-4-const修饰成员函数"><a href="#4-3-4-const修饰成员函数" class="headerlink" title="4.3.4 const修饰成员函数"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p><ul><li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul><p><strong>常对象：</strong></p><ul><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public:Person() {m_A = 0;m_B = 0;}//this指针的本质是一个指针常量，指针的指向不可修改//如果想让指针指向的值也不可以修改，需要声明常函数void ShowPerson() const {//const Type* const pointer;//this = NULL; //不能修改指针的指向 Person* const this;//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量this-&gt;m_B = 100;}void MyFunc() const {//mA = 10000;}public:int m_A;mutable int m_B; //可修改 可变的};//const修饰对象  常对象void test01() {const Person person; //常量对象  cout &lt;&lt; person.m_A &lt;&lt; endl;//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问person.m_B = 100; //但是常对象可以修改mutable修饰成员变量//常对象访问成员函数person.MyFunc(); //常对象不能调用const的函数}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p><p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p><p>但是呢，你也可以允许你的好闺蜜好基友进去。</p><p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p><p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p><p>友元的关键字为  ==friend==</p><p>友元的三种实现</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building{//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容friend void goodGay(Building * building);public:Building(){this-&gt;m_SittingRoom = "客厅";this-&gt;m_BedRoom = "卧室";}public:string m_SittingRoom; //客厅private:string m_BedRoom; //卧室};void goodGay(Building * building){cout &lt;&lt; "好基友正在访问： " &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; "好基友正在访问： " &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;}void test01(){Building b;goodGay(&amp;b);}int main(){test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building;class goodGay{public:goodGay();void visit();private:Building *building;};class Building{//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容friend class goodGay;public:Building();public:string m_SittingRoom; //客厅private:string m_BedRoom;//卧室};Building::Building(){this-&gt;m_SittingRoom = "客厅";this-&gt;m_BedRoom = "卧室";}goodGay::goodGay(){building = new Building;}void goodGay::visit(){cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;}void test01(){goodGay gg;gg.visit();}int main(){test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building;class goodGay{public:goodGay();void visit(); //只让visit函数作为Building的好朋友，可以发访问Building中私有内容void visit2(); private:Building *building;};class Building{//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容friend void goodGay::visit();public:Building();public:string m_SittingRoom; //客厅private:string m_BedRoom;//卧室};Building::Building(){this-&gt;m_SittingRoom = "客厅";this-&gt;m_BedRoom = "卧室";}goodGay::goodGay(){building = new Building;}void goodGay::visit(){cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;}void goodGay::visit2(){cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;//cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;}void test01(){goodGay  gg;gg.visit();}int main(){    test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public:Person() {};Person(int a, int b){this-&gt;m_A = a;this-&gt;m_B = b;}//成员函数实现 + 号运算符重载Person operator+(const Person&amp; p) {Person temp;temp.m_A = this-&gt;m_A + p.m_A;temp.m_B = this-&gt;m_B + p.m_B;return temp;}public:int m_A;int m_B;};//全局函数实现 + 号运算符重载//Person operator+(const Person&amp; p1, const Person&amp; p2) {//Person temp(0, 0);//temp.m_A = p1.m_A + p2.m_A;//temp.m_B = p1.m_B + p2.m_B;//return temp;//}//运算符重载 可以发生函数重载 Person operator+(const Person&amp; p2, int val)  {Person temp;temp.m_A = p2.m_A + val;temp.m_B = p2.m_B + val;return temp;}void test() {Person p1(10, 10);Person p2(20, 20);//成员函数方式Person p3 = p2 + p1;  //相当于 p2.operaor+(p1)cout &lt;&lt; "mA:" &lt;&lt; p3.m_A &lt;&lt; " mB:" &lt;&lt; p3.m_B &lt;&lt; endl;Person p4 = p3 + 10; //相当于 operator+(p3,10)cout &lt;&lt; "mA:" &lt;&lt; p4.m_A &lt;&lt; " mB:" &lt;&lt; p4.m_B &lt;&lt; endl;}int main() {test();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p></blockquote><blockquote><p>总结2：不要滥用运算符重载</p></blockquote><h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);public:Person(int a, int b){this-&gt;m_A = a;this-&gt;m_B = b;}//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果//void operator&lt;&lt;(Person&amp; p){//}private:int m_A;int m_B;};//全局函数实现左移重载//ostream对象只能有一个ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) {out &lt;&lt; "a:" &lt;&lt; p.m_A &lt;&lt; " b:" &lt;&lt; p.m_B;return out;}void test() {Person p1(10, 20);cout &lt;&lt; p1 &lt;&lt; "hello world" &lt;&lt; endl; //链式编程}int main() {test();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p></blockquote><h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class MyInteger {friend ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint);public:MyInteger() {m_Num = 0;}//前置++MyInteger&amp; operator++() {//先++m_Num++;//再返回return *this;}//后置++MyInteger operator++(int) {//先返回MyInteger temp = *this; //记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；m_Num++;return temp;}private:int m_Num;};ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint) {out &lt;&lt; myint.m_Num;return out;}//前置++ 先++ 再返回void test01() {MyInteger myInt;cout &lt;&lt; ++myInt &lt;&lt; endl;cout &lt;&lt; myInt &lt;&lt; endl;}//后置++ 先返回 再++void test02() {MyInteger myInt;cout &lt;&lt; myInt++ &lt;&lt; endl;cout &lt;&lt; myInt &lt;&lt; endl;}int main() {test01();//test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 前置递增返回引用，后置递增返回值</p></blockquote><h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p><ol><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行值拷贝</li><li>赋值运算符 operator=, 对属性进行值拷贝</li></ol><p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public:Person(int age){//将年龄数据开辟到堆区m_Age = new int(age);}//重载赋值运算符 Person&amp; operator=(Person &amp;p){if (m_Age != NULL){delete m_Age;m_Age = NULL;}//编译器提供的代码是浅拷贝//m_Age = p.m_Age;//提供深拷贝 解决浅拷贝的问题m_Age = new int(*p.m_Age);//返回自身return *this;}~Person(){if (m_Age != NULL){delete m_Age;m_Age = NULL;}}//年龄的指针int *m_Age;};void test01(){Person p1(18);Person p2(20);Person p3(30);p3 = p2 = p1; //赋值操作cout &lt;&lt; "p1的年龄为：" &lt;&lt; *p1.m_Age &lt;&lt; endl;cout &lt;&lt; "p2的年龄为：" &lt;&lt; *p2.m_Age &lt;&lt; endl;cout &lt;&lt; "p3的年龄为：" &lt;&lt; *p3.m_Age &lt;&lt; endl;}int main() {test01();//int a = 10;//int b = 20;//int c = 30;//c = b = a;//cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;//cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;//cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-5-关系运算符重载"><a href="#4-5-5-关系运算符重载" class="headerlink" title="4.5.5 关系运算符重载"></a>4.5.5 关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public:Person(string name, int age){this-&gt;m_Name = name;this-&gt;m_Age = age;};bool operator==(Person &amp; p){if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age){return true;}else{return false;}}bool operator!=(Person &amp; p){if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age){return false;}else{return true;}}string m_Name;int m_Age;};void test01(){//int a = 0;//int b = 0;Person a("孙悟空", 18);Person b("孙悟空", 18);if (a == b){cout &lt;&lt; "a和b相等" &lt;&lt; endl;}else{cout &lt;&lt; "a和b不相等" &lt;&lt; endl;}if (a != b){cout &lt;&lt; "a和b不相等" &lt;&lt; endl;}else{cout &lt;&lt; "a和b相等" &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h4><ul><li>函数调用运算符 ()  也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class MyPrint{public:void operator()(string text){cout &lt;&lt; text &lt;&lt; endl;}};void test01(){//重载的（）操作符 也称为仿函数MyPrint myFunc;myFunc("hello world");}class MyAdd{public:int operator()(int v1, int v2){return v1 + v2;}};void test02(){MyAdd add;int ret = add(10, 10);cout &lt;&lt; "ret = " &lt;&lt; ret &lt;&lt; endl;//匿名对象调用  cout &lt;&lt; "MyAdd()(100,100) = " &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6  继承"></a>4.6  继承</h3><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系，例如下图中：</p><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/1544861202252.png" alt="1544861202252"></p><p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p><h4 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p><p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p><p><strong>普通实现：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//Java页面class Java {public:void header(){cout &lt;&lt; "首页、公开课、登录、注册...（公共头部）" &lt;&lt; endl;}void footer(){cout &lt;&lt; "帮助中心、交流合作、站内地图...(公共底部)" &lt;&lt; endl;}void left(){cout &lt;&lt; "Java,Python,C++...(公共分类列表)" &lt;&lt; endl;}void content(){cout &lt;&lt; "JAVA学科视频" &lt;&lt; endl;}};//Python页面class Python{public:void header(){cout &lt;&lt; "首页、公开课、登录、注册...（公共头部）" &lt;&lt; endl;}void footer(){cout &lt;&lt; "帮助中心、交流合作、站内地图...(公共底部)" &lt;&lt; endl;}void left(){cout &lt;&lt; "Java,Python,C++...(公共分类列表)" &lt;&lt; endl;}void content(){cout &lt;&lt; "Python学科视频" &lt;&lt; endl;}};//C++页面class CPP {public:void header(){cout &lt;&lt; "首页、公开课、登录、注册...（公共头部）" &lt;&lt; endl;}void footer(){cout &lt;&lt; "帮助中心、交流合作、站内地图...(公共底部)" &lt;&lt; endl;}void left(){cout &lt;&lt; "Java,Python,C++...(公共分类列表)" &lt;&lt; endl;}void content(){cout &lt;&lt; "C++学科视频" &lt;&lt; endl;}};void test01(){//Java页面cout &lt;&lt; "Java下载视频页面如下： " &lt;&lt; endl;Java ja;ja.header();ja.footer();ja.left();ja.content();cout &lt;&lt; "--------------------" &lt;&lt; endl;//Python页面cout &lt;&lt; "Python下载视频页面如下： " &lt;&lt; endl;Python py;py.header();py.footer();py.left();py.content();cout &lt;&lt; "--------------------" &lt;&lt; endl;//C++页面cout &lt;&lt; "C++下载视频页面如下： " &lt;&lt; endl;CPP cp;cp.header();cp.footer();cp.left();cp.content();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>继承实现：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//公共页面class BasePage{public:void header(){cout &lt;&lt; "首页、公开课、登录、注册...（公共头部）" &lt;&lt; endl;}void footer(){cout &lt;&lt; "帮助中心、交流合作、站内地图...(公共底部)" &lt;&lt; endl;}void left(){cout &lt;&lt; "Java,Python,C++...(公共分类列表)" &lt;&lt; endl;}};//Java页面class Java : public BasePage{public:void content(){cout &lt;&lt; "JAVA学科视频" &lt;&lt; endl;}};//Python页面class Python : public BasePage{public:void content(){cout &lt;&lt; "Python学科视频" &lt;&lt; endl;}};//C++页面class CPP : public BasePage{public:void content(){cout &lt;&lt; "C++学科视频" &lt;&lt; endl;}};void test01(){//Java页面cout &lt;&lt; "Java下载视频页面如下： " &lt;&lt; endl;Java ja;ja.header();ja.footer();ja.left();ja.content();cout &lt;&lt; "--------------------" &lt;&lt; endl;//Python页面cout &lt;&lt; "Python下载视频页面如下： " &lt;&lt; endl;Python py;py.header();py.footer();py.left();py.content();cout &lt;&lt; "--------------------" &lt;&lt; endl;//C++页面cout &lt;&lt; "C++下载视频页面如下： " &lt;&lt; endl;CPP cp;cp.header();cp.footer();cp.left();cp.content();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>继承的好处：==可以减少重复的代码==</p><p>class A : public B; </p><p>A 类称为子类 或 派生类</p><p>B 类称为父类 或 基类</p><p><strong>派生类中的成员，包含两大部分</strong>：</p><p>一类是从基类继承过来的，一类是自己增加的成员。</p><p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p><h4 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p><p><strong>继承方式一共有三种：</strong></p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/clip_image002.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base1{public: int m_A;protected:int m_B;private:int m_C;};//公共继承class Son1 :public Base1{public:void func(){m_A; //可访问 public权限m_B; //可访问 protected权限//m_C; //不可访问}};void myClass(){Son1 s1;s1.m_A; //其他类只能访问到公共权限}//保护继承class Base2{public:int m_A;protected:int m_B;private:int m_C;};class Son2:protected Base2{public:void func(){m_A; //可访问 protected权限m_B; //可访问 protected权限//m_C; //不可访问}};void myClass2(){Son2 s;//s.m_A; //不可访问}//私有继承class Base3{public:int m_A;protected:int m_B;private:int m_C;};class Son3:private Base3{public:void func(){m_A; //可访问 private权限m_B; //可访问 private权限//m_C; //不可访问}};class GrandSon3 :public Son3{public:void func(){//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到//m_A;//m_B;//m_C;}};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="4.6.3 继承中的对象模型"></a>4.6.3 继承中的对象模型</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base{public:int m_A;protected:int m_B;private:int m_C; //私有成员只是被隐藏了，但是还是会继承下去};//公共继承class Son :public Base{public:int m_D;};void test01(){cout &lt;&lt; "sizeof Son = " &lt;&lt; sizeof(Son) &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用工具查看：</p><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/1545881904150.png" alt="1545881904150"></p><p>打开工具窗口后，定位到当前CPP文件的盘符</p><p>然后输入： cl /d1 reportSingleClassLayout查看的类名   所属文件名</p><p>效果如下图：</p><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/1545882158050.png" alt="1545882158050"></p><blockquote><p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p></blockquote><h4 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p><p>问题：父类和子类的构造和析构顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base {public:Base(){cout &lt;&lt; "Base构造函数!" &lt;&lt; endl;}~Base(){cout &lt;&lt; "Base析构函数!" &lt;&lt; endl;}};class Son : public Base{public:Son(){cout &lt;&lt; "Son构造函数!" &lt;&lt; endl;}~Son(){cout &lt;&lt; "Son析构函数!" &lt;&lt; endl;}};void test01(){//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反Son s;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p></blockquote><h4 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base {public:Base(){m_A = 100;}void func(){cout &lt;&lt; "Base - func()调用" &lt;&lt; endl;}void func(int a){cout &lt;&lt; "Base - func(int a)调用" &lt;&lt; endl;}public:int m_A;};class Son : public Base {public:Son(){m_A = 200;}//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域void func(){cout &lt;&lt; "Son - func()调用" &lt;&lt; endl;}public:int m_A;};void test01(){Son s;cout &lt;&lt; "Son下的m_A = " &lt;&lt; s.m_A &lt;&lt; endl;cout &lt;&lt; "Base下的m_A = " &lt;&lt; s.Base::m_A &lt;&lt; endl;s.func();s.Base::func();s.Base::func(10);}int main() {test01();system("pause");return EXIT_SUCCESS;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li></ol><h4 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p><p>静态成员和非静态成员出现同名，处理方式一致</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base {public:static void func(){cout &lt;&lt; "Base - static void func()" &lt;&lt; endl;}static void func(int a){cout &lt;&lt; "Base - static void func(int a)" &lt;&lt; endl;}static int m_A;};int Base::m_A = 100;class Son : public Base {public:static void func(){cout &lt;&lt; "Son - static void func()" &lt;&lt; endl;}static int m_A;};int Son::m_A = 200;//同名成员属性void test01(){//通过对象访问cout &lt;&lt; "通过对象访问： " &lt;&lt; endl;Son s;cout &lt;&lt; "Son  下 m_A = " &lt;&lt; s.m_A &lt;&lt; endl;cout &lt;&lt; "Base 下 m_A = " &lt;&lt; s.Base::m_A &lt;&lt; endl;//通过类名访问cout &lt;&lt; "通过类名访问： " &lt;&lt; endl;cout &lt;&lt; "Son  下 m_A = " &lt;&lt; Son::m_A &lt;&lt; endl;cout &lt;&lt; "Base 下 m_A = " &lt;&lt; Son::Base::m_A &lt;&lt; endl;}//同名成员函数void test02(){//通过对象访问cout &lt;&lt; "通过对象访问： " &lt;&lt; endl;Son s;s.func();s.Base::func();cout &lt;&lt; "通过类名访问： " &lt;&lt; endl;Son::func();Son::Base::func();//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问Son::Base::func(100);}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p></blockquote><h4 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p><p>语法：<code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议用多继承</strong></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base1 {public:Base1(){m_A = 100;}public:int m_A;};class Base2 {public:Base2(){m_A = 200;  //开始是m_B 不会出问题，但是改为mA就会出现不明确}public:int m_A;};//语法：class 子类：继承方式 父类1 ，继承方式 父类2 class Son : public Base2, public Base1 {public:Son(){m_C = 300;m_D = 400;}public:int m_C;int m_D;};//多继承容易产生成员同名的情况//通过使用类名作用域可以区分调用哪一个基类的成员void test01(){Son s;cout &lt;&lt; "sizeof Son = " &lt;&lt; sizeof(s) &lt;&lt; endl;cout &lt;&lt; s.Base1::m_A &lt;&lt; endl;cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p></blockquote><h4 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p><p>​两个派生类继承同一个基类</p><p>​又有某个类同时继承者两个派生类</p><p>​这种继承被称为菱形继承，或者钻石继承</p><p><strong>典型的菱形继承案例：</strong></p><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/clip_image002.jpg" alt="IMG_256"></p><p><strong>菱形继承问题：</strong></p><ol><li><pre><code>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</code></pre></li><li><pre><code>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</code></pre></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal{public:int m_Age;};//继承前加virtual关键字后，变为虚继承//此时公共的父类Animal称为虚基类class Sheep : virtual public Animal {};class Tuo   : virtual public Animal {};class SheepTuo : public Sheep, public Tuo {};void test01(){SheepTuo st;st.Sheep::m_Age = 100;st.Tuo::m_Age = 200;cout &lt;&lt; "st.Sheep::m_Age = " &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;cout &lt;&lt; "st.Tuo::m_Age = " &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;cout &lt;&lt; "st.m_Age = " &lt;&lt; st.m_Age &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li><li>利用虚继承可以解决菱形继承问题</li></ul><h3 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7  多态"></a>4.7  多态</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p><p>多态分为两类</p><ul><li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li><li>动态多态: 派生类和虚函数实现运行时多态</li></ul><p>静态多态和动态多态区别：</p><ul><li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li></ul><p>下面通过案例进行讲解多态</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal{public://Speak函数就是虚函数//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。virtual void speak(){cout &lt;&lt; "动物在说话" &lt;&lt; endl;}};class Cat :public Animal{public:void speak(){cout &lt;&lt; "小猫在说话" &lt;&lt; endl;}};class Dog :public Animal{public:void speak(){cout &lt;&lt; "小狗在说话" &lt;&lt; endl;}};//我们希望传入什么对象，那么就调用什么对象的函数//如果函数地址在编译阶段就能确定，那么静态联编//如果函数地址在运行阶段才能确定，就是动态联编void DoSpeak(Animal &amp; animal){animal.speak();}////多态满足条件： //1、有继承关系//2、子类重写父类中的虚函数//多态使用：//父类指针或引用指向子类对象void test01(){Cat cat;DoSpeak(cat);Dog dog;DoSpeak(dog);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>多态满足条件</p><ul><li>有继承关系</li><li>子类重写父类中的虚函数</li></ul><p>多态使用条件</p><ul><li>父类指针或引用指向子类对象</li></ul><p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p><h4 id="4-7-2-多态案例一-计算器类"><a href="#4-7-2-多态案例一-计算器类" class="headerlink" title="4.7.2 多态案例一-计算器类"></a>4.7.2 多态案例一-计算器类</h4><p>案例描述：</p><p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p><p>多态的优点：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//普通实现class Calculator {public:int getResult(string oper){if (oper == "+") {return m_Num1 + m_Num2;}else if (oper == "-") {return m_Num1 - m_Num2;}else if (oper == "*") {return m_Num1 * m_Num2;}//如果要提供新的运算，需要修改源码}public:int m_Num1;int m_Num2;};void test01(){//普通实现测试Calculator c;c.m_Num1 = 10;c.m_Num2 = 10;cout &lt;&lt; c.m_Num1 &lt;&lt; " + " &lt;&lt; c.m_Num2 &lt;&lt; " = " &lt;&lt; c.getResult("+") &lt;&lt; endl;cout &lt;&lt; c.m_Num1 &lt;&lt; " - " &lt;&lt; c.m_Num2 &lt;&lt; " = " &lt;&lt; c.getResult("-") &lt;&lt; endl;cout &lt;&lt; c.m_Num1 &lt;&lt; " * " &lt;&lt; c.m_Num2 &lt;&lt; " = " &lt;&lt; c.getResult("*") &lt;&lt; endl;}//多态实现//抽象计算器类//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护class AbstractCalculator{public :virtual int getResult(){return 0;}int m_Num1;int m_Num2;};//加法计算器class AddCalculator :public AbstractCalculator{public:int getResult(){return m_Num1 + m_Num2;}};//减法计算器class SubCalculator :public AbstractCalculator{public:int getResult(){return m_Num1 - m_Num2;}};//乘法计算器class MulCalculator :public AbstractCalculator{public:int getResult(){return m_Num1 * m_Num2;}};void test02(){//创建加法计算器AbstractCalculator *abc = new AddCalculator;abc-&gt;m_Num1 = 10;abc-&gt;m_Num2 = 10;cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; " + " &lt;&lt; abc-&gt;m_Num2 &lt;&lt; " = " &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;delete abc;  //用完了记得销毁//创建减法计算器abc = new SubCalculator;abc-&gt;m_Num1 = 10;abc-&gt;m_Num2 = 10;cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; " - " &lt;&lt; abc-&gt;m_Num2 &lt;&lt; " = " &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;delete abc;  //创建乘法计算器abc = new MulCalculator;abc-&gt;m_Num1 = 10;abc-&gt;m_Num2 = 10;cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; " * " &lt;&lt; abc-&gt;m_Num2 &lt;&lt; " = " &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;delete abc;}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p></blockquote><h4 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="4.7.3 纯虚函数和抽象类"></a>4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p><p>因此可以将虚函数改为<strong>纯虚函数</strong></p><p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p><p>当类中有了纯虚函数，这个类也称为==抽象类==</p><p><strong>抽象类特点</strong>：</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base{public://纯虚函数//类中只要有一个纯虚函数就称为抽象类//抽象类无法实例化对象//子类必须重写父类中的纯虚函数，否则也属于抽象类virtual void func() = 0;};class Son :public Base{public:virtual void func() {cout &lt;&lt; "func调用" &lt;&lt; endl;};};void test01(){Base * base = NULL;//base = new Base; // 错误，抽象类无法实例化对象base = new Son;base-&gt;func();delete base;//记得销毁}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-4-多态案例二-制作饮品"><a href="#4-7-4-多态案例二-制作饮品" class="headerlink" title="4.7.4 多态案例二-制作饮品"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p><p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p><p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/1545985945198.png" alt="1545985945198"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//抽象制作饮品class AbstractDrinking {public://烧水virtual void Boil() = 0;//冲泡virtual void Brew() = 0;//倒入杯中virtual void PourInCup() = 0;//加入辅料virtual void PutSomething() = 0;//规定流程void MakeDrink() {Boil();Brew();PourInCup();PutSomething();}};//制作咖啡class Coffee : public AbstractDrinking {public://烧水virtual void Boil() {cout &lt;&lt; "煮农夫山泉!" &lt;&lt; endl;}//冲泡virtual void Brew() {cout &lt;&lt; "冲泡咖啡!" &lt;&lt; endl;}//倒入杯中virtual void PourInCup() {cout &lt;&lt; "将咖啡倒入杯中!" &lt;&lt; endl;}//加入辅料virtual void PutSomething() {cout &lt;&lt; "加入牛奶!" &lt;&lt; endl;}};//制作茶水class Tea : public AbstractDrinking {public://烧水virtual void Boil() {cout &lt;&lt; "煮自来水!" &lt;&lt; endl;}//冲泡virtual void Brew() {cout &lt;&lt; "冲泡茶叶!" &lt;&lt; endl;}//倒入杯中virtual void PourInCup() {cout &lt;&lt; "将茶水倒入杯中!" &lt;&lt; endl;}//加入辅料virtual void PutSomething() {cout &lt;&lt; "加入枸杞!" &lt;&lt; endl;}};//业务函数void DoWork(AbstractDrinking* drink) {drink-&gt;MakeDrink();delete drink;}void test01() {DoWork(new Coffee);cout &lt;&lt; "--------------" &lt;&lt; endl;DoWork(new Tea);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-5-虚析构和纯虚析构"><a href="#4-7-5-虚析构和纯虚析构" class="headerlink" title="4.7.5 虚析构和纯虚析构"></a>4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p>虚析构语法：</p><p><code>virtual ~类名(){}</code></p><p>纯虚析构语法：</p><p><code> virtual ~类名() = 0;</code></p><p><code>类名::~类名(){}</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal {public:Animal(){cout &lt;&lt; "Animal 构造函数调用！" &lt;&lt; endl;}virtual void Speak() = 0;//析构函数加上virtual关键字，变成虚析构函数//virtual ~Animal()//{//cout &lt;&lt; "Animal虚析构函数调用！" &lt;&lt; endl;//}virtual ~Animal() = 0;};Animal::~Animal(){cout &lt;&lt; "Animal 纯虚析构函数调用！" &lt;&lt; endl;}//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。class Cat : public Animal {public:Cat(string name){cout &lt;&lt; "Cat构造函数调用！" &lt;&lt; endl;m_Name = new string(name);}virtual void Speak(){cout &lt;&lt; *m_Name &lt;&lt;  "小猫在说话!" &lt;&lt; endl;}~Cat(){cout &lt;&lt; "Cat析构函数调用!" &lt;&lt; endl;if (this-&gt;m_Name != NULL) {delete m_Name;m_Name = NULL;}}public:string *m_Name;};void test01(){Animal *animal = new Cat("Tom");animal-&gt;Speak();//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏//怎么解决？给基类增加一个虚析构函数//虚析构函数就是用来解决通过父类指针释放子类对象delete animal;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>​1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p><p>​2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p><p>​3. 拥有纯虚析构函数的类也属于抽象类</p><h4 id="4-7-6-多态案例三-电脑组装"><a href="#4-7-6-多态案例三-电脑组装" class="headerlink" title="4.7.6 多态案例三-电脑组装"></a>4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p><p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p><p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p><p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p><p>测试时组装三台不同的电脑进行工作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//抽象CPU类class CPU{public://抽象的计算函数virtual void calculate() = 0;};//抽象显卡类class VideoCard{public://抽象的显示函数virtual void display() = 0;};//抽象内存条类class Memory{public://抽象的存储函数virtual void storage() = 0;};//电脑类class Computer{public:Computer(CPU * cpu, VideoCard * vc, Memory * mem){m_cpu = cpu;m_vc = vc;m_mem = mem;}//提供工作的函数void work(){//让零件工作起来，调用接口m_cpu-&gt;calculate();m_vc-&gt;display();m_mem-&gt;storage();}//提供析构函数 释放3个电脑零件~Computer(){//释放CPU零件if (m_cpu != NULL){delete m_cpu;m_cpu = NULL;}//释放显卡零件if (m_vc != NULL){delete m_vc;m_vc = NULL;}//释放内存条零件if (m_mem != NULL){delete m_mem;m_mem = NULL;}}private:CPU * m_cpu; //CPU的零件指针VideoCard * m_vc; //显卡零件指针Memory * m_mem; //内存条零件指针};//具体厂商//Intel厂商class IntelCPU :public CPU{public:virtual void calculate(){cout &lt;&lt; "Intel的CPU开始计算了！" &lt;&lt; endl;}};class IntelVideoCard :public VideoCard{public:virtual void display(){cout &lt;&lt; "Intel的显卡开始显示了！" &lt;&lt; endl;}};class IntelMemory :public Memory{public:virtual void storage(){cout &lt;&lt; "Intel的内存条开始存储了！" &lt;&lt; endl;}};//Lenovo厂商class LenovoCPU :public CPU{public:virtual void calculate(){cout &lt;&lt; "Lenovo的CPU开始计算了！" &lt;&lt; endl;}};class LenovoVideoCard :public VideoCard{public:virtual void display(){cout &lt;&lt; "Lenovo的显卡开始显示了！" &lt;&lt; endl;}};class LenovoMemory :public Memory{public:virtual void storage(){cout &lt;&lt; "Lenovo的内存条开始存储了！" &lt;&lt; endl;}};void test01(){//第一台电脑零件CPU * intelCpu = new IntelCPU;VideoCard * intelCard = new IntelVideoCard;Memory * intelMem = new IntelMemory;cout &lt;&lt; "第一台电脑开始工作：" &lt;&lt; endl;//创建第一台电脑Computer * computer1 = new Computer(intelCpu, intelCard, intelMem);computer1-&gt;work();delete computer1;cout &lt;&lt; "-----------------------" &lt;&lt; endl;cout &lt;&lt; "第二台电脑开始工作：" &lt;&lt; endl;//第二台电脑组装Computer * computer2 = new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);;computer2-&gt;work();delete computer2;cout &lt;&lt; "-----------------------" &lt;&lt; endl;cout &lt;&lt; "第三台电脑开始工作：" &lt;&lt; endl;//第三台电脑组装Computer * computer3 = new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);;computer3-&gt;work();delete computer3;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++核心编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-函数提高</title>
      <link href="/2023/03/03/c-he-xin-bian-cheng/3-han-shu-ti-gao/"/>
      <url>/2023/03/03/c-he-xin-bian-cheng/3-han-shu-ti-gao/</url>
      
        <content type="html"><![CDATA[<h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p><p>语法：<code> 返回值类型  函数名 （参数= 默认值）{}</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int func(int a, int b = 10, int c = 10) {return a + b + c;}//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数int func2(int a = 10, int b = 10);int func2(int a, int b) {return a + b;}int main() {cout &lt;&lt; "ret = " &lt;&lt; func(20, 20) &lt;&lt; endl;cout &lt;&lt; "ret = " &lt;&lt; func(100) &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p><p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型){}</code></p><p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数占位参数 ，占位参数也可以有默认参数void func(int a, int) {cout &lt;&lt; "this is func" &lt;&lt; endl;}int main() {func(10,10); //占位参数必须填补system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><h4 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p><p><strong>函数重载满足条件：</strong></p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li></ul><p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数重载需要函数都在同一个作用域下void func(){cout &lt;&lt; "func 的调用！" &lt;&lt; endl;}void func(int a){cout &lt;&lt; "func (int a) 的调用！" &lt;&lt; endl;}void func(double a){cout &lt;&lt; "func (double a)的调用！" &lt;&lt; endl;}void func(int a ,double b){cout &lt;&lt; "func (int a ,double b) 的调用！" &lt;&lt; endl;}void func(double a ,int b){cout &lt;&lt; "func (double a ,int b)的调用！" &lt;&lt; endl;}//函数返回值不可以作为函数重载条件//int func(double a, int b)//{//cout &lt;&lt; "func (double a ,int b)的调用！" &lt;&lt; endl;//}int main() {func();func(10);func(3.14);func(10,3.14);func(3.14 , 10);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2-函数重载注意事项"><a href="#3-3-2-函数重载注意事项" class="headerlink" title="3.3.2 函数重载注意事项"></a>3.3.2 函数重载注意事项</h4><ul><li>引用作为重载条件</li><li>函数重载碰到函数默认参数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数重载注意事项//1、引用作为重载条件void func(int &amp;a){cout &lt;&lt; "func (int &amp;a) 调用 " &lt;&lt; endl;}void func(const int &amp;a){cout &lt;&lt; "func (const int &amp;a) 调用 " &lt;&lt; endl;}//2、函数重载碰到函数默认参数void func2(int a, int b = 10){cout &lt;&lt; "func2(int a, int b = 10) 调用" &lt;&lt; endl;}void func2(int a){cout &lt;&lt; "func2(int a) 调用" &lt;&lt; endl;}int main() {int a = 10;func(a); //调用无constfunc(10);//调用有const//func2(10); //碰到默认参数产生歧义，需要避免system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++核心编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-引用</title>
      <link href="/2023/03/03/c-he-xin-bian-cheng/2-yin-yong/"/>
      <url>/2023/03/03/c-he-xin-bian-cheng/2-yin-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h3><p>**作用： **给变量起别名</p><p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int a = 10;int &amp;b = a;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;b = 100;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h3><ul><li>引用必须初始化</li><li>引用在初始化后，不可以改变</li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int a = 10;int b = 20;//int &amp;c; //错误，引用必须初始化int &amp;c = a; //一旦初始化后，就不可以更改c = b; //这是赋值操作，不是更改引用cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p><p><strong>优点：</strong>可以简化指针修改实参</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//1. 值传递void mySwap01(int a, int b) {int temp = a;a = b;b = temp;}//2. 地址传递void mySwap02(int* a, int* b) {int temp = *a;*a = *b;*b = temp;}//3. 引用传递void mySwap03(int&amp; a, int&amp; b) {int temp = a;a = b;b = temp;}int main() {int a = 10;int b = 20;mySwap01(a, b);cout &lt;&lt; "a:" &lt;&lt; a &lt;&lt; " b:" &lt;&lt; b &lt;&lt; endl;mySwap02(&amp;a, &amp;b);cout &lt;&lt; "a:" &lt;&lt; a &lt;&lt; " b:" &lt;&lt; b &lt;&lt; endl;mySwap03(a, b);cout &lt;&lt; "a:" &lt;&lt; a &lt;&lt; " b:" &lt;&lt; b &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p></blockquote><h3 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p><p>注意：<strong>不要返回局部变量引用</strong></p><p>用法：函数调用作为左值</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//返回局部变量引用int&amp; test01() {int a = 10; //局部变量return a;}//返回静态变量引用int&amp; test02() {static int a = 20;return a;}int main() {//不能返回局部变量的引用int&amp; ref = test01();cout &lt;&lt; "ref = " &lt;&lt; ref &lt;&lt; endl;cout &lt;&lt; "ref = " &lt;&lt; ref &lt;&lt; endl;//如果函数做左值，那么必须返回引用int&amp; ref2 = test02();cout &lt;&lt; "ref2 = " &lt;&lt; ref2 &lt;&lt; endl;cout &lt;&lt; "ref2 = " &lt;&lt; ref2 &lt;&lt; endl;test02() = 1000;cout &lt;&lt; "ref2 = " &lt;&lt; ref2 &lt;&lt; endl;cout &lt;&lt; "ref2 = " &lt;&lt; ref2 &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><h3 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p><p>讲解示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//发现是引用，转换为 int* const ref = &amp;a;void func(int&amp; ref){ref = 100; // ref是引用，转换为*ref = 100}int main(){int a = 10;        //自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改int&amp; ref = a; ref = 20; //内部发现ref是引用，自动帮我们转换为: *ref = 20;    cout &lt;&lt; "a:" &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "ref:" &lt;&lt; ref &lt;&lt; endl;    func(a);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p><h3 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p><p>在函数形参列表中，可以加==const修饰形参==，防止形参改变实参</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//引用使用的场景，通常用来修饰形参void showValue(const int&amp; v) {//v += 10;cout &lt;&lt; v &lt;&lt; endl;}int main() {//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;const int&amp; ref = 10;//ref = 100;  //加入const后不可以修改变量cout &lt;&lt; ref &lt;&lt; endl;//函数中利用常量引用防止误操作修改实参int a = 10;showValue(a);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++核心编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-内存分区模型</title>
      <link href="/2023/03/03/c-he-xin-bian-cheng/1-nei-cun-fen-qu-mo-xing/"/>
      <url>/2023/03/03/c-he-xin-bian-cheng/1-nei-cun-fen-qu-mo-xing/</url>
      
        <content type="html"><![CDATA[<p>本阶段主要针对C++==面向对象==编程技术做详细讲解，探讨C++中的核心和精髓。</p><h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li><li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li></ul><p><strong>内存四区意义：</strong></p><p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p><h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><p>​在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p><p>​<strong>代码区：</strong></p><p>​存放 CPU 执行的机器指令</p><p>​代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p><p>​代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p><p>​<strong>全局区：</strong></p><p>​全局变量和静态变量存放在此.</p><p>​全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p><p>​==该区域的数据在程序结束后由操作系统释放==.</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//全局变量int g_a = 10;int g_b = 10;//全局常量const int c_g_a = 10;const int c_g_b = 10;int main() {//局部变量int a = 10;int b = 10;//打印地址cout &lt;&lt; "局部变量a地址为： " &lt;&lt; (int)&amp;a &lt;&lt; endl;cout &lt;&lt; "局部变量b地址为： " &lt;&lt; (int)&amp;b &lt;&lt; endl;cout &lt;&lt; "全局变量g_a地址为： " &lt;&lt;  (int)&amp;g_a &lt;&lt; endl;cout &lt;&lt; "全局变量g_b地址为： " &lt;&lt;  (int)&amp;g_b &lt;&lt; endl;//静态变量static int s_a = 10;static int s_b = 10;cout &lt;&lt; "静态变量s_a地址为： " &lt;&lt; (int)&amp;s_a &lt;&lt; endl;cout &lt;&lt; "静态变量s_b地址为： " &lt;&lt; (int)&amp;s_b &lt;&lt; endl;cout &lt;&lt; "字符串常量地址为： " &lt;&lt; (int)&amp;"hello world" &lt;&lt; endl;cout &lt;&lt; "字符串常量地址为： " &lt;&lt; (int)&amp;"hello world1" &lt;&lt; endl;cout &lt;&lt; "全局常量c_g_a地址为： " &lt;&lt; (int)&amp;c_g_a &lt;&lt; endl;cout &lt;&lt; "全局常量c_g_b地址为： " &lt;&lt; (int)&amp;c_g_b &lt;&lt; endl;const int c_l_a = 10;const int c_l_b = 10;cout &lt;&lt; "局部常量c_l_a地址为： " &lt;&lt; (int)&amp;c_l_a &lt;&lt; endl;cout &lt;&lt; "局部常量c_l_b地址为： " &lt;&lt; (int)&amp;c_l_b &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：</p><p><img src="/2023/03/03/c-he-xin-bian-cheng/1-nei-cun-fen-qu-mo-xing/1545017602518.png" alt="1545017602518"></p><p>总结：</p><ul><li>C++中在程序运行前分为全局区和代码区</li><li>代码区特点是共享和只读</li><li>全局区中存放全局变量、静态变量、常量</li><li>常量区中存放 const修饰的全局常量  和 字符串常量</li></ul><h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><p>​<strong>栈区：</strong></p><p>​由编译器自动分配释放, 存放函数的参数值,局部变量等</p><p>​注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int * func(){int a = 10;return &amp;a;}int main() {int *p = func();cout &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; *p &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<strong>堆区：</strong></p><p>​由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p><p>​在C++中主要利用new在堆区开辟内存</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int* func(){int* a = new int(10);return a;}int main() {int *p = func();cout &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; *p &lt;&lt; endl;    system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>堆区数据由程序员管理开辟和释放</p><p>堆区数据利用new关键字进行开辟内存</p><h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><p>​C++中利用==new==操作符在堆区开辟数据</p><p>​堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==</p><p>​语法：<code> new 数据类型</code></p><p>​利用new创建的数据，会返回该数据对应的类型的指针</p><p><strong>示例1： 基本语法</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int* func(){int* a = new int(10);return a;}int main() {int *p = func();cout &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; *p &lt;&lt; endl;//利用delete释放堆区数据delete p;//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：开辟数组</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//堆区开辟数组int main() {int* arr = new int[10];for (int i = 0; i &lt; 10; i++){arr[i] = i + 100;}for (int i = 0; i &lt; 10; i++){cout &lt;&lt; arr[i] &lt;&lt; endl;}//释放数组 delete 后加 []delete[] arr;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++核心编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-结构体</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/8-jie-gou-ti/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/8-jie-gou-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p><h3 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 { 结构体成员列表 }；</code></p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li><li>定义结构体时顺便创建变量</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数}stu3; //结构体变量创建方式3 int main() {//结构体变量创建方式1struct student stu1; //struct 关键字可以省略stu1.name = "张三";stu1.age = 18;stu1.score = 100;cout &lt;&lt; "姓名：" &lt;&lt; stu1.name &lt;&lt; " 年龄：" &lt;&lt; stu1.age  &lt;&lt; " 分数：" &lt;&lt; stu1.score &lt;&lt; endl;//结构体变量创建方式2struct student stu2 = { "李四",19,60 };cout &lt;&lt; "姓名：" &lt;&lt; stu2.name &lt;&lt; " 年龄：" &lt;&lt; stu2.age  &lt;&lt; " 分数：" &lt;&lt; stu2.score &lt;&lt; endl;stu3.name = "王五";stu3.age = 18;stu3.score = 80;cout &lt;&lt; "姓名：" &lt;&lt; stu3.name &lt;&lt; " 年龄：" &lt;&lt; stu3.age  &lt;&lt; " 分数：" &lt;&lt; stu3.score &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：定义结构体时的关键字是struct，不可省略</p></blockquote><blockquote><p>总结2：创建结构体变量时，关键字struct可以省略</p></blockquote><blockquote><p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p></blockquote><h3 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p><p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = {  {} , {} , ... {} }</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数}int main() {//结构体数组struct student arr[3]={{"张三",18,80 },{"李四",19,60 },{"王五",20,70 }};for (int i = 0; i &lt; 3; i++){cout &lt;&lt; "姓名：" &lt;&lt; arr[i].name &lt;&lt; " 年龄：" &lt;&lt; arr[i].age &lt;&lt; " 分数：" &lt;&lt; arr[i].score &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p><ul><li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数};int main() {struct student stu = { "张三",18,100, };struct student * p = &amp;stu;p-&gt;score = 80; //指针通过 -&gt; 操作符可以访问成员cout &lt;&lt; "姓名：" &lt;&lt; p-&gt;name &lt;&lt; " 年龄：" &lt;&lt; p-&gt;age &lt;&lt; " 分数：" &lt;&lt; p-&gt;score &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p></blockquote><h3 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p><p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数};//教师结构体定义struct teacher{    //成员列表int id; //职工编号string name;  //教师姓名int age;   //教师年龄struct student stu; //子结构体 学生};int main() {struct teacher t1;t1.id = 10000;t1.name = "老王";t1.age = 40;t1.stu.name = "张三";t1.stu.age = 18;t1.stu.score = 100;cout &lt;&lt; "教师 职工编号： " &lt;&lt; t1.id &lt;&lt; " 姓名： " &lt;&lt; t1.name &lt;&lt; " 年龄： " &lt;&lt; t1.age &lt;&lt; endl;cout &lt;&lt; "辅导学员 姓名： " &lt;&lt; t1.stu.name &lt;&lt; " 年龄：" &lt;&lt; t1.stu.age &lt;&lt; " 考试分数： " &lt;&lt; t1.stu.score &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p><h3 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p><p>传递方式有两种：</p><ul><li>值传递</li><li>地址传递</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数};//值传递void printStudent(student stu ){stu.age = 28;cout &lt;&lt; "子函数中 姓名：" &lt;&lt; stu.name &lt;&lt; " 年龄： " &lt;&lt; stu.age  &lt;&lt; " 分数：" &lt;&lt; stu.score &lt;&lt; endl;}//地址传递void printStudent2(student *stu){stu-&gt;age = 28;cout &lt;&lt; "子函数中 姓名：" &lt;&lt; stu-&gt;name &lt;&lt; " 年龄： " &lt;&lt; stu-&gt;age  &lt;&lt; " 分数：" &lt;&lt; stu-&gt;score &lt;&lt; endl;}int main() {student stu = { "张三",18,100};//值传递printStudent(stu);cout &lt;&lt; "主函数中 姓名：" &lt;&lt; stu.name &lt;&lt; " 年龄： " &lt;&lt; stu.age &lt;&lt; " 分数：" &lt;&lt; stu.score &lt;&lt; endl;cout &lt;&lt; endl;//地址传递printStudent2(&amp;stu);cout &lt;&lt; "主函数中 姓名：" &lt;&lt; stu.name &lt;&lt; " 年龄： " &lt;&lt; stu.age  &lt;&lt; " 分数：" &lt;&lt; stu.score &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p></blockquote><h3 id="8-7-结构体中-const使用场景"><a href="#8-7-结构体中-const使用场景" class="headerlink" title="8.7 结构体中 const使用场景"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数};//const使用场景void printStudent(const student *stu) //加const防止函数体中的误操作{//stu-&gt;age = 100; //操作失败，因为加了const修饰cout &lt;&lt; "姓名：" &lt;&lt; stu-&gt;name &lt;&lt; " 年龄：" &lt;&lt; stu-&gt;age &lt;&lt; " 分数：" &lt;&lt; stu-&gt;score &lt;&lt; endl;}int main() {student stu = { "张三",18,100 };printStudent(&amp;stu);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h3><h4 id="8-8-1-案例1"><a href="#8-8-1-案例1" class="headerlink" title="8.8.1 案例1"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p><p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p><p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p><p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p><p>最终打印出老师数据以及老师所带的学生数据。</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct Student{string name;int score;};struct Teacher{string name;Student sArray[5];};void allocateSpace(Teacher tArray[] , int len){string tName = "教师";string sName = "学生";string nameSeed = "ABCDE";for (int i = 0; i &lt; len; i++){tArray[i].name = tName + nameSeed[i];for (int j = 0; j &lt; 5; j++){tArray[i].sArray[j].name = sName + nameSeed[j];tArray[i].sArray[j].score = rand() % 61 + 40;}}}void printTeachers(Teacher tArray[], int len){for (int i = 0; i &lt; len; i++){cout &lt;&lt; tArray[i].name &lt;&lt; endl;for (int j = 0; j &lt; 5; j++){cout &lt;&lt; "\t姓名：" &lt;&lt; tArray[i].sArray[j].name &lt;&lt; " 分数：" &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;}}}int main() {srand((unsigned int)time(NULL)); //随机数种子 头文件 #include &lt;ctime&gt;Teacher tArray[3]; //老师数组int len = sizeof(tArray) / sizeof(Teacher);allocateSpace(tArray, len); //创建数据printTeachers(tArray, len); //打印数据system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-2-案例2"><a href="#8-8-2-案例2" class="headerlink" title="8.8.2 案例2"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p><p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><p>五名英雄信息如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">{"刘备",23,"男"},{"关羽",22,"男"},{"张飞",20,"男"},{"赵云",21,"男"},{"貂蝉",19,"女"},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//英雄结构体struct hero{string name;int age;string sex;};//冒泡排序void bubbleSort(hero arr[] , int len){for (int i = 0; i &lt; len - 1; i++){for (int j = 0; j &lt; len - 1 - i; j++){if (arr[j].age &gt; arr[j + 1].age){hero temp = arr[j];arr[j] = arr[j + 1];arr[j + 1] = temp;}}}}//打印数组void printHeros(hero arr[], int len){for (int i = 0; i &lt; len; i++){cout &lt;&lt; "姓名： " &lt;&lt; arr[i].name &lt;&lt; " 性别： " &lt;&lt; arr[i].sex &lt;&lt; " 年龄： " &lt;&lt; arr[i].age &lt;&lt; endl;}}int main() {struct hero arr[5] ={{"刘备",23,"男"},{"关羽",22,"男"},{"张飞",20,"男"},{"赵云",21,"男"},{"貂蝉",19,"女"},};int len = sizeof(arr) / sizeof(hero); //获取数组元素个数bubbleSort(arr, len); //排序printHeros(arr, len); //打印system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-指针</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/7-zhi-zhen/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/7-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h3 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p><ul><li><p>内存编号是从0开始记录的，一般用十六进制数字表示</p></li><li><p>可以利用指针变量保存地址</p></li></ul><h3 id="7-2-指针变量的定义和使用"><a href="#7-2-指针变量的定义和使用" class="headerlink" title="7.2 指针变量的定义和使用"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//1、指针的定义int a = 10; //定义整型变量a//指针定义语法： 数据类型 * 变量名 ;int * p;//指针变量赋值p = &amp;a; //指针指向变量a的地址cout &lt;&lt; &amp;a &lt;&lt; endl; //打印数据a的地址cout &lt;&lt; p &lt;&lt; endl;  //打印指针变量p//2、指针的使用//通过*操作指针变量指向的内存cout &lt;&lt; "*p = " &lt;&lt; *p &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指针变量和普通变量的区别</p><ul><li>普通变量存放的是数据,指针变量存放的是地址</li><li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li></ul><blockquote><p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p></blockquote><blockquote><p>总结2：利用指针可以记录地址</p></blockquote><blockquote><p>总结3：对指针变量解引用，可以操作指针指向的内存</p></blockquote><h3 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int a = 10;int * p;p = &amp;a; //指针指向数据a的地址cout &lt;&lt; *p &lt;&lt; endl; //* 解引用cout &lt;&lt; sizeof(p) &lt;&lt; endl;cout &lt;&lt; sizeof(char *) &lt;&lt; endl;cout &lt;&lt; sizeof(float *) &lt;&lt; endl;cout &lt;&lt; sizeof(double *) &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：所有指针类型在32位操作系统下是4个字节</p></blockquote><h3 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p><p><strong>用途：</strong>初始化指针变量</p><p><strong>注意：</strong>空指针指向的内存是不可以访问的</p><p><strong>示例1：空指针</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//指针变量p指向内存地址编号为0的空间int * p = NULL;//访问空指针报错 //内存编号0 ~255为系统占用内存，不允许用户访问cout &lt;&lt; *p &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>野指针</strong>：指针变量指向非法的内存空间</p><p><strong>示例2：野指针</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//指针变量p指向内存地址编号为0x1100的空间int * p = (int *)0x1100;//访问野指针报错 cout &lt;&lt; *p &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p></blockquote><h3 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p><ol><li>const修饰指针   — 常量指针</li><li>const修饰常量   — 指针常量</li><li>const即修饰指针，又修饰常量</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() {int a = 10;int b = 10;//const修饰的是指针，指针指向可以改，指针指向的值不可以更改const int * p1 = &amp;a; p1 = &amp;b; //正确//*p1 = 100;  报错//const修饰的是常量，指针指向不可以改，指针指向的值可以更改int * const p2 = &amp;a;//p2 = &amp;b; //错误*p2 = 100; //正确    //const既修饰指针又修饰常量const int * const p3 = &amp;a;//p3 = &amp;b; //错误//*p3 = 100; //错误system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p></blockquote><h3 id="7-6-指针和数组"><a href="#7-6-指针和数组" class="headerlink" title="7.6 指针和数组"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int arr[] = { 1,2,3,4,5,6,7,8,9,10 };int * p = arr;  //指向数组的指针cout &lt;&lt; "第一个元素： " &lt;&lt; arr[0] &lt;&lt; endl;cout &lt;&lt; "指针访问第一个元素： " &lt;&lt; *p &lt;&lt; endl;for (int i = 0; i &lt; 10; i++){//利用指针遍历数组cout &lt;&lt; *p &lt;&lt; endl;p++;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-7-指针和函数"><a href="#7-7-指针和函数" class="headerlink" title="7.7 指针和函数"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//值传递void swap1(int a ,int b){int temp = a;a = b; b = temp;}//地址传递void swap2(int * p1, int *p2){int temp = *p1;*p1 = *p2;*p2 = temp;}int main() {int a = 10;int b = 20;swap1(a, b); // 值传递不会改变实参swap2(&amp;a, &amp;b); //地址传递会改变实参cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p></blockquote><h3 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p><p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//冒泡排序函数void bubbleSort(int * arr, int len)  //int * arr 也可以写为int arr[]{for (int i = 0; i &lt; len - 1; i++){for (int j = 0; j &lt; len - 1 - i; j++){if (arr[j] &gt; arr[j + 1]){int temp = arr[j];arr[j] = arr[j + 1];arr[j + 1] = temp;}}}}//打印数组函数void printArray(int arr[], int len){for (int i = 0; i &lt; len; i++){cout &lt;&lt; arr[i] &lt;&lt; endl;}}int main() {int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };int len = sizeof(arr) / sizeof(int);bubbleSort(arr, len);printArray(arr, len);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-函数</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/6-han-shu/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/6-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p><p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p><h3 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p><p>1、返回值类型 </p><p>2、函数名</p><p>3、参数表列</p><p>4、函数体语句 </p><p>5、return 表达式</p><p><strong>语法：</strong> </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">返回值类型 函数名 （参数列表）{       函数体语句       return表达式}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li><li>函数名：给函数起个名称</li><li>参数列表：使用该函数时，传入的数据</li><li>函数体语句：花括号内的代码，函数内需要执行的语句</li><li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li></ul><p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数定义int add(int num1, int num2){int sum = num1 + num2;return sum;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p><p><strong>语法：</strong><code> 函数名（参数）</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数定义int add(int num1, int num2) //定义中的num1,num2称为形式参数，简称形参{int sum = num1 + num2;return sum;}int main() {int a = 10;int b = 10;//调用add函数int sum = add(a, b);//调用时的a，b称为实际参数，简称实参cout &lt;&lt; "sum = " &lt;&lt; sum &lt;&lt; endl;a = 100;b = 100;sum = add(a, b);cout &lt;&lt; "sum = " &lt;&lt; sum &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p></blockquote><h3 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h3><ul><li>所谓值传递，就是函数调用时实参将数值传入给形参</li><li>值传递时，==如果形参发生，并不会影响实参==</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void swap(int num1, int num2){cout &lt;&lt; "交换前：" &lt;&lt; endl;cout &lt;&lt; "num1 = " &lt;&lt; num1 &lt;&lt; endl;cout &lt;&lt; "num2 = " &lt;&lt; num2 &lt;&lt; endl;int temp = num1;num1 = num2;num2 = temp;cout &lt;&lt; "交换后：" &lt;&lt; endl;cout &lt;&lt; "num1 = " &lt;&lt; num1 &lt;&lt; endl;cout &lt;&lt; "num2 = " &lt;&lt; num2 &lt;&lt; endl;//return ; 当函数声明时候，不需要返回值，可以不写return}int main() {int a = 10;int b = 20;swap(a, b);cout &lt;&lt; "mian中的 a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "mian中的 b = " &lt;&lt; b &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 值传递时，形参是修饰不了实参的</p></blockquote><h3 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p><ol><li>无参无返</li><li>有参无返</li><li>无参有返</li><li>有参有返</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数常见样式//1、 无参无返void test01(){//void a = 10; //无类型不可以创建变量,原因无法分配内存cout &lt;&lt; "this is test01" &lt;&lt; endl;//test01(); 函数调用}//2、 有参无返void test02(int a){cout &lt;&lt; "this is test02" &lt;&lt; endl;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;}//3、无参有返int test03(){cout &lt;&lt; "this is test03 " &lt;&lt; endl;return 10;}//4、有参有返int test04(int a, int b){cout &lt;&lt; "this is test04 " &lt;&lt; endl;int sum = a + b;return sum;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><ul><li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//声明可以多次，定义只能一次//声明int max(int a, int b);int max(int a, int b);//定义int max(int a, int b){return a &gt; b ? a : b;}int main() {int a = 100;int b = 200;cout &lt;&lt; max(a, b) &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p><p>函数分文件编写一般有4个步骤</p><ol><li>创建后缀名为.h的头文件  </li><li>创建后缀名为.cpp的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//swap.h文件#include&lt;iostream&gt;using namespace std;//实现两个数字交换的函数声明void swap(int a, int b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//swap.cpp文件#include "swap.h"void swap(int a, int b){int temp = a;a = b;b = temp;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//main函数文件#include "swap.h"int main() {int a = 100;int b = 200;swap(a, b);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-数组</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/5-shu-zu/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/5-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p><p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p><p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p><p><img src="/2023/03/03/c-ji-chu-ru-men/5-shu-zu/1541748375356.png" alt="1541748375356"></p><h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p><ol><li><code>数据类型  数组名[ 数组长度 ];</code></li><li><code>数据类型  数组名[ 数组长度 ] = { 值1，值2 ...};</code></li><li><code>数据类型  数组名[ ] = { 值1，值2 ...};</code></li></ol><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//定义方式1//数据类型 数组名[元素个数];int score[10];//利用下标赋值score[0] = 100;score[1] = 99;score[2] = 85;//利用下标输出cout &lt;&lt; score[0] &lt;&lt; endl;cout &lt;&lt; score[1] &lt;&lt; endl;cout &lt;&lt; score[2] &lt;&lt; endl;//第二种定义方式//数据类型 数组名[元素个数] =  {值1，值2 ，值3 ...};//如果{}内不足10个数据，剩余数据用0补全int score2[10] = { 100, 90,80,70,60,50,40,30,20,10 };//逐个输出//cout &lt;&lt; score2[0] &lt;&lt; endl;//cout &lt;&lt; score2[1] &lt;&lt; endl;//一个一个输出太麻烦，因此可以利用循环进行输出for (int i = 0; i &lt; 10; i++){cout &lt;&lt; score2[i] &lt;&lt; endl;}//定义方式3//数据类型 数组名[] =  {值1，值2 ，值3 ...};int score3[] = { 100,90,80,70,60,50,40,30,20,10 };for (int i = 0; i &lt; 10; i++){cout &lt;&lt; score3[i] &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p></blockquote><blockquote><p>总结2：数组中下标是从0开始索引</p></blockquote><h4 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p><ol><li>可以统计整个数组在内存中的长度</li><li>可以获取数组在内存中的首地址</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//数组名用途//1、可以获取整个数组占用内存空间大小int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };cout &lt;&lt; "整个数组所占内存空间为： " &lt;&lt; sizeof(arr) &lt;&lt; endl;cout &lt;&lt; "每个元素所占内存空间为： " &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;cout &lt;&lt; "数组的元素个数为： " &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;//2、可以通过数组名获取到数组首地址cout &lt;&lt; "数组首地址为： " &lt;&lt; (int)arr &lt;&lt; endl;cout &lt;&lt; "数组中第一个元素地址为： " &lt;&lt; (int)&amp;arr[0] &lt;&lt; endl;cout &lt;&lt; "数组中第二个元素地址为： " &lt;&lt; (int)&amp;arr[1] &lt;&lt; endl;//arr = 100; 错误，数组名是常量，因此不可以赋值system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：数组名是常量，不可以赋值</p></blockquote><blockquote><p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p></blockquote><blockquote><p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p></blockquote><p><strong>练习案例1</strong>：五只小猪称体重</p><p><strong>案例描述：</strong></p><p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p><p>找出并打印最重的小猪体重。</p><p><strong>练习案例2：</strong>数组元素逆置</p><p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p><p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p><h4 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li><li>重复以上的步骤，每次比较次数-1，直到不需要比较</li></ol><p><img src="/2023/03/03/c-ji-chu-ru-men/5-shu-zu/1541905327273.png" alt="1541905327273"></p><p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int arr[9] = { 4,2,8,0,5,7,1,3,9 };for (int i = 0; i &lt; 9 - 1; i++){for (int j = 0; j &lt; 9 - 1 - i; j++){if (arr[j] &gt; arr[j + 1]){int temp = arr[j];arr[j] = arr[j + 1];arr[j + 1] = temp;}}}for (int i = 0; i &lt; 9; i++){cout &lt;&lt; arr[i] &lt;&lt; endl;}    system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p><p><img src="/2023/03/03/c-ji-chu-ru-men/5-shu-zu/1541905559138.png" alt="1541905559138"></p><h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p><ol><li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li><li><code> 数据类型  数组名[  ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li></ol><blockquote><p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p></blockquote><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//方式1  //数组类型 数组名 [行数][列数]int arr[2][3];arr[0][0] = 1;arr[0][1] = 2;arr[0][2] = 3;arr[1][0] = 4;arr[1][1] = 5;arr[1][2] = 6;for (int i = 0; i &lt; 2; i++){for (int j = 0; j &lt; 3; j++){cout &lt;&lt; arr[i][j] &lt;&lt; " ";}cout &lt;&lt; endl;}//方式2 //数据类型 数组名[行数][列数] = { {数据1，数据2 } ，{数据3，数据4 } };int arr2[2][3] ={{1,2,3},{4,5,6}};//方式3//数据类型 数组名[行数][列数] = { 数据1，数据2 ,数据3，数据4  };int arr3[2][3] = { 1,2,3,4,5,6 }; //方式4 //数据类型 数组名[][列数] = { 数据1，数据2 ,数据3，数据4  };int arr4[][3] = { 1,2,3,4,5,6 };system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p></blockquote><h4 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="5.3.2 二维数组数组名"></a>5.3.2 二维数组数组名</h4><ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//二维数组数组名int arr[2][3] ={{1,2,3},{4,5,6}};cout &lt;&lt; "二维数组大小： " &lt;&lt; sizeof(arr) &lt;&lt; endl;cout &lt;&lt; "二维数组一行大小： " &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;cout &lt;&lt; "二维数组元素大小： " &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl;cout &lt;&lt; "二维数组行数： " &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;cout &lt;&lt; "二维数组列数： " &lt;&lt; sizeof(arr[0]) / sizeof(arr[0][0]) &lt;&lt; endl;//地址cout &lt;&lt; "二维数组首地址：" &lt;&lt; arr &lt;&lt; endl;cout &lt;&lt; "二维数组第一行地址：" &lt;&lt; arr[0] &lt;&lt; endl;cout &lt;&lt; "二维数组第二行地址：" &lt;&lt; arr[1] &lt;&lt; endl;cout &lt;&lt; "二维数组第一个元素地址：" &lt;&lt; &amp;arr[0][0] &lt;&lt; endl;cout &lt;&lt; "二维数组第二个元素地址：" &lt;&lt; &amp;arr[0][1] &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：二维数组名就是这个数组的首地址</p></blockquote><blockquote><p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p></blockquote><h4 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p><p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p><table><thead><tr><th></th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr><td>张三</td><td>100</td><td>100</td><td>100</td></tr><tr><td>李四</td><td>90</td><td>50</td><td>100</td></tr><tr><td>王五</td><td>60</td><td>70</td><td>80</td></tr></tbody></table><p><strong>参考答案：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int scores[3][3] ={{100,100,100},{90,50,100},{60,70,80},};string names[3] = { "张三","李四","王五" };for (int i = 0; i &lt; 3; i++){int sum = 0;for (int j = 0; j &lt; 3; j++){sum += scores[i][j];}cout &lt;&lt; names[i] &lt;&lt; "同学总成绩为： " &lt;&lt; sum &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-程序流程结构</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/</url>
      
        <content type="html"><![CDATA[<p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p><ul><li>顺序结构：程序按顺序执行，不发生跳转</li><li>选择结构：依据条件是否满足，有选择的执行相应功能</li><li>循环结构：依据条件是否满足，循环多次执行某段代码</li></ul><h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p><p>if语句的三种形式</p><ul><li><p>单行格式if语句</p></li><li><p>多行格式if语句</p></li><li><p>多条件的if语句</p></li></ul><ol><li><p>单行格式if语句：<code>if(条件){ 条件满足执行的语句 }</code></p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/clip_image002.png" alt="img"></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//选择结构-单行if语句//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印int score = 0;cout &lt;&lt; "请输入一个分数：" &lt;&lt; endl;cin &gt;&gt; score;cout &lt;&lt; "您输入的分数为： " &lt;&lt; score &lt;&lt; endl;//if语句//注意事项，在if判断语句后面，不要加分号if (score &gt; 600){cout &lt;&lt; "我考上了一本大学！！！" &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>注意：if条件表达式后不要加分号</p></blockquote><ol start="2"><li>多行格式if语句：<code>if(条件){ 条件满足执行的语句 }else{ 条件不满足执行的语句 };</code></li></ol><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/clip_image002-1541662519170.png" alt="img"></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int score = 0;cout &lt;&lt; "请输入考试分数：" &lt;&lt; endl;cin &gt;&gt; score;if (score &gt; 600){cout &lt;&lt; "我考上了一本大学" &lt;&lt; endl;}else{cout &lt;&lt; "我未考上一本大学" &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>多条件的if语句：<code>if(条件1){ 条件1满足执行的语句 }else if(条件2){条件2满足执行的语句}... else{ 都不满足执行的语句}</code></li></ol><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/clip_image002-1541662566808.png" alt="img"></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int score = 0;cout &lt;&lt; "请输入考试分数：" &lt;&lt; endl;cin &gt;&gt; score;if (score &gt; 600){cout &lt;&lt; "我考上了一本大学" &lt;&lt; endl;}else if (score &gt; 500){cout &lt;&lt; "我考上了二本大学" &lt;&lt; endl;}else if (score &gt; 400){cout &lt;&lt; "我考上了三本大学" &lt;&lt; endl;}else{cout &lt;&lt; "我未考上本科" &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p><p>案例需求：</p><ul><li>提示用户输入一个高考考试分数，根据分数做如下判断</li><li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li><li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() {int score = 0;cout &lt;&lt; "请输入考试分数：" &lt;&lt; endl;cin &gt;&gt; score;if (score &gt; 600){cout &lt;&lt; "我考上了一本大学" &lt;&lt; endl;if (score &gt; 700){cout &lt;&lt; "我考上了北大" &lt;&lt; endl;}else if (score &gt; 650){cout &lt;&lt; "我考上了清华" &lt;&lt; endl;}else{cout &lt;&lt; "我考上了人大" &lt;&lt; endl;}}else if (score &gt; 500){cout &lt;&lt; "我考上了二本大学" &lt;&lt; endl;}else if (score &gt; 400){cout &lt;&lt; "我考上了三本大学" &lt;&lt; endl;}else{cout &lt;&lt; "我未考上本科" &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例：</strong> 三只小猪称体重</p><p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/%E4%B8%89%E5%8F%AA%E5%B0%8F%E7%8C%AA.jpg" alt="三只小猪"></p><h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p><p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p><p><strong>解释：</strong></p><p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p><p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int a = 10;int b = 20;int c = 0;c = a &gt; b ? a : b;cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;//C++中三目运算符返回的是变量,可以继续赋值(a &gt; b ? a : b) = 100;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p></blockquote><h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p><p><strong>语法：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">switch(表达式){case 结果1：执行语句;break;case 结果2：执行语句;break;...default:执行语句;break;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//请给电影评分 //10 ~ 9   经典   // 8 ~ 7   非常好// 6 ~ 5   一般// 5分以下 烂片int score = 0;cout &lt;&lt; "请给电影打分" &lt;&lt; endl;cin &gt;&gt; score;switch (score){case 10:case 9:cout &lt;&lt; "经典" &lt;&lt; endl;break;case 8:cout &lt;&lt; "非常好" &lt;&lt; endl;break;case 7:case 6:cout &lt;&lt; "一般" &lt;&lt; endl;break;default:cout &lt;&lt; "烂片" &lt;&lt; endl;break;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意1：switch语句中表达式类型只能是整型或者字符型</p></blockquote><blockquote><p>注意2：case里如果没有break，那么程序会一直向下执行</p></blockquote><blockquote><p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p></blockquote><h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> while(循环条件){ 循环语句 }</code></p><p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/clip_image002-1541668640382.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int num = 0;while (num &lt; 10){cout &lt;&lt; "num = " &lt;&lt; num &lt;&lt; endl;num++;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p></blockquote><p><strong>while循环练习案例：</strong>==猜数字==</p><p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/%E7%8C%9C%E6%95%B0%E5%AD%97.jpg" alt="猜数字"></p><h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong> <code>do{ 循环语句 } while(循环条件);</code></p><p><strong>注意：</strong>与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/clip_image002-1541671163478.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int num = 0;do{cout &lt;&lt; num &lt;&lt; endl;num++;} while (num &lt; 10);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p></blockquote><p><strong>练习案例：水仙花数</strong></p><p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p><p>例如：1^3 + 5^3+ 3^3 = 153</p><p>请利用do…while语句，求出所有3位数中的水仙花数</p><h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> for(起始表达式;条件表达式;末尾循环体) { 循环语句; }</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {for (int i = 0; i &lt; 10; i++){cout &lt;&lt; i &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>详解：</strong></p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/1541673704101.png" alt="1541673704101"></p><blockquote><p>注意：for循环中的表达式，要用分号进行分隔</p></blockquote><blockquote><p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p></blockquote><p><strong>练习案例：敲桌子</strong></p><p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/timg.gif" alt="timg"></p><h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p><p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/1541676003486.png" alt="1541676003486"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//外层循环执行1次，内层循环执行1轮for (int i = 0; i &lt; 10; i++){for (int j = 0; j &lt; 10; j++){cout &lt;&lt; "*" &lt;&lt; " ";}cout &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例：</strong>乘法口诀表</p><p>案例描述：利用嵌套循环，实现九九乘法表</p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/0006018857256120_b.jpg" alt="0006018857256120_b"></p><h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p><p>break使用的时机：</p><ul><li>出现在switch条件语句中，作用是终止case并跳出switch</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li>出现在嵌套循环中，跳出最近的内层循环语句</li></ul><p><strong>示例1：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//1、在switch 语句中使用breakcout &lt;&lt; "请选择您挑战副本的难度：" &lt;&lt; endl;cout &lt;&lt; "1、普通" &lt;&lt; endl;cout &lt;&lt; "2、中等" &lt;&lt; endl;cout &lt;&lt; "3、困难" &lt;&lt; endl;int num = 0;cin &gt;&gt; num;switch (num){case 1:cout &lt;&lt; "您选择的是普通难度" &lt;&lt; endl;break;case 2:cout &lt;&lt; "您选择的是中等难度" &lt;&lt; endl;break;case 3:cout &lt;&lt; "您选择的是困难难度" &lt;&lt; endl;break;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//2、在循环语句中用breakfor (int i = 0; i &lt; 10; i++){if (i == 5){break; //跳出循环语句}cout &lt;&lt; i &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例3：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//在嵌套循环语句中使用break，退出内层循环for (int i = 0; i &lt; 10; i++){for (int j = 0; j &lt; 10; j++){if (j == 5){break;}cout &lt;&lt; "*" &lt;&lt; " ";}cout &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {for (int i = 0; i &lt; 100; i++){if (i % 2 == 0){continue;}cout &lt;&lt; i &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：continue并没有使整个循环终止，而break会跳出循环</p></blockquote><h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p><p><strong>语法：</strong> <code>goto 标记;</code></p><p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {cout &lt;&lt; "1" &lt;&lt; endl;goto FLAG;cout &lt;&lt; "2" &lt;&lt; endl;cout &lt;&lt; "3" &lt;&lt; endl;cout &lt;&lt; "4" &lt;&lt; endl;FLAG:cout &lt;&lt; "5" &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-运算符</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/3-yun-suan-fu/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/3-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<p><strong>作用：</strong>用于执行代码的运算</p><p>本章我们主要讲解以下几类运算符：</p><table><thead><tr><th><strong>运算符类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table><h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p><p>算术运算符包括以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10 * 5</td><td>50</td></tr><tr><td>/</td><td>除</td><td>10 / 5</td><td>2</td></tr><tr><td>%</td><td>取模(取余)</td><td>10 % 3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a=2; b=++a;</td><td>a=3; b=3;</td></tr><tr><td>++</td><td>后置递增</td><td>a=2; b=a++;</td><td>a=3; b=2;</td></tr><tr><td>–</td><td>前置递减</td><td>a=2; b=–a;</td><td>a=1; b=1;</td></tr><tr><td>–</td><td>后置递减</td><td>a=2; b=a–;</td><td>a=1; b=2;</td></tr></tbody></table><p><strong>示例1：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//加减乘除int main() {int a1 = 10;int b1 = 3;cout &lt;&lt; a1 + b1 &lt;&lt; endl;cout &lt;&lt; a1 - b1 &lt;&lt; endl;cout &lt;&lt; a1 * b1 &lt;&lt; endl;cout &lt;&lt; a1 / b1 &lt;&lt; endl;  //两个整数相除结果依然是整数int a2 = 10;int b2 = 20;cout &lt;&lt; a2 / b2 &lt;&lt; endl; int a3 = 10;int b3 = 0;//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0//两个小数可以相除double d1 = 0.5;double d2 = 0.25;cout &lt;&lt; d1 / d2 &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：在除法运算中，除数不能为0</p></blockquote><p><strong>示例2：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//取模int main() {int a1 = 10;int b1 = 3;cout &lt;&lt; 10 % 3 &lt;&lt; endl;int a2 = 10;int b2 = 20;cout &lt;&lt; a2 % b2 &lt;&lt; endl;int a3 = 10;int b3 = 0;//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0//两个小数不可以取模double d1 = 3.14;double d2 = 1.1;//cout &lt;&lt; d1 % d2 &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：只有整型变量可以进行取模运算</p></blockquote><p><strong>示例3：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//递增int main() {//后置递增int a = 10;a++; //等价于a = a + 1cout &lt;&lt; a &lt;&lt; endl; // 11//前置递增int b = 10;++b;cout &lt;&lt; b &lt;&lt; endl; // 11//区别//前置递增先对变量进行++，再计算表达式int a2 = 10;int b2 = ++a2 * 10;cout &lt;&lt; b2 &lt;&lt; endl;//后置递增先计算表达式，后对变量进行++int a3 = 10;int b3 = a3++ * 10;cout &lt;&lt; b3 &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p></blockquote><h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p><p>赋值运算符包括以下几个符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=2; b=3;</td><td>a=2; b=3;</td></tr><tr><td>+=</td><td>加等于</td><td>a=0; a+=2;</td><td>a=2;</td></tr><tr><td>-=</td><td>减等于</td><td>a=5; a-=3;</td><td>a=2;</td></tr><tr><td>*=</td><td>乘等于</td><td>a=2; a*=2;</td><td>a=4;</td></tr><tr><td>/=</td><td>除等于</td><td>a=4; a/=2;</td><td>a=2;</td></tr><tr><td>%=</td><td>模等于</td><td>a=3; a%2;</td><td>a=1;</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//赋值运算符// =int a = 10;a = 100;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;// +=a = 10;a += 2; // a = a + 2;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;// -=a = 10;a -= 2; // a = a - 2cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;// *=a = 10;a *= 2; // a = a * 2cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;// /=a = 10;a /= 2;  // a = a / 2;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;// %=a = 10;a %= 2;  // a = a % 2;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p><p>比较运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4 == 3</td><td>0</td></tr><tr><td>!=</td><td>不等于</td><td>4 != 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4 &lt;= 3</td><td>0</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4 &gt;= 1</td><td>1</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int a = 10;int b = 20;cout &lt;&lt; (a == b) &lt;&lt; endl; // 0 cout &lt;&lt; (a != b) &lt;&lt; endl; // 1cout &lt;&lt; (a &gt; b) &lt;&lt; endl; // 0cout &lt;&lt; (a &lt; b) &lt;&lt; endl; // 1cout &lt;&lt; (a &gt;= b) &lt;&lt; endl; // 0cout &lt;&lt; (a &lt;= b) &lt;&lt; endl; // 1system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== </p></blockquote><h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p><p>逻辑运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真；  如果a为真，则!a为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>如果a和b都为真，则结果为真，否则为假。</td></tr><tr><td>||</td><td>或</td><td>a || b</td><td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td></tr></tbody></table><p><strong>示例1：</strong>逻辑非</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//逻辑运算符  --- 非int main() {int a = 10;cout &lt;&lt; !a &lt;&lt; endl; // 0cout &lt;&lt; !!a &lt;&lt; endl; // 1system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 真变假，假变真</p></blockquote><p><strong>示例2：</strong>逻辑与</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//逻辑运算符  --- 与int main() {int a = 10;int b = 10;cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 1a = 10;b = 0;cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0 a = 0;b = 0;cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p></blockquote><p><strong>示例3：</strong>逻辑或</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//逻辑运算符  --- 或int main() {int a = 10;int b = 10;cout &lt;&lt; (a || b) &lt;&lt; endl;// 1a = 10;b = 0;cout &lt;&lt; (a || b) &lt;&lt; endl;// 1 a = 0;b = 0;cout &lt;&lt; (a || b) &lt;&lt; endl;// 0system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>逻辑==或==运算符总结： ==同假为假，其余为真==</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-数据类型</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/2-shu-ju-lei-xing/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/2-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long(长长整形)</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p><p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {cout &lt;&lt; "short 类型所占内存空间为： " &lt;&lt; sizeof(short) &lt;&lt; endl;cout &lt;&lt; "int 类型所占内存空间为： " &lt;&lt; sizeof(int) &lt;&lt; endl;cout &lt;&lt; "long 类型所占内存空间为： " &lt;&lt; sizeof(long) &lt;&lt; endl;cout &lt;&lt; "long long 类型所占内存空间为： " &lt;&lt; sizeof(long long) &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p></blockquote><h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p><p>浮点型变量分为两种：</p><ol><li>单精度float </li><li>双精度double</li></ol><p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15～16位有效数字</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {float f1 = 3.14f;double d1 = 3.14;cout &lt;&lt; f1 &lt;&lt; endl;cout &lt;&lt; d1&lt;&lt; endl;cout &lt;&lt; "float  sizeof = " &lt;&lt; sizeof(f1) &lt;&lt; endl;cout &lt;&lt; "double sizeof = " &lt;&lt; sizeof(d1) &lt;&lt; endl;//科学计数法float f2 = 3e2; // 3 * 10 ^ 2 cout &lt;&lt; "f2 = " &lt;&lt; f2 &lt;&lt; endl;float f3 = 3e-2;  // 3 * 0.1 ^ 2cout &lt;&lt; "f3 = " &lt;&lt; f3 &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong><code>char ch = 'a';</code></p><blockquote><p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p></blockquote><blockquote><p>注意2：单引号内只能有一个字符，不可以是字符串</p></blockquote><ul><li>C和C++中字符型变量只占用==1个字节==。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {char ch = 'a';cout &lt;&lt; ch &lt;&lt; endl;cout &lt;&lt; sizeof(char) &lt;&lt; endl;//ch = "abcde"; //错误，不可以用双引号//ch = 'abcde'; //错误，单引号内只能引用一个字符cout &lt;&lt; (int)ch &lt;&lt; endl;  //查看字符a对应的ASCII码ch = 97; //可以直接用ASCII给字符型变量赋值cout &lt;&lt; ch &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ASCII码表格：</p><table><thead><tr><th><strong>ASCII</strong>值</th><th><strong>控制字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>“</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>/</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>`</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><p>ASCII 码大致由以下<strong>两部分组</strong>成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li><li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li></ul><h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p><p>现阶段我们常用的转义字符有：<code> \n  \\  \t</code></p><table><thead><tr><th><strong>转义字符</strong></th><th><strong>含义</strong></th><th><strong>ASCII</strong>码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td><strong>\n</strong></td><td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td><td><strong>010</strong></td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td><strong>\t</strong></td><td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td><td><strong>009</strong></td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td><strong>\\</strong></td><td><strong>代表一个反斜线字符”"</strong></td><td><strong>092</strong></td></tr><tr><td>'</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>"</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>8进制转义字符，d范围0~7</td><td>3位8进制</td></tr><tr><td>\xhh</td><td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td><td>3位16进制</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {cout &lt;&lt; "\\" &lt;&lt; endl;cout &lt;&lt; "\tHello" &lt;&lt; endl;cout &lt;&lt; "\n" &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p><p><strong>两种风格</strong></p><ol><li><p><strong>C风格字符串</strong>： <code>char 变量名[] = "字符串值"</code></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {char str1[] = "hello world";cout &lt;&lt; str1 &lt;&lt; endl;    system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>注意：C风格的字符串要用双引号括起来</p></blockquote><ol><li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = "字符串值"</code></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {string str = "hello world";cout &lt;&lt; str &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p></blockquote><h3 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p><p>bool类型只有两个值：</p><ul><li>true  — 真（本质是1）</li><li>false — 假（本质是0）</li></ul><p><strong>bool类型占==1个字节==大小</strong></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {bool flag = true;cout &lt;&lt; flag &lt;&lt; endl; // 1flag = false;cout &lt;&lt; flag &lt;&lt; endl; // 0cout &lt;&lt; "size of bool = " &lt;&lt; sizeof(bool) &lt;&lt; endl; //1system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p><p><strong>关键字：</strong>cin</p><p><strong>语法：</strong> <code>cin &gt;&gt; 变量 </code></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main(){//整型输入int a = 0;cout &lt;&lt; "请输入整型变量：" &lt;&lt; endl;cin &gt;&gt; a;cout &lt;&lt; a &lt;&lt; endl;//浮点型输入double d = 0;cout &lt;&lt; "请输入浮点型变量：" &lt;&lt; endl;cin &gt;&gt; d;cout &lt;&lt; d &lt;&lt; endl;//字符型输入char ch = 0;cout &lt;&lt; "请输入字符型变量：" &lt;&lt; endl;cin &gt;&gt; ch;cout &lt;&lt; ch &lt;&lt; endl;//字符串型输入string str;cout &lt;&lt; "请输入字符串型变量：" &lt;&lt; endl;cin &gt;&gt; str;cout &lt;&lt; str &lt;&lt; endl;//布尔类型输入bool flag = true;cout &lt;&lt; "请输入布尔型变量：" &lt;&lt; endl;cin &gt;&gt; flag;cout &lt;&lt; flag &lt;&lt; endl;system("pause");return EXIT_SUCCESS;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-C++初识</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/1-c-chu-shi/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/1-c-chu-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1 第一个C++程序"></a>1.1 第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p><ul><li>创建项目</li><li>创建文件</li><li>编写代码</li><li>运行程序</li></ul><h4 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h4><p>​Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p><p><img src="/2023/03/03/c-ji-chu-ru-men/1-c-chu-shi/1541383178746.png" alt="1541383178746"></p><p><img src="/2023/03/03/c-ji-chu-ru-men/1-c-chu-shi/1541384366413.png" alt="1541384366413"></p><h4 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p><p><img src="/2023/03/03/c-ji-chu-ru-men/1-c-chu-shi/1541383817248.png" alt="1541383817248"></p><p>给C++文件起个名称，然后点击添加即可。</p><p><img src="/2023/03/03/c-ji-chu-ru-men/1-c-chu-shi/1541384140042.png" alt="1541384140042"></p><h4 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;int main() {cout &lt;&lt; "Hello world" &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-4-运行程序"><a href="#1-1-4-运行程序" class="headerlink" title="1.1.4 运行程序"></a>1.1.4 运行程序</h4><p><img src="/2023/03/03/c-ji-chu-ru-men/1-c-chu-shi/1541384818688.png" alt="1541384818688"></p><h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p><p><strong>两种格式</strong></p><ol><li><strong>单行注释</strong>：<code>// 描述信息</code> <ul><li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li></ul></li><li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul><li>通常放在一段代码的上方，==对该段代码做整体说明==</li></ul></li></ol><blockquote><p>提示：编译器在编译代码时，会忽略注释的内容</p></blockquote><h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p><p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main() {//变量的定义//语法：数据类型  变量名 = 初始值int a = 10;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p></blockquote><h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p><p>C++定义常量两种方式</p><ol><li><p><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code></p><ul><li>==通常在文件上方定义==，表示一个常量</li></ul></li><li><p><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code></p><ul><li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li></ul></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//1、宏常量#define day 7int main() {cout &lt;&lt; "一周里总共有 " &lt;&lt; day &lt;&lt; " 天" &lt;&lt; endl;//day = 8;  //报错，宏常量不可以修改//2、const修饰变量const int month = 12;cout &lt;&lt; "一年里总共有 " &lt;&lt; month &lt;&lt; " 个月份" &lt;&lt; endl;//month = 24; //报错，常量是不可以修改的system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量时候，不要用关键字</strong></li></ul><p>C++关键字如下：</p><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p><h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程环境搭建教程</title>
      <link href="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/"/>
      <url>/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<p>环境搭建步骤：</p><ul><li>下载软件</li><li>安装软件</li><li>运行软件</li></ul><h2 id="1-下载软件"><a href="#1-下载软件" class="headerlink" title="1 下载软件"></a>1 下载软件</h2><p>在百度搜索 visual studio，选择 如下图中的选项</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546837497293.png" alt="1546837497293"></p><p>进入Visual Studio 官网后，选择 下载Windows版，并选择Community 2017 社区版本进行下载</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546837598475.png" alt="1546837598475"></p><p>保存软件到电脑中</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546837638221.png" alt="1546837638221"></p><h2 id="2-安装软件"><a href="#2-安装软件" class="headerlink" title="2 安装软件"></a>2 安装软件</h2><p>双击运行下载的安装文件，弹出安装界面</p><p>选择 <strong>使用C++的桌面开发</strong> 这一选项，如需其他，自行勾选。</p><p>点击安装按钮</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546837796703.png" alt="1546837796703"></p><p>开始安装</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546837957327.png" alt="1546837957327"></p><p>安装时间会依据网速、电脑设备等因素会不固定，因此可以在此期间刷个微博、抖音啥的。。。</p><p>安装成功后提示重启，点击重启完成剩余配置</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546838612922.png" alt="1546838612922"></p><h2 id="3-运行软件"><a href="#3-运行软件" class="headerlink" title="3 运行软件"></a>3 运行软件</h2><p>在开始菜单找到Visual Studio 2017 并且点击运行</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546838825077.png" alt="1546838825077"></p><p>弹出初始界面</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546838771730.png" alt="1546838771730"></p><p>点击 <strong>创建新项目</strong> 按钮 ，如果出现以下模板选项，证明安装成功，并可以创建C++项目！</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546838970191.png" alt="1546838970191"></p><p>至此，C++的开发环境搭建完毕！</p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
