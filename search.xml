<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>5-复杂链表的赋值</title>
      <link href="/2023/03/05/li-kou-shua-ti/5-fu-za-lian-biao-de-fu-zhi/"/>
      <url>/2023/03/05/li-kou-shua-ti/5-fu-za-lian-biao-de-fu-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h1><p>请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。</p><p><img src="/2023/03/05/li-kou-shua-ti/5-fu-za-lian-biao-de-fu-zhi/copy.png"></p><p>输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</p><p>输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</p><h1 id="2-C"><a href="#2-C" class="headerlink" title="2.C++"></a>2.C++</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">/*// Definition for a Node.class Node {public:    int val;    Node* next;    Node* random;        Node(int _val) {        val = _val;        next = NULL;        random = NULL;    }};*/class Solution {public:    Node* copyRandomList(Node* head)     {        if (head == nullptr) {            return nullptr;        }        //将拷贝节点放到原节点后面，例如1-&gt;2-&gt;3这样的链表就变成了这样1-&gt;1'-&gt;2-&gt;2'-&gt;3-&gt;3'        for (Node* node = head; node != nullptr; node = node-&gt;next-&gt;next) {            Node* nodeNew = new Node(node-&gt;val);            nodeNew-&gt;next = node-&gt;next;            node-&gt;next = nodeNew;        }        //把拷贝节点的random指针安排上        for (Node* node = head; node != nullptr; node = node-&gt;next-&gt;next) {            Node* nodeNew = node-&gt;next;            nodeNew-&gt;random = (node-&gt;random != nullptr) ? node-&gt;random-&gt;next : nullptr;        }        //分离拷贝节点和原节点，变成1-&gt;2-&gt;3和1'-&gt;2'-&gt;3'两个链表，后者就是答案        Node* headNew = head-&gt;next;        for (Node* node = head; node != nullptr; node = node-&gt;next) {            Node* nodeNew = node-&gt;next;            node-&gt;next = node-&gt;next-&gt;next;            nodeNew-&gt;next = (nodeNew-&gt;next != nullptr) ? nodeNew-&gt;next-&gt;next : nullptr;        }        return headNew;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-反转链表</title>
      <link href="/2023/03/05/li-kou-shua-ti/4-fan-zhuan-lian-biao/"/>
      <url>/2023/03/05/li-kou-shua-ti/4-fan-zhuan-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h1><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点</p><h1 id="2-C"><a href="#2-C" class="headerlink" title="2. C++"></a>2. C++</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */class Solution {public:    ListNode* reverseList(ListNode* head)     {        if (head == NULL || head-&gt;next == NULL)        {            return head;        }        ListNode* pre = NULL;        ListNode* nex = NULL;        while(head != NULL)        {            nex = head-&gt;next;            head-&gt;next = pre;             pre = head;            head = nex;        }        return pre;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-python"><a href="#3-python" class="headerlink" title="3. python"></a>3. python</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode(object):</span><span class="token comment">#     def __init__(self, x):</span><span class="token comment">#         self.val = x</span><span class="token comment">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> head        pre <span class="token operator">=</span> <span class="token boolean">None</span>        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            nex <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre            pre <span class="token operator">=</span> cur            cur <span class="token operator">=</span> nex        <span class="token keyword">return</span> pre<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-从尾到头打印链表</title>
      <link href="/2023/03/05/li-kou-shua-ti/3-cong-wei-dao-tou-da-yin-lian-biao/"/>
      <url>/2023/03/05/li-kou-shua-ti/3-cong-wei-dao-tou-da-yin-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h1><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><h1 id="2-C"><a href="#2-C" class="headerlink" title="2. C++"></a>2. C++</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */class Solution {public:    vector&lt;int&gt; reversePrint(ListNode* head)     {        stack&lt;int&gt; st;        vector&lt;int&gt; ve;        while(head != NULL)        {            st.push(head-&gt;val);            head = head-&gt;next;        }        while(!st.empty())        {            ve.push_back(st.top());            st.pop();        }        return ve;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-python"><a href="#3-python" class="headerlink" title="3. python"></a>3. python</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode(object):</span><span class="token comment">#     def __init__(self, x):</span><span class="token comment">#         self.val = x</span><span class="token comment">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: List[int]        """</span>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>        li2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            li2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># return li[::-1]</span>        <span class="token keyword">return</span> li2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-栈最小min函数</title>
      <link href="/2023/03/04/li-kou-shua-ti/2-zhan-zui-xiao-min-han-shu/"/>
      <url>/2023/03/04/li-kou-shua-ti/2-zhan-zui-xiao-min-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p><h5 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h5><p>要想只调用一次函数就得到最小元素，那么最小元素必须是栈顶元素。要达到这个目的，只能是在元素入栈时就比较之后再存放，将最小的较小的元素放在栈顶(注意：这里说的是较小，而不是最小)。对于一个栈来说，随着入栈元素的增加，不一定能将最小的元素放在栈顶</p><p>所以我们需要定义两个栈，栈1正常入栈出栈，栈2只存放最小的元素，其它元素不存放，为了达到这个目的，我们只需将每一次要入栈的元素与栈2的栈顶元素进行比较，将较小的入栈即可(因为每次都要入栈较小的，所以可能栈2中的元素都是相同的，但是能保证是最小的)</p><p><img src="/2023/03/04/li-kou-shua-ti/2-zhan-zui-xiao-min-han-shu/min.PNG"></p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class MinStack {    stack&lt;int&gt; st;    stack&lt;int&gt; minst;public:    /** initialize your data structure here. */    MinStack()     {        while(!st.empty())        {            st.pop();        }        while(!minst.empty())        {            minst.pop();        }        minst.push(INT_MAX);    }        void push(int x)     {        st.push(x);        int minval = std::min(minst.top(),x);        minst.push(minval);    }        void pop() {        st.pop();        minst.pop();    }        int top()     {        return st.top();    }        int min()     {        return minst.top();    }};/** * Your MinStack object will be instantiated and called as such: * MinStack* obj = new MinStack(); * obj-&gt;push(x); * obj-&gt;pop(); * int param_3 = obj-&gt;top(); * int param_4 = obj-&gt;min(); */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-两栈实现队列</title>
      <link href="/2023/03/04/li-kou-shua-ti/1-liang-zhan-shi-xian-dui-lie/"/>
      <url>/2023/03/04/li-kou-shua-ti/1-liang-zhan-shi-xian-dui-lie/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p><h5 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h5><p>元素永远保存在<code>stack1（主栈中</code>），<code>stack2（辅助栈）</code>只是作为一个中间容器。</p><p><img src="/2023/03/04/li-kou-shua-ti/1-liang-zhan-shi-xian-dui-lie/%E8%A7%A3%E6%B3%95%E4%B8%80.png"></p><h5 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h5><p><code>stack1</code>仍然是主栈，插入操作直接进<code>stack1</code>即可，而出队操作时，可以先判断<code>stack2</code>是否是空的，非空则直接出栈一个元素即是队列的对头元素，若是<code>stack2</code>空，则将<code>stack1</code>的元素都移到<code>stack2</code>，刚好又逆序，符合出队的顺序了。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class CQueue {public:    stack&lt;int&gt; s1;    stack&lt;int&gt; s2;    CQueue()     {    }        void appendTail(int value)     {        s1.push(value);    }        int deleteHead()     {        int ret;        if (s2.empty())        {            if (s1.empty())            {                return -1;            }            while(!s1.empty()){                s2.push(s1.top());                s1.pop();            }        }        ret = s2.top();        s2.pop();        return ret;    }};/** * Your CQueue object will be instantiated and called as such: * CQueue* obj = new CQueue(); * obj-&gt;appendTail(value); * int param_2 = obj-&gt;deleteHead(); */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-机房预约系统</title>
      <link href="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/"/>
      <url>/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="1、机房预约系统需求"><a href="#1、机房预约系统需求" class="headerlink" title="1、机房预约系统需求"></a>1、机房预约系统需求</h2><h3 id="1-1-系统简介"><a href="#1-1-系统简介" class="headerlink" title="1.1 系统简介"></a>1.1 系统简介</h3><ul><li>学校现有几个规格不同的机房，由于使用时经常出现”撞车”现象,现开发一套机房预约系统，解决这一问题。</li></ul><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548682783885.png"></p><h3 id="1-2-身份简介"><a href="#1-2-身份简介" class="headerlink" title="1.2 身份简介"></a>1.2 身份简介</h3><p>分别有三种身份使用该程序</p><ul><li><strong>学生代表</strong>：申请使用机房</li><li><strong>教师</strong>：审核学生的预约申请</li><li><strong>管理员</strong>：给学生、教师创建账号</li></ul><h3 id="1-3-机房简介"><a href="#1-3-机房简介" class="headerlink" title="1.3 机房简介"></a>1.3 机房简介</h3><p>机房总共有3间</p><ul><li>1号机房   — 最大容量20人</li><li>2号机房   — 最多容量50人</li><li>3号机房   — 最多容量100人</li></ul><h3 id="1-4-申请简介"><a href="#1-4-申请简介" class="headerlink" title="1.4 申请简介"></a>1.4 申请简介</h3><ul><li>申请的订单每周由管理员负责清空。</li><li>学生可以预约未来一周内的机房使用，预约的日期为周一至周五，预约时需要选择预约时段（上午、下午）</li><li>教师来审核预约，依据实际情况审核预约通过或者不通过</li></ul><h3 id="1-5-系统具体需求"><a href="#1-5-系统具体需求" class="headerlink" title="1.5 系统具体需求"></a>1.5 系统具体需求</h3><ul><li>首先进入登录界面，可选登录身份有：<ul><li>学生代表</li><li>老师</li><li>管理员</li><li>退出</li></ul></li><li>每个身份都需要进行验证后，进入子菜单<ul><li>学生需要输入 ：学号、姓名、登录密码</li><li>老师需要输入：职工号、姓名、登录密码</li><li>管理员需要输入：管理员姓名、登录密码</li></ul></li><li>学生具体功能<ul><li>申请预约    —   预约机房</li><li>查看自身的预约    —  查看自己的预约状态</li><li>查看所有预约   —   查看全部预约信息以及预约状态</li><li>取消预约    —   取消自身的预约，预约成功或审核中的预约均可取消</li><li>注销登录    —   退出登录</li></ul></li><li>教师具体功能<ul><li>查看所有预约   —   查看全部预约信息以及预约状态</li><li>审核预约    —   对学生的预约进行审核</li><li>注销登录    —   退出登录</li></ul></li><li>管理员具体功能<ul><li>添加账号    —   添加学生或教师的账号，需要检测学生编号或教师职工号是否重复</li><li>查看账号    —   可以选择查看学生或教师的全部信息</li><li>查看机房    —   查看所有机房的信息</li><li>清空预约    —   清空所有预约记录</li><li>注销登录    —   退出登录</li></ul></li></ul><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548682206670.png"></p><h2 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h2><p>创建项目步骤如下：</p><ul><li>创建新项目</li><li>添加文件</li></ul><h3 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h3><ul><li>打开vs2017后，点击创建新项目，创建新的C++项目</li></ul><p>如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548682413343.png"></p><ul><li>填写项目名称以及选取项目路径，点击确定生成项目</li></ul><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548682522544.png"></p><h3 id="2-2-添加文件"><a href="#2-2-添加文件" class="headerlink" title="2.2 添加文件"></a>2.2 添加文件</h3><ul><li>右键源文件，进行添加文件操作</li></ul><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548682597721.png"></p><ul><li>填写文件名称，点击添加</li></ul><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548682679989.png"></p><ul><li>生成文件成功，效果如下图</li></ul><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548682733912.png"></p><h2 id="3、创建主菜单"><a href="#3、创建主菜单" class="headerlink" title="3、创建主菜单"></a>3、创建主菜单</h2><p><strong>功能描述：</strong></p><ul><li>设计主菜单，与用户进行交互</li></ul><h3 id="3-1-菜单实现"><a href="#3-1-菜单实现" class="headerlink" title="3.1 菜单实现"></a>3.1 菜单实现</h3><ul><li>在主函数main中添加菜单提示，代码如下：</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {cout &lt;&lt; "======================  欢迎来到传智播客机房预约系统  ====================="          &lt;&lt; endl;cout &lt;&lt; endl &lt;&lt; "请输入您的身份" &lt;&lt; endl;cout &lt;&lt; "\t\t -------------------------------\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          1.学生代表           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          2.老    师           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          3.管 理 员           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          0.退    出           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t -------------------------------\n";cout &lt;&lt; "输入您的选择: ";system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548557945611.png"></p><h3 id="3-2-搭建接口"><a href="#3-2-搭建接口" class="headerlink" title="3.2 搭建接口"></a>3.2 搭建接口</h3><ul><li>接受用户的选择，搭建接口</li><li>在main中添加代码</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int select = 0;while (true){cout &lt;&lt; "======================  欢迎来到传智播客机房预约系统  =====================" &lt;&lt; endl;cout &lt;&lt; endl &lt;&lt; "请输入您的身份" &lt;&lt; endl;cout &lt;&lt; "\t\t -------------------------------\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          1.学生代表           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          2.老    师           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          3.管 理 员           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t|          0.退    出           |\n";cout &lt;&lt; "\t\t|                               |\n";cout &lt;&lt; "\t\t -------------------------------\n";cout &lt;&lt; "输入您的选择: ";cin &gt;&gt; select; //接受用户选择switch (select){case 1:  //学生身份break;case 2:  //老师身份break;case 3:  //管理员身份break;case 0:  //退出系统break;default:             cout &lt;&lt; "输入有误，请重新选择！" &lt;&lt; endl;    system("pause");system("cls");break;}}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试，输入0、1、2、3会重新回到界面，输入其他提示输入有误，清屏后重新选择</p><p>效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548558694230.png"></p><p>至此，界面搭建完毕</p><h2 id="4、-退出功能实现"><a href="#4、-退出功能实现" class="headerlink" title="4、 退出功能实现"></a>4、 退出功能实现</h2><h3 id="4-1-退出功能实现"><a href="#4-1-退出功能实现" class="headerlink" title="4.1 退出功能实现"></a>4.1 退出功能实现</h3><p>在main函数分支 0 选项中，添加退出程序的代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">cout &lt;&lt; "欢迎下一次使用"&lt;&lt;endl;system("pause");return 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548558992754.png"></p><h3 id="4-2-测试退出功能"><a href="#4-2-测试退出功能" class="headerlink" title="4.2 测试退出功能"></a>4.2 测试退出功能</h3><p>运行程序，效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548559026436.png"></p><p>至此，退出程序功能实现</p><h2 id="5、-创建身份类"><a href="#5、-创建身份类" class="headerlink" title="5、 创建身份类"></a>5、 创建身份类</h2><h3 id="5-1-身份的基类"><a href="#5-1-身份的基类" class="headerlink" title="5.1 身份的基类"></a>5.1 身份的基类</h3><ul><li>在整个系统中，有三种身份，分别为：学生代表、老师以及管理员</li><li>三种身份有其共性也有其特性，因此我们可以将三种身份抽象出一个身份基类<strong>identity</strong></li><li>在头文件下创建Identity.h文件</li></ul><p>Identity.h中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;//身份抽象类class Identity{public://操作菜单virtual void operMenu() = 0;string m_Name; //用户名string m_Pwd;  //密码};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548573329273.png"></p><h3 id="5-2-学生类"><a href="#5-2-学生类" class="headerlink" title="5.2 学生类"></a>5.2 学生类</h3><h4 id="5-2-1-功能分析"><a href="#5-2-1-功能分析" class="headerlink" title="5.2.1 功能分析"></a>5.2.1 功能分析</h4><ul><li><p>学生类主要功能是可以通过类中成员函数，实现预约实验室操作</p></li><li><p>学生类中主要功能有：</p><ul><li>显示学生操作的菜单界面</li><li>申请预约</li><li>查看自身预约</li><li>查看所有预约</li><li>取消预约</li></ul></li></ul><h4 id="5-2-2-类的创建"><a href="#5-2-2-类的创建" class="headerlink" title="5.2.2 类的创建"></a>5.2.2 类的创建</h4><ul><li>在头文件以及源文件下创建 student.h 和 student.cpp文件</li></ul><p>student.h中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;#include "identity.h"//学生类class Student :public Identity{public://默认构造Student();//有参构造(学号、姓名、密码)Student(int id, string name, string pwd);//菜单界面virtual void operMenu(); //申请预约void applyOrder(); //查看我的预约void showMyOrder(); //查看所有预约void showAllOrder(); //取消预约void cancelOrder();//学生学号int m_Id;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>student.cpp中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "student.h"//默认构造Student::Student(){}//有参构造(学号、姓名、密码)Student::Student(int id, string name, string pwd){}//菜单界面void Student::operMenu(){}//申请预约void Student::applyOrder(){}//查看我的预约void Student::showMyOrder(){}//查看所有预约void Student::showAllOrder(){}//取消预约void Student::cancelOrder(){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-老师类"><a href="#5-3-老师类" class="headerlink" title="5.3 老师类"></a>5.3 老师类</h3><h4 id="5-3-1-功能分析"><a href="#5-3-1-功能分析" class="headerlink" title="5.3.1 功能分析"></a>5.3.1 功能分析</h4><ul><li><p>教师类主要功能是查看学生的预约，并进行审核</p></li><li><p>教师类中主要功能有：</p><ul><li><p>显示教师操作的菜单界面</p></li><li><p>查看所有预约</p></li><li><p>审核预约</p></li></ul></li></ul><h4 id="5-3-2-类的创建"><a href="#5-3-2-类的创建" class="headerlink" title="5.3.2 类的创建"></a>5.3.2 类的创建</h4><ul><li>在头文件以及源文件下创建 teacher.h 和 teacher.cpp文件</li></ul><p>teacher.h中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#define _CRT_SECURE_NO_WARNINGS#include&lt;iostream&gt;using namespace std;#include "identity.h"class Teacher :public Identity{public://默认构造Teacher();//有参构造 (职工编号，姓名，密码)Teacher(int empId, string name, string pwd);//菜单界面virtual void operMenu();//查看所有预约void showAllOrder(); //审核预约void validOrder(); int m_EmpId; //教师编号};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>teacher.cpp中添加如下代码:</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include"teacher.h"//默认构造Teacher::Teacher(){}//有参构造 (职工编号，姓名，密码)Teacher::Teacher(int empId, string name, string pwd){}//菜单界面void Teacher::operMenu(){}//查看所有预约void Teacher::showAllOrder(){}//审核预约void Teacher::validOrder(){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-管理员类"><a href="#5-4-管理员类" class="headerlink" title="5.4 管理员类"></a>5.4 管理员类</h3><h4 id="5-4-1-功能分析"><a href="#5-4-1-功能分析" class="headerlink" title="5.4.1 功能分析"></a>5.4.1 功能分析</h4><ul><li><p>管理员类主要功能是对学生和老师账户进行管理，查看机房信息以及清空预约记录</p></li><li><p>管理员类中主要功能有：</p><ul><li><p>显示管理员操作的菜单界面</p></li><li><p>添加账号</p></li><li><p>查看账号</p></li><li><p>查看机房信息</p></li><li><p>清空预约记录</p></li></ul></li></ul><h4 id="5-4-2-类的创建"><a href="#5-4-2-类的创建" class="headerlink" title="5.4.2 类的创建"></a>5.4.2 类的创建</h4><ul><li>在头文件以及源文件下创建 manager.h 和 manager.cpp文件</li></ul><p>manager.h中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;#include "identity.h"class Manager :public Identity{public://默认构造Manager();//有参构造  管理员姓名，密码Manager(string name, string pwd);//选择菜单virtual void operMenu();//添加账号  void addPerson();//查看账号void showPerson();//查看机房信息void showComputer();//清空预约记录void cleanFile();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>manager.cpp中添加如下代码:</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "manager.h"//默认构造Manager::Manager(){}//有参构造Manager::Manager(string name, string pwd){}//选择菜单void Manager::operMenu(){}//添加账号  void Manager::addPerson(){}//查看账号void Manager::showPerson(){}//查看机房信息void Manager::showComputer(){}//清空预约记录void Manager::cleanFile(){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，所有身份类创建完毕，效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548574390768.png"></p><h2 id="6、-登录模块"><a href="#6、-登录模块" class="headerlink" title="6、  登录模块"></a>6、  登录模块</h2><h3 id="6-1-全局文件添加"><a href="#6-1-全局文件添加" class="headerlink" title="6.1 全局文件添加"></a>6.1 全局文件添加</h3><p>功能描述：</p><ul><li>不同的身份可能会用到不同的文件操作，我们可以将所有的文件名定义到一个全局的文件中</li><li>在头文件中添加 <strong>globalFile.h</strong> 文件</li><li>并添加如下代码：</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once //管理员文件#define ADMIN_FILE     "admin.txt"//学生文件#define STUDENT_FILE   "student.txt"//教师文件#define TEACHER_FILE   "teacher.txt"//机房信息文件#define COMPUTER_FILE  "computerRoom.txt"//订单文件#define ORDER_FILE     "order.txt"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且在同级目录下，创建这几个文件</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548575650130.png"></p><h3 id="6-2-登录函数封装"><a href="#6-2-登录函数封装" class="headerlink" title="6.2  登录函数封装"></a>6.2  登录函数封装</h3><p>功能描述：</p><ul><li>根据用户的选择，进入不同的身份登录</li></ul><p>在预约系统的.cpp文件中添加全局函数 <code>void LoginIn(string fileName, int type)</code></p><p>参数：</p><ul><li>fileName  — 操作的文件名</li><li>type      —  登录的身份  （1代表学生、2代表老师、3代表管理员）</li></ul><p>LoginIn中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "globalFile.h"#include "identity.h"#include &lt;fstream&gt;#include &lt;string&gt;//登录功能void LoginIn(string fileName, int type){Identity * person = NULL;ifstream ifs;ifs.open(fileName, ios::in);//文件不存在情况if (!ifs.is_open()){cout &lt;&lt; "文件不存在" &lt;&lt; endl;ifs.close();return;}int id = 0;string name;string pwd;if (type == 1)//学生登录{cout &lt;&lt; "请输入你的学号" &lt;&lt; endl;cin &gt;&gt; id;}else if (type == 2) //教师登录{cout &lt;&lt; "请输入你的职工号" &lt;&lt; endl;cin &gt;&gt; id;}cout &lt;&lt; "请输入用户名：" &lt;&lt; endl;cin &gt;&gt; name;cout &lt;&lt; "请输入密码： " &lt;&lt; endl;cin &gt;&gt; pwd;if (type == 1){//学生登录验证}else if (type == 2){//教师登录验证}else if(type == 3){//管理员登录验证}cout &lt;&lt; "验证登录失败!" &lt;&lt; endl;system("pause");system("cls");return;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在main函数的不同分支中，填入不同的登录接口</li></ul><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548575945985.png"></p><h3 id="6-3-学生登录实现"><a href="#6-3-学生登录实现" class="headerlink" title="6.3 学生登录实现"></a>6.3 学生登录实现</h3><p>在student.txt文件中添加两条学生信息，用于测试</p><p>添加信息:   </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">1 张三 1232 李四 123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中：</p><ul><li>第一列  代表  <strong>学号</strong></li><li>第二列  代表  <strong>学生姓名</strong></li><li>第三列  代表  <strong>密码</strong></li></ul><p>效果图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548583693555.png"></p><p>在Login函数的学生分支中加入如下代码，验证学生身份</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生登录验证int fId;string fName;string fPwd;while (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd){if (id == fId &amp;&amp; name == fName &amp;&amp; pwd == fPwd){cout &lt;&lt; "学生验证登录成功!" &lt;&lt; endl;system("pause");system("cls");person = new Student(id, name, pwd);return;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加代码效果图</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548583915819.png"></p><p>测试：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548583950828.png"></p><h3 id="6-4-教师登录实现"><a href="#6-4-教师登录实现" class="headerlink" title="6.4 教师登录实现"></a>6.4 教师登录实现</h3><p>在teacher.txt文件中添加一条老师信息，用于测试</p><p>添加信息:   </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">1 老王 123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li>第一列  代表  <strong>教师职工编号</strong></li><li>第二列  代表  <strong>教师姓名</strong></li><li>第三列  代表  <strong>密码</strong></li></ul><p>效果图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548584030522.png"></p><p>在Login函数的教师分支中加入如下代码，验证教师身份</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//教师登录验证int fId;string fName;string fPwd;while (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd){if (id == fId &amp;&amp; name == fName &amp;&amp; pwd == fPwd){cout &lt;&lt; "教师验证登录成功!" &lt;&lt; endl;system("pause");system("cls");person = new Teacher(id, name, pwd);return;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加代码效果图</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548584158339.png"></p><p>测试：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548584177003.png"></p><h3 id="6-5-管理员登录实现"><a href="#6-5-管理员登录实现" class="headerlink" title="6.5 管理员登录实现"></a>6.5 管理员登录实现</h3><p>在admin.txt文件中添加一条管理员信息，由于我们只有一条管理员，因此本案例中没有添加管理员的功能</p><p>添加信息:   </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">admin 123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：<code>admin</code>代表管理员用户名，<code>123</code>代表管理员密码</p><p>效果图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548577855190.png"></p><p>在Login函数的管理员分支中加入如下代码，验证管理员身份</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//管理员登录验证string fName;string fPwd;while (ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd){if (name == fName &amp;&amp; pwd == fPwd){cout &lt;&lt; "验证登录成功!" &lt;&lt; endl;//登录成功后，按任意键进入管理员界面system("pause");system("cls");//创建管理员对象person = new Manager(name,pwd);return;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548588322712.png"></p><p>测试效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548583245072.png"></p><p>至此，所有身份的登录功能全部实现！</p><h2 id="7、-管理员模块"><a href="#7、-管理员模块" class="headerlink" title="7、 管理员模块"></a>7、 管理员模块</h2><h3 id="7-1-管理员登录和注销"><a href="#7-1-管理员登录和注销" class="headerlink" title="7.1  管理员登录和注销"></a>7.1  管理员登录和注销</h3><h4 id="7-1-1-构造函数"><a href="#7-1-1-构造函数" class="headerlink" title="7.1.1 构造函数"></a>7.1.1 构造函数</h4><ul><li>在Manager类的构造函数中，初始化管理员信息，代码如下：</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//有参构造Manager::Manager(string name, string pwd){this-&gt;m_Name = name;this-&gt;m_Pwd = pwd;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-1-2-管理员子菜单"><a href="#7-1-2-管理员子菜单" class="headerlink" title="7.1.2  管理员子菜单"></a>7.1.2  管理员子菜单</h4><ul><li>在机房预约系统.cpp中，当用户登录的是管理员，添加管理员菜单接口</li><li>将不同的分支提供出来<ul><li>添加账号</li><li>查看账号</li><li>查看机房</li><li>清空预约</li><li>注销登录</li></ul></li><li>实现注销功能</li></ul><p>添加全局函数 <code>void managerMenu(Identity * &amp;manager)</code>，代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//管理员菜单void managerMenu(Identity * &amp;manager){while (true){//管理员菜单manager-&gt;operMenu();Manager* man = (Manager*)manager;int select = 0;cin &gt;&gt; select;        if (select == 1)  //添加账号{cout &lt;&lt; "添加账号" &lt;&lt; endl;man-&gt;addPerson();}else if (select == 2) //查看账号{cout &lt;&lt; "查看账号" &lt;&lt; endl;man-&gt;showPerson(); }else if (select == 3) //查看机房{cout &lt;&lt; "查看机房" &lt;&lt; endl;man-&gt;showComputer();}else if (select == 4) //清空预约{cout &lt;&lt; "清空预约" &lt;&lt; endl;man-&gt;cleanFile();}else{delete manager;cout &lt;&lt; "注销成功" &lt;&lt; endl;system("pause");system("cls");return;}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-1-3-菜单功能实现"><a href="#7-1-3-菜单功能实现" class="headerlink" title="7.1.3 菜单功能实现"></a>7.1.3 菜单功能实现</h4><ul><li>在实现成员函数<code>void Manager::operMenu()</code> 代码如下：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//选择菜单void Manager::operMenu(){cout &lt;&lt; "欢迎管理员："&lt;&lt;this-&gt;m_Name &lt;&lt; "登录！" &lt;&lt; endl;cout &lt;&lt; "\t\t ---------------------------------\n";cout &lt;&lt; "\t\t|                                |\n";cout &lt;&lt; "\t\t|          1.添加账号            |\n";cout &lt;&lt; "\t\t|                                |\n";cout &lt;&lt; "\t\t|          2.查看账号            |\n";cout &lt;&lt; "\t\t|                                |\n";cout &lt;&lt; "\t\t|          3.查看机房            |\n";cout &lt;&lt; "\t\t|                                |\n";cout &lt;&lt; "\t\t|          4.清空预约            |\n";cout &lt;&lt; "\t\t|                                |\n";cout &lt;&lt; "\t\t|          0.注销登录            |\n";cout &lt;&lt; "\t\t|                                |\n";cout &lt;&lt; "\t\t ---------------------------------\n";cout &lt;&lt; "请选择您的操作： " &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-1-4-接口对接"><a href="#7-1-4-接口对接" class="headerlink" title="7.1.4 接口对接"></a>7.1.4 接口对接</h4><ul><li>管理员成功登录后，调用管理员子菜单界面</li><li>在管理员登录验证分支中，添加代码：</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//进入管理员子菜单managerMenu(person);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加效果如：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548589297779.png"></p><p>测试对接，效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548589344206.png"></p><p>登录成功</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548589328710.png"></p><p>注销登录：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548589416576.png"></p><p>至此，管理员身份可以成功登录以及注销</p><h3 id="7-2-添加账号"><a href="#7-2-添加账号" class="headerlink" title="7.2 添加账号"></a>7.2 添加账号</h3><p>功能描述：</p><ul><li>给学生或教师添加新的账号</li></ul><p>功能要求：</p><ul><li>添加时学生学号不能重复、教师职工号不能重复</li></ul><h4 id="7-2-1-添加功能实现"><a href="#7-2-1-添加功能实现" class="headerlink" title="7.2.1 添加功能实现"></a>7.2.1 添加功能实现</h4><p>在Manager的<strong>addPerson</strong>成员函数中，实现添加新账号功能，代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//添加账号  void Manager::addPerson(){cout &lt;&lt; "请输入添加账号的类型" &lt;&lt; endl;cout &lt;&lt; "1、添加学生" &lt;&lt; endl;cout &lt;&lt; "2、添加老师" &lt;&lt; endl;string fileName;string tip;ofstream ofs;int select = 0;cin &gt;&gt; select;if (select == 1){fileName = STUDENT_FILE;tip = "请输入学号： ";}else{fileName = TEACHER_FILE;tip = "请输入职工编号：";}ofs.open(fileName, ios::out | ios::app);int id;string name;string pwd;cout &lt;&lt;tip &lt;&lt; endl;cin &gt;&gt; id;cout &lt;&lt; "请输入姓名： " &lt;&lt; endl;cin &gt;&gt; name;cout &lt;&lt; "请输入密码： " &lt;&lt; endl;cin &gt;&gt; pwd;ofs &lt;&lt; id &lt;&lt; " " &lt;&lt; name &lt;&lt; " " &lt;&lt; pwd &lt;&lt; " " &lt;&lt; endl;cout &lt;&lt; "添加成功" &lt;&lt; endl;system("pause");system("cls");ofs.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试添加学生：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548641024216.png"></p><p>成功在学生文件中添加了一条信息</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548641141027.png"></p><p>测试添加教师：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548641195834.png"></p><p>成功在教师文件中添加了一条信息</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548641237513.png"></p><h4 id="7-2-2-去重操作"><a href="#7-2-2-去重操作" class="headerlink" title="7.2.2 去重操作"></a>7.2.2 去重操作</h4><p>功能描述：添加新账号时，如果是重复的学生编号，或是重复的教师职工编号，提示有误</p><h5 id="7-2-2-1-读取信息"><a href="#7-2-2-1-读取信息" class="headerlink" title="7.2.2.1 读取信息"></a>7.2.2.1 读取信息</h5><ul><li>要去除重复的账号，首先要先将学生和教师的账号信息获取到程序中，方可检测</li><li>在manager.h中，添加两个容器，用于存放学生和教师的信息</li><li>添加一个新的成员函数  <code>void initVector()</code> 初始化容器</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//初始化容器void initVector();//学生容器vector&lt;Student&gt; vStu;//教师容器vector&lt;Teacher&gt; vTea;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加位置如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548644354561.png"></p><p>在Manager的有参构造函数中，获取目前的学生和教师信息</p><p>代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void Manager::initVector(){//读取学生文件中信息ifstream ifs;ifs.open(STUDENT_FILE, ios::in);if (!ifs.is_open()){cout &lt;&lt; "文件读取失败" &lt;&lt; endl;return;}    vStu.clear();     vTea.clear();    Student s;while (ifs &gt;&gt; s.m_Id &amp;&amp; ifs &gt;&gt; s.m_Name &amp;&amp;  ifs &gt;&gt; s.m_Pwd){vStu.push_back(s);}cout &lt;&lt; "当前学生数量为： " &lt;&lt; vStu.size() &lt;&lt; endl;ifs.close(); //学生初始化//读取老师文件信息ifs.open(TEACHER_FILE, ios::in);Teacher t;while (ifs &gt;&gt; t.m_EmpId &amp;&amp; ifs &gt;&gt; t.m_Name &amp;&amp;  ifs &gt;&gt; t.m_Pwd){vTea.push_back(t);}cout &lt;&lt; "当前教师数量为： " &lt;&lt; vTea.size() &lt;&lt; endl;ifs.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在有参构造函数中，调用初始化容器函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//有参构造Manager::Manager(string name, string pwd){this-&gt;m_Name = name;this-&gt;m_Pwd = pwd;    //初始化容器this-&gt;initVector();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试，运行代码可以看到测试代码获取当前学生和教师数量</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548642488049.png"></p><h5 id="7-2-2-2-去重函数封装"><a href="#7-2-2-2-去重函数封装" class="headerlink" title="7.2.2.2 去重函数封装"></a>7.2.2.2 去重函数封装</h5><p>在manager.h文件中添加成员函数<code> bool checkRepeat(int id, int type);</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//检测重复 参数:(传入id，传入类型) 返回值：(true 代表有重复，false代表没有重复)bool checkRepeat(int id, int type);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在manager.cpp文件中实现成员函数  <code> bool checkRepeat(int id, int type);</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool Manager::checkRepeat(int id, int type){if (type == 1){for (vector&lt;Student&gt;::iterator it = vStu.begin(); it != vStu.end(); it++){if (id == it-&gt;m_Id){return true;}}}else{for (vector&lt;Teacher&gt;::iterator it = vTea.begin(); it != vTea.end(); it++){if (id == it-&gt;m_EmpId){return true;}}}return false;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-2-2-3-添加去重操作"><a href="#7-2-2-3-添加去重操作" class="headerlink" title="7.2.2.3 添加去重操作"></a>7.2.2.3 添加去重操作</h5><p>在添加学生编号或者教师职工号时，检测是否有重复，代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">string errorTip; //重复错误提示if (select == 1){fileName = STUDENT_FILE;tip = "请输入学号： ";errorTip = "学号重复，请重新输入";}else{fileName = TEACHER_FILE;tip = "请输入职工编号：";errorTip = "职工号重复，请重新输入";}ofs.open(fileName, ios::out | ios::app);int id;string name;string pwd;cout &lt;&lt;tip &lt;&lt; endl;while (true){cin &gt;&gt; id;bool ret = this-&gt;checkRepeat(id, 1);if (ret) //有重复{cout &lt;&lt; errorTip &lt;&lt; endl;}else{break;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码位置如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548643909979.png"></p><p>检测效果：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548644151974.png"></p><h5 id="7-2-2-4-bug解决"><a href="#7-2-2-4-bug解决" class="headerlink" title="7.2.2.4 bug解决"></a>7.2.2.4 bug解决</h5><p>bug描述：</p><ul><li>虽然可以检测重复的账号，但是刚添加的账号由于没有更新到容器中，因此不会做检测</li><li>导致刚加入的账号的学生号或者职工编号，再次添加时依然可以重复</li></ul><p>解决方案：</p><ul><li>在每次添加新账号时，重新初始化容器</li></ul><p>在添加完毕后，加入代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//初始化容器this-&gt;initVector();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>位置如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548644779578.png"></p><p>再次测试，刚加入的账号不会重复添加了！</p><h3 id="7-3-显示账号"><a href="#7-3-显示账号" class="headerlink" title="7.3  显示账号"></a>7.3  显示账号</h3><p>功能描述：显示学生信息或教师信息</p><h4 id="7-3-1-显示功能实现"><a href="#7-3-1-显示功能实现" class="headerlink" title="7.3.1 显示功能实现"></a>7.3.1 显示功能实现</h4><p>在Manager的<strong>showPerson</strong>成员函数中，实现显示账号功能，代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void printStudent(Student &amp; s){cout &lt;&lt; "学号： " &lt;&lt; s.m_Id &lt;&lt; " 姓名： " &lt;&lt; s.m_Name &lt;&lt; " 密码：" &lt;&lt; s.m_Pwd &lt;&lt; endl;}void printTeacher(Teacher &amp; t){cout &lt;&lt; "职工号： " &lt;&lt; t.m_EmpId &lt;&lt; " 姓名： " &lt;&lt; t.m_Name &lt;&lt; " 密码：" &lt;&lt; t.m_Pwd &lt;&lt; endl;}void Manager::showPerson(){cout &lt;&lt; "请选择查看内容：" &lt;&lt; endl;cout &lt;&lt; "1、查看所有学生" &lt;&lt; endl;cout &lt;&lt; "2、查看所有老师" &lt;&lt; endl;int select = 0;cin &gt;&gt; select;    if (select == 1){cout &lt;&lt; "所有学生信息如下： " &lt;&lt; endl;for_each(vStu.begin(), vStu.end(), printStudent);}else{cout &lt;&lt; "所有老师信息如下： " &lt;&lt; endl;for_each(vTea.begin(), vTea.end(), printTeacher);}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-3-2-测试"><a href="#7-3-2-测试" class="headerlink" title="7.3.2 测试"></a>7.3.2 测试</h4><p>测试查看学生效果</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548646791248.png"></p><p>测试查看教师效果</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548646833665.png"></p><p>至此，显示账号功能实现完毕</p><h3 id="7-4-查看机房"><a href="#7-4-查看机房" class="headerlink" title="7.4 查看机房"></a>7.4 查看机房</h3><h4 id="7-4-1-添加机房信息"><a href="#7-4-1-添加机房信息" class="headerlink" title="7.4.1 添加机房信息"></a>7.4.1 添加机房信息</h4><p>案例需求中，机房一共有三个，其中1号机房容量20台机器，2号50台，3号100台</p><p>我们可以将信息录入到computerRoom.txt中</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548647538570.png"></p><h4 id="7-4-2-机房类创建"><a href="#7-4-2-机房类创建" class="headerlink" title="7.4.2 机房类创建"></a>7.4.2 机房类创建</h4><p>在头文件下，创建新的文件 computerRoom.h</p><p>并添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;//机房类class ComputerRoom{public:int m_ComId; //机房id号int m_MaxNum; //机房最大容量};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-4-3-初始化机房信息"><a href="#7-4-3-初始化机房信息" class="headerlink" title="7.4.3 初始化机房信息"></a>7.4.3 初始化机房信息</h4><p>在Manager管理员类下，添加机房的容器,用于保存机房信息</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//机房容器vector&lt;ComputerRoom&gt; vCom;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在Manager有参构造函数中，追加如下代码，初始化机房信息</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//获取机房信息ifstream ifs;ifs.open(COMPUTER_FILE, ios::in);ComputerRoom c;while (ifs &gt;&gt; c.m_ComId &amp;&amp; ifs &gt;&gt; c.m_MaxNum){vCom.push_back(c);}cout &lt;&lt; "当前机房数量为： " &lt;&lt; vCom.size() &lt;&lt; endl;ifs.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>位置如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548647976462.png"></p><p>因为机房信息目前版本不会有所改动，如果后期有修改功能，最好封装到一个函数中，方便维护</p><h4 id="7-4-4-显示机房信息"><a href="#7-4-4-显示机房信息" class="headerlink" title="7.4.4 显示机房信息"></a>7.4.4 显示机房信息</h4><p>在Manager类的showComputer成员函数中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//查看机房信息void Manager::showComputer(){cout &lt;&lt; "机房信息如下： " &lt;&lt; endl;for (vector&lt;ComputerRoom&gt;::iterator it = vCom.begin(); it != vCom.end(); it++){cout &lt;&lt; "机房编号： " &lt;&lt; it-&gt;m_ComId &lt;&lt; " 机房最大容量： " &lt;&lt; it-&gt;m_MaxNum &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试显示机房信息功能：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548648276929.png"></p><h3 id="7-5-清空预约"><a href="#7-5-清空预约" class="headerlink" title="7.5 清空预约"></a>7.5 清空预约</h3><p>功能描述：</p><p>清空生成的<code>order.txt</code>预约文件</p><h4 id="7-5-1-清空功能实现"><a href="#7-5-1-清空功能实现" class="headerlink" title="7.5.1 清空功能实现"></a>7.5.1 清空功能实现</h4><p>在Manager的cleanFile成员函数中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//清空预约记录void Manager::cleanFile(){ofstream ofs(ORDER_FILE, ios::trunc);ofs.close();cout &lt;&lt; "清空成功！" &lt;&lt; endl;system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试清空，可以随意写入一些信息在order.txt中，然后调用cleanFile清空文件接口，查看是否清空干净</p><h2 id="8、-学生模块"><a href="#8、-学生模块" class="headerlink" title="8、 学生模块"></a>8、 学生模块</h2><h3 id="8-1-学生登录和注销"><a href="#8-1-学生登录和注销" class="headerlink" title="8.1 学生登录和注销"></a>8.1 学生登录和注销</h3><h4 id="8-1-1-构造函数"><a href="#8-1-1-构造函数" class="headerlink" title="8.1.1 构造函数"></a>8.1.1 构造函数</h4><ul><li>在Student类的构造函数中，初始化学生信息，代码如下：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//有参构造(学号、姓名、密码)Student::Student(int id, string name, string pwd){//初始化属性this-&gt;m_Id = id;this-&gt;m_Name = name;this-&gt;m_Pwd = pwd;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-1-2-管理员子菜单"><a href="#8-1-2-管理员子菜单" class="headerlink" title="8.1.2  管理员子菜单"></a>8.1.2  管理员子菜单</h4><ul><li>在机房预约系统.cpp中，当用户登录的是学生，添加学生菜单接口</li><li>将不同的分支提供出来<ul><li>申请预约</li><li>查看我的预约</li><li>查看所有预约</li><li>取消预约</li><li>注销登录</li></ul></li><li>实现注销功能</li></ul><p>添加全局函数 <code>void studentMenu(Identity * &amp;manager)</code> 代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生菜单void studentMenu(Identity * &amp;student){while (true){//学生菜单student-&gt;operMenu();Student* stu = (Student*)student;int select = 0;cin &gt;&gt; select;if (select == 1) //申请预约{stu-&gt;applyOrder();}else if (select == 2) //查看自身预约{stu-&gt;showMyOrder();}else if (select == 3) //查看所有预约{stu-&gt;showAllOrder();}else if (select == 4) //取消预约{stu-&gt;cancelOrder();}else{delete student;cout &lt;&lt; "注销成功" &lt;&lt; endl;system("pause");system("cls");return;}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-1-3-菜单功能实现"><a href="#8-1-3-菜单功能实现" class="headerlink" title="8.1.3 菜单功能实现"></a>8.1.3 菜单功能实现</h4><ul><li>在实现成员函数<code>void Student::operMenu()</code> 代码如下：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//菜单界面void Student::operMenu(){cout &lt;&lt; "欢迎学生代表：" &lt;&lt; this-&gt;m_Name &lt;&lt; "登录！" &lt;&lt; endl;cout &lt;&lt; "\t\t ----------------------------------\n";cout &lt;&lt; "\t\t|                                 |\n";cout &lt;&lt; "\t\t|          1.申请预约              |\n";cout &lt;&lt; "\t\t|                                 |\n";cout &lt;&lt; "\t\t|          2.查看我的预约          |\n";cout &lt;&lt; "\t\t|                                 |\n";cout &lt;&lt; "\t\t|          3.查看所有预约          |\n";cout &lt;&lt; "\t\t|                                 |\n";cout &lt;&lt; "\t\t|          4.取消预约              |\n";cout &lt;&lt; "\t\t|                                 |\n";cout &lt;&lt; "\t\t|          0.注销登录              |\n";cout &lt;&lt; "\t\t|                                 |\n";cout &lt;&lt; "\t\t ----------------------------------\n";cout &lt;&lt; "请选择您的操作： " &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-1-4-接口对接"><a href="#8-1-4-接口对接" class="headerlink" title="8.1.4 接口对接"></a>8.1.4 接口对接</h4><ul><li>学生成功登录后，调用学生的子菜单界面</li><li>在学生登录分支中，添加代码：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//进入学生子菜单studentMenu(person);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548659552298.png"></p><p>测试对接，效果如图：</p><p>登录验证通过：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548659590221.png"></p><p>学生子菜单：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548659670651.png"></p><p>注销登录：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548659682402.png"></p><h3 id="8-2-申请预约"><a href="#8-2-申请预约" class="headerlink" title="8.2 申请预约"></a>8.2 申请预约</h3><h4 id="8-2-1-获取机房信息"><a href="#8-2-1-获取机房信息" class="headerlink" title="8.2.1 获取机房信息"></a>8.2.1 获取机房信息</h4><ul><li>在申请预约时，学生可以看到机房的信息，因此我们需要让学生获取到机房的信息</li></ul><p>在student.h中添加新的成员函数如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//机房容器vector&lt;ComputerRoom&gt; vCom;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在学生的有参构造函数中追加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//获取机房信息ifstream ifs;ifs.open(COMPUTER_FILE, ios::in);ComputerRoom c;while (ifs &gt;&gt; c.m_ComId &amp;&amp; ifs &gt;&gt; c.m_MaxNum){vCom.push_back(c);}ifs.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>追加位置如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548661562158.png"></p><p>至此，vCom容器中保存了所有机房的信息</p><h4 id="8-2-2-预约功能实现"><a href="#8-2-2-预约功能实现" class="headerlink" title="8.2.2 预约功能实现"></a>8.2.2 预约功能实现</h4><p>在student.cpp中实现成员函数 <code>void Student::applyOrder()</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//申请预约void Student::applyOrder(){cout &lt;&lt; "机房开放时间为周一至周五！" &lt;&lt; endl;cout &lt;&lt; "请输入申请预约的时间：" &lt;&lt; endl;cout &lt;&lt; "1、周一" &lt;&lt; endl;cout &lt;&lt; "2、周二" &lt;&lt; endl;cout &lt;&lt; "3、周三" &lt;&lt; endl;cout &lt;&lt; "4、周四" &lt;&lt; endl;cout &lt;&lt; "5、周五" &lt;&lt; endl;int date = 0;int interval = 0;int room = 0;while (true){cin &gt;&gt; date;if (date &gt;= 1 &amp;&amp; date &lt;= 5){break;}cout &lt;&lt; "输入有误，请重新输入" &lt;&lt; endl;}cout &lt;&lt; "请输入申请预约的时间段：" &lt;&lt; endl;cout &lt;&lt; "1、上午" &lt;&lt; endl;cout &lt;&lt; "2、下午" &lt;&lt; endl;while (true){cin &gt;&gt; interval;if (interval &gt;= 1 &amp;&amp; interval &lt;= 2){break;}cout &lt;&lt; "输入有误，请重新输入" &lt;&lt; endl;}cout &lt;&lt; "请选择机房：" &lt;&lt; endl;cout &lt;&lt; "1号机房容量：" &lt;&lt; vCom[0].m_MaxNum &lt;&lt; endl;cout &lt;&lt; "2号机房容量：" &lt;&lt; vCom[1].m_MaxNum &lt;&lt; endl;cout &lt;&lt; "3号机房容量：" &lt;&lt; vCom[2].m_MaxNum &lt;&lt; endl;while (true){cin &gt;&gt; room;if (room &gt;= 1 &amp;&amp; room &lt;= 3){break;}cout &lt;&lt; "输入有误，请重新输入" &lt;&lt; endl;}cout &lt;&lt; "预约成功！审核中" &lt;&lt; endl;ofstream ofs(ORDER_FILE, ios::app);ofs &lt;&lt; "date:" &lt;&lt; date &lt;&lt; " ";ofs &lt;&lt; "interval:" &lt;&lt; interval &lt;&lt; " ";ofs &lt;&lt; "stuId:" &lt;&lt; this-&gt;m_Id &lt;&lt; " ";ofs &lt;&lt; "stuName:" &lt;&lt; this-&gt;m_Name &lt;&lt; " ";ofs &lt;&lt; "roomId:" &lt;&lt; room &lt;&lt; " ";ofs &lt;&lt; "status:" &lt;&lt; 1 &lt;&lt; endl;ofs.close();system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，测试代码:</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548728936052.png"></p><p>在order.txt文件中生成如下内容：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548662281801.png"></p><h3 id="8-3-显示预约"><a href="#8-3-显示预约" class="headerlink" title="8.3 显示预约"></a>8.3 显示预约</h3><h4 id="8-3-1-创建预约类"><a href="#8-3-1-创建预约类" class="headerlink" title="8.3.1 创建预约类"></a>8.3.1 创建预约类</h4><p>功能描述：显示预约记录时，需要从文件中获取到所有记录，用来显示，创建预约的类来管理记录以及更新</p><p>在头文件以及源文件下分别创建<strong>orderFile.h</strong> 和 <strong>orderFile.cpp</strong>文件</p><p>orderFile.h中添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;#include &lt;map&gt;#include "globalFile.h"class OrderFile{public://构造函数OrderFile();//更新预约记录void updateOrder();//记录的容器  key --- 记录的条数  value --- 具体记录的键值对信息map&lt;int, map&lt;string, string&gt;&gt; m_orderData;//预约记录条数int m_Size;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>构造函数</strong>中获取所有信息，并存放在容器中，添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">OrderFile::OrderFile(){ifstream ifs;ifs.open(ORDER_FILE, ios::in);string date;      //日期string interval;  //时间段string stuId;     //学生编号string stuName;   //学生姓名string roomId;    //机房编号string status;    //预约状态this-&gt;m_Size = 0; //预约记录个数while (ifs &gt;&gt; date &amp;&amp; ifs &gt;&gt; interval &amp;&amp; ifs &gt;&gt; stuId &amp;&amp; ifs &gt;&gt; stuName &amp;&amp; ifs &gt;&gt; roomId &amp;&amp;  ifs &gt;&gt; status){//测试代码/*cout &lt;&lt; date &lt;&lt; endl;cout &lt;&lt; interval &lt;&lt; endl;cout &lt;&lt; stuId &lt;&lt; endl;cout &lt;&lt; stuName &lt;&lt; endl;cout &lt;&lt; roomId &lt;&lt; endl;cout &lt;&lt; status &lt;&lt; endl;*/string key;string value;map&lt;string, string&gt; m;int pos = date.find(":");if (pos != -1){key = date.substr(0, pos);value = date.substr(pos + 1, date.size() - pos -1);m.insert(make_pair(key, value));}pos = interval.find(":");if (pos != -1){key = interval.substr(0, pos);value = interval.substr(pos + 1, interval.size() - pos -1 );m.insert(make_pair(key, value));}pos = stuId.find(":");if (pos != -1){key = stuId.substr(0, pos);value = stuId.substr(pos + 1, stuId.size() - pos -1 );m.insert(make_pair(key, value));}pos = stuName.find(":");if (pos != -1){key = stuName.substr(0, pos);value = stuName.substr(pos + 1, stuName.size() - pos -1);m.insert(make_pair(key, value));}pos = roomId.find(":");if (pos != -1){key = roomId.substr(0, pos);value = roomId.substr(pos + 1, roomId.size() - pos -1 );m.insert(make_pair(key, value));}pos = status.find(":");if (pos != -1){key = status.substr(0, pos);value = status.substr(pos + 1, status.size() - pos -1);m.insert(make_pair(key, value));}this-&gt;m_orderData.insert(make_pair(this-&gt;m_Size, m));this-&gt;m_Size++;}//测试代码//for (map&lt;int, map&lt;string, string&gt;&gt;::iterator it = m_orderData.begin(); it != m_orderData.end();it++)//{//cout &lt;&lt; "key = " &lt;&lt; it-&gt;first &lt;&lt; " value = " &lt;&lt; endl;//for (map&lt;string, string&gt;::iterator mit = it-&gt;second.begin(); mit != it-&gt;second.end(); mit++)//{//cout &lt;&lt; mit-&gt;first &lt;&lt; " " &lt;&lt; mit-&gt;second &lt;&lt; " ";//}//cout &lt;&lt; endl;//}        ifs.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新预约记录的成员函数updateOrder代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void OrderFile::updateOrder(){if (this-&gt;m_Size == 0){return;}ofstream ofs(ORDER_FILE, ios::out | ios::trunc);for (int i = 0; i &lt; m_Size;i++){ofs &lt;&lt; "date:" &lt;&lt; this-&gt;m_orderData[i]["date"] &lt;&lt; " ";ofs &lt;&lt; "interval:" &lt;&lt; this-&gt;m_orderData[i]["interval"] &lt;&lt; " ";ofs &lt;&lt; "stuId:" &lt;&lt; this-&gt;m_orderData[i]["stuId"] &lt;&lt; " ";ofs &lt;&lt; "stuName:" &lt;&lt; this-&gt;m_orderData[i]["stuName"] &lt;&lt; " ";ofs &lt;&lt; "roomId:" &lt;&lt; this-&gt;m_orderData[i]["roomId"] &lt;&lt; " ";ofs &lt;&lt; "status:" &lt;&lt; this-&gt;m_orderData[i]["status"] &lt;&lt; endl;}    ofs.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-2-显示自身预约"><a href="#8-3-2-显示自身预约" class="headerlink" title="8.3.2 显示自身预约"></a>8.3.2 显示自身预约</h4><p>首先我们先添加几条预约记录，可以用程序添加或者直接修改order.txt文件</p><p>order.txt文件内容如下： 比如我们有三名同学分别产生了3条预约记录</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548667534747.png"></p><p>在Student类的<code>void Student::showMyOrder()</code>成员函数中，添加如下代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//查看我的预约void Student::showMyOrder(){OrderFile of;if (of.m_Size == 0){cout &lt;&lt; "无预约记录" &lt;&lt; endl;system("pause");system("cls");return;}for (int i = 0; i &lt; of.m_Size; i++){if (atoi(of.m_orderData[i]["stuId"].c_str()) == this-&gt;m_Id){cout &lt;&lt; "预约日期： 周" &lt;&lt; of.m_orderData[i]["date"];cout &lt;&lt; " 时段：" &lt;&lt; (of.m_orderData[i]["interval"] == "1" ? "上午" : "下午");cout &lt;&lt; " 机房：" &lt;&lt; of.m_orderData[i]["roomId"];string status = " 状态： ";  // 0 取消的预约   1 审核中   2 已预约 -1 预约失败if (of.m_orderData[i]["status"] == "1"){status += "审核中";}else if (of.m_orderData[i]["status"] == "2"){status += "预约成功";}else if (of.m_orderData[i]["status"] == "-1"){status += "审核未通过，预约失败";}else{status += "预约已取消";}cout &lt;&lt; status &lt;&lt; endl;}}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548667252474.png"></p><h4 id="8-3-3-显示所有预约"><a href="#8-3-3-显示所有预约" class="headerlink" title="8.3.3 显示所有预约"></a>8.3.3 显示所有预约</h4><p>在Student类的<code>void Student::showAllOrder()</code>成员函数中，添加如下代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//查看所有预约void Student::showAllOrder(){OrderFile of;if (of.m_Size == 0){cout &lt;&lt; "无预约记录" &lt;&lt; endl;system("pause");system("cls");return;}for (int i = 0; i &lt; of.m_Size; i++){cout &lt;&lt; i + 1 &lt;&lt; "、 ";cout &lt;&lt; "预约日期： 周" &lt;&lt; of.m_orderData[i]["date"];cout &lt;&lt; " 时段：" &lt;&lt; (of.m_orderData[i]["interval"] == "1" ? "上午" : "下午");cout &lt;&lt; " 学号：" &lt;&lt; of.m_orderData[i]["stuId"];cout &lt;&lt; " 姓名：" &lt;&lt; of.m_orderData[i]["stuName"];cout &lt;&lt; " 机房：" &lt;&lt; of.m_orderData[i]["roomId"];string status = " 状态： ";  // 0 取消的预约   1 审核中   2 已预约 -1 预约失败if (of.m_orderData[i]["status"] == "1"){status += "审核中";}else if (of.m_orderData[i]["status"] == "2"){status += "预约成功";}else if (of.m_orderData[i]["status"] == "-1"){status += "审核未通过，预约失败";}else{status += "预约已取消";}cout &lt;&lt; status &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548667591734.png"></p><h3 id="8-4-取消预约"><a href="#8-4-取消预约" class="headerlink" title="8.4 取消预约"></a>8.4 取消预约</h3><p>在Student类的<code>void Student::cancelOrder()</code>成员函数中，添加如下代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//取消预约void Student::cancelOrder(){OrderFile of;if (of.m_Size == 0){cout &lt;&lt; "无预约记录" &lt;&lt; endl;system("pause");system("cls");return;}cout &lt;&lt; "审核中或预约成功的记录可以取消，请输入取消的记录" &lt;&lt; endl;vector&lt;int&gt;v;int index = 1;for (int i = 0; i &lt; of.m_Size; i++){if (atoi(of.m_orderData[i]["stuId"].c_str()) == this-&gt;m_Id){if (of.m_orderData[i]["status"] == "1" || of.m_orderData[i]["status"] == "2"){v.push_back(i);cout &lt;&lt;  index ++  &lt;&lt; "、 ";cout &lt;&lt; "预约日期： 周" &lt;&lt; of.m_orderData[i]["date"];cout &lt;&lt; " 时段：" &lt;&lt; (of.m_orderData[i]["interval"] == "1" ? "上午" : "下午");cout &lt;&lt; " 机房：" &lt;&lt; of.m_orderData[i]["roomId"];string status = " 状态： ";  // 0 取消的预约   1 审核中   2 已预约  -1 预约失败if (of.m_orderData[i]["status"] == "1"){status += "审核中";}else if (of.m_orderData[i]["status"] == "2"){status += "预约成功";}cout &lt;&lt; status &lt;&lt; endl;}}}cout &lt;&lt; "请输入取消的记录,0代表返回" &lt;&lt; endl;int select = 0;while (true){cin &gt;&gt; select;if (select &gt;= 0 &amp;&amp; select &lt;= v.size()){if (select == 0){break;}else{//cout &lt;&lt; "记录所在位置： " &lt;&lt; v[select - 1] &lt;&lt; endl;of.m_orderData[v[select - 1]]["status"] = "0";of.updateOrder();cout &lt;&lt; "已取消预约" &lt;&lt; endl;break;}}cout &lt;&lt; "输入有误，请重新输入" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试取消预约：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548669551036.png"></p><p>再次查看个人预约记录：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548669728023.png"></p><p>查看所有预约</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548669753496.png"></p><p>查看order.txt预约文件</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548669798037.png"></p><p>至此，学生模块功能全部实现</p><h2 id="9、-教师模块"><a href="#9、-教师模块" class="headerlink" title="9、 教师模块"></a>9、 教师模块</h2><h3 id="9-1-教师登录和注销"><a href="#9-1-教师登录和注销" class="headerlink" title="9.1 教师登录和注销"></a>9.1 教师登录和注销</h3><h4 id="9-1-1-构造函数"><a href="#9-1-1-构造函数" class="headerlink" title="9.1.1 构造函数"></a>9.1.1 构造函数</h4><ul><li>在Teacher类的构造函数中，初始化教师信息，代码如下：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//有参构造 (职工编号，姓名，密码)Teacher::Teacher(int empId, string name, string pwd){//初始化属性this-&gt;m_EmpId = empId;this-&gt;m_Name = name;this-&gt;m_Pwd = pwd;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-1-2-教师子菜单"><a href="#9-1-2-教师子菜单" class="headerlink" title="9.1.2  教师子菜单"></a>9.1.2  教师子菜单</h4><ul><li>在机房预约系统.cpp中，当用户登录的是教师，添加教师菜单接口</li><li>将不同的分支提供出来<ul><li>查看所有预约</li><li>审核预约</li><li>注销登录</li></ul></li><li>实现注销功能</li></ul><p>添加全局函数 <code>void TeacherMenu(Person * &amp;manager)</code> 代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//教师菜单void TeacherMenu(Identity * &amp;teacher){while (true){//教师菜单teacher-&gt;operMenu();Teacher* tea = (Teacher*)teacher;int select = 0;cin &gt;&gt; select;if (select == 1){//查看所有预约tea-&gt;showAllOrder();}else if (select == 2){//审核预约tea-&gt;validOrder();}else{delete teacher;cout &lt;&lt; "注销成功" &lt;&lt; endl;system("pause");system("cls");return;}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-1-3-菜单功能实现"><a href="#9-1-3-菜单功能实现" class="headerlink" title="9.1.3 菜单功能实现"></a>9.1.3 菜单功能实现</h4><ul><li>在实现成员函数<code>void Teacher::operMenu()</code> 代码如下：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//教师菜单界面void Teacher::operMenu(){cout &lt;&lt; "欢迎教师：" &lt;&lt; this-&gt;m_Name &lt;&lt; "登录！" &lt;&lt; endl;cout &lt;&lt; "\t\t ----------------------------------\n";cout &lt;&lt; "\t\t|                                  |\n";cout &lt;&lt; "\t\t|          1.查看所有预约          |\n";cout &lt;&lt; "\t\t|                                  |\n";cout &lt;&lt; "\t\t|          2.审核预约              |\n";cout &lt;&lt; "\t\t|                                  |\n";cout &lt;&lt; "\t\t|          0.注销登录              |\n";cout &lt;&lt; "\t\t|                                  |\n";cout &lt;&lt; "\t\t ----------------------------------\n";cout &lt;&lt; "请选择您的操作： " &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-1-4-接口对接"><a href="#9-1-4-接口对接" class="headerlink" title="9.1.4 接口对接"></a>9.1.4 接口对接</h4><ul><li>教师成功登录后，调用教师的子菜单界面</li><li>在教师登录分支中，添加代码：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//进入教师子菜单TeacherMenu(person);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548670866708.png"></p><p>测试对接，效果如图：</p><p>登录验证通过：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548670949885.png"></p><p>教师子菜单：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548670958602.png"></p><p>注销登录：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548670966988.png"></p><h3 id="9-2-查看所有预约"><a href="#9-2-查看所有预约" class="headerlink" title="9.2 查看所有预约"></a>9.2 查看所有预约</h3><h4 id="9-2-1-所有预约功能实现"><a href="#9-2-1-所有预约功能实现" class="headerlink" title="9.2.1 所有预约功能实现"></a>9.2.1 所有预约功能实现</h4><p>该功能与学生身份的查看所有预约功能相似，用于显示所有预约记录</p><p>在Teacher.cpp中实现成员函数 <code>void Teacher::showAllOrder()</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void Teacher::showAllOrder(){OrderFile of;if (of.m_Size == 0){cout &lt;&lt; "无预约记录" &lt;&lt; endl;system("pause");system("cls");return;}for (int i = 0; i &lt; of.m_Size; i++){cout &lt;&lt; i + 1 &lt;&lt; "、 ";cout &lt;&lt; "预约日期： 周" &lt;&lt; of.m_orderData[i]["date"];cout &lt;&lt; " 时段：" &lt;&lt; (of.m_orderData[i]["interval"] == "1" ? "上午" : "下午");cout &lt;&lt; " 学号：" &lt;&lt; of.m_orderData[i]["stuId"];cout &lt;&lt; " 姓名：" &lt;&lt; of.m_orderData[i]["stuName"];cout &lt;&lt; " 机房：" &lt;&lt; of.m_orderData[i]["roomId"];string status = " 状态： ";  // 0 取消的预约   1 审核中   2 已预约 -1 预约失败if (of.m_orderData[i]["status"] == "1"){status += "审核中";}else if (of.m_orderData[i]["status"] == "2"){status += "预约成功";}else if (of.m_orderData[i]["status"] == "-1"){status += "审核未通过，预约失败";}else{status += "预约已取消";}cout &lt;&lt; status &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-2-测试功能"><a href="#9-2-2-测试功能" class="headerlink" title="9.2.2 测试功能"></a>9.2.2 测试功能</h4><p>运行测试教师身份的查看所有预约功能</p><p>测试效果如图：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548676922678.png"></p><h3 id="9-3-审核预约"><a href="#9-3-审核预约" class="headerlink" title="9.3 审核预约"></a>9.3 审核预约</h3><h4 id="9-3-1-审核功能实现"><a href="#9-3-1-审核功能实现" class="headerlink" title="9.3.1 审核功能实现"></a>9.3.1 审核功能实现</h4><p>功能描述：教师审核学生的预约，依据实际情况审核预约</p><p>在Teacher.cpp中实现成员函数 <code>void Teacher::validOrder()</code></p><p>代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//审核预约void Teacher::validOrder(){OrderFile of;if (of.m_Size == 0){cout &lt;&lt; "无预约记录" &lt;&lt; endl;system("pause");system("cls");return;}cout &lt;&lt; "待审核的预约记录如下：" &lt;&lt; endl;vector&lt;int&gt;v;int index = 0;for (int i = 0; i &lt; of.m_Size; i++){if (of.m_orderData[i]["status"] == "1"){v.push_back(i);cout &lt;&lt; ++index &lt;&lt; "、 ";cout &lt;&lt; "预约日期： 周" &lt;&lt; of.m_orderData[i]["date"];cout &lt;&lt; " 时段：" &lt;&lt; (of.m_orderData[i]["interval"] == "1" ? "上午" : "下午");cout &lt;&lt; " 机房：" &lt;&lt; of.m_orderData[i]["roomId"];string status = " 状态： ";  // 0取消的预约   1 审核中   2 已预约  -1 预约失败if (of.m_orderData[i]["status"] == "1"){status += "审核中";}cout &lt;&lt; status &lt;&lt; endl;}}cout &lt;&lt; "请输入审核的预约记录,0代表返回" &lt;&lt; endl;int select = 0;int ret = 0;while (true){cin &gt;&gt; select;if (select &gt;= 0 &amp;&amp; select &lt;= v.size()){if (select == 0){break;}else{cout &lt;&lt; "请输入审核结果" &lt;&lt; endl;cout &lt;&lt; "1、通过" &lt;&lt; endl;cout &lt;&lt; "2、不通过" &lt;&lt; endl;cin &gt;&gt; ret;if (ret == 1){of.m_orderData[v[select - 1]]["status"] = "2";}else{of.m_orderData[v[select - 1]]["status"] = "-1";}of.updateOrder();cout &lt;&lt; "审核完毕！" &lt;&lt; endl;break;}}cout &lt;&lt; "输入有误，请重新输入" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-3-2-测试审核预约"><a href="#9-3-2-测试审核预约" class="headerlink" title="9.3.2 测试审核预约"></a>9.3.2 测试审核预约</h4><p>测试 - 审核通过</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548677286679.png"></p><p>审核通过情况</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548677383681.png"></p><p>测试-审核未通过</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548677402705.png"></p><p>审核未通过情况：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548677632792.png"></p><p>学生身份下查看记录：</p><p><img src="/2023/03/03/c-an-li/4-ji-fang-yu-yue-xi-tong/1548677798815.png"></p><p>审核预约成功！</p><p>至此本案例制作完毕！  <code>^_^</code></p>]]></content>
      
      
      <categories>
          
          <category> C++案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 机房预约系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-基于STL的演讲比赛流程管理系统</title>
      <link href="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/"/>
      <url>/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="1、-演讲比赛程序需求"><a href="#1、-演讲比赛程序需求" class="headerlink" title="1、 演讲比赛程序需求"></a>1、 演讲比赛程序需求</h2><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548154762048.png"></p><h3 id="1-1-比赛规则"><a href="#1-1-比赛规则" class="headerlink" title="1.1 比赛规则"></a>1.1 比赛规则</h3><ul><li>学校举行一场演讲比赛，共有<strong>12个人</strong>参加。<strong>比赛共两轮</strong>，第一轮为淘汰赛，第二轮为决赛。</li><li>比赛方式：<strong>分组比赛，每组6个人</strong>；选手每次要随机分组，进行比赛</li><li>每名选手都有对应的<strong>编号</strong>，如 10001 ~ 10012 </li><li>第一轮分为两个小组，每组6个人。 整体按照选手编号进行<strong>抽签</strong>后顺序演讲。</li><li>当小组演讲完后，淘汰组内排名最后的三个选手，<strong>前三名晋级</strong>，进入下一轮的比赛。</li><li>第二轮为决赛，<strong>前三名胜出</strong></li><li>每轮比赛过后需要<strong>显示晋级选手的信息</strong></li></ul><h3 id="1-2-程序功能"><a href="#1-2-程序功能" class="headerlink" title="1.2 程序功能"></a>1.2 程序功能</h3><ul><li>开始演讲比赛：完成整届比赛的流程，每个比赛阶段需要给用户一个提示，用户按任意键后继续下一个阶段</li><li>查看往届记录：查看之前比赛前三名结果，每次比赛都会记录到文件中，文件用.csv后缀名保存</li><li>清空比赛记录：将文件中数据清空</li><li>退出比赛程序：可以退出当前程序</li></ul><h3 id="1-3-程序效果图："><a href="#1-3-程序效果图：" class="headerlink" title="1.3 程序效果图："></a>1.3 程序效果图：</h3><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548155966702.png"></p><h2 id="2、-项目创建"><a href="#2、-项目创建" class="headerlink" title="2、 项目创建"></a>2、 项目创建</h2><p>创建项目步骤如下：</p><ul><li>创建新项目</li><li>添加文件</li></ul><h3 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h3><ul><li>打开vs2017后，点击创建新项目，创建新的C++项目</li></ul><p>如图：</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548121881969.png"></p><ul><li>填写项目名称以及选取项目路径，点击确定生成项目</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548122271773.png"></p><h3 id="2-2-添加文件"><a href="#2-2-添加文件" class="headerlink" title="2.2 添加文件"></a>2.2 添加文件</h3><ul><li>右键源文件，进行添加文件操作</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548122420253.png"></p><ul><li>填写文件名称，点击添加</li></ul><p><img src="/1548122510869.png"></p><ul><li>生成文件成功，效果如下图</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548122619712.png"></p><ul><li>至此，项目已创建完毕</li></ul><h2 id="3、-创建管理类"><a href="#3、-创建管理类" class="headerlink" title="3、 创建管理类"></a>3、 创建管理类</h2><p><strong>功能描述：</strong></p><ul><li>提供菜单界面与用户交互</li><li>对演讲比赛流程进行控制</li><li>与文件的读写交互</li></ul><h3 id="3-1创建文件"><a href="#3-1创建文件" class="headerlink" title="3.1创建文件"></a>3.1创建文件</h3><ul><li>在头文件和源文件的文件夹下分别创建speechManager.h 和 speechManager.cpp文件</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548123402593.png"></p><h3 id="3-2-头文件实现"><a href="#3-2-头文件实现" class="headerlink" title="3.2 头文件实现"></a>3.2 头文件实现</h3><p>在speechManager.h中设计管理类</p><p>代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#pragma once#include&lt;iostream&gt;using namespace std;//演讲管理类class SpeechManager{public://构造函数SpeechManager();//析构函数~SpeechManager();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-源文件实现"><a href="#3-3-源文件实现" class="headerlink" title="3.3 源文件实现"></a>3.3 源文件实现</h3><p>在speechManager.cpp中将构造和析构函数空实现补全</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include "speechManager.h"SpeechManager::SpeechManager(){}SpeechManager::~SpeechManager(){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>至此演讲管理类以创建完毕</li></ul><h2 id="4、-菜单功能"><a href="#4、-菜单功能" class="headerlink" title="4、 菜单功能"></a>4、 菜单功能</h2><p>功能描述：与用户的沟通界面</p><h3 id="4-1-添加成员函数"><a href="#4-1-添加成员函数" class="headerlink" title="4.1 添加成员函数"></a>4.1 添加成员函数</h3><p>在管理类speechManager.h中添加成员函数  <code>void show_Menu();</code></p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548123942072.png"></p><h3 id="4-2-菜单功能实现"><a href="#4-2-菜单功能实现" class="headerlink" title="4.2 菜单功能实现"></a>4.2 菜单功能实现</h3><ul><li>在管理类speechManager.cpp中实现 show_Menu()函数</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void SpeechManager::show_Menu(){cout &lt;&lt; "********************************************" &lt;&lt; endl;cout &lt;&lt; "*************  欢迎参加演讲比赛 ************" &lt;&lt; endl;cout &lt;&lt; "*************  1.开始演讲比赛  *************" &lt;&lt; endl;cout &lt;&lt; "*************  2.查看往届记录  *************" &lt;&lt; endl;cout &lt;&lt; "*************  3.清空比赛记录  *************" &lt;&lt; endl;cout &lt;&lt; "*************  0.退出比赛程序  *************" &lt;&lt; endl;cout &lt;&lt; "********************************************" &lt;&lt; endl;cout &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-测试菜单功能"><a href="#4-3-测试菜单功能" class="headerlink" title="4.3 测试菜单功能"></a>4.3 测试菜单功能</h3><ul><li>在演讲比赛流程管理系统.cpp中测试菜单功能</li></ul><p>代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;#include "speechManager.h"int main() {SpeechManager sm;sm.show_Menu();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行效果如图：</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548124599641.png"></p><ul><li>菜单界面搭建完毕</li></ul><h2 id="5、-退出功能"><a href="#5、-退出功能" class="headerlink" title="5、 退出功能"></a>5、 退出功能</h2><h3 id="5-1-提供功能接口"><a href="#5-1-提供功能接口" class="headerlink" title="5.1  提供功能接口"></a>5.1  提供功能接口</h3><ul><li>在main函数中提供分支选择，提供每个功能接口</li></ul><p>代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() {SpeechManager sm;int choice = 0; //用来存储用户的选项while (true){sm.show_Menu();cout &lt;&lt; "请输入您的选择： " &lt;&lt; endl;cin &gt;&gt; choice; // 接受用户的选项switch (choice){case 1:  //开始比赛break;case 2:  //查看记录break;case 3:  //清空记录break;case 0:  //退出系统break;default:system("cls"); //清屏break;}}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-实现退出功能"><a href="#5-2-实现退出功能" class="headerlink" title="5.2 实现退出功能"></a>5.2 实现退出功能</h3><p>在speechManager.h中提供退出系统的成员函数 <code>void exitSystem();</code></p><p>在speechManager.cpp中提供具体的功能实现</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void SpeechManager::exitSystem(){cout &lt;&lt; "欢迎下次使用" &lt;&lt; endl;system("pause");exit(0);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3测试功能"><a href="#5-3测试功能" class="headerlink" title="5.3测试功能"></a>5.3测试功能</h3><p>在main函数分支 0  选项中，调用退出程序的接口</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548124853576.png"></p><p>运行测试效果如图：</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548124888578.png"></p><h2 id="6、演讲比赛功能"><a href="#6、演讲比赛功能" class="headerlink" title="6、演讲比赛功能"></a>6、演讲比赛功能</h2><h3 id="6-1-功能分析"><a href="#6-1-功能分析" class="headerlink" title="6.1 功能分析"></a>6.1 功能分析</h3><p>比赛流程分析：</p><p>抽签 → 开始演讲比赛 → 显示第一轮比赛结果 → </p><p>抽签 → 开始演讲比赛 → 显示前三名结果 → 保存分数</p><h3 id="6-2-创建选手类"><a href="#6-2-创建选手类" class="headerlink" title="6.2 创建选手类"></a>6.2 创建选手类</h3><ul><li>选手类中的属性包含：选手姓名、分数</li><li>头文件中创建 speaker.h文件，并添加代码：</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;class Speaker{public:string m_Name;  //姓名double m_Score[2]; //分数  最多有两轮得分};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-比赛"><a href="#6-3-比赛" class="headerlink" title="6.3 比赛"></a>6.3 比赛</h3><h4 id="6-3-1-成员属性添加"><a href="#6-3-1-成员属性添加" class="headerlink" title="6.3.1 成员属性添加"></a>6.3.1 成员属性添加</h4><ul><li>在speechManager.h中添加属性</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//比赛选手 容器  12人vector&lt;int&gt;v1;//第一轮晋级容器  6人vector&lt;int&gt;v2;//胜利前三名容器  3人vector&lt;int&gt;vVictory;//存放编号 以及对应的 具体选手 容器map&lt;int, Speaker&gt; m_Speaker;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-2-初始化属性"><a href="#6-3-2-初始化属性" class="headerlink" title="6.3.2 初始化属性"></a>6.3.2 初始化属性</h4><ul><li>在speechManager.h中提供开始比赛的的成员函数 <code>void initSpeech();</code></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//初始化属性void initSpeech();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现<code>void initSpeech();</code></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void SpeechManager::initSpeech(){//容器保证为空this-&gt;v1.clear();  this-&gt;v2.clear();this-&gt;vVictory.clear();this-&gt;m_Speaker.clear();//初始化比赛轮数this-&gt;m_Index = 1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SpeechManager构造函数中调用<code>void initSpeech();</code></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">SpeechManager::SpeechManager(){//初始化属性this-&gt;initSpeech();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-3-创建选手"><a href="#6-3-3-创建选手" class="headerlink" title="6.3.3 创建选手"></a>6.3.3 创建选手</h4><ul><li>在speechManager.h中提供开始比赛的的成员函数 <code>void createSpeaker();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//初始化创建12名选手void createSpeaker();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现<code>void createSpeaker();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::createSpeaker(){string nameSeed = "ABCDEFGHIJKL";for (int i = 0; i &lt; nameSeed.size(); i++){string name = "选手";name += nameSeed[i];Speaker sp;sp.m_Name = name;for (int i = 0; i &lt; 2; i++){sp.m_Score[i] = 0;}//12名选手编号this-&gt;v1.push_back(i + 10001);//选手编号 以及对应的选手 存放到map容器中this-&gt;m_Speaker.insert(make_pair(i + 10001, sp));}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SpeechManager类的 构造函数中调用<code>void createSpeaker();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">SpeechManager::SpeechManager(){    //初始化属性this-&gt;initSpeech();    //创建选手this-&gt;createSpeaker();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试 在main函数中，可以在创建完管理对象后，使用下列代码测试12名选手初始状态</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">for (map&lt;int, Speaker&gt;::iterator it = sm.m_Speaker.begin(); it != sm.m_Speaker.end(); it++){cout  &lt;&lt; "选手编号：" &lt;&lt; it-&gt;first           &lt;&lt; " 姓名： " &lt;&lt; it-&gt;second.m_Name           &lt;&lt; " 成绩： " &lt;&lt; it-&gt;second.m_Score[0] &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548141605742.png"></p><ul><li>测试效果如图：</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548141560164.png"></p><ul><li>测试完毕后，可以将测试代码删除或注释。</li></ul><h4 id="6-3-4-开始比赛成员函数添加"><a href="#6-3-4-开始比赛成员函数添加" class="headerlink" title="6.3.4 开始比赛成员函数添加"></a>6.3.4 开始比赛成员函数添加</h4><ul><li>在speechManager.h中提供开始比赛的的成员函数 <code>void startSpeech();</code></li><li>该函数功能是主要控制比赛的流程</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//开始比赛 - 比赛流程控制void startSpeech();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中将startSpeech的空实现先写入</li><li>我们可以先将整个比赛的流程 写到函数中</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//开始比赛void SpeechManager::startSpeech(){//第一轮比赛//1、抽签//2、比赛//3、显示晋级结果//第二轮比赛//1、抽签//2、比赛//3、显示最终结果//4、保存分数}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-5-抽签"><a href="#6-3-5-抽签" class="headerlink" title="6.3.5 抽签"></a>6.3.5 抽签</h4><p><strong>功能描述：</strong></p><ul><li><p>正式比赛前，所有选手的比赛顺序需要打乱，我们只需要将存放选手编号的容器  打乱次序即可</p></li><li><p>在speechManager.h中提供抽签的的成员函数 <code>void speechDraw();</code></p></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//抽签void speechDraw();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现成员函数 <code>void speechDraw();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::speechDraw(){cout &lt;&lt; "第 &lt;&lt; " &lt;&lt; this-&gt;m_Index &lt;&lt; " &gt;&gt; 轮比赛选手正在抽签"&lt;&lt;endl;cout &lt;&lt; "---------------------" &lt;&lt; endl;cout &lt;&lt; "抽签后演讲顺序如下：" &lt;&lt; endl;if (this-&gt;m_Index == 1){random_shuffle(v1.begin(), v1.end());for (vector&lt;int&gt;::iterator it = v1.begin(); it != v1.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}else{random_shuffle(v2.begin(), v2.end());for (vector&lt;int&gt;::iterator it = v2.begin(); it != v2.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}cout &lt;&lt; "---------------------" &lt;&lt; endl;system("pause");cout &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在startSpeech比赛流程控制的函数中，调用抽签函数</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548143871202.png"></p><ul><li>在main函数中，分支1选项中，调用开始比赛的接口</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548143543475.png"></p><ul><li>测试</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548143610682.png"></p><h4 id="6-3-6-开始比赛"><a href="#6-3-6-开始比赛" class="headerlink" title="6.3.6 开始比赛"></a>6.3.6 开始比赛</h4><ul><li>在speechManager.h中提供比赛的的成员函数 <code>void speechContest();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//比赛void speechContest();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现成员函数 <code>void speechContest();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::speechContest(){cout &lt;&lt; "------------- 第"&lt;&lt; this-&gt;m_Index &lt;&lt; "轮正式比赛开始：------------- " &lt;&lt; endl;multimap&lt;double, int, greater&lt;int&gt;&gt; groupScore; //临时容器，保存key分数 value 选手编号int num = 0; //记录人员数，6个为1组vector &lt;int&gt;v_Src;   //比赛的人员容器if (this-&gt;m_Index == 1){v_Src = v1;}else{v_Src = v2;}//遍历所有参赛选手for (vector&lt;int&gt;::iterator it = v_Src.begin(); it != v_Src.end(); it++){num++;//评委打分deque&lt;double&gt;d;for (int i = 0; i &lt; 10; i++){double score = (rand() % 401 + 600) / 10.f;  // 600 ~ 1000//cout &lt;&lt; score &lt;&lt; " ";d.push_back(score);}sort(d.begin(), d.end(), greater&lt;double&gt;());//排序d.pop_front();//去掉最高分d.pop_back();//去掉最低分double sum = accumulate(d.begin(), d.end(), 0.0f);//获取总分double avg = sum / (double)d.size();//获取平均分//每个人平均分//cout &lt;&lt; "编号： " &lt;&lt; *it  &lt;&lt; " 选手： " &lt;&lt; this-&gt;m_Speaker[*it].m_Name &lt;&lt; " 获取平均分为： " &lt;&lt; avg &lt;&lt; endl;  //打印分数this-&gt;m_Speaker[*it].m_Score[this-&gt;m_Index - 1] = avg;//6个人一组，用临时容器保存groupScore.insert(make_pair(avg, *it));if (num % 6 == 0){cout &lt;&lt; "第" &lt;&lt; num / 6 &lt;&lt; "小组比赛名次：" &lt;&lt; endl;for (multimap&lt;double, int, greater&lt;int&gt;&gt;::iterator it = groupScore.begin(); it != groupScore.end(); it++){cout &lt;&lt; "编号: " &lt;&lt; it-&gt;second &lt;&lt; " 姓名： " &lt;&lt; this-&gt;m_Speaker[it-&gt;second].m_Name &lt;&lt; " 成绩： " &lt;&lt; this-&gt;m_Speaker[it-&gt;second].m_Score[this-&gt;m_Index - 1] &lt;&lt; endl;}int count = 0;//取前三名for (multimap&lt;double, int, greater&lt;int&gt;&gt;::iterator it = groupScore.begin(); it != groupScore.end() &amp;&amp; count &lt; 3; it++, count++){if (this-&gt;m_Index == 1){v2.push_back((*it).second);}else{vVictory.push_back((*it).second);}}groupScore.clear();cout &lt;&lt; endl;}}cout &lt;&lt; "------------- 第" &lt;&lt; this-&gt;m_Index &lt;&lt; "轮比赛完毕  ------------- " &lt;&lt; endl;system("pause");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在startSpeech比赛流程控制的函数中，调用比赛函数</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548144491984.png"></p><ul><li>再次运行代码，测试比赛</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548144765146.png"></p><h4 id="6-3-7-显示比赛分数"><a href="#6-3-7-显示比赛分数" class="headerlink" title="6.3.7 显示比赛分数"></a>6.3.7 显示比赛分数</h4><ul><li>在speechManager.h中提供比赛的的成员函数 <code>void showScore();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//显示比赛结果void showScore();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现成员函数 <code>void  showScore();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::showScore(){cout &lt;&lt; "---------第" &lt;&lt; this-&gt;m_Index &lt;&lt; "轮晋级选手信息如下：-----------" &lt;&lt; endl;vector&lt;int&gt;v;if (this-&gt;m_Index == 1){v = v2;}else{v = vVictory;}for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++){cout &lt;&lt; "选手编号：" &lt;&lt; *it &lt;&lt; " 姓名： " &lt;&lt; m_Speaker[*it].m_Name &lt;&lt; " 得分： " &lt;&lt; m_Speaker[*it].m_Score[this-&gt;m_Index - 1] &lt;&lt; endl;}cout &lt;&lt; endl;system("pause");system("cls");this-&gt;show_Menu(); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在startSpeech比赛流程控制的函数中，调用显示比赛分数函数</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548146903960.png"></p><ul><li>运行代码，测试效果</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548146961550.png"></p><h4 id="6-3-8-第二轮比赛"><a href="#6-3-8-第二轮比赛" class="headerlink" title="6.3.8 第二轮比赛"></a>6.3.8 第二轮比赛</h4><p>第二轮比赛流程同第一轮，只是比赛的轮是+1，其余流程不变</p><ul><li>在startSpeech比赛流程控制的函数中，加入第二轮的流程</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548148593215.png"></p><p>测试，将整个比赛流程都跑通</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548148536395.png"></p><h3 id="6-4-保存分数"><a href="#6-4-保存分数" class="headerlink" title="6.4 保存分数"></a>6.4 保存分数</h3><p><strong>功能描述：</strong></p><ul><li>将每次演讲比赛的得分记录到文件中</li></ul><p><strong>功能实现：</strong></p><ul><li>在speechManager.h中添加保存记录的成员函数 <code>void saveRecord();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//保存记录void saveRecord();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现成员函数 <code>void saveRecord();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::saveRecord(){ofstream ofs;ofs.open("speech.csv", ios::out | ios::app); // 用输出的方式打开文件  -- 写文件//将每个人数据写入到文件中for (vector&lt;int&gt;::iterator it = vVictory.begin(); it != vVictory.end(); it++){ofs &lt;&lt; *it &lt;&lt; ","&lt;&lt; m_Speaker[*it].m_Score[1] &lt;&lt; ",";}ofs &lt;&lt; endl;    //关闭文件ofs.close();    cout &lt;&lt; "记录已经保存" &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在startSpeech比赛流程控制的函数中，最后调用保存记录分数函数</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548149937860.png"></p><ul><li>测试，整个比赛完毕后记录保存情况</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548149912863.png"></p><p>利用记事本打开文件 speech.csv，里面保存了前三名选手的编号以及得分</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548150047975.png"></p><p>至此，整个演讲比赛功能制作完毕！</p><h2 id="7、-查看记录"><a href="#7、-查看记录" class="headerlink" title="7、 查看记录"></a>7、 查看记录</h2><h3 id="7-1-读取记录分数"><a href="#7-1-读取记录分数" class="headerlink" title="7.1 读取记录分数"></a>7.1 读取记录分数</h3><ul><li>在speechManager.h中添加保存记录的成员函数 <code>void loadRecord();</code></li><li>添加判断文件是否为空的标志  <code>bool fileIsEmpty;</code></li><li>添加往届记录的容器<code>map&lt;int, vector&lt;string&gt;&gt; m_Record;</code></li></ul><p>其中m_Record 中的key代表第几届，value记录具体的信息</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//读取记录void loadRecord();//文件为空的标志bool fileIsEmpty;//往届记录map&lt;int, vector&lt;string&gt;&gt; m_Record;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现成员函数 <code>void loadRecord();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::loadRecord(){ifstream ifs("speech.csv", ios::in); //输入流对象 读取文件if (!ifs.is_open()){this-&gt;fileIsEmpty = true;cout &lt;&lt; "文件不存在！" &lt;&lt; endl;ifs.close();return;}char ch;ifs &gt;&gt; ch;if (ifs.eof()){cout &lt;&lt; "文件为空!" &lt;&lt; endl;this-&gt;fileIsEmpty = true;ifs.close();return;}//文件不为空this-&gt;fileIsEmpty = false;ifs.putback(ch); //读取的单个字符放回去string data;int index = 0;while (ifs &gt;&gt; data){//cout &lt;&lt; data &lt;&lt; endl;vector&lt;string&gt;v;int pos = -1;int start = 0;while (true){pos = data.find(",", start); //从0开始查找 ','if (pos == -1){break; //找不到break返回}string tmp = data.substr(start, pos - start); //找到了,进行分割 参数1 起始位置，参数2 截取长度v.push_back(tmp);start = pos + 1;}this-&gt;m_Record.insert(make_pair(index, v));index++;}ifs.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在SpeechManager构造函数中调用获取往届记录函数</li></ul><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548151977242.png"></p><h3 id="7-2-查看记录功能"><a href="#7-2-查看记录功能" class="headerlink" title="7.2 查看记录功能"></a>7.2 查看记录功能</h3><ul><li>在speechManager.h中添加保存记录的成员函数 <code>void showRecord();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//显示往届得分void showRecord();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现成员函数 <code>void showRecord();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::showRecord(){for (int i = 0; i &lt; this-&gt;m_Record.size(); i++){cout &lt;&lt; "第" &lt;&lt; i + 1 &lt;&lt; "届 " &lt;&lt;"冠军编号：" &lt;&lt; this-&gt;m_Record[i][0] &lt;&lt; " 得分：" &lt;&lt; this-&gt;m_Record[i][1] &lt;&lt; " ""亚军编号：" &lt;&lt; this-&gt;m_Record[i][2] &lt;&lt; " 得分：" &lt;&lt; this-&gt;m_Record[i][3] &lt;&lt; " ""季军编号：" &lt;&lt; this-&gt;m_Record[i][4] &lt;&lt; " 得分：" &lt;&lt; this-&gt;m_Record[i][5] &lt;&lt; endl;}    system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-测试功能"><a href="#7-3-测试功能" class="headerlink" title="7.3 测试功能"></a>7.3 测试功能</h3><p>在main函数分支 2  选项中，调用查看记录的接口</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548152359604.png"></p><p>显示效果如图：（本次测试添加了4条记录）</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548152394715.png"></p><h3 id="7-4-bug解决"><a href="#7-4-bug解决" class="headerlink" title="7.4 bug解决"></a>7.4 bug解决</h3><p>目前程序中有几处bug未解决：</p><ol><li>查看往届记录，若文件不存在或为空，并未提示</li></ol><p>解决方式：在showRecord函数中，开始判断文件状态并加以判断</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548152803116.png"></p><ol start="2"><li>若记录为空或不存在，比完赛后依然提示记录为空</li></ol><p>解决方式：saveRecord中更新文件为空的标志</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548153005042.png"></p><ol start="3"><li>比完赛后查不到本届比赛的记录，没有实时更新</li></ol><p>解决方式：比赛完毕后，所有数据重置</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548153319587.png"></p><ol start="4"><li>在初始化时，没有初始化记录容器</li></ol><p>解决方式：initSpeech中添加 初始化记录容器</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548154340974.png"></p><ol start="5"><li>每次记录都是一样的</li></ol><p>解决方式：在main函数一开始 添加随机数种子</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">srand((unsigned int)time(NULL));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所有bug解决后 测试：</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548153571603.png"></p><h2 id="8、-清空记录"><a href="#8、-清空记录" class="headerlink" title="8、 清空记录"></a>8、 清空记录</h2><h3 id="8-1-清空记录功能实现"><a href="#8-1-清空记录功能实现" class="headerlink" title="8.1 清空记录功能实现"></a>8.1 清空记录功能实现</h3><ul><li>在speechManager.h中添加保存记录的成员函数 <code>void clearRecord();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//清空记录void clearRecord();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在speechManager.cpp中实现成员函数 <code>void clearRecord();</code></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void SpeechManager::clearRecord(){cout &lt;&lt; "确认清空？" &lt;&lt; endl;cout &lt;&lt; "1、确认" &lt;&lt; endl;cout &lt;&lt; "2、返回" &lt;&lt; endl;int select = 0;cin &gt;&gt; select;if (select == 1){//打开模式 ios::trunc 如果存在删除文件并重新创建ofstream ofs("speech.csv", ios::trunc);ofs.close();//初始化属性this-&gt;initSpeech();//创建选手this-&gt;createSpeaker();//获取往届记录this-&gt;loadRecord();cout &lt;&lt; "清空成功！" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-测试清空"><a href="#8-2-测试清空" class="headerlink" title="8.2 测试清空"></a>8.2 测试清空</h3><p>在main函数分支 3  选项中，调用清空比赛记录的接口</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548154674242.png"></p><p>运行程序，测试清空记录：</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548154004738.png"></p><p>speech.csv中记录也为空</p><p><img src="/2023/03/03/c-an-li/3-ji-yu-stl-de-yan-jiang-bi-sai-liu-cheng-guan-li-xi-tong/1548154508831.png"></p><ul><li>至此本案例结束！ <code>^_^</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 基于STL的演讲比赛流程管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-基于多态的职工管理系统</title>
      <link href="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/"/>
      <url>/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/</url>
      
        <content type="html"><![CDATA[<h2 id="1、管理系统需求"><a href="#1、管理系统需求" class="headerlink" title="1、管理系统需求"></a>1、管理系统需求</h2><p>职工管理系统可以用来管理公司内所有员工的信息</p><p>本教程主要利用C++来实现一个基于多态的职工管理系统</p><p>公司中职工分为三类：普通员工、经理、老板，显示信息时，需要显示职工编号、职工姓名、职工岗位、以及职责</p><p>普通员工职责：完成经理交给的任务</p><p>经理职责：完成老板交给的任务，并下发任务给员工</p><p>老板职责：管理公司所有事务</p><p>管理系统中需要实现的功能如下：</p><ul><li>退出管理程序：退出当前管理系统</li></ul><ul><li>增加职工信息：实现批量添加职工功能，将信息录入到文件中，职工信息为：职工编号、姓名、部门编号</li><li>显示职工信息：显示公司内部所有职工的信息</li><li>删除离职职工：按照编号删除指定的职工</li><li>修改职工信息：按照编号修改职工个人信息</li><li>查找职工信息：按照职工的编号或者职工的姓名进行查找相关的人员信息</li><li>按照编号排序：按照职工编号，进行排序，排序规则由用户指定</li><li>清空所有文档：清空文件中记录的所有职工信息 （清空前需要再次确认，防止误删）</li></ul><p>系统界面效果图如下：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546511409198.png"></p><p>需根据用户不同的选择，完成不同的功能！</p><h2 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h2><p>创建项目步骤如下：</p><ul><li>创建新项目</li><li>添加文件</li></ul><h3 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h3><p>打开vs2017后，点击创建新项目，创建新的C++项目</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1544151201465.png"></p><p>填写项目名称以及项目路径，点击确定</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546349209805.png"></p><h3 id="2-2-添加文件"><a href="#2-2-添加文件" class="headerlink" title="2.2 添加文件"></a>2.2 添加文件</h3><p>右键源文件，进行添加文件操作</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546349360960.png"></p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546349421496.png"></p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546349488752.png"></p><p>至此，项目已创建完毕</p><h2 id="3、创建管理类"><a href="#3、创建管理类" class="headerlink" title="3、创建管理类"></a>3、创建管理类</h2><p>​管理类负责的内容如下：</p><ul><li>与用户的沟通菜单界面</li><li>对职工增删改查的操作</li><li>与文件的读写交互</li></ul><h3 id="3-1创建文件"><a href="#3-1创建文件" class="headerlink" title="3.1创建文件"></a>3.1创建文件</h3><p>在头文件和源文件的文件夹下分别创建workerManager.h 和 workerManager.cpp文件</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546349904944.png"></p><h3 id="3-2-头文件实现"><a href="#3-2-头文件实现" class="headerlink" title="3.2 头文件实现"></a>3.2 头文件实现</h3><p>在workerManager.h中设计管理类</p><p>代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;using namespace std;class WorkerManager{public://构造函数WorkerManager();//析构函数~WorkerManager();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-源文件实现"><a href="#3-3-源文件实现" class="headerlink" title="3.3 源文件实现"></a>3.3 源文件实现</h3><p>在workerManager.cpp中将构造和析构函数空实现补全</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "workerManager.h"WorkerManager::WorkerManager(){}WorkerManager::~WorkerManager(){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此职工管理类以创建完毕</p><h2 id="4、菜单功能"><a href="#4、菜单功能" class="headerlink" title="4、菜单功能"></a>4、菜单功能</h2><p>功能描述：与用户的沟通界面</p><h3 id="4-1-添加成员函数"><a href="#4-1-添加成员函数" class="headerlink" title="4.1 添加成员函数"></a>4.1 添加成员函数</h3><p>在管理类workerManager.h中添加成员函数  <code>void Show_Menu();</code></p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546351543942.png"></p><h3 id="4-2-菜单功能实现"><a href="#4-2-菜单功能实现" class="headerlink" title="4.2 菜单功能实现"></a>4.2 菜单功能实现</h3><p>在管理类workerManager.cpp中实现  Show_Menu()函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void WorkerManager::Show_Menu(){cout &lt;&lt; "********************************************" &lt;&lt; endl;cout &lt;&lt; "*********  欢迎使用职工管理系统！ **********" &lt;&lt; endl;cout &lt;&lt; "*************  0.退出管理程序  *************" &lt;&lt; endl;cout &lt;&lt; "*************  1.增加职工信息  *************" &lt;&lt; endl;cout &lt;&lt; "*************  2.显示职工信息  *************" &lt;&lt; endl;cout &lt;&lt; "*************  3.删除离职职工  *************" &lt;&lt; endl;cout &lt;&lt; "*************  4.修改职工信息  *************" &lt;&lt; endl;cout &lt;&lt; "*************  5.查找职工信息  *************" &lt;&lt; endl;cout &lt;&lt; "*************  6.按照编号排序  *************" &lt;&lt; endl;cout &lt;&lt; "*************  7.清空所有文档  *************" &lt;&lt; endl;cout &lt;&lt; "********************************************" &lt;&lt; endl;cout &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-测试菜单功能"><a href="#4-3-测试菜单功能" class="headerlink" title="4.3 测试菜单功能"></a>4.3 测试菜单功能</h3><p>在职工管理系统.cpp中测试菜单功能</p><p>代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include "workerManager.h"int main() {WorkerManager wm;wm.Show_Menu();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如图：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546352771191.png"></p><h2 id="5、退出功能"><a href="#5、退出功能" class="headerlink" title="5、退出功能"></a>5、退出功能</h2><h3 id="5-1-提供功能接口"><a href="#5-1-提供功能接口" class="headerlink" title="5.1  提供功能接口"></a>5.1  提供功能接口</h3><p>在main函数中提供分支选择，提供每个功能接口</p><p>代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {WorkerManager wm;int choice = 0;while (true){//展示菜单wm.Show_Menu();cout &lt;&lt; "请输入您的选择:" &lt;&lt; endl;cin &gt;&gt; choice;switch (choice){case 0: //退出系统break;case 1: //添加职工break;case 2: //显示职工break;case 3: //删除职工break;case 4: //修改职工break;case 5: //查找职工break;case 6: //排序职工break;case 7: //清空文件break;default:system("cls");break;}}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-实现退出功能"><a href="#5-2-实现退出功能" class="headerlink" title="5.2 实现退出功能"></a>5.2 实现退出功能</h3><p>在workerManager.h中提供退出系统的成员函数 <code>void exitSystem();</code></p><p>在workerManager.cpp中提供具体的功能实现</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void WorkerManager::exitSystem(){cout &lt;&lt; "欢迎下次使用" &lt;&lt; endl;system("pause");exit(0);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3测试功能"><a href="#5-3测试功能" class="headerlink" title="5.3测试功能"></a>5.3测试功能</h3><p>在main函数分支 0  选项中，调用退出程序的接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546353199424.png"></p><p>运行测试效果如图：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546353155490.png"></p><h2 id="6、创建职工类"><a href="#6、创建职工类" class="headerlink" title="6、创建职工类"></a>6、创建职工类</h2><h3 id="6-1-创建职工抽象类"><a href="#6-1-创建职工抽象类" class="headerlink" title="6.1 创建职工抽象类"></a>6.1 创建职工抽象类</h3><p>职工的分类为：普通员工、经理、老板</p><p>将三种职工抽象到一个类（worker）中,利用多态管理不同职工种类</p><p>职工的属性为：职工编号、职工姓名、职工所在部门编号</p><p>职工的行为为：岗位职责信息描述，获取岗位名称</p><p>头文件文件夹下  创建文件worker.h  文件并且添加如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;//职工抽象基类class Worker{public://显示个人信息virtual void showInfo() = 0;//获取岗位名称virtual string getDeptName() = 0;int m_Id; //职工编号string m_Name; //职工姓名int m_DeptId; //职工所在部门名称编号};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-创建普通员工类"><a href="#6-2-创建普通员工类" class="headerlink" title="6.2 创建普通员工类"></a>6.2 创建普通员工类</h3><p>普通员工类<strong>继承</strong>职工抽象类，并重写父类中纯虚函数</p><p>在头文件和源文件的文件夹下分别创建employee.h 和 employee.cpp文件</p><p>employee.h中代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once #include&lt;iostream&gt;using namespace std;#include "worker.h"//员工类class Employee :public Worker{public://构造函数Employee(int id, string name, int dId);//显示个人信息virtual void showInfo();//获取职工岗位名称virtual string getDeptName();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>employee.cpp中代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "employee.h"Employee::Employee(int id, string name, int dId){this-&gt;m_Id = id;this-&gt;m_Name = name;this-&gt;m_DeptId = dId;}void Employee::showInfo(){cout &lt;&lt; "职工编号： " &lt;&lt; this-&gt;m_Id&lt;&lt; " \t职工姓名： " &lt;&lt; this-&gt;m_Name&lt;&lt; " \t岗位：" &lt;&lt; this-&gt;getDeptName()&lt;&lt; " \t岗位职责：完成经理交给的任务" &lt;&lt; endl;}string Employee::getDeptName(){return string("员工");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-创建经理类"><a href="#6-3-创建经理类" class="headerlink" title="6.3 创建经理类"></a>6.3 创建经理类</h3><p>经理类<strong>继承</strong>职工抽象类，并重写父类中纯虚函数，和普通员工类似</p><p>在头文件和源文件的文件夹下分别创建manager.h 和 manager.cpp文件</p><p>manager.h中代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#pragma once#include&lt;iostream&gt;using namespace std;#include "worker.h"//经理类class Manager :public Worker{public:Manager(int id, string name, int dId);//显示个人信息virtual void showInfo();//获取职工岗位名称virtual string getDeptName();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>manager.cpp中代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include "manager.h"Manager::Manager(int id, string name, int dId){this-&gt;m_Id = id;this-&gt;m_Name = name;this-&gt;m_DeptId = dId;}void Manager::showInfo(){cout &lt;&lt; "职工编号： " &lt;&lt; this-&gt;m_Id&lt;&lt; " \t职工姓名： " &lt;&lt; this-&gt;m_Name&lt;&lt; " \t岗位：" &lt;&lt; this-&gt;getDeptName()&lt;&lt; " \t岗位职责：完成老板交给的任务,并下发任务给员工" &lt;&lt; endl;}string Manager::getDeptName(){return string("经理");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-创建老板类"><a href="#6-4-创建老板类" class="headerlink" title="6.4 创建老板类"></a>6.4 创建老板类</h3><p>老板类<strong>继承</strong>职工抽象类，并重写父类中纯虚函数，和普通员工类似</p><p>在头文件和源文件的文件夹下分别创建boss.h 和 boss.cpp文件</p><p>boss.h中代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#pragma once#include&lt;iostream&gt;using namespace std;#include "worker.h"//老板类class Boss :public Worker{public:Boss(int id, string name, int dId);//显示个人信息virtual void showInfo();//获取职工岗位名称virtual string getDeptName();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>boss.cpp中代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include "boss.h"Boss::Boss(int id, string name, int dId){this-&gt;m_Id = id;this-&gt;m_Name = name;this-&gt;m_DeptId = dId;}void Boss::showInfo(){cout &lt;&lt; "职工编号： " &lt;&lt; this-&gt;m_Id&lt;&lt; " \t职工姓名： " &lt;&lt; this-&gt;m_Name&lt;&lt; " \t岗位：" &lt;&lt; this-&gt;getDeptName()&lt;&lt; " \t岗位职责：管理公司所有事务" &lt;&lt; endl;}string Boss::getDeptName(){return string("总裁");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5-测试多态"><a href="#6-5-测试多态" class="headerlink" title="6.5 测试多态"></a>6.5 测试多态</h3><p>在职工管理系统.cpp中添加测试函数，并且运行能够产生多态</p><p>测试代码如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "worker.h"#include "employee.h"#include "manager.h"#include "boss.h"void test(){Worker * worker = NULL;worker = new Employee(1, "张三", 1);worker-&gt;showInfo();delete worker;worker = new Manager(2, "李四", 2);worker-&gt;showInfo();delete worker;worker = new Boss(3, "王五", 3);worker-&gt;showInfo();delete worker;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如图：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546398236081.png"></p><p>测试成功后，测试代码可以注释保留，或者选择删除</p><h2 id="7、添加职工"><a href="#7、添加职工" class="headerlink" title="7、添加职工"></a>7、添加职工</h2><p>功能描述：批量添加职工，并且保存到文件中</p><h3 id="7-1-功能分析"><a href="#7-1-功能分析" class="headerlink" title="7.1 功能分析"></a>7.1 功能分析</h3><p>分析：</p><p>用户在批量创建时，可能会创建不同种类的职工</p><p>如果想将所有不同种类的员工都放入到一个数组中，可以将所有员工的指针维护到一个数组里</p><p>如果想在程序中维护这个不定长度的数组，可以将数组创建到堆区，并利用Worker **的指针维护</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546399491099.png"></p><h3 id="7-2-功能实现"><a href="#7-2-功能实现" class="headerlink" title="7.2 功能实现"></a>7.2 功能实现</h3><p>在WokerManager.h头文件中添加成员属性 代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//记录文件中的人数个数int m_EmpNum;//员工数组的指针Worker ** m_EmpArray;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在WorkerManager构造函数中初始化属性</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">WorkerManager::WorkerManager(){//初始化人数this-&gt;m_EmpNum = 0;//初始化数组指针this-&gt;m_EmpArray = NULL;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在workerManager.h中添加成员函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//增加职工void Add_Emp();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>workerManager.cpp中实现该函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//增加职工void WorkerManager::Add_Emp(){cout &lt;&lt; "请输入增加职工数量： " &lt;&lt; endl;int addNum = 0;cin &gt;&gt; addNum;if (addNum &gt; 0){//计算新空间大小int newSize = this-&gt;m_EmpNum + addNum;//开辟新空间Worker ** newSpace = new Worker*[newSize];//将原空间下内容存放到新空间下if (this-&gt;m_EmpArray != NULL){for (int i = 0; i &lt; this-&gt;m_EmpNum; i++){newSpace[i] = this-&gt;m_EmpArray[i];}}//输入新数据for (int i = 0; i &lt; addNum; i++){int id;string name;int dSelect;cout &lt;&lt; "请输入第 " &lt;&lt; i + 1 &lt;&lt; " 个新职工编号：" &lt;&lt; endl;cin &gt;&gt; id;cout &lt;&lt; "请输入第 " &lt;&lt; i + 1 &lt;&lt; " 个新职工姓名：" &lt;&lt; endl;cin &gt;&gt; name;cout &lt;&lt; "请选择该职工的岗位：" &lt;&lt; endl;cout &lt;&lt; "1、普通职工" &lt;&lt; endl;cout &lt;&lt; "2、经理" &lt;&lt; endl;cout &lt;&lt; "3、老板" &lt;&lt; endl;cin &gt;&gt; dSelect;Worker * worker = NULL;switch (dSelect){case 1: //普通员工worker = new Employee(id, name, 1);break;case 2: //经理worker = new Manager(id, name, 2);break;case 3:  //老板worker = new Boss(id, name, 3);break;default:break;}newSpace[this-&gt;m_EmpNum + i] = worker;}//释放原有空间delete[] this-&gt;m_EmpArray;//更改新空间的指向this-&gt;m_EmpArray = newSpace;//更新新的个数this-&gt;m_EmpNum = newSize;//提示信息cout &lt;&lt; "成功添加" &lt;&lt; addNum &lt;&lt; "名新职工！" &lt;&lt; endl;}else{cout &lt;&lt; "输入有误" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在WorkerManager.cpp的析构函数中，释放堆区数据</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">WorkerManager::~WorkerManager(){if (this-&gt;m_EmpArray != NULL){delete[] this-&gt;m_EmpArray;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-测试添加"><a href="#7-3-测试添加" class="headerlink" title="7.3 测试添加"></a>7.3 测试添加</h3><p>在main函数分支 1  选项中，调用添加职工接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546401705277.png"></p><p>效果如图：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546401763461.png"></p><p>至此，添加职工到程序中功能实现完毕</p><h2 id="8、文件交互-写文件"><a href="#8、文件交互-写文件" class="headerlink" title="8、文件交互 - 写文件"></a>8、文件交互 - 写文件</h2><p>功能描述：对文件进行读写</p><p>​在上一个添加功能中，我们只是将所有的数据添加到了内存中，一旦程序结束就无法保存了</p><p>​因此文件管理类中需要一个与文件进行交互的功能，对于文件进行读写操作</p><h3 id="8-1-设定文件路径"><a href="#8-1-设定文件路径" class="headerlink" title="8.1 设定文件路径"></a>8.1 设定文件路径</h3><p>首先我们将文件路径，在workerManager.h中添加宏常量,并且包含头文件 fstream</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#define  FILENAME "empFile.txt"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-2-成员函数声明"><a href="#8-2-成员函数声明" class="headerlink" title="8.2 成员函数声明"></a>8.2 成员函数声明</h3><p>在workerManager.h中类里添加成员函数 <code>void save()</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//保存文件void save();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-3-保存文件功能实现"><a href="#8-3-保存文件功能实现" class="headerlink" title="8.3 保存文件功能实现"></a>8.3 保存文件功能实现</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void WorkerManager::save(){ofstream ofs;ofs.open(FILENAME, ios::out);for (int i = 0; i &lt; this-&gt;m_EmpNum; i++){ofs &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Id &lt;&lt; " " &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Name &lt;&lt; " " &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; endl;}ofs.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-保存文件功能测试"><a href="#8-4-保存文件功能测试" class="headerlink" title="8.4 保存文件功能测试"></a>8.4 保存文件功能测试</h3><p>在添加职工功能中添加成功后添加保存文件函数</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546432469465.png"></p><p>再次运行代码，添加职工</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546401763461.png"></p><p>同级目录下多出文件，并且保存了添加的信息</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546432343078.png"></p><h2 id="9、文件交互-读文件"><a href="#9、文件交互-读文件" class="headerlink" title="9、文件交互 - 读文件"></a>9、文件交互 - 读文件</h2><p>功能描述：将文件中的内容读取到程序中</p><p>虽然我们实现了添加职工后保存到文件的操作，但是每次开始运行程序，并没有将文件中数据读取到程序中</p><p>而我们的程序功能中还有清空文件的需求</p><p>因此构造函数初始化数据的情况分为三种</p><ol><li>第一次使用，文件未创建</li><li>文件存在，但是数据被用户清空</li><li>文件存在，并且保存职工的所有数据</li></ol><h3 id="9-1-文件未创建"><a href="#9-1-文件未创建" class="headerlink" title="9.1 文件未创建"></a>9.1 文件未创建</h3><p>在workerManager.h中添加新的成员属性 m_FileIsEmpty标志文件是否为空</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//标志文件是否为空bool m_FileIsEmpty;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改WorkerManager.cpp中构造函数代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">WorkerManager::WorkerManager(){ifstream ifs;ifs.open(FILENAME, ios::in);//文件不存在情况if (!ifs.is_open()){cout &lt;&lt; "文件不存在" &lt;&lt; endl; //测试输出this-&gt;m_EmpNum = 0;  //初始化人数this-&gt;m_FileIsEmpty = true; //初始化文件为空标志this-&gt;m_EmpArray = NULL; //初始化数组ifs.close(); //关闭文件return;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除文件后，测试文件不存在时初始化数据功能</p><h3 id="9-2-文件存在且数据为空"><a href="#9-2-文件存在且数据为空" class="headerlink" title="9.2 文件存在且数据为空"></a>9.2 文件存在且数据为空</h3><p>在workerManager.cpp中的构造函数追加代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//文件存在，并且没有记录char ch;ifs &gt;&gt; ch;if (ifs.eof()){cout &lt;&lt; "文件为空!" &lt;&lt; endl;this-&gt;m_EmpNum = 0;this-&gt;m_FileIsEmpty = true;this-&gt;m_EmpArray = NULL;ifs.close();return;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>追加代码位置如图：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546435197575.png"></p><p>将文件创建后清空文件内容，并测试该情况下初始化功能</p><p>我们发现文件不存在或者为空清空 m_FileIsEmpty 判断文件是否为空的标志都为真，那何时为假？</p><p>成功添加职工后，应该更改文件不为空的标志</p><p>在<code>void WorkerManager::Add_Emp() </code>成员函数中添加：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//更新职工不为空标志this-&gt;m_FileIsEmpty = false;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546656256176.png"></p><h3 id="9-3-文件存在且保存职工数据"><a href="#9-3-文件存在且保存职工数据" class="headerlink" title="9.3 文件存在且保存职工数据"></a>9.3 文件存在且保存职工数据</h3><h4 id="9-3-1-获取记录的职工人数"><a href="#9-3-1-获取记录的职工人数" class="headerlink" title="9.3.1 获取记录的职工人数"></a>9.3.1 获取记录的职工人数</h4><p>在workerManager.h中添加成员函数 <code> int get_EmpNum();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//统计人数int get_EmpNum();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>workerManager.cpp中实现</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int WorkerManager::get_EmpNum(){ifstream ifs;ifs.open(FILENAME, ios::in);int id;string name;int dId;int num = 0;while (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId){        //记录人数num++;}ifs.close();return num;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在workerManager.cpp构造函数中继续追加代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int num =  this-&gt;get_EmpNum();cout &lt;&lt; "职工个数为：" &lt;&lt; num &lt;&lt; endl;  //测试代码this-&gt;m_EmpNum = num;  //更新成员属性 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>手动添加一些职工数据，测试获取职工数量函数</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546436429055.png"></p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546436385793.png"></p><h4 id="9-3-2-初始化数组"><a href="#9-3-2-初始化数组" class="headerlink" title="9.3.2 初始化数组"></a>9.3.2 初始化数组</h4><p>根据职工的数据以及职工数据，初始化workerManager中的Worker ** m_EmpArray 指针</p><p>在WorkerManager.h中添加成员函数  <code>void init_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//初始化员工void init_Emp();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在WorkerManager.cpp中实现</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void WorkerManager::init_Emp(){ifstream ifs;ifs.open(FILENAME, ios::in);int id;string name;int dId;int index = 0;while (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId){Worker * worker = NULL;//根据不同的部门Id创建不同对象if (dId == 1)  // 1普通员工{worker = new Employee(id, name, dId);}else if (dId == 2) //2经理{worker = new Manager(id, name, dId);}else //总裁{worker = new Boss(id, name, dId);}//存放在数组中this-&gt;m_EmpArray[index] = worker;index++;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在workerManager.cpp构造函数中追加代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//根据职工数创建数组this-&gt;m_EmpArray = new Worker *[this-&gt;m_EmpNum];//初始化职工init_Emp();//测试代码for (int i = 0; i &lt; m_EmpNum; i++){cout &lt;&lt; "职工号： " &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Id&lt;&lt; " 职工姓名： " &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Name&lt;&lt; " 部门编号： " &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，测试从文件中获取的数据</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546436938152.png"></p><p>至此初始化数据功能完毕，测试代码可以注释或删除掉！</p><h2 id="10、显示职工"><a href="#10、显示职工" class="headerlink" title="10、显示职工"></a>10、显示职工</h2><p>功能描述：显示当前所有职工信息</p><h4 id="10-1-显示职工函数声明"><a href="#10-1-显示职工函数声明" class="headerlink" title="10.1 显示职工函数声明"></a>10.1 显示职工函数声明</h4><p>在workerManager.h中添加成员函数  <code>void Show_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//显示职工void Show_Emp();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="10-2-显示职工函数实现"><a href="#10-2-显示职工函数实现" class="headerlink" title="10.2 显示职工函数实现"></a>10.2 显示职工函数实现</h4><p>在workerManager.cpp中实现成员函数 <code>void Show_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//显示职工void WorkerManager::Show_Emp(){if (this-&gt;m_FileIsEmpty){cout &lt;&lt; "文件不存在或记录为空！" &lt;&lt; endl;}else{for (int i = 0; i &lt; m_EmpNum; i++){//利用多态调用接口this-&gt;m_EmpArray[i]-&gt;showInfo();}}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-3-测试显示职工"><a href="#10-3-测试显示职工" class="headerlink" title="10.3 测试显示职工"></a>10.3 测试显示职工</h4><p>在main函数分支 2  选项中，调用显示职工接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546497336465.png"></p><p>测试时分别测试 文件为空和文件不为空两种情况</p><p>测试效果：</p><p>测试1-文件不存在或者为空情况</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546497082135.png"></p><p>测试2 - 文件存在且有记录情况</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546496947671.png"></p><p>测试完毕，至此，显示所有职工信息功能实现</p><h2 id="11、删除职工"><a href="#11、删除职工" class="headerlink" title="11、删除职工"></a>11、删除职工</h2><p>功能描述：按照职工的编号进行删除职工操作</p><h4 id="11-1-删除职工函数声明"><a href="#11-1-删除职工函数声明" class="headerlink" title="11.1 删除职工函数声明"></a>11.1 删除职工函数声明</h4><p>在workerManager.h中添加成员函数  <code>void Del_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//删除职工void Del_Emp();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="11-2-职工是否存在函数声明"><a href="#11-2-职工是否存在函数声明" class="headerlink" title="11.2 职工是否存在函数声明"></a>11.2 职工是否存在函数声明</h4><p>很多功能都需要用到根据职工是否存在来进行操作如：删除职工、修改职工、查找职工</p><p>因此添加该公告函数，以便后续调用</p><p>在workerManager.h中添加成员函数  <code>int IsExist(int id);</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//按照职工编号判断职工是否存在,若存在返回职工在数组中位置，不存在返回-1int IsExist(int id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="11-3-职工是否存在函数实现"><a href="#11-3-职工是否存在函数实现" class="headerlink" title="11.3 职工是否存在函数实现"></a>11.3 职工是否存在函数实现</h4><p>在workerManager.cpp中实现成员函数 <code>int IsExist(int id);</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int WorkerManager::IsExist(int id){int index = -1;for (int i = 0; i &lt; this-&gt;m_EmpNum; i++){if (this-&gt;m_EmpArray[i]-&gt;m_Id == id){index = i;break;}}return index;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-4-删除职工函数实现"><a href="#11-4-删除职工函数实现" class="headerlink" title="11.4 删除职工函数实现"></a>11.4 删除职工函数实现</h4><p>在workerManager.cpp中实现成员函数 <code> void Del_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//删除职工void WorkerManager::Del_Emp(){if (this-&gt;m_FileIsEmpty){cout &lt;&lt; "文件不存在或记录为空！" &lt;&lt; endl;}else{//按职工编号删除cout &lt;&lt; "请输入想要删除的职工号：" &lt;&lt; endl;int id = 0;cin &gt;&gt; id;int index = this-&gt;IsExist(id);if (index != -1)  //说明index上位置数据需要删除{for (int i = index; i &lt; this-&gt;m_EmpNum - 1; i++){this-&gt;m_EmpArray[i] = this-&gt;m_EmpArray[i + 1];}this-&gt;m_EmpNum--;this-&gt;save(); //删除后数据同步到文件中cout &lt;&lt; "删除成功！" &lt;&lt; endl;}else{cout &lt;&lt; "删除失败，未找到该职工" &lt;&lt; endl;}}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-5-测试删除职工"><a href="#11-5-测试删除职工" class="headerlink" title="11.5 测试删除职工"></a>11.5 测试删除职工</h4><p>在main函数分支 3  选项中，调用删除职工接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546502698622.png"></p><p>测试1 - 删除不存在职工情况</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546500324196.png"></p><p>测试2 - 删除存在的职工情况</p><p>删除成功提示图：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546500350526.png"></p><p>再次显示所有职工信息，确保已经删除</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546500361889.png"></p><p>查看文件中信息，再次核实员工已被完全删除</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546500383570.png"></p><p>至此，删除职工功能实现完毕！</p><h2 id="12、修改职工"><a href="#12、修改职工" class="headerlink" title="12、修改职工"></a>12、修改职工</h2><p>功能描述：能够按照职工的编号对职工信息进行修改并保存</p><h4 id="12-1-修改职工函数声明"><a href="#12-1-修改职工函数声明" class="headerlink" title="12.1 修改职工函数声明"></a>12.1 修改职工函数声明</h4><p>在workerManager.h中添加成员函数  <code>void Mod_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//修改职工void Mod_Emp();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="12-2-修改职工函数实现"><a href="#12-2-修改职工函数实现" class="headerlink" title="12.2 修改职工函数实现"></a>12.2 修改职工函数实现</h4><p>在workerManager.cpp中实现成员函数 <code> void Mod_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//修改职工void WorkerManager::Mod_Emp(){if (this-&gt;m_FileIsEmpty){cout &lt;&lt; "文件不存在或记录为空！" &lt;&lt; endl;}else{cout &lt;&lt; "请输入修改职工的编号：" &lt;&lt; endl;int id;cin &gt;&gt; id;int ret = this-&gt;IsExist(id);if (ret != -1){ //查找到编号的职工delete this-&gt;m_EmpArray[ret];int newId = 0;string newName = "";int dSelect = 0;cout &lt;&lt; "查到： " &lt;&lt; id &lt;&lt; "号职工，请输入新职工号： " &lt;&lt; endl;cin &gt;&gt; newId;cout &lt;&lt; "请输入新姓名： " &lt;&lt; endl;cin &gt;&gt; newName;cout &lt;&lt; "请输入岗位： " &lt;&lt; endl;cout &lt;&lt; "1、普通职工" &lt;&lt; endl;cout &lt;&lt; "2、经理" &lt;&lt; endl;cout &lt;&lt; "3、老板" &lt;&lt; endl;cin &gt;&gt; dSelect;Worker * worker = NULL;switch (dSelect){case1:worker = new Employee(newId, newName, dSelect);break;case2:worker = new Manager(newId, newName, dSelect);break;case 3:worker = new Boss(newId, newName, dSelect);break;default:break;}//更改数据 到数组中this-&gt;m_EmpArray[ret]= worker;cout &lt;&lt; "修改成功！" &lt;&lt; endl;//保存到文件中this-&gt;save();}else{cout &lt;&lt; "修改失败，查无此人" &lt;&lt; endl;}}//按任意键 清屏system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-3-测试修改职工"><a href="#12-3-测试修改职工" class="headerlink" title="12.3 测试修改职工"></a>12.3 测试修改职工</h4><p>在main函数分支 4  选项中，调用修改职工接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546502651922.png"></p><p>测试1 - 修改不存在职工情况</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546502759643.png"></p><p>测试2 - 修改存在职工情况，例如将职工 “李四” 改为 “赵四”</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546502830350.png"></p><p>修改后再次查看所有职工信息，并确认修改成功</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546502865443.png"></p><p>再次确认文件中信息也同步更新</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546502898653.png"></p><p>至此，修改职工功能已实现！</p><h2 id="13、查找职工"><a href="#13、查找职工" class="headerlink" title="13、查找职工"></a>13、查找职工</h2><p>功能描述：提供两种查找职工方式，一种按照职工编号，一种按照职工姓名</p><h4 id="13-1-查找职工函数声明"><a href="#13-1-查找职工函数声明" class="headerlink" title="13.1 查找职工函数声明"></a>13.1 查找职工函数声明</h4><p>在workerManager.h中添加成员函数  <code>void Find_Emp();</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//查找职工void Find_Emp();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="13-2-查找职工函数实现"><a href="#13-2-查找职工函数实现" class="headerlink" title="13.2 查找职工函数实现"></a>13.2 查找职工函数实现</h4><p>在workerManager.cpp中实现成员函数 <code> void Find_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//查找职工void WorkerManager::Find_Emp(){if (this-&gt;m_FileIsEmpty){cout &lt;&lt; "文件不存在或记录为空！" &lt;&lt; endl;}else{cout &lt;&lt; "请输入查找的方式：" &lt;&lt; endl;cout &lt;&lt; "1、按职工编号查找" &lt;&lt; endl;cout &lt;&lt; "2、按姓名查找" &lt;&lt; endl;int select = 0;cin &gt;&gt; select;if (select == 1) //按职工号查找{int id;cout &lt;&lt; "请输入查找的职工编号：" &lt;&lt; endl;cin &gt;&gt; id;int ret = IsExist(id);if (ret != -1){cout &lt;&lt; "查找成功！该职工信息如下：" &lt;&lt; endl;this-&gt;m_EmpArray[ret]-&gt;showInfo();}else{cout &lt;&lt; "查找失败，查无此人" &lt;&lt; endl;}}else if(select == 2) //按姓名查找{string name;cout &lt;&lt; "请输入查找的姓名：" &lt;&lt; endl;cin &gt;&gt; name;bool flag = false;  //查找到的标志for (int i = 0; i &lt; m_EmpNum; i++){if (m_EmpArray[i]-&gt;m_Name == name){cout &lt;&lt; "查找成功,职工编号为："                           &lt;&lt; m_EmpArray[i]-&gt;m_Id                           &lt;&lt; " 号的信息如下：" &lt;&lt; endl;flag = true;this-&gt;m_EmpArray[i]-&gt;showInfo();}}if (flag == false){//查无此人cout &lt;&lt; "查找失败，查无此人" &lt;&lt; endl;}}else{cout &lt;&lt; "输入选项有误" &lt;&lt; endl;}}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-3-测试查找职工"><a href="#13-3-测试查找职工" class="headerlink" title="13.3 测试查找职工"></a>13.3 测试查找职工</h4><p>在main函数分支 5  选项中，调用查找职工接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546504714318.png"></p><p>测试1 - 按照职工编号查找 - 查找不存在职工</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546504767229.png"></p><p>测试2 - 按照职工编号查找 -  查找存在职工</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546505046521.png"></p><p>测试3 - 按照职工姓名查找 - 查找不存在职工</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546505115610.png"></p><p>测试4 - 按照职工姓名查找 - 查找存在职工（如果出现重名，也一并显示，在文件中可以添加重名职工）</p><p>例如 添加两个王五的职工，然后按照姓名查找王五</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546507850441.png"></p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546507760284.png"></p><p>至此，查找职工功能实现完毕！</p><h2 id="14、排序"><a href="#14、排序" class="headerlink" title="14、排序"></a>14、排序</h2><p>功能描述：按照职工编号进行排序，排序的顺序由用户指定</p><h4 id="14-1-排序函数声明"><a href="#14-1-排序函数声明" class="headerlink" title="14.1 排序函数声明"></a>14.1 排序函数声明</h4><p>在workerManager.h中添加成员函数  <code>void Sort_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//排序职工void Sort_Emp();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="14-2-排序函数实现"><a href="#14-2-排序函数实现" class="headerlink" title="14.2 排序函数实现"></a>14.2 排序函数实现</h4><p>在workerManager.cpp中实现成员函数 <code> void Sort_Emp();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//排序职工void WorkerManager::Sort_Emp(){if (this-&gt;m_FileIsEmpty){cout &lt;&lt; "文件不存在或记录为空！" &lt;&lt; endl;system("pause");system("cls");}else{cout &lt;&lt; "请选择排序方式： " &lt;&lt; endl;cout &lt;&lt; "1、按职工号进行升序" &lt;&lt; endl;cout &lt;&lt; "2、按职工号进行降序" &lt;&lt; endl;int select = 0;cin &gt;&gt; select;for (int i = 0; i &lt; m_EmpNum; i++){int minOrMax = i;for (int j = i + 1; j &lt; m_EmpNum; j++){if (select == 1) //升序{if (m_EmpArray[minOrMax]-&gt;m_Id &gt; m_EmpArray[j]-&gt;m_Id){minOrMax = j;}}else  //降序{if (m_EmpArray[minOrMax]-&gt;m_Id &lt; m_EmpArray[j]-&gt;m_Id){minOrMax = j;}}}if (i != minOrMax){Worker * temp = m_EmpArray[i];m_EmpArray[i] = m_EmpArray[minOrMax];m_EmpArray[minOrMax] = temp;}}cout &lt;&lt; "排序成功,排序后结果为：" &lt;&lt; endl;this-&gt;save();this-&gt;Show_Emp();}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="14-3-测试排序功能"><a href="#14-3-测试排序功能" class="headerlink" title="14.3 测试排序功能"></a>14.3 测试排序功能</h4><p>在main函数分支 6  选项中，调用排序职工接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546510145181.png"></p><p>测试：</p><p>首先我们添加一些职工，序号是无序的，例如：</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546658169987.png"></p><p>测试 - 升序排序</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546658190479.png"></p><p>文件同步更新</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546658273581.png"></p><p>测试 - 降序排序</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546658288936.png"></p><p>文件同步更新</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546658313704.png"></p><p>至此，职工按照编号排序的功能实现完毕！</p><h2 id="15、清空文件"><a href="#15、清空文件" class="headerlink" title="15、清空文件"></a>15、清空文件</h2><p>功能描述：将文件中记录数据清空</p><h4 id="15-1-清空函数声明"><a href="#15-1-清空函数声明" class="headerlink" title="15.1 清空函数声明"></a>15.1 清空函数声明</h4><p>在workerManager.h中添加成员函数  <code>void Clean_File();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//清空文件void Clean_File();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="15-2-清空函数实现"><a href="#15-2-清空函数实现" class="headerlink" title="15.2 清空函数实现"></a>15.2 清空函数实现</h4><p>在workerManager.cpp中实现员函数 <code> void Clean_File();</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//清空文件void WorkerManager::Clean_File(){cout &lt;&lt; "确认清空？" &lt;&lt; endl;cout &lt;&lt; "1、确认" &lt;&lt; endl;cout &lt;&lt; "2、返回" &lt;&lt; endl;int select = 0;cin &gt;&gt; select;if (select == 1){//打开模式 ios::trunc 如果存在删除文件并重新创建ofstream ofs(FILENAME, ios::trunc);ofs.close();if (this-&gt;m_EmpArray != NULL){            for (int i = 0; i &lt; this-&gt;m_EmpNum; i++){if (this-&gt;m_EmpArray[i] != NULL){delete this-&gt;m_EmpArray[i];}}this-&gt;m_EmpNum = 0;delete[] this-&gt;m_EmpArray;this-&gt;m_EmpArray = NULL;this-&gt;m_FileIsEmpty = true;}cout &lt;&lt; "清空成功！" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="15-3-测试清空文件"><a href="#15-3-测试清空文件" class="headerlink" title="15.3 测试清空文件"></a>15.3 测试清空文件</h4><p>在main函数分支 7  选项中，调用清空文件接口</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546511085541.png"></p><p>测试：确认清空文件</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546510976745.png"></p><p>再次查看文件中数据，记录已为空</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546510994196.png"></p><p>打开文件，里面数据已确保清空，该功能需要慎用！</p><p><img src="/2023/03/03/c-an-li/2-ji-yu-duo-tai-de-qi-ye-zhi-gong-xi-tong-zi-liao/1546511018517.png"></p><p>随着清空文件功能实现，本案例制作完毕  ^ _ ^  </p>]]></content>
      
      
      <categories>
          
          <category> C++案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 基于多态的职工管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-通讯录管理系统</title>
      <link href="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/"/>
      <url>/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="1、系统需求"><a href="#1、系统需求" class="headerlink" title="1、系统需求"></a>1、系统需求</h2><p>通讯录是一个可以记录亲人、好友信息的工具。</p><p>本教程主要利用C++来实现一个通讯录管理系统</p><p>系统中需要实现的功能如下：</p><ul><li>添加联系人：向通讯录中添加新人，信息包括（姓名、性别、年龄、联系电话、家庭住址）最多记录1000人</li><li>显示联系人：显示通讯录中所有联系人信息</li><li>删除联系人：按照姓名进行删除指定联系人</li><li>查找联系人：按照姓名查看指定联系人信息</li><li>修改联系人：按照姓名重新修改指定联系人</li><li>清空联系人：清空通讯录中所有信息</li><li>退出通讯录：退出当前使用的通讯录</li></ul><h2 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h2><p>创建项目步骤如下：</p><ul><li>创建新项目</li><li>添加文件</li></ul><h3 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h3><p>打开vs2017后，点击创建新项目，创建新的C++项目</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544151401138.png" alt="1544151401138"></p><p>填写项目名称，选择项目路径</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544151579620.png" alt="1544151579620"></p><h3 id="2-2添加文件"><a href="#2-2添加文件" class="headerlink" title="2.2添加文件"></a>2.2添加文件</h3><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544161551746.png" alt="1544161551746"></p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544161648175.png" alt="1544161648175"></p><p>添加成功后，效果如图：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544162344057.png" alt="1544162344057"></p><p>至此，项目已创建完毕</p><h2 id="3、菜单功能"><a href="#3、菜单功能" class="headerlink" title="3、菜单功能"></a>3、菜单功能</h2><p><strong>功能描述：</strong> 用户选择功能的界面</p><p>菜单界面效果如下图：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544149559893.png" alt="1544149559893"></p><p><strong>步骤：</strong></p><ul><li>封装函数显示该界面  如 <code>void showMenu()</code></li><li>在main函数中调用封装好的函数</li></ul><p><strong>代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//菜单界面void showMenu(){cout &lt;&lt; "***************************" &lt;&lt; endl;cout &lt;&lt; "*****  1、添加联系人  *****" &lt;&lt; endl;cout &lt;&lt; "*****  2、显示联系人  *****" &lt;&lt; endl;cout &lt;&lt; "*****  3、删除联系人  *****" &lt;&lt; endl;cout &lt;&lt; "*****  4、查找联系人  *****" &lt;&lt; endl;cout &lt;&lt; "*****  5、修改联系人  *****" &lt;&lt; endl;cout &lt;&lt; "*****  6、清空联系人  *****" &lt;&lt; endl;cout &lt;&lt; "*****  0、退出通讯录  *****" &lt;&lt; endl;cout &lt;&lt; "***************************" &lt;&lt; endl;}int main() {showMenu();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、退出功能"><a href="#4、退出功能" class="headerlink" title="4、退出功能"></a>4、退出功能</h2><p>功能描述：退出通讯录系统</p><p>思路：根据用户不同的选择，进入不同的功能，可以选择switch分支结构，将整个架构进行搭建</p><p>当用户选择0时候，执行退出，选择其他先不做操作，也不会退出程序</p><p><strong>代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int select = 0;while (true){showMenu();cin &gt;&gt; select;switch (select){case 1:  //添加联系人break;case 2:  //显示联系人break;case 3:  //删除联系人break;case 4:  //查找联系人break;case 5:  //修改联系人break;case 6:  //清空联系人break;case 0:  //退出通讯录cout &lt;&lt; "欢迎下次使用" &lt;&lt; endl;system("pause");return 0;break;default:break;}}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544163868043.png" alt="1544163868043"></p><h2 id="5、添加联系人"><a href="#5、添加联系人" class="headerlink" title="5、添加联系人"></a>5、添加联系人</h2><p>功能描述：</p><p>实现添加联系人功能，联系人上限为1000人，联系人信息包括（姓名、性别、年龄、联系电话、家庭住址）</p><p>添加联系人实现步骤：</p><ul><li>设计联系人结构体</li><li>设计通讯录结构体</li><li>main函数中创建通讯录</li><li>封装添加联系人函数</li><li>测试添加联系人功能</li></ul><h3 id="5-1-设计联系人结构体"><a href="#5-1-设计联系人结构体" class="headerlink" title="5.1 设计联系人结构体"></a>5.1 设计联系人结构体</h3><p>联系人信息包括：姓名、性别、年龄、联系电话、家庭住址</p><p>设计如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;  //string头文件//联系人结构体struct Person{string m_Name; //姓名int m_Sex; //性别：1男 2女int m_Age; //年龄string m_Phone; //电话string m_Addr; //住址};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-设计通讯录结构体"><a href="#5-2-设计通讯录结构体" class="headerlink" title="5.2 设计通讯录结构体"></a>5.2 设计通讯录结构体</h3><p>设计时候可以在通讯录结构体中，维护一个容量为1000的存放联系人的数组，并记录当前通讯录中联系人数量</p><p>设计如下</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#define MAX 1000 //最大人数//通讯录结构体struct Addressbooks{struct Person personArray[MAX]; //通讯录中保存的联系人数组int m_Size; //通讯录中人员个数};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-main函数中创建通讯录"><a href="#5-3-main函数中创建通讯录" class="headerlink" title="5.3 main函数中创建通讯录"></a>5.3 main函数中创建通讯录</h3><p>添加联系人函数封装好后，在main函数中创建一个通讯录变量，这个就是我们需要一直维护的通讯录</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mian函数起始位置添加：//创建通讯录Addressbooks abs;//初始化通讯录中人数abs.m_Size = 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-封装添加联系人函数"><a href="#5-4-封装添加联系人函数" class="headerlink" title="5.4 封装添加联系人函数"></a>5.4 封装添加联系人函数</h3><p>思路：添加联系人前先判断通讯录是否已满，如果满了就不再添加，未满情况将新联系人信息逐个加入到通讯录</p><p>添加联系人代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//1、添加联系人信息void addPerson(Addressbooks *abs){//判断电话本是否满了if (abs-&gt;m_Size == MAX){cout &lt;&lt; "通讯录已满，无法添加" &lt;&lt; endl;return;}else{//姓名string name;cout &lt;&lt; "请输入姓名：" &lt;&lt; endl;cin &gt;&gt; name;abs-&gt;personArray[abs-&gt;m_Size].m_Name = name;cout &lt;&lt; "请输入性别：" &lt;&lt; endl;cout &lt;&lt; "1 -- 男" &lt;&lt; endl;cout &lt;&lt; "2 -- 女" &lt;&lt; endl;//性别int sex = 0;while (true){cin &gt;&gt; sex;if (sex == 1 || sex == 2){abs-&gt;personArray[abs-&gt;m_Size].m_Sex = sex;break;}cout &lt;&lt; "输入有误，请重新输入";}//年龄cout &lt;&lt; "请输入年龄：" &lt;&lt; endl;int age = 0;cin &gt;&gt; age;abs-&gt;personArray[abs-&gt;m_Size].m_Age = age;//联系电话cout &lt;&lt; "请输入联系电话：" &lt;&lt; endl;string phone = "";cin &gt;&gt; phone;abs-&gt;personArray[abs-&gt;m_Size].m_Phone = phone;//家庭住址cout &lt;&lt; "请输入家庭住址：" &lt;&lt; endl;string address;cin &gt;&gt; address;abs-&gt;personArray[abs-&gt;m_Size].m_Addr = address;//更新通讯录人数abs-&gt;m_Size++;cout &lt;&lt; "添加成功" &lt;&lt; endl;system("pause");system("cls");}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-测试添加联系人功能"><a href="#5-5-测试添加联系人功能" class="headerlink" title="5.5 测试添加联系人功能"></a>5.5 测试添加联系人功能</h3><p>选择界面中，如果玩家选择了1，代表添加联系人，我们可以测试下该功能</p><p>在switch case 语句中，case1里添加：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 1:  //添加联系人addPerson(&amp;abs);break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试效果如图：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544165554002.png" alt="1544165554002"></p><h2 id="6、显示联系人"><a href="#6、显示联系人" class="headerlink" title="6、显示联系人"></a>6、显示联系人</h2><p>功能描述：显示通讯录中已有的联系人信息</p><p>显示联系人实现步骤：</p><ul><li>封装显示联系人函数</li><li>测试显示联系人功能</li></ul><h3 id="6-1-封装显示联系人函数"><a href="#6-1-封装显示联系人函数" class="headerlink" title="6.1 封装显示联系人函数"></a>6.1 封装显示联系人函数</h3><p>思路：判断如果当前通讯录中没有人员，就提示记录为空，人数大于0，显示通讯录中信息</p><p>显示联系人代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//2、显示所有联系人信息void showPerson(Addressbooks * abs){if (abs-&gt;m_Size == 0){cout &lt;&lt; "当前记录为空" &lt;&lt; endl;}else{for (int i = 0; i &lt; abs-&gt;m_Size; i++){cout &lt;&lt; "姓名：" &lt;&lt; abs-&gt;personArray[i].m_Name &lt;&lt; "\t";cout &lt;&lt; "性别：" &lt;&lt; (abs-&gt;personArray[i].m_Sex == 1 ? "男" : "女") &lt;&lt; "\t";cout &lt;&lt; "年龄：" &lt;&lt; abs-&gt;personArray[i].m_Age &lt;&lt; "\t";cout &lt;&lt; "电话：" &lt;&lt; abs-&gt;personArray[i].m_Phone &lt;&lt; "\t";cout &lt;&lt; "住址：" &lt;&lt; abs-&gt;personArray[i].m_Addr &lt;&lt; endl;}}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-测试显示联系人功能"><a href="#6-2-测试显示联系人功能" class="headerlink" title="6.2 测试显示联系人功能"></a>6.2 测试显示联系人功能</h3><p>在switch case语句中，case 2 里添加</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 2:  //显示联系人showPerson(&amp;abs);break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试效果如图：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544166401582.png" alt="1544166401582"></p><h2 id="7、删除联系人"><a href="#7、删除联系人" class="headerlink" title="7、删除联系人"></a>7、删除联系人</h2><p>功能描述：按照姓名进行删除指定联系人</p><p>删除联系人实现步骤：</p><ul><li>封装检测联系人是否存在</li><li>封装删除联系人函数</li><li>测试删除联系人功能</li></ul><h3 id="7-1-封装检测联系人是否存在"><a href="#7-1-封装检测联系人是否存在" class="headerlink" title="7.1  封装检测联系人是否存在"></a>7.1  封装检测联系人是否存在</h3><p>设计思路：</p><p>删除联系人前，我们需要先判断用户输入的联系人是否存在，如果存在删除，不存在提示用户没有要删除的联系人</p><p>因此我们可以把检测联系人是否存在封装成一个函数中，如果存在，返回联系人在通讯录中的位置，不存在返回-1</p><p>检测联系人是否存在代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//判断是否存在查询的人员，存在返回在数组中索引位置，不存在返回-1int isExist(Addressbooks * abs, string name){for (int i = 0; i &lt; abs-&gt;m_Size; i++){if (abs-&gt;personArray[i].m_Name == name){return i;}}return -1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-封装删除联系人函数"><a href="#7-2-封装删除联系人函数" class="headerlink" title="7.2 封装删除联系人函数"></a>7.2 封装删除联系人函数</h3><p>根据用户输入的联系人判断该通讯录中是否有此人</p><p>查找到进行删除，并提示删除成功</p><p>查不到提示查无此人。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//3、删除指定联系人信息void deletePerson(Addressbooks * abs){cout &lt;&lt; "请输入您要删除的联系人" &lt;&lt; endl;string name;cin &gt;&gt; name;int ret = isExist(abs, name);if (ret != -1){for (int i = ret; i &lt; abs-&gt;m_Size; i++){abs-&gt;personArray[i] = abs-&gt;personArray[i + 1];}         abs-&gt;m_Size--;cout &lt;&lt; "删除成功" &lt;&lt; endl;}else{cout &lt;&lt; "查无此人" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-测试删除联系人功能"><a href="#7-3-测试删除联系人功能" class="headerlink" title="7.3 测试删除联系人功能"></a>7.3 测试删除联系人功能</h3><p>在switch case 语句中，case3里添加：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 3:  //删除联系人deletePerson(&amp;abs);break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试效果如图：</p><p>存在情况：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544167951559.png" alt="1544167951559"></p><p>不存在情况：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544168010831.png" alt="1544168010831"></p><h2 id="8、查找联系人"><a href="#8、查找联系人" class="headerlink" title="8、查找联系人"></a>8、查找联系人</h2><p>功能描述：按照姓名查看指定联系人信息</p><p>查找联系人实现步骤</p><ul><li>封装查找联系人函数</li><li>测试查找指定联系人</li></ul><h3 id="8-1-封装查找联系人函数"><a href="#8-1-封装查找联系人函数" class="headerlink" title="8.1 封装查找联系人函数"></a>8.1 封装查找联系人函数</h3><p>实现思路：判断用户指定的联系人是否存在，如果存在显示信息，不存在则提示查无此人。</p><p>查找联系人代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//4、查找指定联系人信息void findPerson(Addressbooks * abs){cout &lt;&lt; "请输入您要查找的联系人" &lt;&lt; endl;string name;cin &gt;&gt; name;int ret = isExist(abs, name);if (ret != -1){cout &lt;&lt; "姓名：" &lt;&lt; abs-&gt;personArray[ret].m_Name &lt;&lt; "\t";cout &lt;&lt; "性别：" &lt;&lt; abs-&gt;personArray[ret].m_Sex &lt;&lt; "\t";cout &lt;&lt; "年龄：" &lt;&lt; abs-&gt;personArray[ret].m_Age &lt;&lt; "\t";cout &lt;&lt; "电话：" &lt;&lt; abs-&gt;personArray[ret].m_Phone &lt;&lt; "\t";cout &lt;&lt; "住址：" &lt;&lt; abs-&gt;personArray[ret].m_Addr &lt;&lt; endl;}else{cout &lt;&lt; "查无此人" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-测试查找指定联系人"><a href="#8-2-测试查找指定联系人" class="headerlink" title="8.2 测试查找指定联系人"></a>8.2 测试查找指定联系人</h3><p>在switch case 语句中，case4里添加：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 4:  //查找联系人findPerson(&amp;abs);break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试效果如图</p><p>存在情况：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544170057646.png" alt="1544170057646"></p><p>不存在情况：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544170254021.png" alt="1544170254021"></p><h2 id="9、修改联系人"><a href="#9、修改联系人" class="headerlink" title="9、修改联系人"></a>9、修改联系人</h2><p>功能描述：按照姓名重新修改指定联系人</p><p>修改联系人实现步骤</p><ul><li>封装修改联系人函数</li><li>测试修改联系人功能</li></ul><h3 id="9-1-封装修改联系人函数"><a href="#9-1-封装修改联系人函数" class="headerlink" title="9.1 封装修改联系人函数"></a>9.1 封装修改联系人函数</h3><p>实现思路：查找用户输入的联系人，如果查找成功进行修改操作，查找失败提示查无此人</p><p>修改联系人代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//5、修改指定联系人信息void modifyPerson(Addressbooks * abs){cout &lt;&lt; "请输入您要修改的联系人" &lt;&lt; endl;string name;cin &gt;&gt; name;int ret = isExist(abs, name);if (ret != -1){//姓名string name;cout &lt;&lt; "请输入姓名：" &lt;&lt; endl;cin &gt;&gt; name;abs-&gt;personArray[ret].m_Name = name;cout &lt;&lt; "请输入性别：" &lt;&lt; endl;cout &lt;&lt; "1 -- 男" &lt;&lt; endl;cout &lt;&lt; "2 -- 女" &lt;&lt; endl;//性别int sex = 0;while (true){cin &gt;&gt; sex;if (sex == 1 || sex == 2){abs-&gt;personArray[ret].m_Sex = sex;break;}cout &lt;&lt; "输入有误，请重新输入";}//年龄cout &lt;&lt; "请输入年龄：" &lt;&lt; endl;int age = 0;cin &gt;&gt; age;abs-&gt;personArray[ret].m_Age = age;//联系电话cout &lt;&lt; "请输入联系电话：" &lt;&lt; endl;string phone = "";cin &gt;&gt; phone;abs-&gt;personArray[ret].m_Phone = phone;//家庭住址cout &lt;&lt; "请输入家庭住址：" &lt;&lt; endl;string address;cin &gt;&gt; address;abs-&gt;personArray[ret].m_Addr = address;cout &lt;&lt; "修改成功" &lt;&lt; endl;}else{cout &lt;&lt; "查无此人" &lt;&lt; endl;}system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-测试修改联系人功能"><a href="#9-2-测试修改联系人功能" class="headerlink" title="9.2 测试修改联系人功能"></a>9.2 测试修改联系人功能</h3><p>在switch case 语句中，case 5里添加：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 5:  //修改联系人modifyPerson(&amp;abs);break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试效果如图：</p><p>查不到指定联系人情况：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544172265676.png" alt="1544172265676"></p><p>查找到联系人，并修改成功：</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544172164141.png" alt="1544172164141"></p><p>再次查看通讯录，确认修改完毕</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544172228627.png" alt="1544172228627"></p><h2 id="10、清空联系人"><a href="#10、清空联系人" class="headerlink" title="10、清空联系人"></a>10、清空联系人</h2><p>功能描述：清空通讯录中所有信息</p><p>清空联系人实现步骤</p><ul><li>封装清空联系人函数</li><li>测试清空联系人</li></ul><h3 id="10-1-封装清空联系人函数"><a href="#10-1-封装清空联系人函数" class="headerlink" title="10.1 封装清空联系人函数"></a>10.1 封装清空联系人函数</h3><p>实现思路： 将通讯录所有联系人信息清除掉，只要将通讯录记录的联系人数量置为0，做逻辑清空即可。</p><p>清空联系人代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//6、清空所有联系人void cleanPerson(Addressbooks * abs){abs-&gt;m_Size = 0;cout &lt;&lt; "通讯录已清空" &lt;&lt; endl;system("pause");system("cls");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-测试清空联系人"><a href="#10-2-测试清空联系人" class="headerlink" title="10.2  测试清空联系人"></a>10.2  测试清空联系人</h3><p>在switch case 语句中，case 6 里添加：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 6:  //清空联系人cleanPerson(&amp;abs);break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试效果如图：</p><p>清空通讯录</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544172909693.png" alt="1544172909693"></p><p>再次查看信息，显示记录为空</p><p><img src="/2023/03/03/c-an-li/1-tong-xun-lu-guan-li-xi-tong/1544172943653.png" alt="1544172943653"></p><p><strong>至此，通讯录管理系统完成！</strong></p>]]></content>
      
      
      <categories>
          
          <category> C++案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-STL-常用算法</title>
      <link href="/2023/03/03/c-ti-gao-bian-cheng/5-stl-chang-yong-suan-fa/"/>
      <url>/2023/03/03/c-ti-gao-bian-cheng/5-stl-chang-yong-suan-fa/</url>
      
        <content type="html"><![CDATA[<p><strong>概述</strong>:</p><ul><li><p>算法主要是由头文件<code>&lt;algorithm&gt;</code> <code>&lt;functional&gt;</code> <code>&lt;numeric&gt;</code>组成。</p></li><li><p><code>&lt;algorithm&gt;</code>是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等</p></li><li><p><code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数</p></li><li><p><code>&lt;functional&gt;</code>定义了一些模板类,用以声明函数对象。</p></li></ul><h3 id="5-1-常用遍历算法"><a href="#5-1-常用遍历算法" class="headerlink" title="5.1 常用遍历算法"></a>5.1 常用遍历算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的遍历算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>for_each</code>     //遍历容器</li><li><code>transform</code>   //搬运容器到另一个容器中</li></ul><h4 id="5-1-1-for-each"><a href="#5-1-1-for-each" class="headerlink" title="5.1.1 for_each"></a>5.1.1 for_each</h4><p><strong>功能描述：</strong></p><ul><li>实现遍历容器</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>for_each(iterator beg, iterator end, _func);  </code></p><p>// 遍历算法 遍历容器元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _func 函数或者函数对象</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;//普通函数void print01(int val) {cout &lt;&lt; val &lt;&lt; " ";}//函数对象class print02 { public:void operator()(int val) {cout &lt;&lt; val &lt;&lt; " ";}};//for_each算法基本用法void test01() {vector&lt;int&gt; v;for (int i = 0; i &lt; 10; i++) {v.push_back(i);}//遍历算法for_each(v.begin(), v.end(), print01);cout &lt;&lt; endl;for_each(v.begin(), v.end(), print02());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>for_each在实际开发中是最常用遍历算法，需要熟练掌握</p><h4 id="5-1-2-transform"><a href="#5-1-2-transform" class="headerlink" title="5.1.2 transform"></a>5.1.2 transform</h4><p><strong>功能描述：</strong></p><ul><li>搬运容器到另一个容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><code>transform(iterator beg1, iterator end1, iterator beg2, _func);</code></li></ul><p>//beg1 源容器开始迭代器</p><p>//end1 源容器结束迭代器</p><p>//beg2 目标容器开始迭代器</p><p>//_func 函数或者函数对象</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;vector&gt;#include&lt;algorithm&gt;//常用遍历算法  搬运 transformclass TransForm{public:int operator()(int val){return val;}};class MyPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt;v;for (int i = 0; i &lt; 10; i++){v.push_back(i);}vector&lt;int&gt;vTarget; //目标容器vTarget.resize(v.size()); // 目标容器需要提前开辟空间transform(v.begin(), v.end(), vTarget.begin(), TransForm());for_each(vTarget.begin(), vTarget.end(), MyPrint());}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 搬运的目标容器必须要提前开辟空间，否则无法正常搬运</p><h3 id="5-2-常用查找算法"><a href="#5-2-常用查找算法" class="headerlink" title="5.2 常用查找算法"></a>5.2 常用查找算法</h3><p>学习目标：</p><ul><li>掌握常用的查找算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>find</code>                     //查找元素</li><li><code>find_if</code>               //按条件查找元素</li><li><code>adjacent_find</code>    //查找相邻重复元素</li><li><code>binary_search</code>    //二分查找法</li><li><code>count</code>                   //统计元素个数</li><li><code>count_if</code>             //按条件统计元素个数</li></ul><h4 id="5-2-1-find"><a href="#5-2-1-find" class="headerlink" title="5.2.1 find"></a>5.2.1 find</h4><p><strong>功能描述：</strong></p><ul><li>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>find(iterator beg, iterator end, value);  </code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 查找的元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;string&gt;void test01() {vector&lt;int&gt; v;for (int i = 0; i &lt; 10; i++) {v.push_back(i + 1);}//查找容器中是否有 5 这个元素vector&lt;int&gt;::iterator it = find(v.begin(), v.end(), 5);if (it == v.end()) {cout &lt;&lt; "没有找到!" &lt;&lt; endl;}else {cout &lt;&lt; "找到:" &lt;&lt; *it &lt;&lt; endl;}}class Person {public:Person(string name, int age) {this-&gt;m_Name = name;this-&gt;m_Age = age;}//重载==bool operator==(const Person&amp; p) {if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age) {return true;}return false;}public:string m_Name;int m_Age;};void test02() {vector&lt;Person&gt; v;//创建数据Person p1("aaa", 10);Person p2("bbb", 20);Person p3("ccc", 30);Person p4("ddd", 40);v.push_back(p1);v.push_back(p2);v.push_back(p3);v.push_back(p4);vector&lt;Person&gt;::iterator it = find(v.begin(), v.end(), p2);if (it == v.end()) {cout &lt;&lt; "没有找到!" &lt;&lt; endl;}else {cout &lt;&lt; "找到姓名:" &lt;&lt; it-&gt;m_Name &lt;&lt; " 年龄: " &lt;&lt; it-&gt;m_Age &lt;&lt; endl;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结： 利用find可以在容器中找指定的元素，返回值是<strong>迭代器</strong></p><h4 id="5-2-2-find-if"><a href="#5-2-2-find-if" class="headerlink" title="5.2.2 find_if"></a>5.2.2 find_if</h4><p><strong>功能描述：</strong></p><ul><li>按条件查找元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>find_if(iterator beg, iterator end, _Pred);  </code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _Pred 函数或者谓词（返回bool类型的仿函数）</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;string&gt;//内置数据类型class GreaterFive{public:bool operator()(int val){return val &gt; 5;}};void test01() {vector&lt;int&gt; v;for (int i = 0; i &lt; 10; i++) {v.push_back(i + 1);}vector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());if (it == v.end()) {cout &lt;&lt; "没有找到!" &lt;&lt; endl;}else {cout &lt;&lt; "找到大于5的数字:" &lt;&lt; *it &lt;&lt; endl;}}//自定义数据类型class Person {public:Person(string name, int age){this-&gt;m_Name = name;this-&gt;m_Age = age;}public:string m_Name;int m_Age;};class Greater20{public:bool operator()(Person &amp;p){return p.m_Age &gt; 20;}};void test02() {vector&lt;Person&gt; v;//创建数据Person p1("aaa", 10);Person p2("bbb", 20);Person p3("ccc", 30);Person p4("ddd", 40);v.push_back(p1);v.push_back(p2);v.push_back(p3);v.push_back(p4);vector&lt;Person&gt;::iterator it = find_if(v.begin(), v.end(), Greater20());if (it == v.end()){cout &lt;&lt; "没有找到!" &lt;&lt; endl;}else{cout &lt;&lt; "找到姓名:" &lt;&lt; it-&gt;m_Name &lt;&lt; " 年龄: " &lt;&lt; it-&gt;m_Age &lt;&lt; endl;}}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：find_if按条件查找使查找更加灵活，提供的仿函数可以改变不同的策略</p><h4 id="5-2-3-adjacent-find"><a href="#5-2-3-adjacent-find" class="headerlink" title="5.2.3 adjacent_find"></a>5.2.3 adjacent_find</h4><p><strong>功能描述：</strong></p><ul><li>查找相邻重复元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>adjacent_find(iterator beg, iterator end);  </code></p><p>// 查找相邻重复元素,返回相邻元素的第一个位置的迭代器</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;void test01(){vector&lt;int&gt; v;v.push_back(1);v.push_back(2);v.push_back(5);v.push_back(2);v.push_back(4);v.push_back(4);v.push_back(3);//查找相邻重复元素vector&lt;int&gt;::iterator it = adjacent_find(v.begin(), v.end());if (it == v.end()) {cout &lt;&lt; "找不到!" &lt;&lt; endl;}else {cout &lt;&lt; "找到相邻重复元素为:" &lt;&lt; *it &lt;&lt; endl;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent_find算法</p><h4 id="5-2-4-binary-search"><a href="#5-2-4-binary-search" class="headerlink" title="5.2.4 binary_search"></a>5.2.4 binary_search</h4><p><strong>功能描述：</strong></p><ul><li>查找指定元素是否存在</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>bool binary_search(iterator beg, iterator end, value);  </code></p><p>// 查找指定的元素，查到 返回true  否则false</p><p>// 注意: 在<strong>无序序列中不可用</strong></p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 查找的元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;void test01(){vector&lt;int&gt;v;for (int i = 0; i &lt; 10; i++){v.push_back(i);}//二分查找bool ret = binary_search(v.begin(), v.end(),2);if (ret){cout &lt;&lt; "找到了" &lt;&lt; endl;}else{cout &lt;&lt; "未找到" &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>二分查找法查找效率很高，值得注意的是查找的容器中元素必须的有序序列</p><h4 id="5-2-5-count"><a href="#5-2-5-count" class="headerlink" title="5.2.5 count"></a>5.2.5 count</h4><p><strong>功能描述：</strong></p><ul><li>统计元素个数</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>count(iterator beg, iterator end, value);  </code></p><p>// 统计元素出现次数</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 统计的元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;//内置数据类型void test01(){vector&lt;int&gt; v;v.push_back(1);v.push_back(2);v.push_back(4);v.push_back(5);v.push_back(3);v.push_back(4);v.push_back(4);int num = count(v.begin(), v.end(), 4);cout &lt;&lt; "4的个数为： " &lt;&lt; num &lt;&lt; endl;}//自定义数据类型class Person{public:Person(string name, int age){this-&gt;m_Name = name;this-&gt;m_Age = age;}bool operator==(const Person &amp; p){if (this-&gt;m_Age == p.m_Age){return true;}else{return false;}}string m_Name;int m_Age;};void test02(){vector&lt;Person&gt; v;Person p1("刘备", 35);Person p2("关羽", 35);Person p3("张飞", 35);Person p4("赵云", 30);Person p5("曹操", 25);v.push_back(p1);v.push_back(p2);v.push_back(p3);v.push_back(p4);v.push_back(p5);        Person p("诸葛亮",35);int num = count(v.begin(), v.end(), p);cout &lt;&lt; "num = " &lt;&lt; num &lt;&lt; endl;}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 统计自定义数据类型时候，需要配合重载 <code>operator==</code></p><h4 id="5-2-6-count-if"><a href="#5-2-6-count-if" class="headerlink" title="5.2.6 count_if"></a>5.2.6 count_if</h4><p><strong>功能描述：</strong></p><ul><li>按条件统计元素个数</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>count_if(iterator beg, iterator end, _Pred);  </code></p><p>// 按条件统计元素出现次数</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _Pred 谓词</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;class Greater4{public:bool operator()(int val){return val &gt;= 4;}};//内置数据类型void test01(){vector&lt;int&gt; v;v.push_back(1);v.push_back(2);v.push_back(4);v.push_back(5);v.push_back(3);v.push_back(4);v.push_back(4);int num = count_if(v.begin(), v.end(), Greater4());cout &lt;&lt; "大于4的个数为： " &lt;&lt; num &lt;&lt; endl;}//自定义数据类型class Person{public:Person(string name, int age){this-&gt;m_Name = name;this-&gt;m_Age = age;}string m_Name;int m_Age;};class AgeLess35{public:bool operator()(const Person &amp;p){return p.m_Age &lt; 35;}};void test02(){vector&lt;Person&gt; v;Person p1("刘备", 35);Person p2("关羽", 35);Person p3("张飞", 35);Person p4("赵云", 30);Person p5("曹操", 25);v.push_back(p1);v.push_back(p2);v.push_back(p3);v.push_back(p4);v.push_back(p5);int num = count_if(v.begin(), v.end(), AgeLess35());cout &lt;&lt; "小于35岁的个数：" &lt;&lt; num &lt;&lt; endl;}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>按值统计用count，按条件统计用count_if</p><h3 id="5-3-常用排序算法"><a href="#5-3-常用排序算法" class="headerlink" title="5.3 常用排序算法"></a>5.3 常用排序算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的排序算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>sort</code>             //对容器内元素进行排序</li><li><code>random_shuffle</code>   //洗牌   指定范围内的元素随机调整次序</li><li><code>merge </code>           // 容器元素合并，并存储到另一容器中</li><li><code>reverse</code>       // 反转指定范围的元素</li></ul><h4 id="5-3-1-sort"><a href="#5-3-1-sort" class="headerlink" title="5.3.1 sort"></a>5.3.1 sort</h4><p><strong>功能描述：</strong></p><ul><li>对容器内元素进行排序</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>sort(iterator beg, iterator end, _Pred);  </code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>//  beg    开始迭代器</p><p>//  end    结束迭代器</p><p>// _Pred  谓词</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;void myPrint(int val){cout &lt;&lt; val &lt;&lt; " ";}void test01() {vector&lt;int&gt; v;v.push_back(10);v.push_back(30);v.push_back(50);v.push_back(20);v.push_back(40);//sort默认从小到大排序sort(v.begin(), v.end());for_each(v.begin(), v.end(), myPrint);cout &lt;&lt; endl;//从大到小排序sort(v.begin(), v.end(), greater&lt;int&gt;());for_each(v.begin(), v.end(), myPrint);cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>sort属于开发中最常用的算法之一，需熟练掌握</p><h4 id="5-3-2-random-shuffle"><a href="#5-3-2-random-shuffle" class="headerlink" title="5.3.2 random_shuffle"></a>5.3.2 random_shuffle</h4><p><strong>功能描述：</strong></p><ul><li>洗牌   指定范围内的元素随机调整次序</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>random_shuffle(iterator beg, iterator end);  </code></p><p>// 指定范围内的元素随机调整次序</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;ctime&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){srand((unsigned int)time(NULL));vector&lt;int&gt; v;for(int i = 0 ; i &lt; 10;i++){v.push_back(i);}for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;//打乱顺序random_shuffle(v.begin(), v.end());for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>random_shuffle洗牌算法比较实用，使用时记得加随机数种子</p><h4 id="5-3-3-merge"><a href="#5-3-3-merge" class="headerlink" title="5.3.3 merge"></a>5.3.3 merge</h4><p><strong>功能描述：</strong></p><ul><li>两个容器元素合并，并存储到另一容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>// 容器元素合并，并存储到另一容器中</p><p>// 注意: 两个容器必须是<strong>有序的</strong></p><p>// beg1   容器1开始迭代器<br>// end1   容器1结束迭代器<br>// beg2   容器2开始迭代器<br>// end2   容器2结束迭代器<br>// dest    目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v1;vector&lt;int&gt; v2;for (int i = 0; i &lt; 10 ; i++)     {v1.push_back(i);v2.push_back(i + 1);}vector&lt;int&gt; vtarget;//目标容器需要提前开辟空间vtarget.resize(v1.size() + v2.size());//合并  需要两个有序序列merge(v1.begin(), v1.end(), v2.begin(), v2.end(), vtarget.begin());for_each(vtarget.begin(), vtarget.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>merge合并的两个容器必须的有序序列</p><h4 id="5-3-4-reverse"><a href="#5-3-4-reverse" class="headerlink" title="5.3.4 reverse"></a>5.3.4 reverse</h4><p><strong>功能描述：</strong></p><ul><li>将容器内元素进行反转</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>reverse(iterator beg, iterator end);  </code></p><p>// 反转指定范围的元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v;v.push_back(10);v.push_back(30);v.push_back(50);v.push_back(20);v.push_back(40);cout &lt;&lt; "反转前： " &lt;&lt; endl;for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;cout &lt;&lt; "反转后： " &lt;&lt; endl;reverse(v.begin(), v.end());for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>reverse反转区间内元素，面试题可能涉及到</p><h3 id="5-4-常用拷贝和替换算法"><a href="#5-4-常用拷贝和替换算法" class="headerlink" title="5.4 常用拷贝和替换算法"></a>5.4 常用拷贝和替换算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的拷贝和替换算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>copy</code>                      // 容器内指定范围的元素拷贝到另一容器中</li><li><code>replace</code>                // 将容器内指定范围的旧元素修改为新元素</li><li><code>replace_if </code>          // 容器内指定范围满足条件的元素替换为新元素</li><li><code>swap</code>                     // 互换两个容器的元素</li></ul><h4 id="5-4-1-copy"><a href="#5-4-1-copy" class="headerlink" title="5.4.1 copy"></a>5.4.1 copy</h4><p><strong>功能描述：</strong></p><ul><li>容器内指定范围的元素拷贝到另一容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>copy(iterator beg, iterator end, iterator dest);  </code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>// beg  开始迭代器</p><p>// end  结束迭代器</p><p>// dest 目标起始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v1;for (int i = 0; i &lt; 10; i++) {v1.push_back(i + 1);}vector&lt;int&gt; v2;v2.resize(v1.size());copy(v1.begin(), v1.end(), v2.begin());for_each(v2.begin(), v2.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>利用copy算法在拷贝时，目标容器记得提前开辟空间</p><h4 id="5-4-2-replace"><a href="#5-4-2-replace" class="headerlink" title="5.4.2 replace"></a>5.4.2 replace</h4><p><strong>功能描述：</strong></p><ul><li>将容器内指定范围的旧元素修改为新元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>replace(iterator beg, iterator end, oldvalue, newvalue);  </code></p><p>// 将区间内旧元素 替换成 新元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// oldvalue 旧元素</p><p>// newvalue 新元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v;v.push_back(20);v.push_back(30);v.push_back(20);v.push_back(40);v.push_back(50);v.push_back(10);v.push_back(20);cout &lt;&lt; "替换前：" &lt;&lt; endl;for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;//将容器中的20 替换成 2000cout &lt;&lt; "替换后：" &lt;&lt; endl;replace(v.begin(), v.end(), 20,2000);for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>replace会替换区间内满足条件的元素</p><h4 id="5-4-3-replace-if"><a href="#5-4-3-replace-if" class="headerlink" title="5.4.3 replace_if"></a>5.4.3 replace_if</h4><p><strong>功能描述:</strong>  </p><ul><li>将区间内满足条件的元素，替换成指定元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>replace_if(iterator beg, iterator end, _pred, newvalue);  </code></p><p>// 按条件替换元素，满足条件的替换成指定元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _pred 谓词</p><p>// newvalue 替换的新元素</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};class ReplaceGreater30{public:bool operator()(int val){return val &gt;= 30;}};void test01(){vector&lt;int&gt; v;v.push_back(20);v.push_back(30);v.push_back(20);v.push_back(40);v.push_back(50);v.push_back(10);v.push_back(20);cout &lt;&lt; "替换前：" &lt;&lt; endl;for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;//将容器中大于等于的30 替换成 3000cout &lt;&lt; "替换后：" &lt;&lt; endl;replace_if(v.begin(), v.end(), ReplaceGreater30(), 3000);for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>replace_if按条件查找，可以利用仿函数灵活筛选满足的条件</p><h4 id="5-4-4-swap"><a href="#5-4-4-swap" class="headerlink" title="5.4.4 swap"></a>5.4.4 swap</h4><p><strong>功能描述：</strong></p><ul><li>互换两个容器的元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>swap(container c1, container c2);  </code></p><p>// 互换两个容器的元素</p><p>// c1容器1</p><p>// c2容器2</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v1;vector&lt;int&gt; v2;for (int i = 0; i &lt; 10; i++) {v1.push_back(i);v2.push_back(i+100);}cout &lt;&lt; "交换前： " &lt;&lt; endl;for_each(v1.begin(), v1.end(), myPrint());cout &lt;&lt; endl;for_each(v2.begin(), v2.end(), myPrint());cout &lt;&lt; endl;cout &lt;&lt; "交换后： " &lt;&lt; endl;swap(v1, v2);for_each(v1.begin(), v1.end(), myPrint());cout &lt;&lt; endl;for_each(v2.begin(), v2.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>swap交换容器时，注意交换的容器要同种类型</p><h3 id="5-5-常用算术生成算法"><a href="#5-5-常用算术生成算法" class="headerlink" title="5.5 常用算术生成算法"></a>5.5 常用算术生成算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的算术生成算法</li></ul><p><strong>注意：</strong></p><ul><li>算术生成算法属于小型算法，使用时包含的头文件为 <code>#include &lt;numeric&gt;</code></li></ul><p><strong>算法简介：</strong></p><ul><li><p><code>accumulate</code>      // 计算容器元素累计总和</p></li><li><p><code>fill</code>                 // 向容器中添加元素</p></li></ul><h4 id="5-5-1-accumulate"><a href="#5-5-1-accumulate" class="headerlink" title="5.5.1 accumulate"></a>5.5.1 accumulate</h4><p><strong>功能描述：</strong></p><ul><li>计算区间内 容器元素累计总和</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>accumulate(iterator beg, iterator end, value);  </code></p><p>// 计算容器元素累计总和</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 起始值</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;numeric&gt;#include &lt;vector&gt;void test01(){vector&lt;int&gt; v;for (int i = 0; i &lt;= 100; i++) {v.push_back(i);}int total = accumulate(v.begin(), v.end(), 0);cout &lt;&lt; "total = " &lt;&lt; total &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>accumulate使用时头文件注意是 numeric，这个算法很实用</p><h4 id="5-5-2-fill"><a href="#5-5-2-fill" class="headerlink" title="5.5.2 fill"></a>5.5.2 fill</h4><p><strong>功能描述：</strong></p><ul><li>向容器中填充指定的元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>fill(iterator beg, iterator end, value);  </code></p><p>// 向容器中填充元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 填充的值</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;numeric&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v;v.resize(10);//填充fill(v.begin(), v.end(), 100);for_each(v.begin(), v.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>利用fill可以将容器区间内元素填充为 指定的值</p><h3 id="5-6-常用集合算法"><a href="#5-6-常用集合算法" class="headerlink" title="5.6 常用集合算法"></a>5.6 常用集合算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的集合算法</li></ul><p><strong>算法简介：</strong></p><ul><li><p><code>set_intersection</code>          // 求两个容器的交集</p></li><li><p><code>set_union</code>                       // 求两个容器的并集</p></li><li><p><code>set_difference </code>              // 求两个容器的差集</p></li></ul><h4 id="5-6-1-set-intersection"><a href="#5-6-1-set-intersection" class="headerlink" title="5.6.1 set_intersection"></a>5.6.1 set_intersection</h4><p><strong>功能描述：</strong></p><ul><li>求两个容器的交集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>// 求两个集合的交集</p><p>// <strong>注意:两个集合必须是有序序列</strong></p><p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v1;vector&lt;int&gt; v2;for (int i = 0; i &lt; 10; i++)    {v1.push_back(i);v2.push_back(i+5);}vector&lt;int&gt; vTarget;//取两个里面较小的值给目标容器开辟空间vTarget.resize(min(v1.size(), v2.size()));//返回目标容器的最后一个元素的迭代器地址vector&lt;int&gt;::iterator itEnd =         set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());for_each(vTarget.begin(), itEnd, myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> </p><ul><li>求交集的两个集合必须的有序序列</li><li>目标容器开辟空间需要从<strong>两个容器中取小值</strong></li><li>set_intersection返回值既是交集中最后一个元素的位置</li></ul><h4 id="5-6-2-set-union"><a href="#5-6-2-set-union" class="headerlink" title="5.6.2 set_union"></a>5.6.2 set_union</h4><p><strong>功能描述：</strong></p><ul><li>求两个集合的并集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>// 求两个集合的并集</p><p>// <strong>注意:两个集合必须是有序序列</strong></p><p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v1;vector&lt;int&gt; v2;for (int i = 0; i &lt; 10; i++) {v1.push_back(i);v2.push_back(i+5);}vector&lt;int&gt; vTarget;//取两个容器的和给目标容器开辟空间vTarget.resize(v1.size() + v2.size());//返回目标容器的最后一个元素的迭代器地址vector&lt;int&gt;::iterator itEnd =         set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());for_each(vTarget.begin(), itEnd, myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> </p><ul><li>求并集的两个集合必须的有序序列</li><li>目标容器开辟空间需要<strong>两个容器相加</strong></li><li>set_union返回值既是并集中最后一个元素的位置</li></ul><h4 id="5-6-3-set-difference"><a href="#5-6-3-set-difference" class="headerlink" title="5.6.3  set_difference"></a>5.6.3  set_difference</h4><p><strong>功能描述：</strong></p><ul><li>求两个集合的差集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>// 求两个集合的差集</p><p>// <strong>注意:两个集合必须是有序序列</strong></p><p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint{public:void operator()(int val){cout &lt;&lt; val &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v1;vector&lt;int&gt; v2;for (int i = 0; i &lt; 10; i++) {v1.push_back(i);v2.push_back(i+5);}vector&lt;int&gt; vTarget;//取两个里面较大的值给目标容器开辟空间vTarget.resize( max(v1.size() , v2.size()));//返回目标容器的最后一个元素的迭代器地址cout &lt;&lt; "v1与v2的差集为： " &lt;&lt; endl;vector&lt;int&gt;::iterator itEnd =         set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());for_each(vTarget.begin(), itEnd, myPrint());cout &lt;&lt; endl;cout &lt;&lt; "v2与v1的差集为： " &lt;&lt; endl;itEnd = set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin());for_each(vTarget.begin(), itEnd, myPrint());cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> </p><ul><li>求差集的两个集合必须的有序序列</li><li>目标容器开辟空间需要从<strong>两个容器取较大值</strong></li><li>set_difference返回值既是差集中最后一个元素的位置</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ STL-常用算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-STL-函数对象</title>
      <link href="/2023/03/03/c-ti-gao-bian-cheng/4-stl-han-shu-dui-xiang/"/>
      <url>/2023/03/03/c-ti-gao-bian-cheng/4-stl-han-shu-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="4-1-函数对象"><a href="#4-1-函数对象" class="headerlink" title="4.1 函数对象"></a>4.1 函数对象</h3><h4 id="4-1-1-函数对象概念"><a href="#4-1-1-函数对象概念" class="headerlink" title="4.1.1 函数对象概念"></a>4.1.1 函数对象概念</h4><p><strong>概念：</strong></p><ul><li>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong></li><li><strong>函数对象</strong>使用重载的()时，行为类似函数调用，也叫<strong>仿函数</strong></li></ul><p><strong>本质：</strong></p><p>函数对象(仿函数)是一个<strong>类</strong>，不是一个函数</p><h4 id="4-1-2-函数对象使用"><a href="#4-1-2-函数对象使用" class="headerlink" title="4.1.2  函数对象使用"></a>4.1.2  函数对象使用</h4><p><strong>特点：</strong></p><ul><li>函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</li><li>函数对象超出普通函数的概念，函数对象可以有自己的状态</li><li>函数对象可以作为参数传递</li></ul><p><strong>示例:</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//1、函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值class MyAdd{public :int operator()(int v1,int v2){return v1 + v2;}};void test01(){MyAdd myAdd;cout &lt;&lt; myAdd(10, 10) &lt;&lt; endl;}//2、函数对象可以有自己的状态class MyPrint{public:MyPrint(){count = 0;}void operator()(string test){cout &lt;&lt; test &lt;&lt; endl;count++; //统计使用次数}int count; //内部自己的状态};void test02(){MyPrint myPrint;myPrint("hello world");myPrint("hello world");myPrint("hello world");cout &lt;&lt; "myPrint调用次数为： " &lt;&lt; myPrint.count &lt;&lt; endl;}//3、函数对象可以作为参数传递void doPrint(MyPrint &amp;mp , string test){mp(test);}void test03(){MyPrint myPrint;doPrint(myPrint, "Hello C++");}int main() {//test01();//test02();test03();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>仿函数写法非常灵活，可以作为参数进行传递。</li></ul><h3 id="4-2-谓词"><a href="#4-2-谓词" class="headerlink" title="4.2  谓词"></a>4.2  谓词</h3><h4 id="4-2-1-谓词概念"><a href="#4-2-1-谓词概念" class="headerlink" title="4.2.1 谓词概念"></a>4.2.1 谓词概念</h4><p><strong>概念：</strong></p><ul><li>返回bool类型的仿函数称为<strong>谓词</strong></li><li>如果operator()接受一个参数，那么叫做一元谓词</li><li>如果operator()接受两个参数，那么叫做二元谓词</li></ul><h4 id="4-2-2-一元谓词"><a href="#4-2-2-一元谓词" class="headerlink" title="4.2.2 一元谓词"></a>4.2.2 一元谓词</h4><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;//1.一元谓词struct GreaterFive{bool operator()(int val) {return val &gt; 5;}};void test01() {vector&lt;int&gt; v;for (int i = 0; i &lt; 10; i++){v.push_back(i);}vector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());if (it == v.end()) {cout &lt;&lt; "没找到!" &lt;&lt; endl;}else {cout &lt;&lt; "找到:" &lt;&lt; *it &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：参数只有一个的谓词，称为一元谓词</p><h4 id="4-2-3-二元谓词"><a href="#4-2-3-二元谓词" class="headerlink" title="4.2.3 二元谓词"></a>4.2.3 二元谓词</h4><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;//二元谓词class MyCompare{public:bool operator()(int num1, int num2){return num1 &gt; num2;}};void test01(){vector&lt;int&gt; v;v.push_back(10);v.push_back(40);v.push_back(20);v.push_back(30);v.push_back(50);//默认从小到大sort(v.begin(), v.end());for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;cout &lt;&lt; "----------------------------" &lt;&lt; endl;//使用函数对象改变算法策略，排序从大到小sort(v.begin(), v.end(), MyCompare());for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：参数只有两个的谓词，称为二元谓词</p><h3 id="4-3-内建函数对象"><a href="#4-3-内建函数对象" class="headerlink" title="4.3 内建函数对象"></a>4.3 内建函数对象</h3><h4 id="4-3-1-内建函数对象意义"><a href="#4-3-1-内建函数对象意义" class="headerlink" title="4.3.1 内建函数对象意义"></a>4.3.1 内建函数对象意义</h4><p><strong>概念：</strong></p><ul><li>STL内建了一些函数对象</li></ul><p><strong>分类:</strong></p><ul><li><p>算术仿函数</p></li><li><p>关系仿函数</p></li><li><p>逻辑仿函数</p></li></ul><p><strong>用法：</strong></p><ul><li>这些仿函数所产生的对象，用法和一般函数完全相同</li><li>使用内建函数对象，需要引入头文件 <code>#include&lt;functional&gt;</code></li></ul><h4 id="4-3-2-算术仿函数"><a href="#4-3-2-算术仿函数" class="headerlink" title="4.3.2 算术仿函数"></a>4.3.2 算术仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现四则运算</li><li>其中negate是一元运算，其他都是二元运算</li></ul><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; T plus&lt;T&gt;</code>                //加法仿函数</li><li><code>template&lt;class T&gt; T minus&lt;T&gt;</code>              //减法仿函数</li><li><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code>    //乘法仿函数</li><li><code>template&lt;class T&gt; T divides&lt;T&gt;</code>         //除法仿函数</li><li><code>template&lt;class T&gt; T modulus&lt;T&gt;</code>         //取模仿函数</li><li><code>template&lt;class T&gt; T negate&lt;T&gt;</code>           //取反仿函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;functional&gt;//negatevoid test01(){negate&lt;int&gt; n;cout &lt;&lt; n(50) &lt;&lt; endl;}//plusvoid test02(){plus&lt;int&gt; p;cout &lt;&lt; p(10, 20) &lt;&lt; endl;}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：使用内建函数对象时，需要引入头文件 <code>#include &lt;functional&gt;</code></p><h4 id="4-3-3-关系仿函数"><a href="#4-3-3-关系仿函数" class="headerlink" title="4.3.3 关系仿函数"></a>4.3.3 关系仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现关系对比</li></ul><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code>                    //等于</li><li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code>            //不等于</li><li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code>                      //大于</li><li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code>          //大于等于</li><li><code>template&lt;class T&gt; bool less&lt;T&gt;</code>                           //小于</li><li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code>               //小于等于</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;functional&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;class MyCompare{public:bool operator()(int v1,int v2){return v1 &gt; v2;}};void test01(){vector&lt;int&gt; v;v.push_back(10);v.push_back(30);v.push_back(50);v.push_back(40);v.push_back(20);for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;//自己实现仿函数//sort(v.begin(), v.end(), MyCompare());//STL内建仿函数  大于仿函数sort(v.begin(), v.end(), greater&lt;int&gt;());for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：关系仿函数中最常用的就是greater&lt;&gt;大于</p><h4 id="4-3-4-逻辑仿函数"><a href="#4-3-4-逻辑仿函数" class="headerlink" title="4.3.4 逻辑仿函数"></a>4.3.4 逻辑仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现逻辑运算</li></ul><p><strong>函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code>              //逻辑与</li><li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code>                //逻辑或</li><li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code>              //逻辑非</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;functional&gt;#include &lt;algorithm&gt;void test01(){vector&lt;bool&gt; v;v.push_back(true);v.push_back(false);v.push_back(true);v.push_back(false);for (vector&lt;bool&gt;::iterator it = v.begin();it!= v.end();it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;//逻辑非  将v容器搬运到v2中，并执行逻辑非运算vector&lt;bool&gt; v2;v2.resize(v.size());transform(v.begin(), v.end(),  v2.begin(), logical_not&lt;bool&gt;());for (vector&lt;bool&gt;::iterator it = v2.begin(); it != v2.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：逻辑仿函数实际应用较少，了解即可</p>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ STL-函数对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-STL- 常用容器</title>
      <link href="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/"/>
      <url>/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="3-1-string容器"><a href="#3-1-string容器" class="headerlink" title="3.1 string容器"></a>3.1 string容器</h3><h4 id="3-1-1-string基本概念"><a href="#3-1-1-string基本概念" class="headerlink" title="3.1.1 string基本概念"></a>3.1.1 string基本概念</h4><p><strong>本质：</strong></p><ul><li>string是C++风格的字符串，而string本质上是一个类</li></ul><p><strong>string和char * 区别：</strong></p><ul><li>char * 是一个指针</li><li>string是一个类，类内部封装了char*，管理这个字符串，是一个char*型的容器。</li></ul><p><strong>特点：</strong></p><p>string 类内部封装了很多成员方法</p><p>例如：查找find，拷贝copy，删除delete 替换replace，插入insert</p><p>string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</p><h4 id="3-1-2-string构造函数"><a href="#3-1-2-string构造函数" class="headerlink" title="3.1.2 string构造函数"></a>3.1.2 string构造函数</h4><p>构造函数原型：</p><ul><li><code>string();</code>          //创建一个空的字符串 例如: string str;<br><code>string(const char* s);</code>        //使用字符串s初始化</li><li><code>string(const string&amp; str);</code>    //使用一个string对象初始化另一个string对象</li><li><code>string(int n, char c);</code>           //使用n个字符c初始化</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//string构造void test01(){string s1; //创建空字符串，调用无参构造函数cout &lt;&lt; "str1 = " &lt;&lt; s1 &lt;&lt; endl;const char* str = "hello world";string s2(str); //把c_string转换成了stringcout &lt;&lt; "str2 = " &lt;&lt; s2 &lt;&lt; endl;string s3(s2); //调用拷贝构造函数cout &lt;&lt; "str3 = " &lt;&lt; s3 &lt;&lt; endl;string s4(10, 'a');cout &lt;&lt; "str3 = " &lt;&lt; s3 &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：string的多种构造方式没有可比性，灵活使用即可</p><h4 id="3-1-3-string赋值操作"><a href="#3-1-3-string赋值操作" class="headerlink" title="3.1.3 string赋值操作"></a>3.1.3 string赋值操作</h4><p>功能描述：</p><ul><li>给string字符串进行赋值</li></ul><p>赋值的函数原型：</p><ul><li><code>string&amp; operator=(const char* s);</code>             //char*类型字符串 赋值给当前的字符串</li><li><code>string&amp; operator=(const string &amp;s);</code>         //把字符串s赋给当前的字符串</li><li><code>string&amp; operator=(char c);</code>                          //字符赋值给当前的字符串</li><li><code>string&amp; assign(const char *s);</code>                  //把字符串s赋给当前的字符串</li><li><code>string&amp; assign(const char *s, int n);</code>     //把字符串s的前n个字符赋给当前的字符串</li><li><code>string&amp; assign(const string &amp;s);</code>              //把字符串s赋给当前字符串</li><li><code>string&amp; assign(int n, char c);</code>                  //用n个字符c赋给当前字符串</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//赋值void test01(){string str1;str1 = "hello world";cout &lt;&lt; "str1 = " &lt;&lt; str1 &lt;&lt; endl;string str2;str2 = str1;cout &lt;&lt; "str2 = " &lt;&lt; str2 &lt;&lt; endl;string str3;str3 = 'a';cout &lt;&lt; "str3 = " &lt;&lt; str3 &lt;&lt; endl;string str4;str4.assign("hello c++");cout &lt;&lt; "str4 = " &lt;&lt; str4 &lt;&lt; endl;string str5;str5.assign("hello c++",5);cout &lt;&lt; "str5 = " &lt;&lt; str5 &lt;&lt; endl;string str6;str6.assign(str5);cout &lt;&lt; "str6 = " &lt;&lt; str6 &lt;&lt; endl;string str7;str7.assign(5, 'x');cout &lt;&lt; "str7 = " &lt;&lt; str7 &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>​string的赋值方式很多，<code>operator=</code>  这种方式是比较实用的</p><h4 id="3-1-4-string字符串拼接"><a href="#3-1-4-string字符串拼接" class="headerlink" title="3.1.4 string字符串拼接"></a>3.1.4 string字符串拼接</h4><p><strong>功能描述：</strong></p><ul><li>实现在字符串末尾拼接字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; operator+=(const char* str);</code>                   //重载+=操作符</li><li><code>string&amp; operator+=(const char c);</code>                         //重载+=操作符</li><li><code>string&amp; operator+=(const string&amp; str);</code>                //重载+=操作符</li><li><code>string&amp; append(const char *s); </code>                               //把字符串s连接到当前字符串结尾</li><li><code>string&amp; append(const char *s, int n);</code>                 //把字符串s的前n个字符连接到当前字符串结尾</li><li><code>string&amp; append(const string &amp;s);</code>                           //同operator+=(const string&amp; str)</li><li><code>string&amp; append(const string &amp;s, int pos, int n);</code>//字符串s中从pos开始的n个字符连接到字符串结尾</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//字符串拼接void test01(){string str1 = "我";str1 += "爱玩游戏";cout &lt;&lt; "str1 = " &lt;&lt; str1 &lt;&lt; endl;str1 += ':';cout &lt;&lt; "str1 = " &lt;&lt; str1 &lt;&lt; endl;string str2 = "LOL DNF";str1 += str2;cout &lt;&lt; "str1 = " &lt;&lt; str1 &lt;&lt; endl;string str3 = "I";str3.append(" love ");str3.append("game abcde", 4);//str3.append(str2);str3.append(str2, 4, 3); // 从下标4位置开始 ，截取3个字符，拼接到字符串末尾cout &lt;&lt; "str3 = " &lt;&lt; str3 &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：字符串拼接的重载版本很多，初学阶段记住几种即可</p><h4 id="3-1-5-string查找和替换"><a href="#3-1-5-string查找和替换" class="headerlink" title="3.1.5 string查找和替换"></a>3.1.5 string查找和替换</h4><p><strong>功能描述：</strong></p><ul><li>查找：查找指定字符串是否存在</li><li>替换：在指定的位置替换字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>int find(const string&amp; str, int pos = 0) const;</code>              //查找str第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos = 0) const; </code>                     //查找s第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos, int n) const; </code>               //从pos位置查找s的前n个字符第一次位置</li><li><code>int find(const char c, int pos = 0) const; </code>                       //查找字符c第一次出现位置</li><li><code>int rfind(const string&amp; str, int pos = npos) const;</code>      //查找str最后一次位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos = npos) const;</code>              //查找s最后一次出现位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos, int n) const;</code>              //从pos查找s的前n个字符最后一次位置</li><li><code>int rfind(const char c, int pos = 0) const;  </code>                      //查找字符c最后一次出现位置</li><li><code>string&amp; replace(int pos, int n, const string&amp; str); </code>       //替换从pos开始n个字符为字符串str</li><li><code>string&amp; replace(int pos, int n,const char* s); </code>                 //替换从pos开始的n个字符为字符串s</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//查找和替换void test01(){//查找string str1 = "abcdefgde";int pos = str1.find("de");if (pos == -1){cout &lt;&lt; "未找到" &lt;&lt; endl;}else{cout &lt;&lt; "pos = " &lt;&lt; pos &lt;&lt; endl;}pos = str1.rfind("de");cout &lt;&lt; "pos = " &lt;&lt; pos &lt;&lt; endl;}void test02(){//替换string str1 = "abcdefgde";str1.replace(1, 3, "1111");cout &lt;&lt; "str1 = " &lt;&lt; str1 &lt;&lt; endl;}int main() {//test01();//test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>find查找是从左往后，rfind从右往左</li><li>find找到字符串后返回查找的第一个字符位置，找不到返回-1</li><li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li></ul><h4 id="3-1-6-string字符串比较"><a href="#3-1-6-string字符串比较" class="headerlink" title="3.1.6 string字符串比较"></a>3.1.6 string字符串比较</h4><p><strong>功能描述：</strong></p><ul><li>字符串之间的比较</li></ul><p><strong>比较方式：</strong></p><ul><li>字符串比较是按字符的ASCII码进行对比</li></ul><p>= 返回   0</p><p>&gt; 返回   1 </p><p>&lt; 返回  -1</p><p><strong>函数原型：</strong></p><ul><li><code>int compare(const string &amp;s) const; </code>  //与字符串s比较</li><li><code>int compare(const char *s) const;</code>      //与字符串s比较</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//字符串比较void test01(){string s1 = "hello";string s2 = "aello";int ret = s1.compare(s2);if (ret == 0) {cout &lt;&lt; "s1 等于 s2" &lt;&lt; endl;}else if (ret &gt; 0){cout &lt;&lt; "s1 大于 s2" &lt;&lt; endl;}else{cout &lt;&lt; "s1 小于 s2" &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大</p><h4 id="3-1-7-string字符存取"><a href="#3-1-7-string字符存取" class="headerlink" title="3.1.7 string字符存取"></a>3.1.7 string字符存取</h4><p>string中单个字符存取方式有两种</p><ul><li><code>char&amp; operator[](int n); </code>     //通过[]方式取字符</li><li><code>char&amp; at(int n);   </code>                    //通过at方法获取字符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void test01(){string str = "hello world";for (int i = 0; i &lt; str.size(); i++){cout &lt;&lt; str[i] &lt;&lt; " ";}cout &lt;&lt; endl;for (int i = 0; i &lt; str.size(); i++){cout &lt;&lt; str.at(i) &lt;&lt; " ";}cout &lt;&lt; endl;//字符修改str[0] = 'x';str.at(1) = 'x';cout &lt;&lt; str &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：string字符串中单个字符存取有两种方式，利用 [ ] 或 at</p><h4 id="3-1-8-string插入和删除"><a href="#3-1-8-string插入和删除" class="headerlink" title="3.1.8 string插入和删除"></a>3.1.8 string插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对string字符串进行插入和删除字符操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; insert(int pos, const char* s);  </code>                //插入字符串</li><li><code>string&amp; insert(int pos, const string&amp; str); </code>        //插入字符串</li><li><code>string&amp; insert(int pos, int n, char c);</code>                //在指定位置插入n个字符c</li><li><code>string&amp; erase(int pos, int n = npos);</code>                    //删除从Pos开始的n个字符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//字符串插入和删除void test01(){string str = "hello";str.insert(1, "111");cout &lt;&lt; str &lt;&lt; endl;str.erase(1, 3);  //从1号位置开始3个字符cout &lt;&lt; str &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>插入和删除的起始下标都是从0开始</p><h4 id="3-1-9-string子串"><a href="#3-1-9-string子串" class="headerlink" title="3.1.9 string子串"></a>3.1.9 string子串</h4><p><strong>功能描述：</strong></p><ul><li>从字符串中获取想要的子串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string substr(int pos = 0, int n = npos) const;</code>   //返回由pos开始的n个字符组成的字符串</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//子串void test01(){string str = "abcdefg";string subStr = str.substr(1, 3);cout &lt;&lt; "subStr = " &lt;&lt; subStr &lt;&lt; endl;string email = "hello@sina.com";int pos = email.find("@");string username = email.substr(0, pos);cout &lt;&lt; "username: " &lt;&lt; username &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>灵活的运用求子串功能，可以在实际开发中获取有效的信息</p><h3 id="3-2-vector容器"><a href="#3-2-vector容器" class="headerlink" title="3.2 vector容器"></a>3.2 vector容器</h3><h4 id="3-2-1-vector基本概念"><a href="#3-2-1-vector基本概念" class="headerlink" title="3.2.1 vector基本概念"></a>3.2.1 vector基本概念</h4><p><strong>功能：</strong></p><ul><li>vector数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong></li></ul><p><strong>vector与普通数组区别：</strong></p><ul><li>不同之处在于数组是静态空间，而vector可以<strong>动态扩展</strong></li></ul><p><strong>动态扩展：</strong></p><ul><li>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间</li></ul><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002.jpg" alt="说明: 2015-11-10_151152"></p><ul><li>vector容器的迭代器是支持随机访问的迭代器</li></ul><h4 id="3-2-2-vector构造函数"><a href="#3-2-2-vector构造函数" class="headerlink" title="3.2.2 vector构造函数"></a>3.2.2 vector构造函数</h4><p><strong>功能描述：</strong></p><ul><li>创建vector容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>vector&lt;T&gt; v; </code>                    //采用模板实现类实现，默认构造函数</li><li><code>vector(v.begin(), v.end());   </code>       //将v[begin(), end())区间中的元素拷贝给本身。</li><li><code>vector(n, elem);</code>                            //构造函数将n个elem拷贝给本身。</li><li><code>vector(const vector &amp;vec);</code>         //拷贝构造函数。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) {for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}void test01(){vector&lt;int&gt; v1; //无参构造for (int i = 0; i &lt; 10; i++){v1.push_back(i);}printVector(v1);vector&lt;int&gt; v2(v1.begin(), v1.end());printVector(v2);vector&lt;int&gt; v3(10, 100);printVector(v3);vector&lt;int&gt; v4(v3);printVector(v4);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>vector的多种构造方式没有可比性，灵活使用即可</p><h4 id="3-2-3-vector赋值操作"><a href="#3-2-3-vector赋值操作" class="headerlink" title="3.2.3 vector赋值操作"></a>3.2.3 vector赋值操作</h4><p><strong>功能描述：</strong></p><ul><li>给vector容器进行赋值</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>vector&amp; operator=(const vector &amp;vec);</code>//重载等号操作符</p></li><li><p><code>assign(beg, end);</code>       //将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code>        //将n个elem拷贝赋值给本身。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) {for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//赋值操作void test01(){vector&lt;int&gt; v1; //无参构造for (int i = 0; i &lt; 10; i++){v1.push_back(i);}printVector(v1);vector&lt;int&gt;v2;v2 = v1;printVector(v2);vector&lt;int&gt;v3;v3.assign(v1.begin(), v1.end());printVector(v3);vector&lt;int&gt;v4;v4.assign(10, 100);printVector(v4);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结： vector赋值方式比较简单，使用operator=，或者assign都可以</p><h4 id="3-2-4-vector容量和大小"><a href="#3-2-4-vector容量和大小" class="headerlink" title="3.2.4  vector容量和大小"></a>3.2.4  vector容量和大小</h4><p><strong>功能描述：</strong></p><ul><li>对vector容器的容量和大小操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>empty(); </code>                            //判断容器是否为空</p></li><li><p><code>capacity();</code>                      //容器的容量</p></li><li><p><code>size();</code>                              //返回容器中元素的个数</p></li><li><p><code>resize(int num);</code>             //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p><p>​      //如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(int num, elem);</code>  //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p><p>​              //如果容器变短，则末尾超出容器长度的元素被删除</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) {for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}void test01(){vector&lt;int&gt; v1;for (int i = 0; i &lt; 10; i++){v1.push_back(i);}printVector(v1);if (v1.empty()){cout &lt;&lt; "v1为空" &lt;&lt; endl;}else{cout &lt;&lt; "v1不为空" &lt;&lt; endl;cout &lt;&lt; "v1的容量 = " &lt;&lt; v1.capacity() &lt;&lt; endl;cout &lt;&lt; "v1的大小 = " &lt;&lt; v1.size() &lt;&lt; endl;}//resize 重新指定大小 ，若指定的更大，默认用0填充新位置，可以利用重载版本替换默认填充v1.resize(15,10);printVector(v1);//resize 重新指定大小 ，若指定的更小，超出部分元素被删除v1.resize(5);printVector(v1);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>判断是否为空  — empty</li><li>返回元素个数  — size</li><li>返回容器容量  — capacity</li><li>重新指定大小  —  resize</li></ul><h4 id="3-2-5-vector插入和删除"><a href="#3-2-5-vector插入和删除" class="headerlink" title="3.2.5 vector插入和删除"></a>3.2.5 vector插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对vector容器进行插入、删除操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>push_back(ele);</code>                                         //尾部插入元素ele</li><li><code>pop_back();</code>                                                //删除最后一个元素</li><li><code>insert(const_iterator pos, ele);</code>        //迭代器指向位置pos插入元素ele</li><li><code>insert(const_iterator pos, int count,ele);</code>//迭代器指向位置pos插入count个元素ele</li><li><code>erase(const_iterator pos);</code>                     //删除迭代器指向的元素</li><li><code>erase(const_iterator start, const_iterator end);</code>//删除迭代器从start到end之间的元素</li><li><code>clear();</code>                                                        //删除容器中所有元素</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) {for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//插入和删除void test01(){vector&lt;int&gt; v1;//尾插v1.push_back(10);v1.push_back(20);v1.push_back(30);v1.push_back(40);v1.push_back(50);printVector(v1);//尾删v1.pop_back();printVector(v1);//插入v1.insert(v1.begin(), 100);printVector(v1);v1.insert(v1.begin(), 2, 1000);printVector(v1);//删除v1.erase(v1.begin());printVector(v1);//清空v1.erase(v1.begin(), v1.end());v1.clear();printVector(v1);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>尾插  — push_back</li><li>尾删  — pop_back</li><li>插入  — insert    (位置迭代器)</li><li>删除  — erase  （位置迭代器）</li><li>清空  —  clear</li></ul><h4 id="3-2-6-vector数据存取"><a href="#3-2-6-vector数据存取" class="headerlink" title="3.2.6 vector数据存取"></a>3.2.6 vector数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对vector中的数据的存取操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>at(int idx); </code>     //返回索引idx所指的数据</li><li><code>operator[]; </code>       //返回索引idx所指的数据</li><li><code>front(); </code>            //返回容器中第一个数据元素</li><li><code>back();</code>              //返回容器中最后一个数据元素</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void test01(){vector&lt;int&gt;v1;for (int i = 0; i &lt; 10; i++){v1.push_back(i);}for (int i = 0; i &lt; v1.size(); i++){cout &lt;&lt; v1[i] &lt;&lt; " ";}cout &lt;&lt; endl;for (int i = 0; i &lt; v1.size(); i++){cout &lt;&lt; v1.at(i) &lt;&lt; " ";}cout &lt;&lt; endl;cout &lt;&lt; "v1的第一个元素为： " &lt;&lt; v1.front() &lt;&lt; endl;cout &lt;&lt; "v1的最后一个元素为： " &lt;&lt; v1.back() &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>除了用迭代器获取vector容器中元素，[ ]和at也可以</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="3-2-7-vector互换容器"><a href="#3-2-7-vector互换容器" class="headerlink" title="3.2.7 vector互换容器"></a>3.2.7 vector互换容器</h4><p><strong>功能描述：</strong></p><ul><li>实现两个容器内元素进行互换</li></ul><p><strong>函数原型：</strong></p><ul><li><code>swap(vec);</code>  // 将vec与本身的元素互换</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) {for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}void test01(){vector&lt;int&gt;v1;for (int i = 0; i &lt; 10; i++){v1.push_back(i);}printVector(v1);vector&lt;int&gt;v2;for (int i = 10; i &gt; 0; i--){v2.push_back(i);}printVector(v2);//互换容器cout &lt;&lt; "互换后" &lt;&lt; endl;v1.swap(v2);printVector(v1);printVector(v2);}void test02(){vector&lt;int&gt; v;for (int i = 0; i &lt; 100000; i++) {v.push_back(i);}cout &lt;&lt; "v的容量为：" &lt;&lt; v.capacity() &lt;&lt; endl;cout &lt;&lt; "v的大小为：" &lt;&lt; v.size() &lt;&lt; endl;v.resize(3);cout &lt;&lt; "v的容量为：" &lt;&lt; v.capacity() &lt;&lt; endl;cout &lt;&lt; "v的大小为：" &lt;&lt; v.size() &lt;&lt; endl;//收缩内存vector&lt;int&gt;(v).swap(v); //匿名对象cout &lt;&lt; "v的容量为：" &lt;&lt; v.capacity() &lt;&lt; endl;cout &lt;&lt; "v的大小为：" &lt;&lt; v.size() &lt;&lt; endl;}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：swap可以使两个容器互换，可以达到实用的收缩内存效果</p><h4 id="3-2-8-vector预留空间"><a href="#3-2-8-vector预留空间" class="headerlink" title="3.2.8 vector预留空间"></a>3.2.8 vector预留空间</h4><p><strong>功能描述：</strong></p><ul><li>减少vector在动态扩展容量时的扩展次数</li></ul><p><strong>函数原型：</strong></p><ul><li><code>reserve(int len);</code>//容器预留len个元素长度，预留位置不初始化，元素不可访问。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;void test01(){vector&lt;int&gt; v;//预留空间v.reserve(100000);int num = 0;int* p = NULL;for (int i = 0; i &lt; 100000; i++) {v.push_back(i);if (p != &amp;v[0]) {p = &amp;v[0];num++;}}cout &lt;&lt; "num:" &lt;&lt; num &lt;&lt; endl;}int main() {test01();    system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：如果数据量较大，可以一开始利用reserve预留空间</p><h3 id="3-3-deque容器"><a href="#3-3-deque容器" class="headerlink" title="3.3 deque容器"></a>3.3 deque容器</h3><h4 id="3-3-1-deque容器基本概念"><a href="#3-3-1-deque容器基本概念" class="headerlink" title="3.3.1 deque容器基本概念"></a>3.3.1 deque容器基本概念</h4><p><strong>功能：</strong></p><ul><li>双端数组，可以对头端进行插入删除操作</li></ul><p><strong>deque与vector区别：</strong></p><ul><li>vector对于头部的插入删除效率低，数据量越大，效率越低</li><li>deque相对而言，对头部的插入删除速度回比vector快</li><li>vector访问元素时的速度会比deque快,这和两者内部实现有关</li></ul><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002-1547547642923.jpg" alt="说明: 2015-11-19_204101"></p><p>deque内部工作原理:</p><p>deque内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放真实数据</p><p>中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002-1547547896341.jpg" alt="clip_image002-1547547896341"></p><ul><li>deque容器的迭代器也是支持随机访问的</li></ul><h4 id="3-3-2-deque构造函数"><a href="#3-3-2-deque构造函数" class="headerlink" title="3.3.2 deque构造函数"></a>3.3.2 deque构造函数</h4><p><strong>功能描述：</strong></p><ul><li>deque容器构造</li></ul><p><strong>函数原型：</strong></p><ul><li><code>deque&lt;T&gt;</code> deqT;                      //默认构造形式</li><li><code>deque(beg, end);</code>                  //构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>deque(n, elem);</code>                    //构造函数将n个elem拷贝给本身。</li><li><code>deque(const deque &amp;deq);</code>   //拷贝构造函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) {for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//deque构造void test01() {deque&lt;int&gt; d1; //无参构造函数for (int i = 0; i &lt; 10; i++){d1.push_back(i);}printDeque(d1);deque&lt;int&gt; d2(d1.begin(),d1.end());printDeque(d2);deque&lt;int&gt;d3(10,100);printDeque(d3);deque&lt;int&gt;d4 = d3;printDeque(d4);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>deque容器和vector容器的构造方式几乎一致，灵活使用即可</p><h4 id="3-3-3-deque赋值操作"><a href="#3-3-3-deque赋值操作" class="headerlink" title="3.3.3 deque赋值操作"></a>3.3.3 deque赋值操作</h4><p><strong>功能描述：</strong></p><ul><li>给deque容器进行赋值</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>deque&amp; operator=(const deque &amp;deq); </code>         //重载等号操作符</p></li><li><p><code>assign(beg, end);</code>                                           //将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code>                                             //将n个elem拷贝赋值给本身。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) {for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//赋值操作void test01(){deque&lt;int&gt; d1;for (int i = 0; i &lt; 10; i++){d1.push_back(i);}printDeque(d1);deque&lt;int&gt;d2;d2 = d1;printDeque(d2);deque&lt;int&gt;d3;d3.assign(d1.begin(), d1.end());printDeque(d3);deque&lt;int&gt;d4;d4.assign(10, 100);printDeque(d4);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：deque赋值操作也与vector相同，需熟练掌握</p><h4 id="3-3-4-deque大小操作"><a href="#3-3-4-deque大小操作" class="headerlink" title="3.3.4 deque大小操作"></a>3.3.4 deque大小操作</h4><p><strong>功能描述：</strong></p><ul><li>对deque容器的大小进行操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>deque.empty();</code>                       //判断容器是否为空</p></li><li><p><code>deque.size();</code>                         //返回容器中元素的个数</p></li><li><p><code>deque.resize(num);</code>                //重新指定容器的长度为num,若容器变长，则以默认值填充新位置。</p><p>​                             //如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>deque.resize(num, elem);</code>     //重新指定容器的长度为num,若容器变长，则以elem值填充新位置。</p><p>​                                                     //如果容器变短，则末尾超出容器长度的元素被删除。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) {for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//大小操作void test01(){deque&lt;int&gt; d1;for (int i = 0; i &lt; 10; i++){d1.push_back(i);}printDeque(d1);//判断容器是否为空if (d1.empty()) {cout &lt;&lt; "d1为空!" &lt;&lt; endl;}else {cout &lt;&lt; "d1不为空!" &lt;&lt; endl;//统计大小cout &lt;&lt; "d1的大小为：" &lt;&lt; d1.size() &lt;&lt; endl;}//重新指定大小d1.resize(15, 1);printDeque(d1);d1.resize(5);printDeque(d1);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>deque没有容量的概念</li><li>判断是否为空   — empty</li><li>返回元素个数   — size</li><li>重新指定个数   — resize</li></ul><h4 id="3-3-5-deque-插入和删除"><a href="#3-3-5-deque-插入和删除" class="headerlink" title="3.3.5 deque 插入和删除"></a>3.3.5 deque 插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>向deque容器中插入和删除数据</li></ul><p><strong>函数原型：</strong></p><p>两端插入操作：</p><ul><li><code>push_back(elem);</code>          //在容器尾部添加一个数据</li><li><code>push_front(elem);</code>        //在容器头部插入一个数据</li><li><code>pop_back();</code>                   //删除容器最后一个数据</li><li><code>pop_front();</code>                 //删除容器第一个数据</li></ul><p>指定位置操作：</p><ul><li><p><code>insert(pos,elem);</code>         //在pos位置插入一个elem元素的拷贝，返回新数据的位置。</p></li><li><p><code>insert(pos,n,elem);</code>     //在pos位置插入n个elem数据，无返回值。</p></li><li><p><code>insert(pos,beg,end);</code>    //在pos位置插入[beg,end)区间的数据，无返回值。</p></li><li><p><code>clear();</code>                           //清空容器的所有数据</p></li><li><p><code>erase(beg,end);</code>             //删除[beg,end)区间的数据，返回下一个数据的位置。</p></li><li><p><code>erase(pos);</code>                    //删除pos位置的数据，返回下一个数据的位置。</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) {for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//两端操作void test01(){deque&lt;int&gt; d;//尾插d.push_back(10);d.push_back(20);//头插d.push_front(100);d.push_front(200);printDeque(d);//尾删d.pop_back();//头删d.pop_front();printDeque(d);}//插入void test02(){deque&lt;int&gt; d;d.push_back(10);d.push_back(20);d.push_front(100);d.push_front(200);printDeque(d);d.insert(d.begin(), 1000);printDeque(d);d.insert(d.begin(), 2,10000);printDeque(d);deque&lt;int&gt;d2;d2.push_back(1);d2.push_back(2);d2.push_back(3);d.insert(d.begin(), d2.begin(), d2.end());printDeque(d);}//删除void test03(){deque&lt;int&gt; d;d.push_back(10);d.push_back(20);d.push_front(100);d.push_front(200);printDeque(d);d.erase(d.begin());printDeque(d);d.erase(d.begin(), d.end());d.clear();printDeque(d);}int main() {//test01();//test02();    test03();    system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>插入和删除提供的位置是迭代器！</li><li>尾插   —  push_back</li><li>尾删   —  pop_back</li><li>头插   —  push_front</li><li>头删   —  pop_front</li></ul><h4 id="3-3-6-deque-数据存取"><a href="#3-3-6-deque-数据存取" class="headerlink" title="3.3.6 deque 数据存取"></a>3.3.6 deque 数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对deque 中的数据的存取操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>at(int idx); </code>     //返回索引idx所指的数据</li><li><code>operator[]; </code>      //返回索引idx所指的数据</li><li><code>front(); </code>            //返回容器中第一个数据元素</li><li><code>back();</code>              //返回容器中最后一个数据元素</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) {for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//数据存取void test01(){deque&lt;int&gt; d;d.push_back(10);d.push_back(20);d.push_front(100);d.push_front(200);for (int i = 0; i &lt; d.size(); i++) {cout &lt;&lt; d[i] &lt;&lt; " ";}cout &lt;&lt; endl;for (int i = 0; i &lt; d.size(); i++) {cout &lt;&lt; d.at(i) &lt;&lt; " ";}cout &lt;&lt; endl;cout &lt;&lt; "front:" &lt;&lt; d.front() &lt;&lt; endl;cout &lt;&lt; "back:" &lt;&lt; d.back() &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>除了用迭代器获取deque容器中元素，[ ]和at也可以</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="3-3-7-deque-排序"><a href="#3-3-7-deque-排序" class="headerlink" title="3.3.7  deque 排序"></a>3.3.7  deque 排序</h4><p><strong>功能描述：</strong></p><ul><li>利用算法实现对deque容器进行排序</li></ul><p><strong>算法：</strong></p><ul><li><code>sort(iterator beg, iterator end)</code>  //对beg和end区间内元素进行排序</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;deque&gt;#include &lt;algorithm&gt;void printDeque(const deque&lt;int&gt;&amp; d) {for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}void test01(){deque&lt;int&gt; d;d.push_back(10);d.push_back(20);d.push_front(100);d.push_front(200);printDeque(d);sort(d.begin(), d.end());printDeque(d);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：sort算法非常实用，使用时包含头文件 algorithm即可</p><h3 id="3-4-案例-评委打分"><a href="#3-4-案例-评委打分" class="headerlink" title="3.4 案例-评委打分"></a>3.4 案例-评委打分</h3><h4 id="3-4-1-案例描述"><a href="#3-4-1-案例描述" class="headerlink" title="3.4.1 案例描述"></a>3.4.1 案例描述</h4><p>有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。</p><h4 id="3-4-2-实现步骤"><a href="#3-4-2-实现步骤" class="headerlink" title="3.4.2 实现步骤"></a>3.4.2 实现步骤</h4><ol><li>创建五名选手，放到vector中</li><li>遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中</li><li>sort算法对deque容器中分数排序，去除最高和最低分</li><li>deque容器遍历一遍，累加总分</li><li>获取平均分</li></ol><p><strong>示例代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//选手类class Person{public:Person(string name, int score){this-&gt;m_Name = name;this-&gt;m_Score = score;}string m_Name; //姓名int m_Score;  //平均分};void createPerson(vector&lt;Person&gt;&amp;v){string nameSeed = "ABCDE";for (int i = 0; i &lt; 5; i++){string name = "选手";name += nameSeed[i];int score = 0;Person p(name, score);//将创建的person对象 放入到容器中v.push_back(p);}}//打分void setScore(vector&lt;Person&gt;&amp;v){for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++){//将评委的分数 放入到deque容器中deque&lt;int&gt;d;for (int i = 0; i &lt; 10; i++){int score = rand() % 41 + 60;  // 60 ~ 100d.push_back(score);}//cout &lt;&lt; "选手： " &lt;&lt; it-&gt;m_Name &lt;&lt; " 打分： " &lt;&lt; endl;//for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++)//{//cout &lt;&lt; *dit &lt;&lt; " ";//}//cout &lt;&lt; endl;//排序sort(d.begin(), d.end());//去除最高和最低分d.pop_back();d.pop_front();//取平均分int sum = 0;for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++){sum += *dit; //累加每个评委的分数}int avg = sum / d.size();//将平均分 赋值给选手身上it-&gt;m_Score = avg;}}void showScore(vector&lt;Person&gt;&amp;v){for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++){cout &lt;&lt; "姓名： " &lt;&lt; it-&gt;m_Name &lt;&lt; " 平均分： " &lt;&lt; it-&gt;m_Score &lt;&lt; endl;}}int main() {//随机数种子srand((unsigned int)time(NULL));//1、创建5名选手vector&lt;Person&gt;v;  //存放选手容器createPerson(v);//测试//for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)//{//cout &lt;&lt; "姓名： " &lt;&lt; (*it).m_Name &lt;&lt; " 分数： " &lt;&lt; (*it).m_Score &lt;&lt; endl;//}//2、给5名选手打分setScore(v);//3、显示最后得分showScore(v);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong> 选取不同的容器操作数据，可以提升代码的效率</p><h3 id="3-5-stack容器"><a href="#3-5-stack容器" class="headerlink" title="3.5 stack容器"></a>3.5 stack容器</h3><h4 id="3-5-1-stack-基本概念"><a href="#3-5-1-stack-基本概念" class="headerlink" title="3.5.1 stack 基本概念"></a>3.5.1 stack 基本概念</h4><p><strong>概念：</strong>stack是一种<strong>先进后出</strong>(First In Last Out,FILO)的数据结构，它只有一个出口</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002-1547604555425.jpg" alt="说明: 2015-11-15_195707"></p><p>栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为</p><p>栈中进入数据称为  — <strong>入栈</strong>  <code>push</code></p><p>栈中弹出数据称为  — <strong>出栈</strong>  <code>pop</code></p><p>生活中的栈：</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002.png" alt="img"></p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002-1547605111510.jpg" alt="img"></p><h4 id="3-5-2-stack-常用接口"><a href="#3-5-2-stack-常用接口" class="headerlink" title="3.5.2 stack 常用接口"></a>3.5.2 stack 常用接口</h4><p>功能描述：栈容器常用的对外接口</p><p>构造函数：</p><ul><li><code>stack&lt;T&gt; stk;</code>                                 //stack采用模板类实现， stack对象的默认构造形式</li><li><code>stack(const stack &amp;stk);</code>            //拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>stack&amp; operator=(const stack &amp;stk);</code>           //重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code>      //向栈顶添加元素</li><li><code>pop();</code>                //从栈顶移除第一个元素</li><li><code>top(); </code>                //返回栈顶元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code>            //判断堆栈是否为空</li><li><code>size(); </code>              //返回栈的大小</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;stack&gt;//栈容器常用接口void test01(){//创建栈容器 栈容器必须符合先进后出stack&lt;int&gt; s;//向栈中添加元素，叫做 压栈 入栈s.push(10);s.push(20);s.push(30);while (!s.empty()) {//输出栈顶元素cout &lt;&lt; "栈顶元素为： " &lt;&lt; s.top() &lt;&lt; endl;//弹出栈顶元素s.pop();}cout &lt;&lt; "栈的大小为：" &lt;&lt; s.size() &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>入栈   — push</li><li>出栈   — pop</li><li>返回栈顶   — top</li><li>判断栈是否为空   — empty</li><li>返回栈大小   — size</li></ul><h3 id="3-6-queue-容器"><a href="#3-6-queue-容器" class="headerlink" title="3.6 queue 容器"></a>3.6 queue 容器</h3><h4 id="3-6-1-queue-基本概念"><a href="#3-6-1-queue-基本概念" class="headerlink" title="3.6.1 queue 基本概念"></a>3.6.1 queue 基本概念</h4><p><strong>概念：</strong>Queue是一种<strong>先进先出</strong>(First In First Out,FIFO)的数据结构，它有两个出口</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002-1547606475892.jpg" alt="说明: 2015-11-15_214429"></p><p>队列容器允许从一端新增元素，从另一端移除元素</p><p>队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为</p><p>队列中进数据称为 — <strong>入队</strong>    <code>push</code></p><p>队列中出数据称为 — <strong>出队</strong>    <code>pop</code></p><p>生活中的队列：</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/1547606785041.png" alt="1547606785041"></p><h4 id="3-6-2-queue-常用接口"><a href="#3-6-2-queue-常用接口" class="headerlink" title="3.6.2 queue 常用接口"></a>3.6.2 queue 常用接口</h4><p>功能描述：栈容器常用的对外接口</p><p>构造函数：</p><ul><li><code>queue&lt;T&gt; que;</code>                                 //queue采用模板类实现，queue对象的默认构造形式</li><li><code>queue(const queue &amp;que);</code>            //拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>queue&amp; operator=(const queue &amp;que);</code>           //重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code>                             //往队尾添加元素</li><li><code>pop();</code>                                      //从队头移除第一个元素</li><li><code>back();</code>                                    //返回最后一个元素</li><li><code>front(); </code>                                  //返回第一个元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code>            //判断堆栈是否为空</li><li><code>size(); </code>              //返回栈的大小</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;queue&gt;#include &lt;string&gt;class Person{public:Person(string name, int age){this-&gt;m_Name = name;this-&gt;m_Age = age;}string m_Name;int m_Age;};void test01() {//创建队列queue&lt;Person&gt; q;//准备数据Person p1("唐僧", 30);Person p2("孙悟空", 1000);Person p3("猪八戒", 900);Person p4("沙僧", 800);//向队列中添加元素  入队操作q.push(p1);q.push(p2);q.push(p3);q.push(p4);//队列不提供迭代器，更不支持随机访问while (!q.empty()) {//输出队头元素cout &lt;&lt; "队头元素-- 姓名： " &lt;&lt; q.front().m_Name               &lt;&lt; " 年龄： "&lt;&lt; q.front().m_Age &lt;&lt; endl;        cout &lt;&lt; "队尾元素-- 姓名： " &lt;&lt; q.back().m_Name                &lt;&lt; " 年龄： " &lt;&lt; q.back().m_Age &lt;&lt; endl;        cout &lt;&lt; endl;//弹出队头元素q.pop();}cout &lt;&lt; "队列大小为：" &lt;&lt; q.size() &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>入队   — push</li><li>出队   — pop</li><li>返回队头元素   — front</li><li>返回队尾元素   — back</li><li>判断队是否为空   — empty</li><li>返回队列大小   — size</li></ul><h3 id="3-7-list容器"><a href="#3-7-list容器" class="headerlink" title="3.7 list容器"></a>3.7 list容器</h3><h4 id="3-7-1-list基本概念"><a href="#3-7-1-list基本概念" class="headerlink" title="3.7.1 list基本概念"></a>3.7.1 list基本概念</h4><p><strong>功能：</strong>将数据进行链式存储</p><p><strong>链表</strong>（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p><p>链表的组成：链表由一系列<strong>结点</strong>组成</p><p>结点的组成：一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong></p><p>STL中的链表是一个双向循环链表</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/3-stl-chang-yong-rong-qi/clip_image002-1547608564071.jpg" alt="说明: 2015-11-15_225145"></p><p>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于<strong>双向迭代器</strong></p><p>list的优点：</p><ul><li>采用动态存储分配，不会造成内存浪费和溢出</li><li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</li></ul><p>list的缺点：</p><ul><li>链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大</li></ul><p>List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。</p><p>总结：STL中<strong>List和vector是两个最常被使用的容器</strong>，各有优缺点</p><h4 id="3-7-2-list构造函数"><a href="#3-7-2-list构造函数" class="headerlink" title="3.7.2  list构造函数"></a>3.7.2  list构造函数</h4><p><strong>功能描述：</strong></p><ul><li>创建list容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>list&lt;T&gt; lst;</code>                               //list采用采用模板类实现,对象的默认构造形式：</li><li><code>list(beg,end);</code>                           //构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>list(n,elem);</code>                             //构造函数将n个elem拷贝给本身。</li><li><code>list(const list &amp;lst);</code>            //拷贝构造函数。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) {for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}void test01(){list&lt;int&gt;L1;L1.push_back(10);L1.push_back(20);L1.push_back(30);L1.push_back(40);printList(L1);list&lt;int&gt;L2(L1.begin(),L1.end());printList(L2);list&lt;int&gt;L3(L2);printList(L3);list&lt;int&gt;L4(10, 1000);printList(L4);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：list构造方式同其他几个STL常用容器，熟练掌握即可</p><h4 id="3-7-3-list-赋值和交换"><a href="#3-7-3-list-赋值和交换" class="headerlink" title="3.7.3 list 赋值和交换"></a>3.7.3 list 赋值和交换</h4><p><strong>功能描述：</strong></p><ul><li>给list容器进行赋值，以及交换list容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>assign(beg, end);</code>            //将[beg, end)区间中的数据拷贝赋值给本身。</li><li><code>assign(n, elem);</code>              //将n个elem拷贝赋值给本身。</li><li><code>list&amp; operator=(const list &amp;lst);</code>         //重载等号操作符</li><li><code>swap(lst);</code>                         //将lst与本身的元素互换。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) {for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//赋值和交换void test01(){list&lt;int&gt;L1;L1.push_back(10);L1.push_back(20);L1.push_back(30);L1.push_back(40);printList(L1);//赋值list&lt;int&gt;L2;L2 = L1;printList(L2);list&lt;int&gt;L3;L3.assign(L2.begin(), L2.end());printList(L3);list&lt;int&gt;L4;L4.assign(10, 100);printList(L4);}//交换void test02(){list&lt;int&gt;L1;L1.push_back(10);L1.push_back(20);L1.push_back(30);L1.push_back(40);list&lt;int&gt;L2;L2.assign(10, 100);cout &lt;&lt; "交换前： " &lt;&lt; endl;printList(L1);printList(L2);cout &lt;&lt; endl;L1.swap(L2);cout &lt;&lt; "交换后： " &lt;&lt; endl;printList(L1);printList(L2);}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：list赋值和交换操作能够灵活运用即可</p><h4 id="3-7-4-list-大小操作"><a href="#3-7-4-list-大小操作" class="headerlink" title="3.7.4 list 大小操作"></a>3.7.4 list 大小操作</h4><p><strong>功能描述：</strong></p><ul><li>对list容器的大小进行操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>size(); </code>                             //返回容器中元素的个数</p></li><li><p><code>empty(); </code>                           //判断容器是否为空</p></li><li><p><code>resize(num);</code>                   //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p><p>​    //如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(num, elem); </code>       //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p><pre><code>      ​    //如果容器变短，则末尾超出容器长度的元素被删除。</code></pre></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) {for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//大小操作void test01(){list&lt;int&gt;L1;L1.push_back(10);L1.push_back(20);L1.push_back(30);L1.push_back(40);if (L1.empty()){cout &lt;&lt; "L1为空" &lt;&lt; endl;}else{cout &lt;&lt; "L1不为空" &lt;&lt; endl;cout &lt;&lt; "L1的大小为： " &lt;&lt; L1.size() &lt;&lt; endl;}//重新指定大小L1.resize(10);printList(L1);L1.resize(2);printList(L1);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>判断是否为空   — empty</li><li>返回元素个数   — size</li><li>重新指定个数   — resize</li></ul><h4 id="3-7-5-list-插入和删除"><a href="#3-7-5-list-插入和删除" class="headerlink" title="3.7.5 list 插入和删除"></a>3.7.5 list 插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对list容器进行数据的插入和删除</li></ul><p><strong>函数原型：</strong></p><ul><li>push_back(elem);//在容器尾部加入一个元素</li><li>pop_back();//删除容器中最后一个元素</li><li>push_front(elem);//在容器开头插入一个元素</li><li>pop_front();//从容器开头移除第一个元素</li><li>insert(pos,elem);//在pos位置插elem元素的拷贝，返回新数据的位置。</li><li>insert(pos,n,elem);//在pos位置插入n个elem数据，无返回值。</li><li>insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据，无返回值。</li><li>clear();//移除容器的所有数据</li><li>erase(beg,end);//删除[beg,end)区间的数据，返回下一个数据的位置。</li><li>erase(pos);//删除pos位置的数据，返回下一个数据的位置。</li><li>remove(elem);//删除容器中所有与elem值匹配的元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) {for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//插入和删除void test01(){list&lt;int&gt; L;//尾插L.push_back(10);L.push_back(20);L.push_back(30);//头插L.push_front(100);L.push_front(200);L.push_front(300);printList(L);//尾删L.pop_back();printList(L);//头删L.pop_front();printList(L);//插入list&lt;int&gt;::iterator it = L.begin();L.insert(++it, 1000);printList(L);//删除it = L.begin();L.erase(++it);printList(L);//移除L.push_back(10000);L.push_back(10000);L.push_back(10000);printList(L);L.remove(10000);printList(L);        //清空L.clear();printList(L);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>尾插   — push_back</li><li>尾删   — pop_back</li><li>头插   — push_front</li><li>头删   — pop_front</li><li>插入   — insert</li><li>删除   — erase</li><li>移除   — remove</li><li>清空   — clear</li></ul><h4 id="3-7-6-list-数据存取"><a href="#3-7-6-list-数据存取" class="headerlink" title="3.7.6 list 数据存取"></a>3.7.6 list 数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对list容器中数据进行存取</li></ul><p><strong>函数原型：</strong></p><ul><li><code>front();</code>        //返回第一个元素。</li><li><code>back();</code>         //返回最后一个元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;//数据存取void test01(){list&lt;int&gt;L1;L1.push_back(10);L1.push_back(20);L1.push_back(30);L1.push_back(40);//cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据//cout &lt;&lt; L1[0] &lt;&lt; endl; //错误  不支持[]方式访问数据cout &lt;&lt; "第一个元素为： " &lt;&lt; L1.front() &lt;&lt; endl;cout &lt;&lt; "最后一个元素为： " &lt;&lt; L1.back() &lt;&lt; endl;//list容器的迭代器是双向迭代器，不支持随机访问list&lt;int&gt;::iterator it = L1.begin();//it = it + 1;//错误，不可以跳跃访问，即使是+1}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>list容器中不可以通过[]或者at方式访问数据</li><li>返回第一个元素   — front</li><li>返回最后一个元素   — back</li></ul><h4 id="3-7-7-list-反转和排序"><a href="#3-7-7-list-反转和排序" class="headerlink" title="3.7.7 list 反转和排序"></a>3.7.7 list 反转和排序</h4><p><strong>功能描述：</strong></p><ul><li>将容器中的元素反转，以及将容器中的数据进行排序</li></ul><p><strong>函数原型：</strong></p><ul><li><code>reverse();</code>   //反转链表</li><li><code>sort();</code>        //链表排序</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void printList(const list&lt;int&gt;&amp; L) {for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}bool myCompare(int val1 , int val2){return val1 &gt; val2;}//反转和排序void test01(){list&lt;int&gt; L;L.push_back(90);L.push_back(30);L.push_back(20);L.push_back(70);printList(L);//反转容器的元素L.reverse();printList(L);//排序L.sort(); //默认的排序规则 从小到大printList(L);L.sort(myCompare); //指定规则，从大到小printList(L);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>反转   — reverse</li><li>排序   — sort （成员函数）</li></ul><h4 id="3-7-8-排序案例"><a href="#3-7-8-排序案例" class="headerlink" title="3.7.8 排序案例"></a>3.7.8 排序案例</h4><p>案例描述：将Person自定义数据类型进行排序，Person中属性有姓名、年龄、身高</p><p>排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;list&gt;#include &lt;string&gt;class Person {public:Person(string name, int age , int height) {m_Name = name;m_Age = age;m_Height = height;}public:string m_Name;  //姓名int m_Age;      //年龄int m_Height;   //身高};bool ComparePerson(Person&amp; p1, Person&amp; p2) {if (p1.m_Age == p2.m_Age) {return p1.m_Height  &gt; p2.m_Height;}else{return  p1.m_Age &lt; p2.m_Age;}}void test01() {list&lt;Person&gt; L;Person p1("刘备", 35 , 175);Person p2("曹操", 45 , 180);Person p3("孙权", 40 , 170);Person p4("赵云", 25 , 190);Person p5("张飞", 35 , 160);Person p6("关羽", 35 , 200);L.push_back(p1);L.push_back(p2);L.push_back(p3);L.push_back(p4);L.push_back(p5);L.push_back(p6);for (list&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) {cout &lt;&lt; "姓名： " &lt;&lt; it-&gt;m_Name &lt;&lt; " 年龄： " &lt;&lt; it-&gt;m_Age               &lt;&lt; " 身高： " &lt;&lt; it-&gt;m_Height &lt;&lt; endl;}cout &lt;&lt; "---------------------------------" &lt;&lt; endl;L.sort(ComparePerson); //排序for (list&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) {cout &lt;&lt; "姓名： " &lt;&lt; it-&gt;m_Name &lt;&lt; " 年龄： " &lt;&lt; it-&gt;m_Age               &lt;&lt; " 身高： " &lt;&lt; it-&gt;m_Height &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li><p>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序</p></li><li><p>高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂</p></li></ul><h3 id="3-8-set-x2F-multiset-容器"><a href="#3-8-set-x2F-multiset-容器" class="headerlink" title="3.8 set/ multiset 容器"></a>3.8 set/ multiset 容器</h3><h4 id="3-8-1-set基本概念"><a href="#3-8-1-set基本概念" class="headerlink" title="3.8.1 set基本概念"></a>3.8.1 set基本概念</h4><p><strong>简介：</strong></p><ul><li>所有元素都会在插入时自动被排序</li></ul><p><strong>本质：</strong></p><ul><li>set/multiset属于<strong>关联式容器</strong>，底层结构是用<strong>二叉树</strong>实现。</li></ul><p><strong>set和multiset区别</strong>：</p><ul><li>set不允许容器中有重复的元素</li><li>multiset允许容器中有重复的元素</li></ul><h4 id="3-8-2-set构造和赋值"><a href="#3-8-2-set构造和赋值" class="headerlink" title="3.8.2 set构造和赋值"></a>3.8.2 set构造和赋值</h4><p>功能描述：创建set容器以及赋值</p><p>构造：</p><ul><li><code>set&lt;T&gt; st;</code>                        //默认构造函数：</li><li><code>set(const set &amp;st);</code>       //拷贝构造函数</li></ul><p>赋值：</p><ul><li><code>set&amp; operator=(const set &amp;st);</code>    //重载等号操作符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;void printSet(set&lt;int&gt; &amp; s){for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//构造和赋值void test01(){set&lt;int&gt; s1;s1.insert(10);s1.insert(30);s1.insert(20);s1.insert(40);printSet(s1);//拷贝构造set&lt;int&gt;s2(s1);printSet(s2);//赋值set&lt;int&gt;s3;s3 = s2;printSet(s3);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>set容器插入数据时用insert</li><li>set容器插入数据的数据会自动排序</li></ul><h4 id="3-8-3-set大小和交换"><a href="#3-8-3-set大小和交换" class="headerlink" title="3.8.3 set大小和交换"></a>3.8.3 set大小和交换</h4><p><strong>功能描述：</strong></p><ul><li>统计set容器大小以及交换set容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>size();</code>          //返回容器中元素的数目</li><li><code>empty();</code>        //判断容器是否为空</li><li><code>swap(st);</code>      //交换两个集合容器</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;void printSet(set&lt;int&gt; &amp; s){for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//大小void test01(){set&lt;int&gt; s1;s1.insert(10);s1.insert(30);s1.insert(20);s1.insert(40);if (s1.empty()){cout &lt;&lt; "s1为空" &lt;&lt; endl;}else{cout &lt;&lt; "s1不为空" &lt;&lt; endl;cout &lt;&lt; "s1的大小为： " &lt;&lt; s1.size() &lt;&lt; endl;}}//交换void test02(){set&lt;int&gt; s1;s1.insert(10);s1.insert(30);s1.insert(20);s1.insert(40);set&lt;int&gt; s2;s2.insert(100);s2.insert(300);s2.insert(200);s2.insert(400);cout &lt;&lt; "交换前" &lt;&lt; endl;printSet(s1);printSet(s2);cout &lt;&lt; endl;cout &lt;&lt; "交换后" &lt;&lt; endl;s1.swap(s2);printSet(s1);printSet(s2);}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>统计大小   — size</li><li>判断是否为空   — empty</li><li>交换容器   — swap</li></ul><h4 id="3-8-4-set插入和删除"><a href="#3-8-4-set插入和删除" class="headerlink" title="3.8.4 set插入和删除"></a>3.8.4 set插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>set容器进行插入数据和删除数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code>           //在容器中插入元素。</li><li><code>clear();</code>                    //清除所有元素</li><li><code>erase(pos);</code>              //删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code>    //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(elem);</code>            //删除容器中值为elem的元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;void printSet(set&lt;int&gt; &amp; s){for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++){cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}//插入和删除void test01(){set&lt;int&gt; s1;//插入s1.insert(10);s1.insert(30);s1.insert(20);s1.insert(40);printSet(s1);//删除s1.erase(s1.begin());printSet(s1);s1.erase(30);printSet(s1);//清空//s1.erase(s1.begin(), s1.end());s1.clear();printSet(s1);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>插入   — insert</li><li>删除   — erase</li><li>清空   — clear</li></ul><h4 id="3-8-5-set查找和统计"><a href="#3-8-5-set查找和统计" class="headerlink" title="3.8.5 set查找和统计"></a>3.8.5 set查找和统计</h4><p><strong>功能描述：</strong></p><ul><li>对set容器进行查找数据以及统计数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code>                  //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li><li><code>count(key);</code>                //统计key的元素个数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;//查找和统计void test01(){set&lt;int&gt; s1;//插入s1.insert(10);s1.insert(30);s1.insert(20);s1.insert(40);//查找set&lt;int&gt;::iterator pos = s1.find(30);if (pos != s1.end()){cout &lt;&lt; "找到了元素 ： " &lt;&lt; *pos &lt;&lt; endl;}else{cout &lt;&lt; "未找到元素" &lt;&lt; endl;}//统计int num = s1.count(30);cout &lt;&lt; "num = " &lt;&lt; num &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>查找   —  find    （返回的是迭代器）</li><li>统计   —  count  （对于set，结果为0或者1）</li></ul><h4 id="3-8-6-set和multiset区别"><a href="#3-8-6-set和multiset区别" class="headerlink" title="3.8.6 set和multiset区别"></a>3.8.6 set和multiset区别</h4><p><strong>学习目标：</strong></p><ul><li>掌握set和multiset的区别</li></ul><p><strong>区别：</strong></p><ul><li>set不可以插入重复数据，而multiset可以</li><li>set插入数据的同时会返回插入结果，表示插入是否成功</li><li>multiset不会检测数据，因此可以插入重复数据</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;//set和multiset区别void test01(){set&lt;int&gt; s;pair&lt;set&lt;int&gt;::iterator, bool&gt;  ret = s.insert(10);if (ret.second) {cout &lt;&lt; "第一次插入成功!" &lt;&lt; endl;}else {cout &lt;&lt; "第一次插入失败!" &lt;&lt; endl;}ret = s.insert(10);if (ret.second) {cout &lt;&lt; "第二次插入成功!" &lt;&lt; endl;}else {cout &lt;&lt; "第二次插入失败!" &lt;&lt; endl;}    //multisetmultiset&lt;int&gt; ms;ms.insert(10);ms.insert(10);for (multiset&lt;int&gt;::iterator it = ms.begin(); it != ms.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>如果不允许插入重复数据可以利用set</li><li>如果需要插入重复数据利用multiset</li></ul><h4 id="3-8-7-pair对组创建"><a href="#3-8-7-pair对组创建" class="headerlink" title="3.8.7 pair对组创建"></a>3.8.7 pair对组创建</h4><p><strong>功能描述：</strong></p><ul><li>成对出现的数据，利用对组可以返回两个数据</li></ul><p><strong>两种创建方式：</strong></p><ul><li><code>pair&lt;type, type&gt; p ( value1, value2 );</code></li><li><code>pair&lt;type, type&gt; p = make_pair( value1, value2 );</code></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//对组创建void test01(){pair&lt;string, int&gt; p(string("Tom"), 20);cout &lt;&lt; "姓名： " &lt;&lt;  p.first &lt;&lt; " 年龄： " &lt;&lt; p.second &lt;&lt; endl;pair&lt;string, int&gt; p2 = make_pair("Jerry", 10);cout &lt;&lt; "姓名： " &lt;&lt; p2.first &lt;&lt; " 年龄： " &lt;&lt; p2.second &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>两种方式都可以创建对组，记住一种即可</p><h4 id="3-8-8-set容器排序"><a href="#3-8-8-set容器排序" class="headerlink" title="3.8.8 set容器排序"></a>3.8.8 set容器排序</h4><p>学习目标：</p><ul><li>set容器默认排序规则为从小到大，掌握如何改变排序规则</li></ul><p>主要技术点：</p><ul><li>利用仿函数，可以改变排序规则</li></ul><p><strong>示例一</strong>   set存放内置数据类型</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;class MyCompare {public:bool operator()(int v1, int v2) {return v1 &gt; v2;}};void test01() {    set&lt;int&gt; s1;s1.insert(10);s1.insert(40);s1.insert(20);s1.insert(30);s1.insert(50);//默认从小到大for (set&lt;int&gt;::iterator it = s1.begin(); it != s1.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;//指定排序规则set&lt;int,MyCompare&gt; s2;s2.insert(10);s2.insert(40);s2.insert(20);s2.insert(30);s2.insert(50);for (set&lt;int, MyCompare&gt;::iterator it = s2.begin(); it != s2.end(); it++) {cout &lt;&lt; *it &lt;&lt; " ";}cout &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：利用仿函数可以指定set容器的排序规则</p><p><strong>示例二</strong> set存放自定义数据类型</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;#include &lt;string&gt;class Person{public:Person(string name, int age){this-&gt;m_Name = name;this-&gt;m_Age = age;}string m_Name;int m_Age;};class comparePerson{public:bool operator()(const Person&amp; p1, const Person &amp;p2){//按照年龄进行排序  降序return p1.m_Age &gt; p2.m_Age;}};void test01(){set&lt;Person, comparePerson&gt; s;Person p1("刘备", 23);Person p2("关羽", 27);Person p3("张飞", 25);Person p4("赵云", 21);s.insert(p1);s.insert(p2);s.insert(p3);s.insert(p4);for (set&lt;Person, comparePerson&gt;::iterator it = s.begin(); it != s.end(); it++){cout &lt;&lt; "姓名： " &lt;&lt; it-&gt;m_Name &lt;&lt; " 年龄： " &lt;&lt; it-&gt;m_Age &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>对于自定义数据类型，set必须指定排序规则才可以插入数据</p><h3 id="3-9-map-x2F-multimap容器"><a href="#3-9-map-x2F-multimap容器" class="headerlink" title="3.9 map/ multimap容器"></a>3.9 map/ multimap容器</h3><h4 id="3-9-1-map基本概念"><a href="#3-9-1-map基本概念" class="headerlink" title="3.9.1 map基本概念"></a>3.9.1 map基本概念</h4><p><strong>简介：</strong></p><ul><li>map中所有元素都是pair</li><li>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）</li><li>所有元素都会根据元素的键值自动排序</li></ul><p><strong>本质：</strong></p><ul><li>map/multimap属于<strong>关联式容器</strong>，底层结构是用二叉树实现。</li></ul><p><strong>优点：</strong></p><ul><li>可以根据key值快速找到value值</li></ul><p>map和multimap<strong>区别</strong>：</p><ul><li>map不允许容器中有重复key值元素</li><li>multimap允许容器中有重复key值元素</li></ul><h4 id="3-9-2-map构造和赋值"><a href="#3-9-2-map构造和赋值" class="headerlink" title="3.9.2  map构造和赋值"></a>3.9.2  map构造和赋值</h4><p><strong>功能描述：</strong></p><ul><li>对map容器进行构造和赋值操作</li></ul><p><strong>函数原型：</strong></p><p><strong>构造：</strong></p><ul><li><code>map&lt;T1, T2&gt; mp;</code>                     //map默认构造函数: </li><li><code>map(const map &amp;mp);</code>             //拷贝构造函数</li></ul><p><strong>赋值：</strong></p><ul><li><code>map&amp; operator=(const map &amp;mp);</code>    //重载等号操作符</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;void printMap(map&lt;int,int&gt;&amp;m){for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++){cout &lt;&lt; "key = " &lt;&lt; it-&gt;first &lt;&lt; " value = " &lt;&lt; it-&gt;second &lt;&lt; endl;}cout &lt;&lt; endl;}void test01(){map&lt;int,int&gt;m; //默认构造m.insert(pair&lt;int, int&gt;(1, 10));m.insert(pair&lt;int, int&gt;(2, 20));m.insert(pair&lt;int, int&gt;(3, 30));printMap(m);map&lt;int, int&gt;m2(m); //拷贝构造printMap(m2);map&lt;int, int&gt;m3;m3 = m2; //赋值printMap(m3);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：map中所有元素都是成对出现，插入数据时候要使用对组</p><h4 id="3-9-3-map大小和交换"><a href="#3-9-3-map大小和交换" class="headerlink" title="3.9.3 map大小和交换"></a>3.9.3 map大小和交换</h4><p><strong>功能描述：</strong></p><ul><li>统计map容器大小以及交换map容器</li></ul><p>函数原型：</p><ul><li><code>size();</code>          //返回容器中元素的数目</li><li><code>empty();</code>        //判断容器是否为空</li><li><code>swap(st);</code>      //交换两个集合容器</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;void printMap(map&lt;int,int&gt;&amp;m){for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++){cout &lt;&lt; "key = " &lt;&lt; it-&gt;first &lt;&lt; " value = " &lt;&lt; it-&gt;second &lt;&lt; endl;}cout &lt;&lt; endl;}void test01(){map&lt;int, int&gt;m;m.insert(pair&lt;int, int&gt;(1, 10));m.insert(pair&lt;int, int&gt;(2, 20));m.insert(pair&lt;int, int&gt;(3, 30));if (m.empty()){cout &lt;&lt; "m为空" &lt;&lt; endl;}else{cout &lt;&lt; "m不为空" &lt;&lt; endl;cout &lt;&lt; "m的大小为： " &lt;&lt; m.size() &lt;&lt; endl;}}//交换void test02(){map&lt;int, int&gt;m;m.insert(pair&lt;int, int&gt;(1, 10));m.insert(pair&lt;int, int&gt;(2, 20));m.insert(pair&lt;int, int&gt;(3, 30));map&lt;int, int&gt;m2;m2.insert(pair&lt;int, int&gt;(4, 100));m2.insert(pair&lt;int, int&gt;(5, 200));m2.insert(pair&lt;int, int&gt;(6, 300));cout &lt;&lt; "交换前" &lt;&lt; endl;printMap(m);printMap(m2);cout &lt;&lt; "交换后" &lt;&lt; endl;m.swap(m2);printMap(m);printMap(m2);}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>统计大小   — size</li><li>判断是否为空   — empty</li><li>交换容器   — swap</li></ul><h4 id="3-9-4-map插入和删除"><a href="#3-9-4-map插入和删除" class="headerlink" title="3.9.4 map插入和删除"></a>3.9.4 map插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>map容器进行插入数据和删除数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code>           //在容器中插入元素。</li><li><code>clear();</code>                    //清除所有元素</li><li><code>erase(pos);</code>              //删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code>    //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(key);</code>            //删除容器中值为key的元素。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;void printMap(map&lt;int,int&gt;&amp;m){for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++){cout &lt;&lt; "key = " &lt;&lt; it-&gt;first &lt;&lt; " value = " &lt;&lt; it-&gt;second &lt;&lt; endl;}cout &lt;&lt; endl;}void test01(){//插入map&lt;int, int&gt; m;//第一种插入方式m.insert(pair&lt;int, int&gt;(1, 10));//第二种插入方式m.insert(make_pair(2, 20));//第三种插入方式m.insert(map&lt;int, int&gt;::value_type(3, 30));//第四种插入方式m[4] = 40; printMap(m);//删除m.erase(m.begin());printMap(m);m.erase(3);printMap(m);//清空m.erase(m.begin(),m.end());m.clear();printMap(m);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>map插入方式很多，记住其一即可</li></ul><ul><li>插入   — insert </li><li>删除   — erase</li><li>清空   — clear</li></ul><h4 id="3-9-5-map查找和统计"><a href="#3-9-5-map查找和统计" class="headerlink" title="3.9.5 map查找和统计"></a>3.9.5 map查找和统计</h4><p><strong>功能描述：</strong></p><ul><li>对map容器进行查找数据以及统计数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code>                  //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li><li><code>count(key);</code>                //统计key的元素个数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;//查找和统计void test01(){map&lt;int, int&gt;m; m.insert(pair&lt;int, int&gt;(1, 10));m.insert(pair&lt;int, int&gt;(2, 20));m.insert(pair&lt;int, int&gt;(3, 30));//查找map&lt;int, int&gt;::iterator pos = m.find(3);if (pos != m.end()){cout &lt;&lt; "找到了元素 key = " &lt;&lt; (*pos).first &lt;&lt; " value = " &lt;&lt; (*pos).second &lt;&lt; endl;}else{cout &lt;&lt; "未找到元素" &lt;&lt; endl;}//统计int num = m.count(3);cout &lt;&lt; "num = " &lt;&lt; num &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>查找   —  find    （返回的是迭代器）</li><li>统计   —  count  （对于map，结果为0或者1）</li></ul><h4 id="3-9-6-map容器排序"><a href="#3-9-6-map容器排序" class="headerlink" title="3.9.6 map容器排序"></a>3.9.6 map容器排序</h4><p><strong>学习目标：</strong></p><ul><li>map容器默认排序规则为 按照key值进行 从小到大排序，掌握如何改变排序规则</li></ul><p><strong>主要技术点:</strong></p><ul><li>利用仿函数，可以改变排序规则</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;class MyCompare {public:bool operator()(int v1, int v2) {return v1 &gt; v2;}};void test01() {//默认从小到大排序//利用仿函数实现从大到小排序map&lt;int, int, MyCompare&gt; m;m.insert(make_pair(1, 10));m.insert(make_pair(2, 20));m.insert(make_pair(3, 30));m.insert(make_pair(4, 40));m.insert(make_pair(5, 50));for (map&lt;int, int, MyCompare&gt;::iterator it = m.begin(); it != m.end(); it++) {cout &lt;&lt; "key:" &lt;&lt; it-&gt;first &lt;&lt; " value:" &lt;&lt; it-&gt;second &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>利用仿函数可以指定map容器的排序规则</li><li>对于自定义数据类型，map必须要指定排序规则,同set容器</li></ul><h3 id="3-10-案例-员工分组"><a href="#3-10-案例-员工分组" class="headerlink" title="3.10 案例-员工分组"></a>3.10 案例-员工分组</h3><h4 id="3-10-1-案例描述"><a href="#3-10-1-案例描述" class="headerlink" title="3.10.1 案例描述"></a>3.10.1 案例描述</h4><ul><li>公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作</li><li>员工信息有: 姓名  工资组成；部门分为：策划、美术、研发</li><li>随机给10名员工分配部门和工资</li><li>通过multimap进行信息的插入  key(部门编号) value(员工)</li><li>分部门显示员工信息</li></ul><h4 id="3-10-2-实现步骤"><a href="#3-10-2-实现步骤" class="headerlink" title="3.10.2 实现步骤"></a>3.10.2 实现步骤</h4><ol><li>创建10名员工，放到vector中</li><li>遍历vector容器，取出每个员工，进行随机分组</li><li>分组后，将员工部门编号作为key，具体员工作为value，放入到multimap容器中</li><li>分部门显示员工信息</li></ol><p><strong>案例代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include &lt;vector&gt;#include &lt;string&gt;#include &lt;map&gt;#include &lt;ctime&gt;/*- 公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作- 员工信息有: 姓名  工资组成；部门分为：策划、美术、研发- 随机给10名员工分配部门和工资- 通过multimap进行信息的插入  key(部门编号) value(员工)- 分部门显示员工信息*/#define CEHUA  0#define MEISHU 1#define YANFA  2class Worker{public:string m_Name;int m_Salary;};void createWorker(vector&lt;Worker&gt;&amp;v){string nameSeed = "ABCDEFGHIJ";for (int i = 0; i &lt; 10; i++){Worker worker;worker.m_Name = "员工";worker.m_Name += nameSeed[i];worker.m_Salary = rand() % 10000 + 10000; // 10000 ~ 19999//将员工放入到容器中v.push_back(worker);}}//员工分组void setGroup(vector&lt;Worker&gt;&amp;v,multimap&lt;int,Worker&gt;&amp;m){for (vector&lt;Worker&gt;::iterator it = v.begin(); it != v.end(); it++){//产生随机部门编号int deptId = rand() % 3; // 0 1 2 //将员工插入到分组中//key部门编号，value具体员工m.insert(make_pair(deptId, *it));}}void showWorkerByGourp(multimap&lt;int,Worker&gt;&amp;m){// 0  A  B  C   1  D  E   2  F G ...cout &lt;&lt; "策划部门：" &lt;&lt; endl;multimap&lt;int,Worker&gt;::iterator pos = m.find(CEHUA);int count = m.count(CEHUA); // 统计具体人数int index = 0;for (; pos != m.end() &amp;&amp; index &lt; count; pos++ , index++){cout &lt;&lt; "姓名： " &lt;&lt; pos-&gt;second.m_Name &lt;&lt; " 工资： " &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;}cout &lt;&lt; "----------------------" &lt;&lt; endl;cout &lt;&lt; "美术部门： " &lt;&lt; endl;pos = m.find(MEISHU);count = m.count(MEISHU); // 统计具体人数index = 0;for (; pos != m.end() &amp;&amp; index &lt; count; pos++, index++){cout &lt;&lt; "姓名： " &lt;&lt; pos-&gt;second.m_Name &lt;&lt; " 工资： " &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;}cout &lt;&lt; "----------------------" &lt;&lt; endl;cout &lt;&lt; "研发部门： " &lt;&lt; endl;pos = m.find(YANFA);count = m.count(YANFA); // 统计具体人数index = 0;for (; pos != m.end() &amp;&amp; index &lt; count; pos++, index++){cout &lt;&lt; "姓名： " &lt;&lt; pos-&gt;second.m_Name &lt;&lt; " 工资： " &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;}}int main() {srand((unsigned int)time(NULL));//1、创建员工vector&lt;Worker&gt;vWorker;createWorker(vWorker);//2、员工分组multimap&lt;int, Worker&gt;mWorker;setGroup(vWorker, mWorker);//3、分组显示员工showWorkerByGourp(mWorker);////测试//for (vector&lt;Worker&gt;::iterator it = vWorker.begin(); it != vWorker.end(); it++)//{//cout &lt;&lt; "姓名： " &lt;&lt; it-&gt;m_Name &lt;&lt; " 工资： " &lt;&lt; it-&gt;m_Salary &lt;&lt; endl;//}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>当数据以键值对形式存在，可以考虑用map 或 multimap</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ STL-常用容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-STL初识</title>
      <link href="/2023/03/03/c-ti-gao-bian-cheng/2-stl-chu-shi/"/>
      <url>/2023/03/03/c-ti-gao-bian-cheng/2-stl-chu-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="2-1-STL的诞生"><a href="#2-1-STL的诞生" class="headerlink" title="2.1 STL的诞生"></a>2.1 STL的诞生</h3><ul><li><p>长久以来，软件界一直希望建立一种可重复利用的东西</p></li><li><p>C++的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是<strong>复用性的提升</strong></p></li><li><p>大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作</p></li><li><p>为了建立数据结构和算法的一套标准,诞生了<strong>STL</strong></p></li></ul><h3 id="2-2-STL基本概念"><a href="#2-2-STL基本概念" class="headerlink" title="2.2 STL基本概念"></a>2.2 STL基本概念</h3><ul><li>STL(Standard Template Library,<strong>标准模板库</strong>)</li><li>STL 从广义上分为: <strong>容器(container) 算法(algorithm) 迭代器(iterator)</strong></li><li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接。</li><li>STL 几乎所有的代码都采用了模板类或者模板函数</li></ul><h3 id="2-3-STL六大组件"><a href="#2-3-STL六大组件" class="headerlink" title="2.3 STL六大组件"></a>2.3 STL六大组件</h3><p>STL大体分为六大组件，分别是:<strong>容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</strong></p><ol><li>容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。</li><li>算法：各种常用的算法，如sort、find、copy、for_each等</li><li>迭代器：扮演了容器与算法之间的胶合剂。</li><li>仿函数：行为类似函数，可作为算法的某种策略。</li><li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li><li>空间配置器：负责空间的配置与管理。</li></ol><h3 id="2-4-STL中容器、算法、迭代器"><a href="#2-4-STL中容器、算法、迭代器" class="headerlink" title="2.4  STL中容器、算法、迭代器"></a>2.4  STL中容器、算法、迭代器</h3><p><strong>容器：</strong>置物之所也</p><p>STL<strong>容器</strong>就是将运用<strong>最广泛的一些数据结构</strong>实现出来</p><p>常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等</p><p>这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种:</p><p>​<strong>序列式容器</strong>:强调值的排序，序列式容器中的每个元素均有固定的位置。<br>​<strong>关联式容器</strong>:二叉树结构，各元素之间没有严格的物理上的顺序关系</p><p><strong>算法：</strong>问题之解法也</p><p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)</p><p>算法分为:<strong>质变算法</strong>和<strong>非质变算法</strong>。</p><p>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等</p><p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p><p><strong>迭代器：</strong>容器和算法之间粘合剂</p><p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p><p>每个容器都有自己专属的迭代器</p><p>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针</p><p>迭代器种类：</p><table><thead><tr><th>种类</th><th>功能</th><th>支持运算</th></tr></thead><tbody><tr><td>输入迭代器</td><td>对数据的只读访问</td><td>只读，支持++、==、！=</td></tr><tr><td>输出迭代器</td><td>对数据的只写访问</td><td>只写，支持++</td></tr><tr><td>前向迭代器</td><td>读写操作，并能向前推进迭代器</td><td>读写，支持++、==、！=</td></tr><tr><td>双向迭代器</td><td>读写操作，并能向前和向后操作</td><td>读写，支持++、–，</td></tr><tr><td>随机访问迭代器</td><td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td><td>读写，支持++、–、[n]、-n、&lt;、&lt;=、&gt;、&gt;=</td></tr></tbody></table><p>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p><h3 id="2-5-容器算法迭代器初识"><a href="#2-5-容器算法迭代器初识" class="headerlink" title="2.5 容器算法迭代器初识"></a>2.5 容器算法迭代器初识</h3><p>了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力</p><p>STL中最常用的容器为Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器</p><h4 id="2-5-1-vector存放内置数据类型"><a href="#2-5-1-vector存放内置数据类型" class="headerlink" title="2.5.1 vector存放内置数据类型"></a>2.5.1 vector存放内置数据类型</h4><p>容器：     <code>vector</code></p><p>算法：     <code>for_each</code></p><p>迭代器： <code>vector&lt;int&gt;::iterator</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;void MyPrint(int val){cout &lt;&lt; val &lt;&lt; endl;}void test01() {//创建vector容器对象，并且通过模板参数指定容器中存放的数据的类型vector&lt;int&gt; v;//向容器中放数据v.push_back(10);v.push_back(20);v.push_back(30);v.push_back(40);//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素//v.begin()返回迭代器，这个迭代器指向容器中第一个数据//v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置//vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型vector&lt;int&gt;::iterator pBegin = v.begin();vector&lt;int&gt;::iterator pEnd = v.end();//第一种遍历方式：while (pBegin != pEnd) {cout &lt;&lt; *pBegin &lt;&lt; endl;pBegin++;}//第二种遍历方式：for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; *it &lt;&lt; endl;}cout &lt;&lt; endl;//第三种遍历方式：//使用STL提供标准遍历算法  头文件 algorithmfor_each(v.begin(), v.end(), MyPrint);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-2-Vector存放自定义数据类型"><a href="#2-5-2-Vector存放自定义数据类型" class="headerlink" title="2.5.2 Vector存放自定义数据类型"></a>2.5.2 Vector存放自定义数据类型</h4><p>学习目标：vector中存放自定义数据类型，并打印输出</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;string&gt;//自定义数据类型class Person {public:Person(string name, int age) {mName = name;mAge = age;}public:string mName;int mAge;};//存放对象void test01() {vector&lt;Person&gt; v;//创建数据Person p1("aaa", 10);Person p2("bbb", 20);Person p3("ccc", 30);Person p4("ddd", 40);Person p5("eee", 50);v.push_back(p1);v.push_back(p2);v.push_back(p3);v.push_back(p4);v.push_back(p5);for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) {cout &lt;&lt; "Name:" &lt;&lt; (*it).mName &lt;&lt; " Age:" &lt;&lt; (*it).mAge &lt;&lt; endl;}}//放对象指针void test02() {vector&lt;Person*&gt; v;//创建数据Person p1("aaa", 10);Person p2("bbb", 20);Person p3("ccc", 30);Person p4("ddd", 40);Person p5("eee", 50);v.push_back(&amp;p1);v.push_back(&amp;p2);v.push_back(&amp;p3);v.push_back(&amp;p4);v.push_back(&amp;p5);for (vector&lt;Person*&gt;::iterator it = v.begin(); it != v.end(); it++) {Person * p = (*it);cout &lt;&lt; "Name:" &lt;&lt; p-&gt;mName &lt;&lt; " Age:" &lt;&lt; (*it)-&gt;mAge &lt;&lt; endl;}}int main() {test01();    test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-3-Vector容器嵌套容器"><a href="#2-5-3-Vector容器嵌套容器" class="headerlink" title="2.5.3 Vector容器嵌套容器"></a>2.5.3 Vector容器嵌套容器</h4><p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;//容器嵌套容器void test01() {vector&lt; vector&lt;int&gt; &gt;  v;vector&lt;int&gt; v1;vector&lt;int&gt; v2;vector&lt;int&gt; v3;vector&lt;int&gt; v4;for (int i = 0; i &lt; 4; i++) {v1.push_back(i + 1);v2.push_back(i + 2);v3.push_back(i + 3);v4.push_back(i + 4);}//将容器元素插入到vector v中v.push_back(v1);v.push_back(v2);v.push_back(v3);v.push_back(v4);for (vector&lt;vector&lt;int&gt;&gt;::iterator it = v.begin(); it != v.end(); it++) {for (vector&lt;int&gt;::iterator vit = (*it).begin(); vit != (*it).end(); vit++) {cout &lt;&lt; *vit &lt;&lt; " ";}cout &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ STL初识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-模版</title>
      <link href="/2023/03/03/c-ti-gao-bian-cheng/1-mo-ban/"/>
      <url>/2023/03/03/c-ti-gao-bian-cheng/1-mo-ban/</url>
      
        <content type="html"><![CDATA[<ul><li>本阶段主要针对C++==泛型编程==和==STL==技术做详细讲解，探讨C++更深层的使用</li></ul><h2 id="1-模板"><a href="#1-模板" class="headerlink" title="1 模板"></a>1 模板</h2><h3 id="1-1-模板的概念"><a href="#1-1-模板的概念" class="headerlink" title="1.1 模板的概念"></a>1.1 模板的概念</h3><p>模板就是建立<strong>通用的模具</strong>，大大<strong>提高复用性</strong></p><p>例如生活中的模板</p><p>一寸照片模板：</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/1-mo-ban/1547105026929.png" alt="1547105026929"></p><p>PPT模板：</p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/1-mo-ban/1547103297864.png" alt="1547103297864"></p><p><img src="/2023/03/03/c-ti-gao-bian-cheng/1-mo-ban/1547103359158.png" alt="1547103359158"></p><p>模板的特点：</p><ul><li>模板不可以直接使用，它只是一个框架</li><li>模板的通用并不是万能的</li></ul><h3 id="1-2-函数模板"><a href="#1-2-函数模板" class="headerlink" title="1.2 函数模板"></a>1.2 函数模板</h3><ul><li><p>C++另一种编程思想称为 ==泛型编程== ，主要利用的技术就是模板</p></li><li><p>C++提供两种模板机制:<strong>函数模板</strong>和<strong>类模板</strong></p></li></ul><h4 id="1-2-1-函数模板语法"><a href="#1-2-1-函数模板语法" class="headerlink" title="1.2.1 函数模板语法"></a>1.2.1 函数模板语法</h4><p>函数模板作用：</p><p>建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p><p><strong>语法：</strong> </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;typename T&gt;函数声明或定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解释：</strong></p><p>template  —  声明创建模板</p><p>typename  — 表面其后面的符号是一种数据类型，可以用class代替</p><p>T    —   通用的数据类型，名称可以替换，通常为大写字母</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//交换整型函数void swapInt(int&amp; a, int&amp; b) {int temp = a;a = b;b = temp;}//交换浮点型函数void swapDouble(double&amp; a, double&amp; b) {double temp = a;a = b;b = temp;}//利用模板提供通用的交换函数template&lt;typename T&gt;void mySwap(T&amp; a, T&amp; b){T temp = a;a = b;b = temp;}void test01(){int a = 10;int b = 20;//swapInt(a, b);//利用模板实现交换//1、自动类型推导mySwap(a, b);//2、显示指定类型mySwap&lt;int&gt;(a, b);cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>函数模板利用关键字 template</li><li>使用函数模板有两种方式：自动类型推导、显示指定类型</li><li>模板的目的是为了提高复用性，将类型参数化</li></ul><h4 id="1-2-2-函数模板注意事项"><a href="#1-2-2-函数模板注意事项" class="headerlink" title="1.2.2 函数模板注意事项"></a>1.2.2 函数模板注意事项</h4><p>注意事项：</p><ul><li><p>自动类型推导，必须推导出一致的数据类型T,才可以使用</p></li><li><p>模板必须要确定出T的数据类型，才可以使用</p></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//利用模板提供通用的交换函数template&lt;class T&gt;void mySwap(T&amp; a, T&amp; b){T temp = a;a = b;b = temp;}// 1、自动类型推导，必须推导出一致的数据类型T,才可以使用void test01(){int a = 10;int b = 20;char c = 'c';mySwap(a, b); // 正确，可以推导出一致的T//mySwap(a, c); // 错误，推导不出一致的T类型}// 2、模板必须要确定出T的数据类型，才可以使用template&lt;class T&gt;void func(){cout &lt;&lt; "func 调用" &lt;&lt; endl;}void test02(){//func(); //错误，模板不能独立使用，必须确定出T的类型func&lt;int&gt;(); //利用显示指定类型的方式，给T一个类型，才可以使用该模板}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型</li></ul><h4 id="1-2-3-函数模板案例"><a href="#1-2-3-函数模板案例" class="headerlink" title="1.2.3 函数模板案例"></a>1.2.3 函数模板案例</h4><p>案例描述：</p><ul><li>利用函数模板封装一个排序的函数，可以对<strong>不同数据类型数组</strong>进行排序</li><li>排序规则从大到小，排序算法为<strong>选择排序</strong></li><li>分别利用<strong>char数组</strong>和<strong>int数组</strong>进行测试</li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//交换的函数模板template&lt;typename T&gt;void mySwap(T &amp;a, T&amp;b){T temp = a;a = b;b = temp;}template&lt;class T&gt; // 也可以替换成typename//利用选择排序，进行对数组从大到小的排序void mySort(T arr[], int len){for (int i = 0; i &lt; len; i++){int max = i; //最大数的下标for (int j = i + 1; j &lt; len; j++){if (arr[max] &lt; arr[j]){max = j;}}if (max != i) //如果最大数的下标不是i，交换两者{mySwap(arr[max], arr[i]);}}}template&lt;typename T&gt;void printArray(T arr[], int len) {for (int i = 0; i &lt; len; i++) {cout &lt;&lt; arr[i] &lt;&lt; " ";}cout &lt;&lt; endl;}void test01(){//测试char数组char charArr[] = "bdcfeagh";int num = sizeof(charArr) / sizeof(char);mySort(charArr, num);printArray(charArr, num);}void test02(){//测试int数组int intArr[] = { 7, 5, 8, 1, 3, 9, 2, 4, 6 };int num = sizeof(intArr) / sizeof(int);mySort(intArr, num);printArray(intArr, num);}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：模板可以提高代码复用，需要熟练掌握</p><h4 id="1-2-4-普通函数与函数模板的区别"><a href="#1-2-4-普通函数与函数模板的区别" class="headerlink" title="1.2.4 普通函数与函数模板的区别"></a>1.2.4 普通函数与函数模板的区别</h4><p><strong>普通函数与函数模板区别：</strong></p><ul><li>普通函数调用时可以发生自动类型转换（隐式类型转换）</li><li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li><li>如果利用显示指定类型的方式，可以发生隐式类型转换</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//普通函数int myAdd01(int a, int b){return a + b;}//函数模板template&lt;class T&gt;T myAdd02(T a, T b)  {return a + b;}//使用函数模板时，如果用自动类型推导，不会发生自动类型转换,即隐式类型转换void test01(){int a = 10;int b = 20;char c = 'c';cout &lt;&lt; myAdd01(a, c) &lt;&lt; endl; //正确，将char类型的'c'隐式转换为int类型  'c' 对应 ASCII码 99//myAdd02(a, c); // 报错，使用自动类型推导时，不会发生隐式类型转换myAdd02&lt;int&gt;(a, c); //正确，如果用显示指定类型，可以发生隐式类型转换}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T</p><h4 id="1-2-5-普通函数与函数模板的调用规则"><a href="#1-2-5-普通函数与函数模板的调用规则" class="headerlink" title="1.2.5 普通函数与函数模板的调用规则"></a>1.2.5 普通函数与函数模板的调用规则</h4><p>调用规则如下：</p><ol><li>如果函数模板和普通函数都可以实现，优先调用普通函数</li><li>可以通过空模板参数列表来强制调用函数模板</li><li>函数模板也可以发生重载</li><li>如果函数模板可以产生更好的匹配,优先调用函数模板</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//普通函数与函数模板调用规则void myPrint(int a, int b){cout &lt;&lt; "调用的普通函数" &lt;&lt; endl;}template&lt;typename T&gt;void myPrint(T a, T b) { cout &lt;&lt; "调用的模板" &lt;&lt; endl;}template&lt;typename T&gt;void myPrint(T a, T b, T c) { cout &lt;&lt; "调用重载的模板" &lt;&lt; endl; }void test01(){//1、如果函数模板和普通函数都可以实现，优先调用普通函数// 注意 如果告诉编译器  普通函数是有的，但只是声明没有实现，或者不在当前文件内实现，就会报错找不到int a = 10;int b = 20;myPrint(a, b); //调用普通函数//2、可以通过空模板参数列表来强制调用函数模板myPrint&lt;&gt;(a, b); //调用函数模板//3、函数模板也可以发生重载int c = 30;myPrint(a, b, c); //调用重载的函数模板//4、 如果函数模板可以产生更好的匹配,优先调用函数模板char c1 = 'a';char c2 = 'b';myPrint(c1, c2); //调用函数模板}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性</p><h4 id="1-2-6-模板的局限性"><a href="#1-2-6-模板的局限性" class="headerlink" title="1.2.6 模板的局限性"></a>1.2.6 模板的局限性</h4><p><strong>局限性：</strong></p><ul><li>模板的通用性并不是万能的</li></ul><p><strong>例如：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;class T&gt;void f(T a, T b){    a = b;   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中提供的赋值操作，如果传入的a和b是一个数组，就无法实现了</p><p>再例如：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;class T&gt;void f(T a, T b){    if(a &gt; b) { ... }   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行</p><p>因此C++为了解决这种问题，提供模板的重载，可以为这些<strong>特定的类型</strong>提供<strong>具体化的模板</strong></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#include &lt;string&gt;class Person{public:Person(string name, int age){this-&gt;m_Name = name;this-&gt;m_Age = age;}string m_Name;int m_Age;};//普通函数模板template&lt;class T&gt;bool myCompare(T&amp; a, T&amp; b){if (a == b){return true;}else{return false;}}//具体化，显示具体化的原型和定意思以template&lt;&gt;开头，并通过名称来指出类型//具体化优先于常规模板template&lt;&gt; bool myCompare(Person &amp;p1, Person &amp;p2){if ( p1.m_Name  == p2.m_Name &amp;&amp; p1.m_Age == p2.m_Age){return true;}else{return false;}}void test01(){int a = 10;int b = 20;//内置数据类型可以直接使用通用的函数模板bool ret = myCompare(a, b);if (ret){cout &lt;&lt; "a == b " &lt;&lt; endl;}else{cout &lt;&lt; "a != b " &lt;&lt; endl;}}void test02(){Person p1("Tom", 10);Person p2("Tom", 10);//自定义数据类型，不会调用普通的函数模板//可以创建具体化的Person数据类型的模板，用于特殊处理这个类型bool ret = myCompare(p1, p2);if (ret){cout &lt;&lt; "p1 == p2 " &lt;&lt; endl;}else{cout &lt;&lt; "p1 != p2 " &lt;&lt; endl;}}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>利用具体化的模板，可以解决自定义类型的通用化</li><li>学习模板并不是为了写模板，而是在STL能够运用系统提供的模板</li></ul><h3 id="1-3-类模板"><a href="#1-3-类模板" class="headerlink" title="1.3 类模板"></a>1.3 类模板</h3><h4 id="1-3-1-类模板语法"><a href="#1-3-1-类模板语法" class="headerlink" title="1.3.1 类模板语法"></a>1.3.1 类模板语法</h4><p>类模板作用：</p><ul><li>建立一个通用类，类中的成员 数据类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</li></ul><p><strong>语法：</strong> </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template&lt;typename T&gt;类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解释：</strong></p><p>template  —  声明创建模板</p><p>typename  — 表面其后面的符号是一种数据类型，可以用class代替</p><p>T    —   通用的数据类型，名称可以替换，通常为大写字母</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//类模板template&lt;class NameType, class AgeType&gt; class Person{public:Person(NameType name, AgeType age){this-&gt;mName = name;this-&gt;mAge = age;}void showPerson(){cout &lt;&lt; "name: " &lt;&lt; this-&gt;mName &lt;&lt; " age: " &lt;&lt; this-&gt;mAge &lt;&lt; endl;}public:NameType mName;AgeType mAge;};void test01(){// 指定NameType 为string类型，AgeType 为 int类型Person&lt;string, int&gt;P1("孙悟空", 999);P1.showPerson();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：类模板和函数模板语法相似，在声明模板template后面加类，此类称为类模板</p><h4 id="1-3-2-类模板与函数模板区别"><a href="#1-3-2-类模板与函数模板区别" class="headerlink" title="1.3.2 类模板与函数模板区别"></a>1.3.2 类模板与函数模板区别</h4><p>类模板与函数模板区别主要有两点：</p><ol><li>类模板没有自动类型推导的使用方式</li><li>类模板在模板参数列表中可以有默认参数</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//类模板template&lt;class NameType, class AgeType = int&gt; class Person{public:Person(NameType name, AgeType age){this-&gt;mName = name;this-&gt;mAge = age;}void showPerson(){cout &lt;&lt; "name: " &lt;&lt; this-&gt;mName &lt;&lt; " age: " &lt;&lt; this-&gt;mAge &lt;&lt; endl;}public:NameType mName;AgeType mAge;};//1、类模板没有自动类型推导的使用方式void test01(){// Person p("孙悟空", 1000); // 错误 类模板使用时候，不可以用自动类型推导Person &lt;string ,int&gt;p("孙悟空", 1000); //必须使用显示指定类型的方式，使用类模板p.showPerson();}//2、类模板在模板参数列表中可以有默认参数void test02(){Person &lt;string&gt; p("猪八戒", 999); //类模板中的模板参数列表 可以指定默认参数p.showPerson();}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>类模板使用只能用显示指定类型方式</li><li>类模板中的模板参数列表可以有默认参数</li></ul><h4 id="1-3-3-类模板中成员函数创建时机"><a href="#1-3-3-类模板中成员函数创建时机" class="headerlink" title="1.3.3 类模板中成员函数创建时机"></a>1.3.3 类模板中成员函数创建时机</h4><p>类模板中成员函数和普通类中成员函数创建时机是有区别的：</p><ul><li>普通类中的成员函数一开始就可以创建</li><li>类模板中的成员函数在调用时才创建</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person1{public:void showPerson1(){cout &lt;&lt; "Person1 show" &lt;&lt; endl;}};class Person2{public:void showPerson2(){cout &lt;&lt; "Person2 show" &lt;&lt; endl;}};template&lt;class T&gt;class MyClass{public:T obj;//类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成void fun1() { obj.showPerson1(); }void fun2() { obj.showPerson2(); }};void test01(){MyClass&lt;Person1&gt; m;m.fun1();//m.fun2();//编译会出错，说明函数调用才会去创建成员函数}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建</p><h4 id="1-3-4-类模板对象做函数参数"><a href="#1-3-4-类模板对象做函数参数" class="headerlink" title="1.3.4 类模板对象做函数参数"></a>1.3.4 类模板对象做函数参数</h4><p>学习目标：</p><ul><li>类模板实例化出的对象，向函数传参的方式</li></ul><p>一共有三种传入方式：</p><ol><li>指定传入的类型   — 直接显示对象的数据类型</li><li>参数模板化           — 将对象中的参数变为模板进行传递</li><li>整个类模板化       — 将这个对象类型 模板化进行传递</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//类模板template&lt;class NameType, class AgeType = int&gt; class Person{public:Person(NameType name, AgeType age){this-&gt;mName = name;this-&gt;mAge = age;}void showPerson(){cout &lt;&lt; "name: " &lt;&lt; this-&gt;mName &lt;&lt; " age: " &lt;&lt; this-&gt;mAge &lt;&lt; endl;}public:NameType mName;AgeType mAge;};//1、指定传入的类型void printPerson1(Person&lt;string, int&gt; &amp;p) {p.showPerson();}void test01(){Person &lt;string, int &gt;p("孙悟空", 100);printPerson1(p);}//2、参数模板化template &lt;class T1, class T2&gt;void printPerson2(Person&lt;T1, T2&gt;&amp;p){p.showPerson();cout &lt;&lt; "T1的类型为： " &lt;&lt; typeid(T1).name() &lt;&lt; endl;cout &lt;&lt; "T2的类型为： " &lt;&lt; typeid(T2).name() &lt;&lt; endl;}void test02(){Person &lt;string, int &gt;p("猪八戒", 90);printPerson2(p);}//3、整个类模板化template&lt;class T&gt;void printPerson3(T &amp; p){cout &lt;&lt; "T的类型为： " &lt;&lt; typeid(T).name() &lt;&lt; endl;p.showPerson();}void test03(){Person &lt;string, int &gt;p("唐僧", 30);printPerson3(p);}int main() {test01();test02();test03();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>通过类模板创建的对象，可以有三种方式向函数中进行传参</li><li>使用比较广泛是第一种：指定传入的类型</li></ul><h4 id="1-3-5-类模板与继承"><a href="#1-3-5-类模板与继承" class="headerlink" title="1.3.5 类模板与继承"></a>1.3.5 类模板与继承</h4><p>当类模板碰到继承时，需要注意一下几点：</p><ul><li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型</li><li>如果不指定，编译器无法给子类分配内存</li><li>如果想灵活指定出父类中T的类型，子类也需变为类模板</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">template&lt;class T&gt;class Base{T m;};//class Son:public Base  //错误，c++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承class Son :public Base&lt;int&gt; //必须指定一个类型{};void test01(){Son c;}//类模板继承类模板 ,可以用T2指定父类中的T类型template&lt;class T1, class T2&gt;class Son2 :public Base&lt;T2&gt;{public:Son2(){cout &lt;&lt; typeid(T1).name() &lt;&lt; endl;cout &lt;&lt; typeid(T2).name() &lt;&lt; endl;}};void test02(){Son2&lt;int, char&gt; child1;}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：如果父类是类模板，子类需要指定出父类中T的数据类型</p><h4 id="1-3-6-类模板成员函数类外实现"><a href="#1-3-6-类模板成员函数类外实现" class="headerlink" title="1.3.6 类模板成员函数类外实现"></a>1.3.6 类模板成员函数类外实现</h4><p>学习目标：能够掌握类模板中的成员函数类外实现</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//类模板中成员函数类外实现template&lt;class T1, class T2&gt;class Person {public://成员函数类内声明Person(T1 name, T2 age);void showPerson();public:T1 m_Name;T2 m_Age;};//构造函数 类外实现template&lt;class T1, class T2&gt;Person&lt;T1, T2&gt;::Person(T1 name, T2 age) {this-&gt;m_Name = name;this-&gt;m_Age = age;}//成员函数 类外实现template&lt;class T1, class T2&gt;void Person&lt;T1, T2&gt;::showPerson() {cout &lt;&lt; "姓名: " &lt;&lt; this-&gt;m_Name &lt;&lt; " 年龄:" &lt;&lt; this-&gt;m_Age &lt;&lt; endl;}void test01(){Person&lt;string, int&gt; p("Tom", 20);p.showPerson();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：类模板中成员函数类外实现时，需要加上模板参数列表</p><h4 id="1-3-7-类模板分文件编写"><a href="#1-3-7-类模板分文件编写" class="headerlink" title="1.3.7 类模板分文件编写"></a>1.3.7 类模板分文件编写</h4><p>学习目标：</p><ul><li>掌握类模板成员函数分文件编写产生的问题以及解决方式</li></ul><p>问题：</p><ul><li>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</li></ul><p>解决：</p><ul><li>解决方式1：直接包含.cpp源文件</li><li>解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称，并不是强制</li></ul><p><strong>示例：</strong></p><p>person.hpp中代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include &lt;iostream&gt;using namespace std;#include &lt;string&gt;template&lt;class T1, class T2&gt;class Person {public:Person(T1 name, T2 age);void showPerson();public:T1 m_Name;T2 m_Age;};//构造函数 类外实现template&lt;class T1, class T2&gt;Person&lt;T1, T2&gt;::Person(T1 name, T2 age) {this-&gt;m_Name = name;this-&gt;m_Age = age;}//成员函数 类外实现template&lt;class T1, class T2&gt;void Person&lt;T1, T2&gt;::showPerson() {cout &lt;&lt; "姓名: " &lt;&lt; this-&gt;m_Name &lt;&lt; " 年龄:" &lt;&lt; this-&gt;m_Age &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类模板分文件编写.cpp中代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//#include "person.h"#include "person.cpp" //解决方式1，包含cpp源文件//解决方式2，将声明和实现写到一起，文件后缀名改为.hpp#include "person.hpp"void test01(){Person&lt;string, int&gt; p("Tom", 10);p.showPerson();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p><h4 id="1-3-8-类模板与友元"><a href="#1-3-8-类模板与友元" class="headerlink" title="1.3.8 类模板与友元"></a>1.3.8 类模板与友元</h4><p>学习目标：</p><ul><li>掌握类模板配合友元函数的类内和类外实现</li></ul><p>全局函数类内实现 - 直接在类内声明友元即可</p><p>全局函数类外实现 - 需要提前让编译器知道全局函数的存在</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;//2、全局函数配合友元  类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元template&lt;class T1, class T2&gt; class Person;//如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到//template&lt;class T1, class T2&gt; void printPerson2(Person&lt;T1, T2&gt; &amp; p); template&lt;class T1, class T2&gt;void printPerson2(Person&lt;T1, T2&gt; &amp; p){cout &lt;&lt; "类外实现 ---- 姓名： " &lt;&lt; p.m_Name &lt;&lt; " 年龄：" &lt;&lt; p.m_Age &lt;&lt; endl;}template&lt;class T1, class T2&gt;class Person{//1、全局函数配合友元   类内实现friend void printPerson(Person&lt;T1, T2&gt; &amp; p){cout &lt;&lt; "姓名： " &lt;&lt; p.m_Name &lt;&lt; " 年龄：" &lt;&lt; p.m_Age &lt;&lt; endl;}//全局函数配合友元  类外实现friend void printPerson2&lt;&gt;(Person&lt;T1, T2&gt; &amp; p);public:Person(T1 name, T2 age){this-&gt;m_Name = name;this-&gt;m_Age = age;}private:T1 m_Name;T2 m_Age;};//1、全局函数在类内实现void test01(){Person &lt;string, int &gt;p("Tom", 20);printPerson(p);}//2、全局函数在类外实现void test02(){Person &lt;string, int &gt;p("Jerry", 30);printPerson2(p);}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别</p><h4 id="1-3-9-类模板案例"><a href="#1-3-9-类模板案例" class="headerlink" title="1.3.9 类模板案例"></a>1.3.9 类模板案例</h4><p>案例描述:  实现一个通用的数组类，要求如下：</p><ul><li>可以对内置数据类型以及自定义数据类型的数据进行存储</li><li>将数组中的数据存储到堆区</li><li>构造函数中可以传入数组的容量</li><li>提供对应的拷贝构造函数以及operator=防止浅拷贝问题</li><li>提供尾插法和尾删法对数组中的数据进行增加和删除</li><li>可以通过下标的方式访问数组中的元素</li><li>可以获取数组中当前元素个数和数组的容量</li></ul><p><strong>示例：</strong></p><p>myArray.hpp中代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#pragma once#include &lt;iostream&gt;using namespace std;template&lt;class T&gt;class MyArray{public:    //构造函数MyArray(int capacity){this-&gt;m_Capacity = capacity;this-&gt;m_Size = 0;pAddress = new T[this-&gt;m_Capacity];}//拷贝构造MyArray(const MyArray &amp; arr){this-&gt;m_Capacity = arr.m_Capacity;this-&gt;m_Size = arr.m_Size;this-&gt;pAddress = new T[this-&gt;m_Capacity];for (int i = 0; i &lt; this-&gt;m_Size; i++){//如果T为对象，而且还包含指针，必须需要重载 = 操作符，因为这个等号不是 构造 而是赋值，// 普通类型可以直接= 但是指针类型需要深拷贝this-&gt;pAddress[i] = arr.pAddress[i];}}//重载= 操作符  防止浅拷贝问题MyArray&amp; operator=(const MyArray&amp; myarray) {if (this-&gt;pAddress != NULL) {delete[] this-&gt;pAddress;this-&gt;m_Capacity = 0;this-&gt;m_Size = 0;}this-&gt;m_Capacity = myarray.m_Capacity;this-&gt;m_Size = myarray.m_Size;this-&gt;pAddress = new T[this-&gt;m_Capacity];for (int i = 0; i &lt; this-&gt;m_Size; i++) {this-&gt;pAddress[i] = myarray[i];}return *this;}//重载[] 操作符  arr[0]T&amp; operator [](int index){return this-&gt;pAddress[index]; //不考虑越界，用户自己去处理}//尾插法void Push_back(const T &amp; val){if (this-&gt;m_Capacity == this-&gt;m_Size){return;}this-&gt;pAddress[this-&gt;m_Size] = val;this-&gt;m_Size++;}//尾删法void Pop_back(){if (this-&gt;m_Size == 0){return;}this-&gt;m_Size--;}//获取数组容量int getCapacity(){return this-&gt;m_Capacity;}//获取数组大小intgetSize(){return this-&gt;m_Size;}//析构~MyArray(){if (this-&gt;pAddress != NULL){delete[] this-&gt;pAddress;this-&gt;pAddress = NULL;this-&gt;m_Capacity = 0;this-&gt;m_Size = 0;}}private:T * pAddress;  //指向一个堆空间，这个空间存储真正的数据int m_Capacity; //容量int m_Size;   // 大小};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类模板案例—数组类封装.cpp中</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "myArray.hpp"#include &lt;string&gt;void printIntArray(MyArray&lt;int&gt;&amp; arr) {for (int i = 0; i &lt; arr.getSize(); i++) {cout &lt;&lt; arr[i] &lt;&lt; " ";}cout &lt;&lt; endl;}//测试内置数据类型void test01(){MyArray&lt;int&gt; array1(10);for (int i = 0; i &lt; 10; i++){array1.Push_back(i);}cout &lt;&lt; "array1打印输出：" &lt;&lt; endl;printIntArray(array1);cout &lt;&lt; "array1的大小：" &lt;&lt; array1.getSize() &lt;&lt; endl;cout &lt;&lt; "array1的容量：" &lt;&lt; array1.getCapacity() &lt;&lt; endl;cout &lt;&lt; "--------------------------" &lt;&lt; endl;MyArray&lt;int&gt; array2(array1);array2.Pop_back();cout &lt;&lt; "array2打印输出：" &lt;&lt; endl;printIntArray(array2);cout &lt;&lt; "array2的大小：" &lt;&lt; array2.getSize() &lt;&lt; endl;cout &lt;&lt; "array2的容量：" &lt;&lt; array2.getCapacity() &lt;&lt; endl;}//测试自定义数据类型class Person {public:Person() {} Person(string name, int age) {this-&gt;m_Name = name;this-&gt;m_Age = age;}public:string m_Name;int m_Age;};void printPersonArray(MyArray&lt;Person&gt;&amp; personArr){for (int i = 0; i &lt; personArr.getSize(); i++) {cout &lt;&lt; "姓名：" &lt;&lt; personArr[i].m_Name &lt;&lt; " 年龄： " &lt;&lt; personArr[i].m_Age &lt;&lt; endl;}}void test02(){//创建数组MyArray&lt;Person&gt; pArray(10);Person p1("孙悟空", 30);Person p2("韩信", 20);Person p3("妲己", 18);Person p4("王昭君", 15);Person p5("赵云", 24);//插入数据pArray.Push_back(p1);pArray.Push_back(p2);pArray.Push_back(p3);pArray.Push_back(p4);pArray.Push_back(p5);printPersonArray(pArray);cout &lt;&lt; "pArray的大小：" &lt;&lt; pArray.getSize() &lt;&lt; endl;cout &lt;&lt; "pArray的容量：" &lt;&lt; pArray.getCapacity() &lt;&lt; endl;}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>能够利用所学知识点实现通用的数组</p>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-文件操作</title>
      <link href="/2023/03/03/c-he-xin-bian-cheng/5-wen-jian-cao-zuo/"/>
      <url>/2023/03/03/c-he-xin-bian-cheng/5-wen-jian-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p><p>通过<strong>文件可以将数据持久化</strong></p><p>C++中对文件操作需要包含头文件 ==&lt; fstream &gt;==</p><p>文件类型分为两种：</p><ol><li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类:</p><ol><li>ofstream：写操作</li><li>ifstream： 读操作</li><li>fstream ： 读写操作</li></ol><h3 id="5-1文本文件"><a href="#5-1文本文件" class="headerlink" title="5.1文本文件"></a>5.1文本文件</h3><h4 id="5-1-1写文件"><a href="#5-1-1写文件" class="headerlink" title="5.1.1写文件"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p><ol><li><p>包含头文件   </p><p>#include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ofstream ofs;</p></li><li><p>打开文件</p><p>ofs.open(“文件路径”,打开方式);</p></li><li><p>写数据</p><p>ofs &lt;&lt; “写入的数据”;</p></li><li><p>关闭文件</p><p>ofs.close();</p></li></ol><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p><p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;void test01(){ofstream ofs;ofs.open("test.txt", ios::out);ofs &lt;&lt; "姓名：张三" &lt;&lt; endl;ofs &lt;&lt; "性别：男" &lt;&lt; endl;ofs &lt;&lt; "年龄：18" &lt;&lt; endl;ofs.close();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件操作必须包含头文件 fstream</li><li>读文件可以利用 ofstream  ，或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h4 id="5-1-2读文件"><a href="#5-1-2读文件" class="headerlink" title="5.1.2读文件"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p><p>读文件步骤如下：</p><ol><li><p>包含头文件   </p><p>#include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ifstream ifs;</p></li><li><p>打开文件并判断文件是否打开成功</p><p>ifs.open(“文件路径”,打开方式);</p></li><li><p>读数据</p><p>四种方式读取</p></li><li><p>关闭文件</p><p>ifs.close();</p></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;void test01(){ifstream ifs;ifs.open("test.txt", ios::in);if (!ifs.is_open()){cout &lt;&lt; "文件打开失败" &lt;&lt; endl;return;}//第一种方式//char buf[1024] = { 0 };//while (ifs &gt;&gt; buf)//{//cout &lt;&lt; buf &lt;&lt; endl;//}//第二种//char buf[1024] = { 0 };//while (ifs.getline(buf,sizeof(buf)))//{//cout &lt;&lt; buf &lt;&lt; endl;//}//第三种//string buf;//while (getline(ifs, buf))//{//cout &lt;&lt; buf &lt;&lt; endl;//}char c;while ((c = ifs.get()) != EOF){cout &lt;&lt; c;}ifs.close();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>读文件可以利用 ifstream  ，或者fstream类</li><li>利用is_open函数可以判断文件是否打开成功</li><li>close 关闭文件</li></ul><h3 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为 ==ios::binary==</p><h4 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;class Person{public:char m_Name[64];int m_Age;};//二进制文件  写文件void test01(){//1、包含头文件//2、创建输出流对象ofstream ofs("person.txt", ios::out | ios::binary);//3、打开文件//ofs.open("person.txt", ios::out | ios::binary);Person p = {"张三"  , 18};//4、写文件ofs.write((const char *)&amp;p, sizeof(p));//5、关闭文件ofs.close();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件输出流对象 可以通过write函数，以二进制方式写数据</li></ul><h4 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;class Person{public:char m_Name[64];int m_Age;};void test01(){ifstream ifs("person.txt", ios::in | ios::binary);if (!ifs.is_open()){cout &lt;&lt; "文件打开失败" &lt;&lt; endl;}Person p;ifs.read((char *)&amp;p, sizeof(p));cout &lt;&lt; "姓名： " &lt;&lt; p.m_Name &lt;&lt; " 年龄： " &lt;&lt; p.m_Age &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文件输入流对象 可以通过read函数，以二进制方式读数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++核心编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 文件操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-类和对象</title>
      <link href="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/"/>
      <url>/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/</url>
      
        <content type="html"><![CDATA[<p>C++面向对象的三大特性为：==封装、继承、多态==</p><p>C++认为==万事万物都皆为对象==，对象上有其属性和行为</p><p><strong>例如：</strong></p><p>​人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p><p>​车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p><p>​具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</p><h3 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h3><h4 id="4-1-1-封装的意义"><a href="#4-1-1-封装的意义" class="headerlink" title="4.1.1  封装的意义"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><p><strong>封装意义一：</strong></p><p>​在设计类的时候，属性和行为写在一起，表现事物</p><p><strong>语法：</strong> <code>class 类名{   访问权限： 属性  / 行为  };</code></p><p><strong>示例1：</strong>设计一个圆类，求圆的周长</p><p><strong>示例代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//圆周率const double PI = 3.14;//1、封装的意义//将属性和行为作为一个整体，用来表现生活中的事物//封装一个圆类，求圆的周长//class代表设计一个类，后面跟着的是类名class Circle{public:  //访问权限  公共的权限//属性int m_r;//半径//行为//获取到圆的周长double calculateZC(){//2 * pi  * r//获取圆的周长return  2 * PI * m_r;}};int main() {//通过圆类，创建圆的对象// c1就是一个具体的圆Circle c1;c1.m_r = 10; //给圆对象的半径 进行赋值操作//2 * pi * 10 = = 62.8cout &lt;&lt; "圆的周长为： " &lt;&lt; c1.calculateZC() &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p><p><strong>示例2代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生类class Student {public:void setName(string name) {m_name = name;}void setID(int id) {m_id = id;}void showStudent() {cout &lt;&lt; "name:" &lt;&lt; m_name &lt;&lt; " ID:" &lt;&lt; m_id &lt;&lt; endl;}public:string m_name;int m_id;};int main() {Student stu;stu.setName("德玛西亚");stu.setID(250);stu.showStudent();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>封装意义二：</strong></p><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种：</p><ol><li>public        公共权限  </li><li>protected 保护权限</li><li>private      私有权限</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//三种权限//公共权限  public     类内可以访问  类外可以访问//保护权限  protected  类内可以访问  类外不可以访问//私有权限  private    类内可以访问  类外不可以访问class Person{//姓名  公共权限public:string m_Name;//汽车  保护权限protected:string m_Car;//银行卡密码  私有权限private:int m_Password;public:void func(){m_Name = "张三";m_Car = "拖拉机";m_Password = 123456;}};int main() {Person p;p.m_Name = "李四";//p.m_Car = "奔驰";  //保护权限类外访问不到//p.m_Password = 123; //私有权限类外访问不到system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-struct和class区别"><a href="#4-1-2-struct和class区别" class="headerlink" title="4.1.2 struct和class区别"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p><p>区别：</p><ul><li>struct 默认权限为公共</li><li>class   默认权限为私有</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class C1{int  m_A; //默认是私有权限};struct C2{int m_A;  //默认是公共权限};int main() {C1 c1;c1.m_A = 10; //错误，访问权限是私有C2 c2;c2.m_A = 10; //正确，访问权限是公共system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3-成员属性设置为私有"><a href="#4-1-3-成员属性设置为私有" class="headerlink" title="4.1.3 成员属性设置为私有"></a>4.1.3 成员属性设置为私有</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p><p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public://姓名设置可读可写void setName(string name) {m_Name = name;}string getName(){return m_Name;}//获取年龄 int getAge() {return m_Age;}//设置年龄void setAge(int age) {if (age &lt; 0 || age &gt; 150) {cout &lt;&lt; "你个老妖精!" &lt;&lt; endl;return;}m_Age = age;}//情人设置为只写void setLover(string lover) {m_Lover = lover;}private:string m_Name; //可读可写  姓名int m_Age; //只读  年龄string m_Lover; //只写  情人};int main() {Person p;//姓名设置p.setName("张三");cout &lt;&lt; "姓名： " &lt;&lt; p.getName() &lt;&lt; endl;//年龄设置p.setAge(50);cout &lt;&lt; "年龄： " &lt;&lt; p.getAge() &lt;&lt; endl;//情人设置p.setLover("苍井");//cout &lt;&lt; "情人： " &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例1：设计立方体类</strong></p><p>设计立方体类(Cube)</p><p>求出立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等。</p><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/1545533548532.png" alt="1545533548532"></p><p><strong>练习案例2：点和圆的关系</strong></p><p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/1545533829184.png" alt="1545533829184"></p><h3 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h3><ul><li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li><li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li></ul><h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p><p>​一个对象或者变量没有初始状态，对其使用后果是未知</p><p>​同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p><p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p><p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p><p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p><ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li></ul><p><strong>构造函数语法：</strong><code>类名(){}</code></p><ol><li>构造函数，没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li></ol><p><strong>析构函数语法：</strong> <code>~类名(){}</code></p><ol><li>析构函数，没有返回值也不写void</li><li>函数名称与类名相同,在名称前加上符号  ~</li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li></ol><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public://构造函数Person(){cout &lt;&lt; "Person的构造函数调用" &lt;&lt; endl;}//析构函数~Person(){cout &lt;&lt; "Person的析构函数调用" &lt;&lt; endl;}};void test01(){Person p;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p><p>​按参数分为： 有参构造和无参构造</p><p>​按类型分为： 普通构造和拷贝构造</p><p>三种调用方式：</p><p>​括号法</p><p>​显示法</p><p>​隐式转换法</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//1、构造函数分类// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数// 按照类型分类分为 普通构造和拷贝构造class Person {public://无参（默认）构造函数Person() {cout &lt;&lt; "无参构造函数!" &lt;&lt; endl;}//有参构造函数Person(int a) {age = a;cout &lt;&lt; "有参构造函数!" &lt;&lt; endl;}//拷贝构造函数Person(const Person&amp; p) {age = p.age;cout &lt;&lt; "拷贝构造函数!" &lt;&lt; endl;}//析构函数~Person() {cout &lt;&lt; "析构函数!" &lt;&lt; endl;}public:int age;};//2、构造函数的调用//调用无参构造函数void test01() {Person p; //调用无参构造函数}//调用有参的构造函数void test02() {//2.1  括号法，常用Person p1(10);//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明//Person p2();//2.2 显式法Person p2 = Person(10); Person p3 = Person(p2);//Person(10)单独写就是匿名对象  当前行结束之后，马上析构//2.3 隐式转换法Person p4 = 10; // Person p4 = Person(10); Person p5 = p4; // Person p5 = Person(p4); //注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明//Person p5(p4);}int main() {test01();//test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public:Person() {cout &lt;&lt; "无参构造函数!" &lt;&lt; endl;mAge = 0;}Person(int age) {cout &lt;&lt; "有参构造函数!" &lt;&lt; endl;mAge = age;}Person(const Person&amp; p) {cout &lt;&lt; "拷贝构造函数!" &lt;&lt; endl;mAge = p.mAge;}//析构函数在释放内存之前调用~Person() {cout &lt;&lt; "析构函数!" &lt;&lt; endl;}public:int mAge;};//1. 使用一个已经创建完毕的对象来初始化一个新对象void test01() {Person man(100); //p对象已经创建完毕Person newman(man); //调用拷贝构造函数Person newman2 = man; //拷贝构造//Person newman3;//newman3 = man; //不是调用拷贝构造函数，赋值操作}//2. 值传递的方式给函数参数传值//相当于Person p1 = p;void doWork(Person p1) {}void test02() {Person p; //无参构造函数doWork(p);}//3. 以值方式返回局部对象Person doWork2(){Person p1;cout &lt;&lt; (int *)&amp;p1 &lt;&lt; endl;return p1;}void test03(){Person p = doWork2();cout &lt;&lt; (int *)&amp;p &lt;&lt; endl;}int main() {//test01();//test02();test03();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p><p>1．默认构造函数(无参，函数体为空)</p><p>2．默认析构函数(无参，函数体为空)</p><p>3．默认拷贝构造函数，对属性进行值拷贝</p><p>构造函数调用规则如下：</p><ul><li><p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p></li><li><p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p></li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public://无参（默认）构造函数Person() {cout &lt;&lt; "无参构造函数!" &lt;&lt; endl;}//有参构造函数Person(int a) {age = a;cout &lt;&lt; "有参构造函数!" &lt;&lt; endl;}//拷贝构造函数Person(const Person&amp; p) {age = p.age;cout &lt;&lt; "拷贝构造函数!" &lt;&lt; endl;}//析构函数~Person() {cout &lt;&lt; "析构函数!" &lt;&lt; endl;}public:int age;};void test01(){Person p1(18);//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作Person p2(p1);cout &lt;&lt; "p2的年龄为： " &lt;&lt; p2.age &lt;&lt; endl;}void test02(){//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造Person p1; //此时如果用户自己没有提供默认构造，会出错Person p2(10); //用户提供的有参Person p3(p2); //此时如果用户没有提供拷贝构造，编译器会提供//如果用户提供拷贝构造，编译器不会提供其他构造函数Person p4; //此时如果用户自己没有提供默认构造，会出错Person p5(10); //此时如果用户自己没有提供有参，会出错Person p6(p5); //用户自己提供拷贝构造}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p><p>浅拷贝：简单的赋值拷贝操作</p><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public://无参（默认）构造函数Person() {cout &lt;&lt; "无参构造函数!" &lt;&lt; endl;}//有参构造函数Person(int age ,int height) {cout &lt;&lt; "有参构造函数!" &lt;&lt; endl;m_age = age;m_height = new int(height);}//拷贝构造函数  Person(const Person&amp; p) {cout &lt;&lt; "拷贝构造函数!" &lt;&lt; endl;//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题m_age = p.m_age;m_height = new int(*p.m_height);}//析构函数~Person() {cout &lt;&lt; "析构函数!" &lt;&lt; endl;if (m_height != NULL){delete m_height;}}public:int m_age;int* m_height;};void test01(){Person p1(18, 180);Person p2(p1);cout &lt;&lt; "p1的年龄： " &lt;&lt; p1.m_age &lt;&lt; " 身高： " &lt;&lt; *p1.m_height &lt;&lt; endl;cout &lt;&lt; "p2的年龄： " &lt;&lt; p2.m_age &lt;&lt; " 身高： " &lt;&lt; *p2.m_height &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p></blockquote><h4 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p><p>C++提供了初始化列表语法，用来初始化属性</p><p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... {}</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public:////传统方式初始化//Person(int a, int b, int c) {//m_A = a;//m_B = b;//m_C = c;//}//初始化列表方式初始化Person(int a, int b, int c) :m_A(a), m_B(b), m_C(c) {}void PrintPerson() {cout &lt;&lt; "mA:" &lt;&lt; m_A &lt;&lt; endl;cout &lt;&lt; "mB:" &lt;&lt; m_B &lt;&lt; endl;cout &lt;&lt; "mC:" &lt;&lt; m_C &lt;&lt; endl;}private:int m_A;int m_B;int m_C;};int main() {Person p(1, 2, 3);p.PrintPerson();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-7-类对象作为类成员"><a href="#4-2-7-类对象作为类成员" class="headerlink" title="4.2.7 类对象作为类成员"></a>4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p><p>例如：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class A {}class B{    A a；}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>B类中有对象A作为成员，A为对象成员</p><p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Phone{public:Phone(string name){m_PhoneName = name;cout &lt;&lt; "Phone构造" &lt;&lt; endl;}~Phone(){cout &lt;&lt; "Phone析构" &lt;&lt; endl;}string m_PhoneName;};class Person{public://初始化列表可以告诉编译器调用哪一个构造函数Person(string name, string pName) :m_Name(name), m_Phone(pName){cout &lt;&lt; "Person构造" &lt;&lt; endl;}~Person(){cout &lt;&lt; "Person析构" &lt;&lt; endl;}void playGame(){cout &lt;&lt; m_Name &lt;&lt; " 使用" &lt;&lt; m_Phone.m_PhoneName &lt;&lt; " 牌手机! " &lt;&lt; endl;}string m_Name;Phone m_Phone;};void test01(){//当类中成员是其他类对象时，我们称该成员为 对象成员//构造的顺序是 ：先调用对象成员的构造，再调用本类构造//析构顺序与构造相反Person p("张三" , "苹果X");p.playGame();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p><p>静态成员分为：</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><p><strong>示例1 ：</strong>静态成员变量</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public:static int m_A; //静态成员变量//静态成员变量特点：//1 在编译阶段分配内存//2 类内声明，类外初始化//3 所有对象共享同一份数据private:static int m_B; //静态成员变量也是有访问权限的};int Person::m_A = 10;int Person::m_B = 10;void test01(){//静态成员变量两种访问方式//1、通过对象Person p1;p1.m_A = 100;cout &lt;&lt; "p1.m_A = " &lt;&lt; p1.m_A &lt;&lt; endl;Person p2;p2.m_A = 200;cout &lt;&lt; "p1.m_A = " &lt;&lt; p1.m_A &lt;&lt; endl; //共享同一份数据cout &lt;&lt; "p2.m_A = " &lt;&lt; p2.m_A &lt;&lt; endl;//2、通过类名cout &lt;&lt; "m_A = " &lt;&lt; Person::m_A &lt;&lt; endl;//cout &lt;&lt; "m_B = " &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong>静态成员函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public://静态成员函数特点：//1 程序共享一个函数//2 静态成员函数只能访问静态成员变量static void func(){cout &lt;&lt; "func调用" &lt;&lt; endl;m_A = 100;//m_B = 100; //错误，不可以访问非静态成员变量}static int m_A; //静态成员变量int m_B; // private://静态成员函数也是有访问权限的static void func2(){cout &lt;&lt; "func2调用" &lt;&lt; endl;}};int Person::m_A = 10;void test01(){//静态成员变量两种访问方式//1、通过对象Person p1;p1.func();//2、通过类名Person::func();//Person::func2(); //私有权限访问不到}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p><p>只有非静态成员变量才属于类的对象上</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public:Person() {mA = 0;}//非静态成员变量占对象空间int mA;//静态成员变量不占对象空间static int mB; //函数也不占对象空间，所有函数共享一个函数实例void func() {cout &lt;&lt; "mA:" &lt;&lt; this-&gt;mA &lt;&lt; endl;}//静态成员函数也不占对象空间static void sfunc() {}};int main() {cout &lt;&lt; sizeof(Person) &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-this指针概念"><a href="#4-3-2-this指针概念" class="headerlink" title="4.3.2 this指针概念"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p><p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p><p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p><p>this指针是隐含每一个非静态成员函数内的一种指针</p><p>this指针不需要定义，直接使用即可</p><p>this指针的用途：</p><ul><li>当形参和成员变量同名时，可用this指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public:Person(int age){//1、当形参和成员变量同名时，可用this指针来区分this-&gt;age = age;}Person&amp; PersonAddPerson(Person p){this-&gt;age += p.age;//返回对象本身return *this;}int age;};void test01(){Person p1(10);cout &lt;&lt; "p1.age = " &lt;&lt; p1.age &lt;&lt; endl;Person p2(10);p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);cout &lt;&lt; "p2.age = " &lt;&lt; p2.age &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p><p>如果用到this指针，需要加以判断保证代码的健壮性</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//空指针访问成员函数class Person {public:void ShowClassName() {cout &lt;&lt; "我是Person类!" &lt;&lt; endl;}void ShowPerson() {if (this == NULL) {return;}cout &lt;&lt; mAge &lt;&lt; endl;}public:int mAge;};void test01(){Person * p = NULL;p-&gt;ShowClassName(); //空指针，可以调用成员函数p-&gt;ShowPerson();  //但是如果成员函数中用到了this指针，就不可以了}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-4-const修饰成员函数"><a href="#4-3-4-const修饰成员函数" class="headerlink" title="4.3.4 const修饰成员函数"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p><ul><li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul><p><strong>常对象：</strong></p><ul><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public:Person() {m_A = 0;m_B = 0;}//this指针的本质是一个指针常量，指针的指向不可修改//如果想让指针指向的值也不可以修改，需要声明常函数void ShowPerson() const {//const Type* const pointer;//this = NULL; //不能修改指针的指向 Person* const this;//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量this-&gt;m_B = 100;}void MyFunc() const {//mA = 10000;}public:int m_A;mutable int m_B; //可修改 可变的};//const修饰对象  常对象void test01() {const Person person; //常量对象  cout &lt;&lt; person.m_A &lt;&lt; endl;//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问person.m_B = 100; //但是常对象可以修改mutable修饰成员变量//常对象访问成员函数person.MyFunc(); //常对象不能调用const的函数}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p><p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p><p>但是呢，你也可以允许你的好闺蜜好基友进去。</p><p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p><p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p><p>友元的关键字为  ==friend==</p><p>友元的三种实现</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building{//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容friend void goodGay(Building * building);public:Building(){this-&gt;m_SittingRoom = "客厅";this-&gt;m_BedRoom = "卧室";}public:string m_SittingRoom; //客厅private:string m_BedRoom; //卧室};void goodGay(Building * building){cout &lt;&lt; "好基友正在访问： " &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; "好基友正在访问： " &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;}void test01(){Building b;goodGay(&amp;b);}int main(){test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building;class goodGay{public:goodGay();void visit();private:Building *building;};class Building{//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容friend class goodGay;public:Building();public:string m_SittingRoom; //客厅private:string m_BedRoom;//卧室};Building::Building(){this-&gt;m_SittingRoom = "客厅";this-&gt;m_BedRoom = "卧室";}goodGay::goodGay(){building = new Building;}void goodGay::visit(){cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;}void test01(){goodGay gg;gg.visit();}int main(){test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building;class goodGay{public:goodGay();void visit(); //只让visit函数作为Building的好朋友，可以发访问Building中私有内容void visit2(); private:Building *building;};class Building{//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容friend void goodGay::visit();public:Building();public:string m_SittingRoom; //客厅private:string m_BedRoom;//卧室};Building::Building(){this-&gt;m_SittingRoom = "客厅";this-&gt;m_BedRoom = "卧室";}goodGay::goodGay(){building = new Building;}void goodGay::visit(){cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;}void goodGay::visit2(){cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;//cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;}void test01(){goodGay  gg;gg.visit();}int main(){    test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public:Person() {};Person(int a, int b){this-&gt;m_A = a;this-&gt;m_B = b;}//成员函数实现 + 号运算符重载Person operator+(const Person&amp; p) {Person temp;temp.m_A = this-&gt;m_A + p.m_A;temp.m_B = this-&gt;m_B + p.m_B;return temp;}public:int m_A;int m_B;};//全局函数实现 + 号运算符重载//Person operator+(const Person&amp; p1, const Person&amp; p2) {//Person temp(0, 0);//temp.m_A = p1.m_A + p2.m_A;//temp.m_B = p1.m_B + p2.m_B;//return temp;//}//运算符重载 可以发生函数重载 Person operator+(const Person&amp; p2, int val)  {Person temp;temp.m_A = p2.m_A + val;temp.m_B = p2.m_B + val;return temp;}void test() {Person p1(10, 10);Person p2(20, 20);//成员函数方式Person p3 = p2 + p1;  //相当于 p2.operaor+(p1)cout &lt;&lt; "mA:" &lt;&lt; p3.m_A &lt;&lt; " mB:" &lt;&lt; p3.m_B &lt;&lt; endl;Person p4 = p3 + 10; //相当于 operator+(p3,10)cout &lt;&lt; "mA:" &lt;&lt; p4.m_A &lt;&lt; " mB:" &lt;&lt; p4.m_B &lt;&lt; endl;}int main() {test();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p></blockquote><blockquote><p>总结2：不要滥用运算符重载</p></blockquote><h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);public:Person(int a, int b){this-&gt;m_A = a;this-&gt;m_B = b;}//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果//void operator&lt;&lt;(Person&amp; p){//}private:int m_A;int m_B;};//全局函数实现左移重载//ostream对象只能有一个ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) {out &lt;&lt; "a:" &lt;&lt; p.m_A &lt;&lt; " b:" &lt;&lt; p.m_B;return out;}void test() {Person p1(10, 20);cout &lt;&lt; p1 &lt;&lt; "hello world" &lt;&lt; endl; //链式编程}int main() {test();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p></blockquote><h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class MyInteger {friend ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint);public:MyInteger() {m_Num = 0;}//前置++MyInteger&amp; operator++() {//先++m_Num++;//再返回return *this;}//后置++MyInteger operator++(int) {//先返回MyInteger temp = *this; //记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；m_Num++;return temp;}private:int m_Num;};ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint) {out &lt;&lt; myint.m_Num;return out;}//前置++ 先++ 再返回void test01() {MyInteger myInt;cout &lt;&lt; ++myInt &lt;&lt; endl;cout &lt;&lt; myInt &lt;&lt; endl;}//后置++ 先返回 再++void test02() {MyInteger myInt;cout &lt;&lt; myInt++ &lt;&lt; endl;cout &lt;&lt; myInt &lt;&lt; endl;}int main() {test01();//test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 前置递增返回引用，后置递增返回值</p></blockquote><h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p><ol><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行值拷贝</li><li>赋值运算符 operator=, 对属性进行值拷贝</li></ol><p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public:Person(int age){//将年龄数据开辟到堆区m_Age = new int(age);}//重载赋值运算符 Person&amp; operator=(Person &amp;p){if (m_Age != NULL){delete m_Age;m_Age = NULL;}//编译器提供的代码是浅拷贝//m_Age = p.m_Age;//提供深拷贝 解决浅拷贝的问题m_Age = new int(*p.m_Age);//返回自身return *this;}~Person(){if (m_Age != NULL){delete m_Age;m_Age = NULL;}}//年龄的指针int *m_Age;};void test01(){Person p1(18);Person p2(20);Person p3(30);p3 = p2 = p1; //赋值操作cout &lt;&lt; "p1的年龄为：" &lt;&lt; *p1.m_Age &lt;&lt; endl;cout &lt;&lt; "p2的年龄为：" &lt;&lt; *p2.m_Age &lt;&lt; endl;cout &lt;&lt; "p3的年龄为：" &lt;&lt; *p3.m_Age &lt;&lt; endl;}int main() {test01();//int a = 10;//int b = 20;//int c = 30;//c = b = a;//cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;//cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;//cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-5-关系运算符重载"><a href="#4-5-5-关系运算符重载" class="headerlink" title="4.5.5 关系运算符重载"></a>4.5.5 关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public:Person(string name, int age){this-&gt;m_Name = name;this-&gt;m_Age = age;};bool operator==(Person &amp; p){if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age){return true;}else{return false;}}bool operator!=(Person &amp; p){if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age){return false;}else{return true;}}string m_Name;int m_Age;};void test01(){//int a = 0;//int b = 0;Person a("孙悟空", 18);Person b("孙悟空", 18);if (a == b){cout &lt;&lt; "a和b相等" &lt;&lt; endl;}else{cout &lt;&lt; "a和b不相等" &lt;&lt; endl;}if (a != b){cout &lt;&lt; "a和b不相等" &lt;&lt; endl;}else{cout &lt;&lt; "a和b相等" &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h4><ul><li>函数调用运算符 ()  也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class MyPrint{public:void operator()(string text){cout &lt;&lt; text &lt;&lt; endl;}};void test01(){//重载的（）操作符 也称为仿函数MyPrint myFunc;myFunc("hello world");}class MyAdd{public:int operator()(int v1, int v2){return v1 + v2;}};void test02(){MyAdd add;int ret = add(10, 10);cout &lt;&lt; "ret = " &lt;&lt; ret &lt;&lt; endl;//匿名对象调用  cout &lt;&lt; "MyAdd()(100,100) = " &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6  继承"></a>4.6  继承</h3><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系，例如下图中：</p><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/1544861202252.png" alt="1544861202252"></p><p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p><h4 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p><p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p><p><strong>普通实现：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//Java页面class Java {public:void header(){cout &lt;&lt; "首页、公开课、登录、注册...（公共头部）" &lt;&lt; endl;}void footer(){cout &lt;&lt; "帮助中心、交流合作、站内地图...(公共底部)" &lt;&lt; endl;}void left(){cout &lt;&lt; "Java,Python,C++...(公共分类列表)" &lt;&lt; endl;}void content(){cout &lt;&lt; "JAVA学科视频" &lt;&lt; endl;}};//Python页面class Python{public:void header(){cout &lt;&lt; "首页、公开课、登录、注册...（公共头部）" &lt;&lt; endl;}void footer(){cout &lt;&lt; "帮助中心、交流合作、站内地图...(公共底部)" &lt;&lt; endl;}void left(){cout &lt;&lt; "Java,Python,C++...(公共分类列表)" &lt;&lt; endl;}void content(){cout &lt;&lt; "Python学科视频" &lt;&lt; endl;}};//C++页面class CPP {public:void header(){cout &lt;&lt; "首页、公开课、登录、注册...（公共头部）" &lt;&lt; endl;}void footer(){cout &lt;&lt; "帮助中心、交流合作、站内地图...(公共底部)" &lt;&lt; endl;}void left(){cout &lt;&lt; "Java,Python,C++...(公共分类列表)" &lt;&lt; endl;}void content(){cout &lt;&lt; "C++学科视频" &lt;&lt; endl;}};void test01(){//Java页面cout &lt;&lt; "Java下载视频页面如下： " &lt;&lt; endl;Java ja;ja.header();ja.footer();ja.left();ja.content();cout &lt;&lt; "--------------------" &lt;&lt; endl;//Python页面cout &lt;&lt; "Python下载视频页面如下： " &lt;&lt; endl;Python py;py.header();py.footer();py.left();py.content();cout &lt;&lt; "--------------------" &lt;&lt; endl;//C++页面cout &lt;&lt; "C++下载视频页面如下： " &lt;&lt; endl;CPP cp;cp.header();cp.footer();cp.left();cp.content();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>继承实现：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//公共页面class BasePage{public:void header(){cout &lt;&lt; "首页、公开课、登录、注册...（公共头部）" &lt;&lt; endl;}void footer(){cout &lt;&lt; "帮助中心、交流合作、站内地图...(公共底部)" &lt;&lt; endl;}void left(){cout &lt;&lt; "Java,Python,C++...(公共分类列表)" &lt;&lt; endl;}};//Java页面class Java : public BasePage{public:void content(){cout &lt;&lt; "JAVA学科视频" &lt;&lt; endl;}};//Python页面class Python : public BasePage{public:void content(){cout &lt;&lt; "Python学科视频" &lt;&lt; endl;}};//C++页面class CPP : public BasePage{public:void content(){cout &lt;&lt; "C++学科视频" &lt;&lt; endl;}};void test01(){//Java页面cout &lt;&lt; "Java下载视频页面如下： " &lt;&lt; endl;Java ja;ja.header();ja.footer();ja.left();ja.content();cout &lt;&lt; "--------------------" &lt;&lt; endl;//Python页面cout &lt;&lt; "Python下载视频页面如下： " &lt;&lt; endl;Python py;py.header();py.footer();py.left();py.content();cout &lt;&lt; "--------------------" &lt;&lt; endl;//C++页面cout &lt;&lt; "C++下载视频页面如下： " &lt;&lt; endl;CPP cp;cp.header();cp.footer();cp.left();cp.content();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>继承的好处：==可以减少重复的代码==</p><p>class A : public B; </p><p>A 类称为子类 或 派生类</p><p>B 类称为父类 或 基类</p><p><strong>派生类中的成员，包含两大部分</strong>：</p><p>一类是从基类继承过来的，一类是自己增加的成员。</p><p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p><h4 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p><p><strong>继承方式一共有三种：</strong></p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/clip_image002.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base1{public: int m_A;protected:int m_B;private:int m_C;};//公共继承class Son1 :public Base1{public:void func(){m_A; //可访问 public权限m_B; //可访问 protected权限//m_C; //不可访问}};void myClass(){Son1 s1;s1.m_A; //其他类只能访问到公共权限}//保护继承class Base2{public:int m_A;protected:int m_B;private:int m_C;};class Son2:protected Base2{public:void func(){m_A; //可访问 protected权限m_B; //可访问 protected权限//m_C; //不可访问}};void myClass2(){Son2 s;//s.m_A; //不可访问}//私有继承class Base3{public:int m_A;protected:int m_B;private:int m_C;};class Son3:private Base3{public:void func(){m_A; //可访问 private权限m_B; //可访问 private权限//m_C; //不可访问}};class GrandSon3 :public Son3{public:void func(){//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到//m_A;//m_B;//m_C;}};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="4.6.3 继承中的对象模型"></a>4.6.3 继承中的对象模型</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base{public:int m_A;protected:int m_B;private:int m_C; //私有成员只是被隐藏了，但是还是会继承下去};//公共继承class Son :public Base{public:int m_D;};void test01(){cout &lt;&lt; "sizeof Son = " &lt;&lt; sizeof(Son) &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用工具查看：</p><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/1545881904150.png" alt="1545881904150"></p><p>打开工具窗口后，定位到当前CPP文件的盘符</p><p>然后输入： cl /d1 reportSingleClassLayout查看的类名   所属文件名</p><p>效果如下图：</p><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/1545882158050.png" alt="1545882158050"></p><blockquote><p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p></blockquote><h4 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p><p>问题：父类和子类的构造和析构顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base {public:Base(){cout &lt;&lt; "Base构造函数!" &lt;&lt; endl;}~Base(){cout &lt;&lt; "Base析构函数!" &lt;&lt; endl;}};class Son : public Base{public:Son(){cout &lt;&lt; "Son构造函数!" &lt;&lt; endl;}~Son(){cout &lt;&lt; "Son析构函数!" &lt;&lt; endl;}};void test01(){//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反Son s;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p></blockquote><h4 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base {public:Base(){m_A = 100;}void func(){cout &lt;&lt; "Base - func()调用" &lt;&lt; endl;}void func(int a){cout &lt;&lt; "Base - func(int a)调用" &lt;&lt; endl;}public:int m_A;};class Son : public Base {public:Son(){m_A = 200;}//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域void func(){cout &lt;&lt; "Son - func()调用" &lt;&lt; endl;}public:int m_A;};void test01(){Son s;cout &lt;&lt; "Son下的m_A = " &lt;&lt; s.m_A &lt;&lt; endl;cout &lt;&lt; "Base下的m_A = " &lt;&lt; s.Base::m_A &lt;&lt; endl;s.func();s.Base::func();s.Base::func(10);}int main() {test01();system("pause");return EXIT_SUCCESS;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li></ol><h4 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p><p>静态成员和非静态成员出现同名，处理方式一致</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base {public:static void func(){cout &lt;&lt; "Base - static void func()" &lt;&lt; endl;}static void func(int a){cout &lt;&lt; "Base - static void func(int a)" &lt;&lt; endl;}static int m_A;};int Base::m_A = 100;class Son : public Base {public:static void func(){cout &lt;&lt; "Son - static void func()" &lt;&lt; endl;}static int m_A;};int Son::m_A = 200;//同名成员属性void test01(){//通过对象访问cout &lt;&lt; "通过对象访问： " &lt;&lt; endl;Son s;cout &lt;&lt; "Son  下 m_A = " &lt;&lt; s.m_A &lt;&lt; endl;cout &lt;&lt; "Base 下 m_A = " &lt;&lt; s.Base::m_A &lt;&lt; endl;//通过类名访问cout &lt;&lt; "通过类名访问： " &lt;&lt; endl;cout &lt;&lt; "Son  下 m_A = " &lt;&lt; Son::m_A &lt;&lt; endl;cout &lt;&lt; "Base 下 m_A = " &lt;&lt; Son::Base::m_A &lt;&lt; endl;}//同名成员函数void test02(){//通过对象访问cout &lt;&lt; "通过对象访问： " &lt;&lt; endl;Son s;s.func();s.Base::func();cout &lt;&lt; "通过类名访问： " &lt;&lt; endl;Son::func();Son::Base::func();//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问Son::Base::func(100);}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p></blockquote><h4 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p><p>语法：<code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议用多继承</strong></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base1 {public:Base1(){m_A = 100;}public:int m_A;};class Base2 {public:Base2(){m_A = 200;  //开始是m_B 不会出问题，但是改为mA就会出现不明确}public:int m_A;};//语法：class 子类：继承方式 父类1 ，继承方式 父类2 class Son : public Base2, public Base1 {public:Son(){m_C = 300;m_D = 400;}public:int m_C;int m_D;};//多继承容易产生成员同名的情况//通过使用类名作用域可以区分调用哪一个基类的成员void test01(){Son s;cout &lt;&lt; "sizeof Son = " &lt;&lt; sizeof(s) &lt;&lt; endl;cout &lt;&lt; s.Base1::m_A &lt;&lt; endl;cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p></blockquote><h4 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p><p>​两个派生类继承同一个基类</p><p>​又有某个类同时继承者两个派生类</p><p>​这种继承被称为菱形继承，或者钻石继承</p><p><strong>典型的菱形继承案例：</strong></p><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/clip_image002.jpg" alt="IMG_256"></p><p><strong>菱形继承问题：</strong></p><ol><li><pre><code>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</code></pre></li><li><pre><code>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</code></pre></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal{public:int m_Age;};//继承前加virtual关键字后，变为虚继承//此时公共的父类Animal称为虚基类class Sheep : virtual public Animal {};class Tuo   : virtual public Animal {};class SheepTuo : public Sheep, public Tuo {};void test01(){SheepTuo st;st.Sheep::m_Age = 100;st.Tuo::m_Age = 200;cout &lt;&lt; "st.Sheep::m_Age = " &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;cout &lt;&lt; "st.Tuo::m_Age = " &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;cout &lt;&lt; "st.m_Age = " &lt;&lt; st.m_Age &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li><li>利用虚继承可以解决菱形继承问题</li></ul><h3 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7  多态"></a>4.7  多态</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p><p>多态分为两类</p><ul><li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li><li>动态多态: 派生类和虚函数实现运行时多态</li></ul><p>静态多态和动态多态区别：</p><ul><li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li></ul><p>下面通过案例进行讲解多态</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal{public://Speak函数就是虚函数//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。virtual void speak(){cout &lt;&lt; "动物在说话" &lt;&lt; endl;}};class Cat :public Animal{public:void speak(){cout &lt;&lt; "小猫在说话" &lt;&lt; endl;}};class Dog :public Animal{public:void speak(){cout &lt;&lt; "小狗在说话" &lt;&lt; endl;}};//我们希望传入什么对象，那么就调用什么对象的函数//如果函数地址在编译阶段就能确定，那么静态联编//如果函数地址在运行阶段才能确定，就是动态联编void DoSpeak(Animal &amp; animal){animal.speak();}////多态满足条件： //1、有继承关系//2、子类重写父类中的虚函数//多态使用：//父类指针或引用指向子类对象void test01(){Cat cat;DoSpeak(cat);Dog dog;DoSpeak(dog);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>多态满足条件</p><ul><li>有继承关系</li><li>子类重写父类中的虚函数</li></ul><p>多态使用条件</p><ul><li>父类指针或引用指向子类对象</li></ul><p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p><h4 id="4-7-2-多态案例一-计算器类"><a href="#4-7-2-多态案例一-计算器类" class="headerlink" title="4.7.2 多态案例一-计算器类"></a>4.7.2 多态案例一-计算器类</h4><p>案例描述：</p><p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p><p>多态的优点：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//普通实现class Calculator {public:int getResult(string oper){if (oper == "+") {return m_Num1 + m_Num2;}else if (oper == "-") {return m_Num1 - m_Num2;}else if (oper == "*") {return m_Num1 * m_Num2;}//如果要提供新的运算，需要修改源码}public:int m_Num1;int m_Num2;};void test01(){//普通实现测试Calculator c;c.m_Num1 = 10;c.m_Num2 = 10;cout &lt;&lt; c.m_Num1 &lt;&lt; " + " &lt;&lt; c.m_Num2 &lt;&lt; " = " &lt;&lt; c.getResult("+") &lt;&lt; endl;cout &lt;&lt; c.m_Num1 &lt;&lt; " - " &lt;&lt; c.m_Num2 &lt;&lt; " = " &lt;&lt; c.getResult("-") &lt;&lt; endl;cout &lt;&lt; c.m_Num1 &lt;&lt; " * " &lt;&lt; c.m_Num2 &lt;&lt; " = " &lt;&lt; c.getResult("*") &lt;&lt; endl;}//多态实现//抽象计算器类//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护class AbstractCalculator{public :virtual int getResult(){return 0;}int m_Num1;int m_Num2;};//加法计算器class AddCalculator :public AbstractCalculator{public:int getResult(){return m_Num1 + m_Num2;}};//减法计算器class SubCalculator :public AbstractCalculator{public:int getResult(){return m_Num1 - m_Num2;}};//乘法计算器class MulCalculator :public AbstractCalculator{public:int getResult(){return m_Num1 * m_Num2;}};void test02(){//创建加法计算器AbstractCalculator *abc = new AddCalculator;abc-&gt;m_Num1 = 10;abc-&gt;m_Num2 = 10;cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; " + " &lt;&lt; abc-&gt;m_Num2 &lt;&lt; " = " &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;delete abc;  //用完了记得销毁//创建减法计算器abc = new SubCalculator;abc-&gt;m_Num1 = 10;abc-&gt;m_Num2 = 10;cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; " - " &lt;&lt; abc-&gt;m_Num2 &lt;&lt; " = " &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;delete abc;  //创建乘法计算器abc = new MulCalculator;abc-&gt;m_Num1 = 10;abc-&gt;m_Num2 = 10;cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; " * " &lt;&lt; abc-&gt;m_Num2 &lt;&lt; " = " &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;delete abc;}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p></blockquote><h4 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="4.7.3 纯虚函数和抽象类"></a>4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p><p>因此可以将虚函数改为<strong>纯虚函数</strong></p><p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p><p>当类中有了纯虚函数，这个类也称为==抽象类==</p><p><strong>抽象类特点</strong>：</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base{public://纯虚函数//类中只要有一个纯虚函数就称为抽象类//抽象类无法实例化对象//子类必须重写父类中的纯虚函数，否则也属于抽象类virtual void func() = 0;};class Son :public Base{public:virtual void func() {cout &lt;&lt; "func调用" &lt;&lt; endl;};};void test01(){Base * base = NULL;//base = new Base; // 错误，抽象类无法实例化对象base = new Son;base-&gt;func();delete base;//记得销毁}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-4-多态案例二-制作饮品"><a href="#4-7-4-多态案例二-制作饮品" class="headerlink" title="4.7.4 多态案例二-制作饮品"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p><p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p><p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p><p><img src="/2023/03/03/c-he-xin-bian-cheng/4-lei-he-dui-xiang/1545985945198.png" alt="1545985945198"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//抽象制作饮品class AbstractDrinking {public://烧水virtual void Boil() = 0;//冲泡virtual void Brew() = 0;//倒入杯中virtual void PourInCup() = 0;//加入辅料virtual void PutSomething() = 0;//规定流程void MakeDrink() {Boil();Brew();PourInCup();PutSomething();}};//制作咖啡class Coffee : public AbstractDrinking {public://烧水virtual void Boil() {cout &lt;&lt; "煮农夫山泉!" &lt;&lt; endl;}//冲泡virtual void Brew() {cout &lt;&lt; "冲泡咖啡!" &lt;&lt; endl;}//倒入杯中virtual void PourInCup() {cout &lt;&lt; "将咖啡倒入杯中!" &lt;&lt; endl;}//加入辅料virtual void PutSomething() {cout &lt;&lt; "加入牛奶!" &lt;&lt; endl;}};//制作茶水class Tea : public AbstractDrinking {public://烧水virtual void Boil() {cout &lt;&lt; "煮自来水!" &lt;&lt; endl;}//冲泡virtual void Brew() {cout &lt;&lt; "冲泡茶叶!" &lt;&lt; endl;}//倒入杯中virtual void PourInCup() {cout &lt;&lt; "将茶水倒入杯中!" &lt;&lt; endl;}//加入辅料virtual void PutSomething() {cout &lt;&lt; "加入枸杞!" &lt;&lt; endl;}};//业务函数void DoWork(AbstractDrinking* drink) {drink-&gt;MakeDrink();delete drink;}void test01() {DoWork(new Coffee);cout &lt;&lt; "--------------" &lt;&lt; endl;DoWork(new Tea);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-5-虚析构和纯虚析构"><a href="#4-7-5-虚析构和纯虚析构" class="headerlink" title="4.7.5 虚析构和纯虚析构"></a>4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p>虚析构语法：</p><p><code>virtual ~类名(){}</code></p><p>纯虚析构语法：</p><p><code> virtual ~类名() = 0;</code></p><p><code>类名::~类名(){}</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal {public:Animal(){cout &lt;&lt; "Animal 构造函数调用！" &lt;&lt; endl;}virtual void Speak() = 0;//析构函数加上virtual关键字，变成虚析构函数//virtual ~Animal()//{//cout &lt;&lt; "Animal虚析构函数调用！" &lt;&lt; endl;//}virtual ~Animal() = 0;};Animal::~Animal(){cout &lt;&lt; "Animal 纯虚析构函数调用！" &lt;&lt; endl;}//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。class Cat : public Animal {public:Cat(string name){cout &lt;&lt; "Cat构造函数调用！" &lt;&lt; endl;m_Name = new string(name);}virtual void Speak(){cout &lt;&lt; *m_Name &lt;&lt;  "小猫在说话!" &lt;&lt; endl;}~Cat(){cout &lt;&lt; "Cat析构函数调用!" &lt;&lt; endl;if (this-&gt;m_Name != NULL) {delete m_Name;m_Name = NULL;}}public:string *m_Name;};void test01(){Animal *animal = new Cat("Tom");animal-&gt;Speak();//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏//怎么解决？给基类增加一个虚析构函数//虚析构函数就是用来解决通过父类指针释放子类对象delete animal;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>​1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p><p>​2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p><p>​3. 拥有纯虚析构函数的类也属于抽象类</p><h4 id="4-7-6-多态案例三-电脑组装"><a href="#4-7-6-多态案例三-电脑组装" class="headerlink" title="4.7.6 多态案例三-电脑组装"></a>4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p><p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p><p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p><p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p><p>测试时组装三台不同的电脑进行工作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//抽象CPU类class CPU{public://抽象的计算函数virtual void calculate() = 0;};//抽象显卡类class VideoCard{public://抽象的显示函数virtual void display() = 0;};//抽象内存条类class Memory{public://抽象的存储函数virtual void storage() = 0;};//电脑类class Computer{public:Computer(CPU * cpu, VideoCard * vc, Memory * mem){m_cpu = cpu;m_vc = vc;m_mem = mem;}//提供工作的函数void work(){//让零件工作起来，调用接口m_cpu-&gt;calculate();m_vc-&gt;display();m_mem-&gt;storage();}//提供析构函数 释放3个电脑零件~Computer(){//释放CPU零件if (m_cpu != NULL){delete m_cpu;m_cpu = NULL;}//释放显卡零件if (m_vc != NULL){delete m_vc;m_vc = NULL;}//释放内存条零件if (m_mem != NULL){delete m_mem;m_mem = NULL;}}private:CPU * m_cpu; //CPU的零件指针VideoCard * m_vc; //显卡零件指针Memory * m_mem; //内存条零件指针};//具体厂商//Intel厂商class IntelCPU :public CPU{public:virtual void calculate(){cout &lt;&lt; "Intel的CPU开始计算了！" &lt;&lt; endl;}};class IntelVideoCard :public VideoCard{public:virtual void display(){cout &lt;&lt; "Intel的显卡开始显示了！" &lt;&lt; endl;}};class IntelMemory :public Memory{public:virtual void storage(){cout &lt;&lt; "Intel的内存条开始存储了！" &lt;&lt; endl;}};//Lenovo厂商class LenovoCPU :public CPU{public:virtual void calculate(){cout &lt;&lt; "Lenovo的CPU开始计算了！" &lt;&lt; endl;}};class LenovoVideoCard :public VideoCard{public:virtual void display(){cout &lt;&lt; "Lenovo的显卡开始显示了！" &lt;&lt; endl;}};class LenovoMemory :public Memory{public:virtual void storage(){cout &lt;&lt; "Lenovo的内存条开始存储了！" &lt;&lt; endl;}};void test01(){//第一台电脑零件CPU * intelCpu = new IntelCPU;VideoCard * intelCard = new IntelVideoCard;Memory * intelMem = new IntelMemory;cout &lt;&lt; "第一台电脑开始工作：" &lt;&lt; endl;//创建第一台电脑Computer * computer1 = new Computer(intelCpu, intelCard, intelMem);computer1-&gt;work();delete computer1;cout &lt;&lt; "-----------------------" &lt;&lt; endl;cout &lt;&lt; "第二台电脑开始工作：" &lt;&lt; endl;//第二台电脑组装Computer * computer2 = new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);;computer2-&gt;work();delete computer2;cout &lt;&lt; "-----------------------" &lt;&lt; endl;cout &lt;&lt; "第三台电脑开始工作：" &lt;&lt; endl;//第三台电脑组装Computer * computer3 = new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);;computer3-&gt;work();delete computer3;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++核心编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 类和对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-函数提高</title>
      <link href="/2023/03/03/c-he-xin-bian-cheng/3-han-shu-ti-gao/"/>
      <url>/2023/03/03/c-he-xin-bian-cheng/3-han-shu-ti-gao/</url>
      
        <content type="html"><![CDATA[<h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p><p>语法：<code> 返回值类型  函数名 （参数= 默认值）{}</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int func(int a, int b = 10, int c = 10) {return a + b + c;}//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数int func2(int a = 10, int b = 10);int func2(int a, int b) {return a + b;}int main() {cout &lt;&lt; "ret = " &lt;&lt; func(20, 20) &lt;&lt; endl;cout &lt;&lt; "ret = " &lt;&lt; func(100) &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p><p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型){}</code></p><p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数占位参数 ，占位参数也可以有默认参数void func(int a, int) {cout &lt;&lt; "this is func" &lt;&lt; endl;}int main() {func(10,10); //占位参数必须填补system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><h4 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p><p><strong>函数重载满足条件：</strong></p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li></ul><p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数重载需要函数都在同一个作用域下void func(){cout &lt;&lt; "func 的调用！" &lt;&lt; endl;}void func(int a){cout &lt;&lt; "func (int a) 的调用！" &lt;&lt; endl;}void func(double a){cout &lt;&lt; "func (double a)的调用！" &lt;&lt; endl;}void func(int a ,double b){cout &lt;&lt; "func (int a ,double b) 的调用！" &lt;&lt; endl;}void func(double a ,int b){cout &lt;&lt; "func (double a ,int b)的调用！" &lt;&lt; endl;}//函数返回值不可以作为函数重载条件//int func(double a, int b)//{//cout &lt;&lt; "func (double a ,int b)的调用！" &lt;&lt; endl;//}int main() {func();func(10);func(3.14);func(10,3.14);func(3.14 , 10);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2-函数重载注意事项"><a href="#3-3-2-函数重载注意事项" class="headerlink" title="3.3.2 函数重载注意事项"></a>3.3.2 函数重载注意事项</h4><ul><li>引用作为重载条件</li><li>函数重载碰到函数默认参数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数重载注意事项//1、引用作为重载条件void func(int &amp;a){cout &lt;&lt; "func (int &amp;a) 调用 " &lt;&lt; endl;}void func(const int &amp;a){cout &lt;&lt; "func (const int &amp;a) 调用 " &lt;&lt; endl;}//2、函数重载碰到函数默认参数void func2(int a, int b = 10){cout &lt;&lt; "func2(int a, int b = 10) 调用" &lt;&lt; endl;}void func2(int a){cout &lt;&lt; "func2(int a) 调用" &lt;&lt; endl;}int main() {int a = 10;func(a); //调用无constfunc(10);//调用有const//func2(10); //碰到默认参数产生歧义，需要避免system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++核心编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 函数提高 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-引用</title>
      <link href="/2023/03/03/c-he-xin-bian-cheng/2-yin-yong/"/>
      <url>/2023/03/03/c-he-xin-bian-cheng/2-yin-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h3><p>**作用： **给变量起别名</p><p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int a = 10;int &amp;b = a;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;b = 100;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h3><ul><li>引用必须初始化</li><li>引用在初始化后，不可以改变</li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int a = 10;int b = 20;//int &amp;c; //错误，引用必须初始化int &amp;c = a; //一旦初始化后，就不可以更改c = b; //这是赋值操作，不是更改引用cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p><p><strong>优点：</strong>可以简化指针修改实参</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//1. 值传递void mySwap01(int a, int b) {int temp = a;a = b;b = temp;}//2. 地址传递void mySwap02(int* a, int* b) {int temp = *a;*a = *b;*b = temp;}//3. 引用传递void mySwap03(int&amp; a, int&amp; b) {int temp = a;a = b;b = temp;}int main() {int a = 10;int b = 20;mySwap01(a, b);cout &lt;&lt; "a:" &lt;&lt; a &lt;&lt; " b:" &lt;&lt; b &lt;&lt; endl;mySwap02(&amp;a, &amp;b);cout &lt;&lt; "a:" &lt;&lt; a &lt;&lt; " b:" &lt;&lt; b &lt;&lt; endl;mySwap03(a, b);cout &lt;&lt; "a:" &lt;&lt; a &lt;&lt; " b:" &lt;&lt; b &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p></blockquote><h3 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p><p>注意：<strong>不要返回局部变量引用</strong></p><p>用法：函数调用作为左值</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//返回局部变量引用int&amp; test01() {int a = 10; //局部变量return a;}//返回静态变量引用int&amp; test02() {static int a = 20;return a;}int main() {//不能返回局部变量的引用int&amp; ref = test01();cout &lt;&lt; "ref = " &lt;&lt; ref &lt;&lt; endl;cout &lt;&lt; "ref = " &lt;&lt; ref &lt;&lt; endl;//如果函数做左值，那么必须返回引用int&amp; ref2 = test02();cout &lt;&lt; "ref2 = " &lt;&lt; ref2 &lt;&lt; endl;cout &lt;&lt; "ref2 = " &lt;&lt; ref2 &lt;&lt; endl;test02() = 1000;cout &lt;&lt; "ref2 = " &lt;&lt; ref2 &lt;&lt; endl;cout &lt;&lt; "ref2 = " &lt;&lt; ref2 &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><h3 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p><p>讲解示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//发现是引用，转换为 int* const ref = &amp;a;void func(int&amp; ref){ref = 100; // ref是引用，转换为*ref = 100}int main(){int a = 10;        //自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改int&amp; ref = a; ref = 20; //内部发现ref是引用，自动帮我们转换为: *ref = 20;    cout &lt;&lt; "a:" &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "ref:" &lt;&lt; ref &lt;&lt; endl;    func(a);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p><h3 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p><p>在函数形参列表中，可以加==const修饰形参==，防止形参改变实参</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//引用使用的场景，通常用来修饰形参void showValue(const int&amp; v) {//v += 10;cout &lt;&lt; v &lt;&lt; endl;}int main() {//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;const int&amp; ref = 10;//ref = 100;  //加入const后不可以修改变量cout &lt;&lt; ref &lt;&lt; endl;//函数中利用常量引用防止误操作修改实参int a = 10;showValue(a);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++核心编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-内存分区模型</title>
      <link href="/2023/03/03/c-he-xin-bian-cheng/1-nei-cun-fen-qu-mo-xing/"/>
      <url>/2023/03/03/c-he-xin-bian-cheng/1-nei-cun-fen-qu-mo-xing/</url>
      
        <content type="html"><![CDATA[<p>本阶段主要针对C++==面向对象==编程技术做详细讲解，探讨C++中的核心和精髓。</p><h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li><li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li></ul><p><strong>内存四区意义：</strong></p><p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p><h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><p>​在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p><p>​<strong>代码区：</strong></p><p>​存放 CPU 执行的机器指令</p><p>​代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p><p>​代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p><p>​<strong>全局区：</strong></p><p>​全局变量和静态变量存放在此.</p><p>​全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p><p>​==该区域的数据在程序结束后由操作系统释放==.</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//全局变量int g_a = 10;int g_b = 10;//全局常量const int c_g_a = 10;const int c_g_b = 10;int main() {//局部变量int a = 10;int b = 10;//打印地址cout &lt;&lt; "局部变量a地址为： " &lt;&lt; (int)&amp;a &lt;&lt; endl;cout &lt;&lt; "局部变量b地址为： " &lt;&lt; (int)&amp;b &lt;&lt; endl;cout &lt;&lt; "全局变量g_a地址为： " &lt;&lt;  (int)&amp;g_a &lt;&lt; endl;cout &lt;&lt; "全局变量g_b地址为： " &lt;&lt;  (int)&amp;g_b &lt;&lt; endl;//静态变量static int s_a = 10;static int s_b = 10;cout &lt;&lt; "静态变量s_a地址为： " &lt;&lt; (int)&amp;s_a &lt;&lt; endl;cout &lt;&lt; "静态变量s_b地址为： " &lt;&lt; (int)&amp;s_b &lt;&lt; endl;cout &lt;&lt; "字符串常量地址为： " &lt;&lt; (int)&amp;"hello world" &lt;&lt; endl;cout &lt;&lt; "字符串常量地址为： " &lt;&lt; (int)&amp;"hello world1" &lt;&lt; endl;cout &lt;&lt; "全局常量c_g_a地址为： " &lt;&lt; (int)&amp;c_g_a &lt;&lt; endl;cout &lt;&lt; "全局常量c_g_b地址为： " &lt;&lt; (int)&amp;c_g_b &lt;&lt; endl;const int c_l_a = 10;const int c_l_b = 10;cout &lt;&lt; "局部常量c_l_a地址为： " &lt;&lt; (int)&amp;c_l_a &lt;&lt; endl;cout &lt;&lt; "局部常量c_l_b地址为： " &lt;&lt; (int)&amp;c_l_b &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：</p><p><img src="/2023/03/03/c-he-xin-bian-cheng/1-nei-cun-fen-qu-mo-xing/1545017602518.png" alt="1545017602518"></p><p>总结：</p><ul><li>C++中在程序运行前分为全局区和代码区</li><li>代码区特点是共享和只读</li><li>全局区中存放全局变量、静态变量、常量</li><li>常量区中存放 const修饰的全局常量  和 字符串常量</li></ul><h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><p>​<strong>栈区：</strong></p><p>​由编译器自动分配释放, 存放函数的参数值,局部变量等</p><p>​注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int * func(){int a = 10;return &amp;a;}int main() {int *p = func();cout &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; *p &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<strong>堆区：</strong></p><p>​由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p><p>​在C++中主要利用new在堆区开辟内存</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int* func(){int* a = new int(10);return a;}int main() {int *p = func();cout &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; *p &lt;&lt; endl;    system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>堆区数据由程序员管理开辟和释放</p><p>堆区数据利用new关键字进行开辟内存</p><h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><p>​C++中利用==new==操作符在堆区开辟数据</p><p>​堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==</p><p>​语法：<code> new 数据类型</code></p><p>​利用new创建的数据，会返回该数据对应的类型的指针</p><p><strong>示例1： 基本语法</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int* func(){int* a = new int(10);return a;}int main() {int *p = func();cout &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; *p &lt;&lt; endl;//利用delete释放堆区数据delete p;//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：开辟数组</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//堆区开辟数组int main() {int* arr = new int[10];for (int i = 0; i &lt; 10; i++){arr[i] = i + 100;}for (int i = 0; i &lt; 10; i++){cout &lt;&lt; arr[i] &lt;&lt; endl;}//释放数组 delete 后加 []delete[] arr;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++核心编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 内存分区模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-结构体</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/8-jie-gou-ti/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/8-jie-gou-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p><h3 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 { 结构体成员列表 }；</code></p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li><li>定义结构体时顺便创建变量</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数}stu3; //结构体变量创建方式3 int main() {//结构体变量创建方式1struct student stu1; //struct 关键字可以省略stu1.name = "张三";stu1.age = 18;stu1.score = 100;cout &lt;&lt; "姓名：" &lt;&lt; stu1.name &lt;&lt; " 年龄：" &lt;&lt; stu1.age  &lt;&lt; " 分数：" &lt;&lt; stu1.score &lt;&lt; endl;//结构体变量创建方式2struct student stu2 = { "李四",19,60 };cout &lt;&lt; "姓名：" &lt;&lt; stu2.name &lt;&lt; " 年龄：" &lt;&lt; stu2.age  &lt;&lt; " 分数：" &lt;&lt; stu2.score &lt;&lt; endl;stu3.name = "王五";stu3.age = 18;stu3.score = 80;cout &lt;&lt; "姓名：" &lt;&lt; stu3.name &lt;&lt; " 年龄：" &lt;&lt; stu3.age  &lt;&lt; " 分数：" &lt;&lt; stu3.score &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：定义结构体时的关键字是struct，不可省略</p></blockquote><blockquote><p>总结2：创建结构体变量时，关键字struct可以省略</p></blockquote><blockquote><p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p></blockquote><h3 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p><p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = {  {} , {} , ... {} }</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数}int main() {//结构体数组struct student arr[3]={{"张三",18,80 },{"李四",19,60 },{"王五",20,70 }};for (int i = 0; i &lt; 3; i++){cout &lt;&lt; "姓名：" &lt;&lt; arr[i].name &lt;&lt; " 年龄：" &lt;&lt; arr[i].age &lt;&lt; " 分数：" &lt;&lt; arr[i].score &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p><ul><li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数};int main() {struct student stu = { "张三",18,100, };struct student * p = &amp;stu;p-&gt;score = 80; //指针通过 -&gt; 操作符可以访问成员cout &lt;&lt; "姓名：" &lt;&lt; p-&gt;name &lt;&lt; " 年龄：" &lt;&lt; p-&gt;age &lt;&lt; " 分数：" &lt;&lt; p-&gt;score &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p></blockquote><h3 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p><p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数};//教师结构体定义struct teacher{    //成员列表int id; //职工编号string name;  //教师姓名int age;   //教师年龄struct student stu; //子结构体 学生};int main() {struct teacher t1;t1.id = 10000;t1.name = "老王";t1.age = 40;t1.stu.name = "张三";t1.stu.age = 18;t1.stu.score = 100;cout &lt;&lt; "教师 职工编号： " &lt;&lt; t1.id &lt;&lt; " 姓名： " &lt;&lt; t1.name &lt;&lt; " 年龄： " &lt;&lt; t1.age &lt;&lt; endl;cout &lt;&lt; "辅导学员 姓名： " &lt;&lt; t1.stu.name &lt;&lt; " 年龄：" &lt;&lt; t1.stu.age &lt;&lt; " 考试分数： " &lt;&lt; t1.stu.score &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p><h3 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p><p>传递方式有两种：</p><ul><li>值传递</li><li>地址传递</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数};//值传递void printStudent(student stu ){stu.age = 28;cout &lt;&lt; "子函数中 姓名：" &lt;&lt; stu.name &lt;&lt; " 年龄： " &lt;&lt; stu.age  &lt;&lt; " 分数：" &lt;&lt; stu.score &lt;&lt; endl;}//地址传递void printStudent2(student *stu){stu-&gt;age = 28;cout &lt;&lt; "子函数中 姓名：" &lt;&lt; stu-&gt;name &lt;&lt; " 年龄： " &lt;&lt; stu-&gt;age  &lt;&lt; " 分数：" &lt;&lt; stu-&gt;score &lt;&lt; endl;}int main() {student stu = { "张三",18,100};//值传递printStudent(stu);cout &lt;&lt; "主函数中 姓名：" &lt;&lt; stu.name &lt;&lt; " 年龄： " &lt;&lt; stu.age &lt;&lt; " 分数：" &lt;&lt; stu.score &lt;&lt; endl;cout &lt;&lt; endl;//地址传递printStudent2(&amp;stu);cout &lt;&lt; "主函数中 姓名：" &lt;&lt; stu.name &lt;&lt; " 年龄： " &lt;&lt; stu.age  &lt;&lt; " 分数：" &lt;&lt; stu.score &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p></blockquote><h3 id="8-7-结构体中-const使用场景"><a href="#8-7-结构体中-const使用场景" class="headerlink" title="8.7 结构体中 const使用场景"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数};//const使用场景void printStudent(const student *stu) //加const防止函数体中的误操作{//stu-&gt;age = 100; //操作失败，因为加了const修饰cout &lt;&lt; "姓名：" &lt;&lt; stu-&gt;name &lt;&lt; " 年龄：" &lt;&lt; stu-&gt;age &lt;&lt; " 分数：" &lt;&lt; stu-&gt;score &lt;&lt; endl;}int main() {student stu = { "张三",18,100 };printStudent(&amp;stu);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h3><h4 id="8-8-1-案例1"><a href="#8-8-1-案例1" class="headerlink" title="8.8.1 案例1"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p><p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p><p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p><p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p><p>最终打印出老师数据以及老师所带的学生数据。</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct Student{string name;int score;};struct Teacher{string name;Student sArray[5];};void allocateSpace(Teacher tArray[] , int len){string tName = "教师";string sName = "学生";string nameSeed = "ABCDE";for (int i = 0; i &lt; len; i++){tArray[i].name = tName + nameSeed[i];for (int j = 0; j &lt; 5; j++){tArray[i].sArray[j].name = sName + nameSeed[j];tArray[i].sArray[j].score = rand() % 61 + 40;}}}void printTeachers(Teacher tArray[], int len){for (int i = 0; i &lt; len; i++){cout &lt;&lt; tArray[i].name &lt;&lt; endl;for (int j = 0; j &lt; 5; j++){cout &lt;&lt; "\t姓名：" &lt;&lt; tArray[i].sArray[j].name &lt;&lt; " 分数：" &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;}}}int main() {srand((unsigned int)time(NULL)); //随机数种子 头文件 #include &lt;ctime&gt;Teacher tArray[3]; //老师数组int len = sizeof(tArray) / sizeof(Teacher);allocateSpace(tArray, len); //创建数据printTeachers(tArray, len); //打印数据system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-2-案例2"><a href="#8-8-2-案例2" class="headerlink" title="8.8.2 案例2"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p><p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><p>五名英雄信息如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">{"刘备",23,"男"},{"关羽",22,"男"},{"张飞",20,"男"},{"赵云",21,"男"},{"貂蝉",19,"女"},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//英雄结构体struct hero{string name;int age;string sex;};//冒泡排序void bubbleSort(hero arr[] , int len){for (int i = 0; i &lt; len - 1; i++){for (int j = 0; j &lt; len - 1 - i; j++){if (arr[j].age &gt; arr[j + 1].age){hero temp = arr[j];arr[j] = arr[j + 1];arr[j + 1] = temp;}}}}//打印数组void printHeros(hero arr[], int len){for (int i = 0; i &lt; len; i++){cout &lt;&lt; "姓名： " &lt;&lt; arr[i].name &lt;&lt; " 性别： " &lt;&lt; arr[i].sex &lt;&lt; " 年龄： " &lt;&lt; arr[i].age &lt;&lt; endl;}}int main() {struct hero arr[5] ={{"刘备",23,"男"},{"关羽",22,"男"},{"张飞",20,"男"},{"赵云",21,"男"},{"貂蝉",19,"女"},};int len = sizeof(arr) / sizeof(hero); //获取数组元素个数bubbleSort(arr, len); //排序printHeros(arr, len); //打印system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 结构体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-指针</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/7-zhi-zhen/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/7-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h3 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p><ul><li><p>内存编号是从0开始记录的，一般用十六进制数字表示</p></li><li><p>可以利用指针变量保存地址</p></li></ul><h3 id="7-2-指针变量的定义和使用"><a href="#7-2-指针变量的定义和使用" class="headerlink" title="7.2 指针变量的定义和使用"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//1、指针的定义int a = 10; //定义整型变量a//指针定义语法： 数据类型 * 变量名 ;int * p;//指针变量赋值p = &amp;a; //指针指向变量a的地址cout &lt;&lt; &amp;a &lt;&lt; endl; //打印数据a的地址cout &lt;&lt; p &lt;&lt; endl;  //打印指针变量p//2、指针的使用//通过*操作指针变量指向的内存cout &lt;&lt; "*p = " &lt;&lt; *p &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指针变量和普通变量的区别</p><ul><li>普通变量存放的是数据,指针变量存放的是地址</li><li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li></ul><blockquote><p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p></blockquote><blockquote><p>总结2：利用指针可以记录地址</p></blockquote><blockquote><p>总结3：对指针变量解引用，可以操作指针指向的内存</p></blockquote><h3 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int a = 10;int * p;p = &amp;a; //指针指向数据a的地址cout &lt;&lt; *p &lt;&lt; endl; //* 解引用cout &lt;&lt; sizeof(p) &lt;&lt; endl;cout &lt;&lt; sizeof(char *) &lt;&lt; endl;cout &lt;&lt; sizeof(float *) &lt;&lt; endl;cout &lt;&lt; sizeof(double *) &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：所有指针类型在32位操作系统下是4个字节</p></blockquote><h3 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p><p><strong>用途：</strong>初始化指针变量</p><p><strong>注意：</strong>空指针指向的内存是不可以访问的</p><p><strong>示例1：空指针</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//指针变量p指向内存地址编号为0的空间int * p = NULL;//访问空指针报错 //内存编号0 ~255为系统占用内存，不允许用户访问cout &lt;&lt; *p &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>野指针</strong>：指针变量指向非法的内存空间</p><p><strong>示例2：野指针</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//指针变量p指向内存地址编号为0x1100的空间int * p = (int *)0x1100;//访问野指针报错 cout &lt;&lt; *p &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p></blockquote><h3 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p><ol><li>const修饰指针   — 常量指针</li><li>const修饰常量   — 指针常量</li><li>const即修饰指针，又修饰常量</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() {int a = 10;int b = 10;//const修饰的是指针，指针指向可以改，指针指向的值不可以更改const int * p1 = &amp;a; p1 = &amp;b; //正确//*p1 = 100;  报错//const修饰的是常量，指针指向不可以改，指针指向的值可以更改int * const p2 = &amp;a;//p2 = &amp;b; //错误*p2 = 100; //正确    //const既修饰指针又修饰常量const int * const p3 = &amp;a;//p3 = &amp;b; //错误//*p3 = 100; //错误system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p></blockquote><h3 id="7-6-指针和数组"><a href="#7-6-指针和数组" class="headerlink" title="7.6 指针和数组"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int arr[] = { 1,2,3,4,5,6,7,8,9,10 };int * p = arr;  //指向数组的指针cout &lt;&lt; "第一个元素： " &lt;&lt; arr[0] &lt;&lt; endl;cout &lt;&lt; "指针访问第一个元素： " &lt;&lt; *p &lt;&lt; endl;for (int i = 0; i &lt; 10; i++){//利用指针遍历数组cout &lt;&lt; *p &lt;&lt; endl;p++;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-7-指针和函数"><a href="#7-7-指针和函数" class="headerlink" title="7.7 指针和函数"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//值传递void swap1(int a ,int b){int temp = a;a = b; b = temp;}//地址传递void swap2(int * p1, int *p2){int temp = *p1;*p1 = *p2;*p2 = temp;}int main() {int a = 10;int b = 20;swap1(a, b); // 值传递不会改变实参swap2(&amp;a, &amp;b); //地址传递会改变实参cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p></blockquote><h3 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p><p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//冒泡排序函数void bubbleSort(int * arr, int len)  //int * arr 也可以写为int arr[]{for (int i = 0; i &lt; len - 1; i++){for (int j = 0; j &lt; len - 1 - i; j++){if (arr[j] &gt; arr[j + 1]){int temp = arr[j];arr[j] = arr[j + 1];arr[j + 1] = temp;}}}}//打印数组函数void printArray(int arr[], int len){for (int i = 0; i &lt; len; i++){cout &lt;&lt; arr[i] &lt;&lt; endl;}}int main() {int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };int len = sizeof(arr) / sizeof(int);bubbleSort(arr, len);printArray(arr, len);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-函数</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/6-han-shu/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/6-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p><p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p><h3 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p><p>1、返回值类型 </p><p>2、函数名</p><p>3、参数表列</p><p>4、函数体语句 </p><p>5、return 表达式</p><p><strong>语法：</strong> </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">返回值类型 函数名 （参数列表）{       函数体语句       return表达式}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li><li>函数名：给函数起个名称</li><li>参数列表：使用该函数时，传入的数据</li><li>函数体语句：花括号内的代码，函数内需要执行的语句</li><li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li></ul><p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数定义int add(int num1, int num2){int sum = num1 + num2;return sum;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p><p><strong>语法：</strong><code> 函数名（参数）</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数定义int add(int num1, int num2) //定义中的num1,num2称为形式参数，简称形参{int sum = num1 + num2;return sum;}int main() {int a = 10;int b = 10;//调用add函数int sum = add(a, b);//调用时的a，b称为实际参数，简称实参cout &lt;&lt; "sum = " &lt;&lt; sum &lt;&lt; endl;a = 100;b = 100;sum = add(a, b);cout &lt;&lt; "sum = " &lt;&lt; sum &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p></blockquote><h3 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h3><ul><li>所谓值传递，就是函数调用时实参将数值传入给形参</li><li>值传递时，==如果形参发生，并不会影响实参==</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void swap(int num1, int num2){cout &lt;&lt; "交换前：" &lt;&lt; endl;cout &lt;&lt; "num1 = " &lt;&lt; num1 &lt;&lt; endl;cout &lt;&lt; "num2 = " &lt;&lt; num2 &lt;&lt; endl;int temp = num1;num1 = num2;num2 = temp;cout &lt;&lt; "交换后：" &lt;&lt; endl;cout &lt;&lt; "num1 = " &lt;&lt; num1 &lt;&lt; endl;cout &lt;&lt; "num2 = " &lt;&lt; num2 &lt;&lt; endl;//return ; 当函数声明时候，不需要返回值，可以不写return}int main() {int a = 10;int b = 20;swap(a, b);cout &lt;&lt; "mian中的 a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "mian中的 b = " &lt;&lt; b &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 值传递时，形参是修饰不了实参的</p></blockquote><h3 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p><ol><li>无参无返</li><li>有参无返</li><li>无参有返</li><li>有参有返</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数常见样式//1、 无参无返void test01(){//void a = 10; //无类型不可以创建变量,原因无法分配内存cout &lt;&lt; "this is test01" &lt;&lt; endl;//test01(); 函数调用}//2、 有参无返void test02(int a){cout &lt;&lt; "this is test02" &lt;&lt; endl;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;}//3、无参有返int test03(){cout &lt;&lt; "this is test03 " &lt;&lt; endl;return 10;}//4、有参有返int test04(int a, int b){cout &lt;&lt; "this is test04 " &lt;&lt; endl;int sum = a + b;return sum;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><ul><li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//声明可以多次，定义只能一次//声明int max(int a, int b);int max(int a, int b);//定义int max(int a, int b){return a &gt; b ? a : b;}int main() {int a = 100;int b = 200;cout &lt;&lt; max(a, b) &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p><p>函数分文件编写一般有4个步骤</p><ol><li>创建后缀名为.h的头文件  </li><li>创建后缀名为.cpp的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//swap.h文件#include&lt;iostream&gt;using namespace std;//实现两个数字交换的函数声明void swap(int a, int b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//swap.cpp文件#include "swap.h"void swap(int a, int b){int temp = a;a = b;b = temp;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//main函数文件#include "swap.h"int main() {int a = 100;int b = 200;swap(a, b);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-数组</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/5-shu-zu/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/5-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p><p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p><p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p><p><img src="/2023/03/03/c-ji-chu-ru-men/5-shu-zu/1541748375356.png" alt="1541748375356"></p><h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p><ol><li><code>数据类型  数组名[ 数组长度 ];</code></li><li><code>数据类型  数组名[ 数组长度 ] = { 值1，值2 ...};</code></li><li><code>数据类型  数组名[ ] = { 值1，值2 ...};</code></li></ol><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//定义方式1//数据类型 数组名[元素个数];int score[10];//利用下标赋值score[0] = 100;score[1] = 99;score[2] = 85;//利用下标输出cout &lt;&lt; score[0] &lt;&lt; endl;cout &lt;&lt; score[1] &lt;&lt; endl;cout &lt;&lt; score[2] &lt;&lt; endl;//第二种定义方式//数据类型 数组名[元素个数] =  {值1，值2 ，值3 ...};//如果{}内不足10个数据，剩余数据用0补全int score2[10] = { 100, 90,80,70,60,50,40,30,20,10 };//逐个输出//cout &lt;&lt; score2[0] &lt;&lt; endl;//cout &lt;&lt; score2[1] &lt;&lt; endl;//一个一个输出太麻烦，因此可以利用循环进行输出for (int i = 0; i &lt; 10; i++){cout &lt;&lt; score2[i] &lt;&lt; endl;}//定义方式3//数据类型 数组名[] =  {值1，值2 ，值3 ...};int score3[] = { 100,90,80,70,60,50,40,30,20,10 };for (int i = 0; i &lt; 10; i++){cout &lt;&lt; score3[i] &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p></blockquote><blockquote><p>总结2：数组中下标是从0开始索引</p></blockquote><h4 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p><ol><li>可以统计整个数组在内存中的长度</li><li>可以获取数组在内存中的首地址</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//数组名用途//1、可以获取整个数组占用内存空间大小int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };cout &lt;&lt; "整个数组所占内存空间为： " &lt;&lt; sizeof(arr) &lt;&lt; endl;cout &lt;&lt; "每个元素所占内存空间为： " &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;cout &lt;&lt; "数组的元素个数为： " &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;//2、可以通过数组名获取到数组首地址cout &lt;&lt; "数组首地址为： " &lt;&lt; (int)arr &lt;&lt; endl;cout &lt;&lt; "数组中第一个元素地址为： " &lt;&lt; (int)&amp;arr[0] &lt;&lt; endl;cout &lt;&lt; "数组中第二个元素地址为： " &lt;&lt; (int)&amp;arr[1] &lt;&lt; endl;//arr = 100; 错误，数组名是常量，因此不可以赋值system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：数组名是常量，不可以赋值</p></blockquote><blockquote><p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p></blockquote><blockquote><p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p></blockquote><p><strong>练习案例1</strong>：五只小猪称体重</p><p><strong>案例描述：</strong></p><p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p><p>找出并打印最重的小猪体重。</p><p><strong>练习案例2：</strong>数组元素逆置</p><p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p><p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p><h4 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li><li>重复以上的步骤，每次比较次数-1，直到不需要比较</li></ol><p><img src="/2023/03/03/c-ji-chu-ru-men/5-shu-zu/1541905327273.png" alt="1541905327273"></p><p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int arr[9] = { 4,2,8,0,5,7,1,3,9 };for (int i = 0; i &lt; 9 - 1; i++){for (int j = 0; j &lt; 9 - 1 - i; j++){if (arr[j] &gt; arr[j + 1]){int temp = arr[j];arr[j] = arr[j + 1];arr[j + 1] = temp;}}}for (int i = 0; i &lt; 9; i++){cout &lt;&lt; arr[i] &lt;&lt; endl;}    system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p><p><img src="/2023/03/03/c-ji-chu-ru-men/5-shu-zu/1541905559138.png" alt="1541905559138"></p><h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p><ol><li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li><li><code> 数据类型  数组名[  ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li></ol><blockquote><p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p></blockquote><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//方式1  //数组类型 数组名 [行数][列数]int arr[2][3];arr[0][0] = 1;arr[0][1] = 2;arr[0][2] = 3;arr[1][0] = 4;arr[1][1] = 5;arr[1][2] = 6;for (int i = 0; i &lt; 2; i++){for (int j = 0; j &lt; 3; j++){cout &lt;&lt; arr[i][j] &lt;&lt; " ";}cout &lt;&lt; endl;}//方式2 //数据类型 数组名[行数][列数] = { {数据1，数据2 } ，{数据3，数据4 } };int arr2[2][3] ={{1,2,3},{4,5,6}};//方式3//数据类型 数组名[行数][列数] = { 数据1，数据2 ,数据3，数据4  };int arr3[2][3] = { 1,2,3,4,5,6 }; //方式4 //数据类型 数组名[][列数] = { 数据1，数据2 ,数据3，数据4  };int arr4[][3] = { 1,2,3,4,5,6 };system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p></blockquote><h4 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="5.3.2 二维数组数组名"></a>5.3.2 二维数组数组名</h4><ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//二维数组数组名int arr[2][3] ={{1,2,3},{4,5,6}};cout &lt;&lt; "二维数组大小： " &lt;&lt; sizeof(arr) &lt;&lt; endl;cout &lt;&lt; "二维数组一行大小： " &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;cout &lt;&lt; "二维数组元素大小： " &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl;cout &lt;&lt; "二维数组行数： " &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;cout &lt;&lt; "二维数组列数： " &lt;&lt; sizeof(arr[0]) / sizeof(arr[0][0]) &lt;&lt; endl;//地址cout &lt;&lt; "二维数组首地址：" &lt;&lt; arr &lt;&lt; endl;cout &lt;&lt; "二维数组第一行地址：" &lt;&lt; arr[0] &lt;&lt; endl;cout &lt;&lt; "二维数组第二行地址：" &lt;&lt; arr[1] &lt;&lt; endl;cout &lt;&lt; "二维数组第一个元素地址：" &lt;&lt; &amp;arr[0][0] &lt;&lt; endl;cout &lt;&lt; "二维数组第二个元素地址：" &lt;&lt; &amp;arr[0][1] &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：二维数组名就是这个数组的首地址</p></blockquote><blockquote><p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p></blockquote><h4 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p><p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p><table><thead><tr><th></th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr><td>张三</td><td>100</td><td>100</td><td>100</td></tr><tr><td>李四</td><td>90</td><td>50</td><td>100</td></tr><tr><td>王五</td><td>60</td><td>70</td><td>80</td></tr></tbody></table><p><strong>参考答案：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int scores[3][3] ={{100,100,100},{90,50,100},{60,70,80},};string names[3] = { "张三","李四","王五" };for (int i = 0; i &lt; 3; i++){int sum = 0;for (int j = 0; j &lt; 3; j++){sum += scores[i][j];}cout &lt;&lt; names[i] &lt;&lt; "同学总成绩为： " &lt;&lt; sum &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-程序流程结构</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/</url>
      
        <content type="html"><![CDATA[<p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p><ul><li>顺序结构：程序按顺序执行，不发生跳转</li><li>选择结构：依据条件是否满足，有选择的执行相应功能</li><li>循环结构：依据条件是否满足，循环多次执行某段代码</li></ul><h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p><p>if语句的三种形式</p><ul><li><p>单行格式if语句</p></li><li><p>多行格式if语句</p></li><li><p>多条件的if语句</p></li></ul><ol><li><p>单行格式if语句：<code>if(条件){ 条件满足执行的语句 }</code></p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/clip_image002.png" alt="img"></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//选择结构-单行if语句//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印int score = 0;cout &lt;&lt; "请输入一个分数：" &lt;&lt; endl;cin &gt;&gt; score;cout &lt;&lt; "您输入的分数为： " &lt;&lt; score &lt;&lt; endl;//if语句//注意事项，在if判断语句后面，不要加分号if (score &gt; 600){cout &lt;&lt; "我考上了一本大学！！！" &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>注意：if条件表达式后不要加分号</p></blockquote><ol start="2"><li>多行格式if语句：<code>if(条件){ 条件满足执行的语句 }else{ 条件不满足执行的语句 };</code></li></ol><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/clip_image002-1541662519170.png" alt="img"></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int score = 0;cout &lt;&lt; "请输入考试分数：" &lt;&lt; endl;cin &gt;&gt; score;if (score &gt; 600){cout &lt;&lt; "我考上了一本大学" &lt;&lt; endl;}else{cout &lt;&lt; "我未考上一本大学" &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>多条件的if语句：<code>if(条件1){ 条件1满足执行的语句 }else if(条件2){条件2满足执行的语句}... else{ 都不满足执行的语句}</code></li></ol><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/clip_image002-1541662566808.png" alt="img"></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int score = 0;cout &lt;&lt; "请输入考试分数：" &lt;&lt; endl;cin &gt;&gt; score;if (score &gt; 600){cout &lt;&lt; "我考上了一本大学" &lt;&lt; endl;}else if (score &gt; 500){cout &lt;&lt; "我考上了二本大学" &lt;&lt; endl;}else if (score &gt; 400){cout &lt;&lt; "我考上了三本大学" &lt;&lt; endl;}else{cout &lt;&lt; "我未考上本科" &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p><p>案例需求：</p><ul><li>提示用户输入一个高考考试分数，根据分数做如下判断</li><li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li><li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() {int score = 0;cout &lt;&lt; "请输入考试分数：" &lt;&lt; endl;cin &gt;&gt; score;if (score &gt; 600){cout &lt;&lt; "我考上了一本大学" &lt;&lt; endl;if (score &gt; 700){cout &lt;&lt; "我考上了北大" &lt;&lt; endl;}else if (score &gt; 650){cout &lt;&lt; "我考上了清华" &lt;&lt; endl;}else{cout &lt;&lt; "我考上了人大" &lt;&lt; endl;}}else if (score &gt; 500){cout &lt;&lt; "我考上了二本大学" &lt;&lt; endl;}else if (score &gt; 400){cout &lt;&lt; "我考上了三本大学" &lt;&lt; endl;}else{cout &lt;&lt; "我未考上本科" &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例：</strong> 三只小猪称体重</p><p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/%E4%B8%89%E5%8F%AA%E5%B0%8F%E7%8C%AA.jpg" alt="三只小猪"></p><h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p><p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p><p><strong>解释：</strong></p><p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p><p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int a = 10;int b = 20;int c = 0;c = a &gt; b ? a : b;cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;//C++中三目运算符返回的是变量,可以继续赋值(a &gt; b ? a : b) = 100;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p></blockquote><h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p><p><strong>语法：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">switch(表达式){case 结果1：执行语句;break;case 结果2：执行语句;break;...default:执行语句;break;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//请给电影评分 //10 ~ 9   经典   // 8 ~ 7   非常好// 6 ~ 5   一般// 5分以下 烂片int score = 0;cout &lt;&lt; "请给电影打分" &lt;&lt; endl;cin &gt;&gt; score;switch (score){case 10:case 9:cout &lt;&lt; "经典" &lt;&lt; endl;break;case 8:cout &lt;&lt; "非常好" &lt;&lt; endl;break;case 7:case 6:cout &lt;&lt; "一般" &lt;&lt; endl;break;default:cout &lt;&lt; "烂片" &lt;&lt; endl;break;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意1：switch语句中表达式类型只能是整型或者字符型</p></blockquote><blockquote><p>注意2：case里如果没有break，那么程序会一直向下执行</p></blockquote><blockquote><p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p></blockquote><h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> while(循环条件){ 循环语句 }</code></p><p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/clip_image002-1541668640382.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int num = 0;while (num &lt; 10){cout &lt;&lt; "num = " &lt;&lt; num &lt;&lt; endl;num++;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p></blockquote><p><strong>while循环练习案例：</strong>==猜数字==</p><p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/%E7%8C%9C%E6%95%B0%E5%AD%97.jpg" alt="猜数字"></p><h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong> <code>do{ 循环语句 } while(循环条件);</code></p><p><strong>注意：</strong>与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/clip_image002-1541671163478.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int num = 0;do{cout &lt;&lt; num &lt;&lt; endl;num++;} while (num &lt; 10);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p></blockquote><p><strong>练习案例：水仙花数</strong></p><p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p><p>例如：1^3 + 5^3+ 3^3 = 153</p><p>请利用do…while语句，求出所有3位数中的水仙花数</p><h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> for(起始表达式;条件表达式;末尾循环体) { 循环语句; }</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {for (int i = 0; i &lt; 10; i++){cout &lt;&lt; i &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>详解：</strong></p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/1541673704101.png" alt="1541673704101"></p><blockquote><p>注意：for循环中的表达式，要用分号进行分隔</p></blockquote><blockquote><p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p></blockquote><p><strong>练习案例：敲桌子</strong></p><p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/timg.gif" alt="timg"></p><h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p><p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/1541676003486.png" alt="1541676003486"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//外层循环执行1次，内层循环执行1轮for (int i = 0; i &lt; 10; i++){for (int j = 0; j &lt; 10; j++){cout &lt;&lt; "*" &lt;&lt; " ";}cout &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例：</strong>乘法口诀表</p><p>案例描述：利用嵌套循环，实现九九乘法表</p><p><img src="/2023/03/03/c-ji-chu-ru-men/4-cheng-xu-liu-cheng-jie-gou/0006018857256120_b.jpg" alt="0006018857256120_b"></p><h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p><p>break使用的时机：</p><ul><li>出现在switch条件语句中，作用是终止case并跳出switch</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li>出现在嵌套循环中，跳出最近的内层循环语句</li></ul><p><strong>示例1：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//1、在switch 语句中使用breakcout &lt;&lt; "请选择您挑战副本的难度：" &lt;&lt; endl;cout &lt;&lt; "1、普通" &lt;&lt; endl;cout &lt;&lt; "2、中等" &lt;&lt; endl;cout &lt;&lt; "3、困难" &lt;&lt; endl;int num = 0;cin &gt;&gt; num;switch (num){case 1:cout &lt;&lt; "您选择的是普通难度" &lt;&lt; endl;break;case 2:cout &lt;&lt; "您选择的是中等难度" &lt;&lt; endl;break;case 3:cout &lt;&lt; "您选择的是困难难度" &lt;&lt; endl;break;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//2、在循环语句中用breakfor (int i = 0; i &lt; 10; i++){if (i == 5){break; //跳出循环语句}cout &lt;&lt; i &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例3：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//在嵌套循环语句中使用break，退出内层循环for (int i = 0; i &lt; 10; i++){for (int j = 0; j &lt; 10; j++){if (j == 5){break;}cout &lt;&lt; "*" &lt;&lt; " ";}cout &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {for (int i = 0; i &lt; 100; i++){if (i % 2 == 0){continue;}cout &lt;&lt; i &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：continue并没有使整个循环终止，而break会跳出循环</p></blockquote><h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p><p><strong>语法：</strong> <code>goto 标记;</code></p><p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {cout &lt;&lt; "1" &lt;&lt; endl;goto FLAG;cout &lt;&lt; "2" &lt;&lt; endl;cout &lt;&lt; "3" &lt;&lt; endl;cout &lt;&lt; "4" &lt;&lt; endl;FLAG:cout &lt;&lt; "5" &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 程序流程结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-运算符</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/3-yun-suan-fu/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/3-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<p><strong>作用：</strong>用于执行代码的运算</p><p>本章我们主要讲解以下几类运算符：</p><table><thead><tr><th><strong>运算符类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table><h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p><p>算术运算符包括以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10 * 5</td><td>50</td></tr><tr><td>/</td><td>除</td><td>10 / 5</td><td>2</td></tr><tr><td>%</td><td>取模(取余)</td><td>10 % 3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a=2; b=++a;</td><td>a=3; b=3;</td></tr><tr><td>++</td><td>后置递增</td><td>a=2; b=a++;</td><td>a=3; b=2;</td></tr><tr><td>–</td><td>前置递减</td><td>a=2; b=–a;</td><td>a=1; b=1;</td></tr><tr><td>–</td><td>后置递减</td><td>a=2; b=a–;</td><td>a=1; b=2;</td></tr></tbody></table><p><strong>示例1：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//加减乘除int main() {int a1 = 10;int b1 = 3;cout &lt;&lt; a1 + b1 &lt;&lt; endl;cout &lt;&lt; a1 - b1 &lt;&lt; endl;cout &lt;&lt; a1 * b1 &lt;&lt; endl;cout &lt;&lt; a1 / b1 &lt;&lt; endl;  //两个整数相除结果依然是整数int a2 = 10;int b2 = 20;cout &lt;&lt; a2 / b2 &lt;&lt; endl; int a3 = 10;int b3 = 0;//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0//两个小数可以相除double d1 = 0.5;double d2 = 0.25;cout &lt;&lt; d1 / d2 &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：在除法运算中，除数不能为0</p></blockquote><p><strong>示例2：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//取模int main() {int a1 = 10;int b1 = 3;cout &lt;&lt; 10 % 3 &lt;&lt; endl;int a2 = 10;int b2 = 20;cout &lt;&lt; a2 % b2 &lt;&lt; endl;int a3 = 10;int b3 = 0;//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0//两个小数不可以取模double d1 = 3.14;double d2 = 1.1;//cout &lt;&lt; d1 % d2 &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：只有整型变量可以进行取模运算</p></blockquote><p><strong>示例3：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//递增int main() {//后置递增int a = 10;a++; //等价于a = a + 1cout &lt;&lt; a &lt;&lt; endl; // 11//前置递增int b = 10;++b;cout &lt;&lt; b &lt;&lt; endl; // 11//区别//前置递增先对变量进行++，再计算表达式int a2 = 10;int b2 = ++a2 * 10;cout &lt;&lt; b2 &lt;&lt; endl;//后置递增先计算表达式，后对变量进行++int a3 = 10;int b3 = a3++ * 10;cout &lt;&lt; b3 &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p></blockquote><h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p><p>赋值运算符包括以下几个符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=2; b=3;</td><td>a=2; b=3;</td></tr><tr><td>+=</td><td>加等于</td><td>a=0; a+=2;</td><td>a=2;</td></tr><tr><td>-=</td><td>减等于</td><td>a=5; a-=3;</td><td>a=2;</td></tr><tr><td>*=</td><td>乘等于</td><td>a=2; a*=2;</td><td>a=4;</td></tr><tr><td>/=</td><td>除等于</td><td>a=4; a/=2;</td><td>a=2;</td></tr><tr><td>%=</td><td>模等于</td><td>a=3; a%2;</td><td>a=1;</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//赋值运算符// =int a = 10;a = 100;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;// +=a = 10;a += 2; // a = a + 2;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;// -=a = 10;a -= 2; // a = a - 2cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;// *=a = 10;a *= 2; // a = a * 2cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;// /=a = 10;a /= 2;  // a = a / 2;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;// %=a = 10;a %= 2;  // a = a % 2;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p><p>比较运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4 == 3</td><td>0</td></tr><tr><td>!=</td><td>不等于</td><td>4 != 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4 &lt;= 3</td><td>0</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4 &gt;= 1</td><td>1</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int a = 10;int b = 20;cout &lt;&lt; (a == b) &lt;&lt; endl; // 0 cout &lt;&lt; (a != b) &lt;&lt; endl; // 1cout &lt;&lt; (a &gt; b) &lt;&lt; endl; // 0cout &lt;&lt; (a &lt; b) &lt;&lt; endl; // 1cout &lt;&lt; (a &gt;= b) &lt;&lt; endl; // 0cout &lt;&lt; (a &lt;= b) &lt;&lt; endl; // 1system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== </p></blockquote><h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p><p>逻辑运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真；  如果a为真，则!a为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>如果a和b都为真，则结果为真，否则为假。</td></tr><tr><td>||</td><td>或</td><td>a || b</td><td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td></tr></tbody></table><p><strong>示例1：</strong>逻辑非</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//逻辑运算符  --- 非int main() {int a = 10;cout &lt;&lt; !a &lt;&lt; endl; // 0cout &lt;&lt; !!a &lt;&lt; endl; // 1system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 真变假，假变真</p></blockquote><p><strong>示例2：</strong>逻辑与</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//逻辑运算符  --- 与int main() {int a = 10;int b = 10;cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 1a = 10;b = 0;cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0 a = 0;b = 0;cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p></blockquote><p><strong>示例3：</strong>逻辑或</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//逻辑运算符  --- 或int main() {int a = 10;int b = 10;cout &lt;&lt; (a || b) &lt;&lt; endl;// 1a = 10;b = 0;cout &lt;&lt; (a || b) &lt;&lt; endl;// 1 a = 0;b = 0;cout &lt;&lt; (a || b) &lt;&lt; endl;// 0system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>逻辑==或==运算符总结： ==同假为假，其余为真==</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-数据类型</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/2-shu-ju-lei-xing/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/2-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long(长长整形)</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p><p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {cout &lt;&lt; "short 类型所占内存空间为： " &lt;&lt; sizeof(short) &lt;&lt; endl;cout &lt;&lt; "int 类型所占内存空间为： " &lt;&lt; sizeof(int) &lt;&lt; endl;cout &lt;&lt; "long 类型所占内存空间为： " &lt;&lt; sizeof(long) &lt;&lt; endl;cout &lt;&lt; "long long 类型所占内存空间为： " &lt;&lt; sizeof(long long) &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p></blockquote><h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p><p>浮点型变量分为两种：</p><ol><li>单精度float </li><li>双精度double</li></ol><p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15～16位有效数字</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {float f1 = 3.14f;double d1 = 3.14;cout &lt;&lt; f1 &lt;&lt; endl;cout &lt;&lt; d1&lt;&lt; endl;cout &lt;&lt; "float  sizeof = " &lt;&lt; sizeof(f1) &lt;&lt; endl;cout &lt;&lt; "double sizeof = " &lt;&lt; sizeof(d1) &lt;&lt; endl;//科学计数法float f2 = 3e2; // 3 * 10 ^ 2 cout &lt;&lt; "f2 = " &lt;&lt; f2 &lt;&lt; endl;float f3 = 3e-2;  // 3 * 0.1 ^ 2cout &lt;&lt; "f3 = " &lt;&lt; f3 &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong><code>char ch = 'a';</code></p><blockquote><p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p></blockquote><blockquote><p>注意2：单引号内只能有一个字符，不可以是字符串</p></blockquote><ul><li>C和C++中字符型变量只占用==1个字节==。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {char ch = 'a';cout &lt;&lt; ch &lt;&lt; endl;cout &lt;&lt; sizeof(char) &lt;&lt; endl;//ch = "abcde"; //错误，不可以用双引号//ch = 'abcde'; //错误，单引号内只能引用一个字符cout &lt;&lt; (int)ch &lt;&lt; endl;  //查看字符a对应的ASCII码ch = 97; //可以直接用ASCII给字符型变量赋值cout &lt;&lt; ch &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ASCII码表格：</p><table><thead><tr><th><strong>ASCII</strong>值</th><th><strong>控制字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>“</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>/</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>`</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><p>ASCII 码大致由以下<strong>两部分组</strong>成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li><li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li></ul><h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p><p>现阶段我们常用的转义字符有：<code> \n  \\  \t</code></p><table><thead><tr><th><strong>转义字符</strong></th><th><strong>含义</strong></th><th><strong>ASCII</strong>码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td><strong>\n</strong></td><td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td><td><strong>010</strong></td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td><strong>\t</strong></td><td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td><td><strong>009</strong></td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td><strong>\\</strong></td><td><strong>代表一个反斜线字符”"</strong></td><td><strong>092</strong></td></tr><tr><td>'</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>"</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>8进制转义字符，d范围0~7</td><td>3位8进制</td></tr><tr><td>\xhh</td><td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td><td>3位16进制</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {cout &lt;&lt; "\\" &lt;&lt; endl;cout &lt;&lt; "\tHello" &lt;&lt; endl;cout &lt;&lt; "\n" &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p><p><strong>两种风格</strong></p><ol><li><p><strong>C风格字符串</strong>： <code>char 变量名[] = "字符串值"</code></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {char str1[] = "hello world";cout &lt;&lt; str1 &lt;&lt; endl;    system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>注意：C风格的字符串要用双引号括起来</p></blockquote><ol><li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = "字符串值"</code></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {string str = "hello world";cout &lt;&lt; str &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p></blockquote><h3 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p><p>bool类型只有两个值：</p><ul><li>true  — 真（本质是1）</li><li>false — 假（本质是0）</li></ul><p><strong>bool类型占==1个字节==大小</strong></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {bool flag = true;cout &lt;&lt; flag &lt;&lt; endl; // 1flag = false;cout &lt;&lt; flag &lt;&lt; endl; // 0cout &lt;&lt; "size of bool = " &lt;&lt; sizeof(bool) &lt;&lt; endl; //1system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p><p><strong>关键字：</strong>cin</p><p><strong>语法：</strong> <code>cin &gt;&gt; 变量 </code></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main(){//整型输入int a = 0;cout &lt;&lt; "请输入整型变量：" &lt;&lt; endl;cin &gt;&gt; a;cout &lt;&lt; a &lt;&lt; endl;//浮点型输入double d = 0;cout &lt;&lt; "请输入浮点型变量：" &lt;&lt; endl;cin &gt;&gt; d;cout &lt;&lt; d &lt;&lt; endl;//字符型输入char ch = 0;cout &lt;&lt; "请输入字符型变量：" &lt;&lt; endl;cin &gt;&gt; ch;cout &lt;&lt; ch &lt;&lt; endl;//字符串型输入string str;cout &lt;&lt; "请输入字符串型变量：" &lt;&lt; endl;cin &gt;&gt; str;cout &lt;&lt; str &lt;&lt; endl;//布尔类型输入bool flag = true;cout &lt;&lt; "请输入布尔型变量：" &lt;&lt; endl;cin &gt;&gt; flag;cout &lt;&lt; flag &lt;&lt; endl;system("pause");return EXIT_SUCCESS;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++ 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-C++初识</title>
      <link href="/2023/03/03/c-ji-chu-ru-men/1-c-chu-shi/"/>
      <url>/2023/03/03/c-ji-chu-ru-men/1-c-chu-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1 第一个C++程序"></a>1.1 第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p><ul><li>创建项目</li><li>创建文件</li><li>编写代码</li><li>运行程序</li></ul><h4 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h4><p>​Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p><p><img src="/2023/03/03/c-ji-chu-ru-men/1-c-chu-shi/1541383178746.png" alt="1541383178746"></p><p><img src="/2023/03/03/c-ji-chu-ru-men/1-c-chu-shi/1541384366413.png" alt="1541384366413"></p><h4 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p><p><img src="/2023/03/03/c-ji-chu-ru-men/1-c-chu-shi/1541383817248.png" alt="1541383817248"></p><p>给C++文件起个名称，然后点击添加即可。</p><p><img src="/2023/03/03/c-ji-chu-ru-men/1-c-chu-shi/1541384140042.png" alt="1541384140042"></p><h4 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;int main() {cout &lt;&lt; "Hello world" &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-4-运行程序"><a href="#1-1-4-运行程序" class="headerlink" title="1.1.4 运行程序"></a>1.1.4 运行程序</h4><p><img src="/2023/03/03/c-ji-chu-ru-men/1-c-chu-shi/1541384818688.png" alt="1541384818688"></p><h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p><p><strong>两种格式</strong></p><ol><li><strong>单行注释</strong>：<code>// 描述信息</code> <ul><li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li></ul></li><li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul><li>通常放在一段代码的上方，==对该段代码做整体说明==</li></ul></li></ol><blockquote><p>提示：编译器在编译代码时，会忽略注释的内容</p></blockquote><h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p><p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main() {//变量的定义//语法：数据类型  变量名 = 初始值int a = 10;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p></blockquote><h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p><p>C++定义常量两种方式</p><ol><li><p><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code></p><ul><li>==通常在文件上方定义==，表示一个常量</li></ul></li><li><p><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code></p><ul><li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li></ul></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//1、宏常量#define day 7int main() {cout &lt;&lt; "一周里总共有 " &lt;&lt; day &lt;&lt; " 天" &lt;&lt; endl;//day = 8;  //报错，宏常量不可以修改//2、const修饰变量const int month = 12;cout &lt;&lt; "一年里总共有 " &lt;&lt; month &lt;&lt; " 个月份" &lt;&lt; endl;//month = 24; //报错，常量是不可以修改的system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量时候，不要用关键字</strong></li></ul><p>C++关键字如下：</p><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p><h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++基础入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 第一个C++程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程环境搭建教程</title>
      <link href="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/"/>
      <url>/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<p>环境搭建步骤：</p><ul><li>下载软件</li><li>安装软件</li><li>运行软件</li></ul><h2 id="1-下载软件"><a href="#1-下载软件" class="headerlink" title="1 下载软件"></a>1 下载软件</h2><p>在百度搜索 visual studio，选择 如下图中的选项</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546837497293.png" alt="1546837497293"></p><p>进入Visual Studio 官网后，选择 下载Windows版，并选择Community 2017 社区版本进行下载</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546837598475.png" alt="1546837598475"></p><p>保存软件到电脑中</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546837638221.png" alt="1546837638221"></p><h2 id="2-安装软件"><a href="#2-安装软件" class="headerlink" title="2 安装软件"></a>2 安装软件</h2><p>双击运行下载的安装文件，弹出安装界面</p><p>选择 <strong>使用C++的桌面开发</strong> 这一选项，如需其他，自行勾选。</p><p>点击安装按钮</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546837796703.png" alt="1546837796703"></p><p>开始安装</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546837957327.png" alt="1546837957327"></p><p>安装时间会依据网速、电脑设备等因素会不固定，因此可以在此期间刷个微博、抖音啥的。。。</p><p>安装成功后提示重启，点击重启完成剩余配置</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546838612922.png" alt="1546838612922"></p><h2 id="3-运行软件"><a href="#3-运行软件" class="headerlink" title="3 运行软件"></a>3 运行软件</h2><p>在开始菜单找到Visual Studio 2017 并且点击运行</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546838825077.png" alt="1546838825077"></p><p>弹出初始界面</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546838771730.png" alt="1546838771730"></p><p>点击 <strong>创建新项目</strong> 按钮 ，如果出现以下模板选项，证明安装成功，并可以创建C++项目！</p><p><img src="/2023/03/03/c-kai-fa-huan-jing-da-jian/c-kai-fa-huan-jing-da-jian/1546838970191.png" alt="1546838970191"></p><p>至此，C++的开发环境搭建完毕！</p>]]></content>
      
      
      <categories>
          
          <category> C++编程环境搭建教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
